/*
 * mruby binding: Cocos2d
 * Generated automatically by gen_mrb_bridge.rb on 2013-09-11 12:17:18 +0900.
 */

#include <assert.h>
#include <string>
#include <map>
#include "mruby.h"
#include "mruby/array.h"
#include "mruby/class.h"
#include "mruby/data.h"
#include "mruby/gc.h"
#include "mruby/hash.h"
#include "mruby/string.h"
#include "mruby/value.h"
#include "mruby/variable.h"

#include "mruby_helper.h"
#include "CCMRubyCallbackWrapper.h"

#include "cocos2d.h"
#include "cocos2d_bridge.h"
#include "cocos-ext.h"
#include "network/WebSocket.h"
#include "CCMRubyWebSocketDelegate.h"
#include "CCMRubyTableViewDataSource.h"
#include "CCMRubyTableViewDelegate.h"
#include "CCMRubyEditBoxDelegate.h"
#include "CCArmature/CCArmature.h"
#include "CCArmature/utils/CCArmatureDataManager.h"
#include "extension_bridge.h"
USING_NS_CC_EXT;


#define DONE mrb_gc_arena_restore(mrb, 0)

typedef cocos2d::CCImage::EImageFormat EImageFormat;
typedef cocos2d::CCImage::ETextAlign ETextAlign;
typedef cocos2d::extension::CCHttpRequest::HttpRequestType HttpRequestType;
typedef bool _Bool;
typedef char __va_list_tag;

using namespace cocos2d;

template<typename T>
static inline T _cast_as_func(void *vp)
{
    T func;
    *(reinterpret_cast< void ** >(&func)) = vp;
    return func;
}

static struct RClass *_define_class_cocos2d_extension(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_Animation(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_AnimationStateData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_Atlas(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_AtlasAttachmentLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_AtlasPage(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_AtlasRegion(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_Attachment(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_AttachmentLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_BaseTimeline(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_BlockCCControlData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_BlockData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_Bone(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_BoneData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCAnimationData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCArmature(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCArmatureAnimation(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCArmatureData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCArmatureDataManager(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCArmatureDisplayData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCArrayForObjectSorting(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBAnimationManager(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBAnimationManagerDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBEaseInstant(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBFile(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBFileLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBKeyframe(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBMemberVariableAssigner(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBReader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBRotateTo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBRotateXTo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBRotateYTo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBScriptOwnerProtocol(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBSelectorResolver(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBSequence(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBSequenceProperty(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBSetSpriteFrame(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBSoundEffect(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBValue(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBaseData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBatchNode(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBone(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCBoneData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCColliderDetector(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCColor3bObject(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCComAttribute(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCComAudio(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCComController(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCContourData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCContourVertex2(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCControl(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCControlButton(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCControlButtonLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCControlColourPicker(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCControlHuePicker(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCControlLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCControlPotentiometer(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCControlSaturationBrightnessPicker(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCControlSlider(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCControlStepper(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCControlSwitch(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCControlUtils(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCDecorativeDisplay(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCDisplayData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCDisplayFactory(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCDisplayManager(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCEditBox(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCEditBoxDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCFrameData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCHttpClient(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCHttpRequest(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCHttpRequest__prxy(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCHttpResponse(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCInputDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCInvocation(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCLabelBMFontLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCLabelTTFLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCLayerColorLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCLayerGradientLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCLayerLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCMenuItemImageLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCMenuItemLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCMenuLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCMovementBoneData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCMovementData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCNodeLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCNodeLoaderLibrary(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCNodeLoaderListener(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCParticleDisplayData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCParticleSystemQuadLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCProcessBase(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCScale9Sprite(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCScale9SpriteLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCScrollView(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCScrollViewDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCScrollViewLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCShaderDisplayData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCSkeleton(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCSkeletonAnimation(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCSpriteDisplayData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCSpriteLoader(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCTableView(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCTableViewCell(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCTableViewDataSource(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCTableViewDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCTextureData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCTween(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCTweenFunction(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_ColliderBody(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CurveTimeline(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_HSV(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_RGBA(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_RegionAttachment(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_Skeleton(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_SkeletonData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_SkeletonJson(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_Skin(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_Slot(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_SlotData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_Timeline(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_WebSocket(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_WebSocket_Data(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_WebSocket_Delegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_CCMRubyWebSocketDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension__AnimationState(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension__AttachmentTimeline(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension__ColorTimeline(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_extension_ccColor3BWapper(mrb_state *mrb);

static struct RClass *
_define_class_cocos2d_extension(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "Extension");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension");
  return rc;
}

static void
mrb_free_cocos2d_extension_Animation(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::Animation * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_Animation = {
  "Cocos2d::extension::Animation",
  mrb_free_cocos2d_extension_Animation
};

static void
mrb_no_free_cocos2d_extension_Animation(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_Animation = {
  "Cocos2d::extension::Animation",
  mrb_no_free_cocos2d_extension_Animation
};

static struct RClass *
_define_class_cocos2d_extension_Animation(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::Animation") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::Animation");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "Animation", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::Animation");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::Animation, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_AnimationStateData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::AnimationStateData * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_AnimationStateData = {
  "Cocos2d::extension::AnimationStateData",
  mrb_free_cocos2d_extension_AnimationStateData
};

static void
mrb_no_free_cocos2d_extension_AnimationStateData(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_AnimationStateData = {
  "Cocos2d::extension::AnimationStateData",
  mrb_no_free_cocos2d_extension_AnimationStateData
};

static struct RClass *
_define_class_cocos2d_extension_AnimationStateData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::AnimationStateData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::AnimationStateData");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "AnimationStateData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::AnimationStateData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::AnimationStateData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_Atlas(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::Atlas * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_Atlas = {
  "Cocos2d::extension::Atlas",
  mrb_free_cocos2d_extension_Atlas
};

static void
mrb_no_free_cocos2d_extension_Atlas(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_Atlas = {
  "Cocos2d::extension::Atlas",
  mrb_no_free_cocos2d_extension_Atlas
};

static struct RClass *
_define_class_cocos2d_extension_Atlas(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::Atlas") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::Atlas");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "Atlas", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::Atlas");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::Atlas, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_AtlasAttachmentLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::AtlasAttachmentLoader * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_AtlasAttachmentLoader = {
  "Cocos2d::extension::AtlasAttachmentLoader",
  mrb_free_cocos2d_extension_AtlasAttachmentLoader
};

static void
mrb_no_free_cocos2d_extension_AtlasAttachmentLoader(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_AtlasAttachmentLoader = {
  "Cocos2d::extension::AtlasAttachmentLoader",
  mrb_no_free_cocos2d_extension_AtlasAttachmentLoader
};

static struct RClass *
_define_class_cocos2d_extension_AtlasAttachmentLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::AtlasAttachmentLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::AtlasAttachmentLoader");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "AtlasAttachmentLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::AtlasAttachmentLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::AtlasAttachmentLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_AtlasPage(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::AtlasPage * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_AtlasPage = {
  "Cocos2d::extension::AtlasPage",
  mrb_free_cocos2d_extension_AtlasPage
};

static void
mrb_no_free_cocos2d_extension_AtlasPage(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_AtlasPage = {
  "Cocos2d::extension::AtlasPage",
  mrb_no_free_cocos2d_extension_AtlasPage
};

static struct RClass *
_define_class_cocos2d_extension_AtlasPage(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::AtlasPage") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::AtlasPage");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "AtlasPage", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::AtlasPage");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::AtlasPage, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_AtlasRegion(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::AtlasRegion * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_AtlasRegion = {
  "Cocos2d::extension::AtlasRegion",
  mrb_free_cocos2d_extension_AtlasRegion
};

static void
mrb_no_free_cocos2d_extension_AtlasRegion(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_AtlasRegion = {
  "Cocos2d::extension::AtlasRegion",
  mrb_no_free_cocos2d_extension_AtlasRegion
};

static struct RClass *
_define_class_cocos2d_extension_AtlasRegion(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::AtlasRegion") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::AtlasRegion");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "AtlasRegion", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::AtlasRegion");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::AtlasRegion, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_Attachment(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::Attachment * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_Attachment = {
  "Cocos2d::extension::Attachment",
  mrb_free_cocos2d_extension_Attachment
};

static void
mrb_no_free_cocos2d_extension_Attachment(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_Attachment = {
  "Cocos2d::extension::Attachment",
  mrb_no_free_cocos2d_extension_Attachment
};

static struct RClass *
_define_class_cocos2d_extension_Attachment(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::Attachment") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::Attachment");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "Attachment", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::Attachment");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::Attachment, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_AttachmentLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::AttachmentLoader * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_AttachmentLoader = {
  "Cocos2d::extension::AttachmentLoader",
  mrb_free_cocos2d_extension_AttachmentLoader
};

static void
mrb_no_free_cocos2d_extension_AttachmentLoader(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_AttachmentLoader = {
  "Cocos2d::extension::AttachmentLoader",
  mrb_no_free_cocos2d_extension_AttachmentLoader
};

static struct RClass *
_define_class_cocos2d_extension_AttachmentLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::AttachmentLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::AttachmentLoader");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "AttachmentLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::AttachmentLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::AttachmentLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_BaseTimeline(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::BaseTimeline * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_BaseTimeline = {
  "Cocos2d::extension::BaseTimeline",
  mrb_free_cocos2d_extension_BaseTimeline
};

static void
mrb_no_free_cocos2d_extension_BaseTimeline(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_BaseTimeline = {
  "Cocos2d::extension::BaseTimeline",
  mrb_no_free_cocos2d_extension_BaseTimeline
};

static struct RClass *
_define_class_cocos2d_extension_BaseTimeline(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::BaseTimeline") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::BaseTimeline");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "BaseTimeline", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::BaseTimeline");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::BaseTimeline, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_BlockCCControlData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::BlockCCControlData * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_BlockCCControlData = {
  "Cocos2d::extension::BlockCCControlData",
  mrb_free_cocos2d_extension_BlockCCControlData
};

static void
mrb_no_free_cocos2d_extension_BlockCCControlData(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_BlockCCControlData = {
  "Cocos2d::extension::BlockCCControlData",
  mrb_no_free_cocos2d_extension_BlockCCControlData
};

static struct RClass *
_define_class_cocos2d_extension_BlockCCControlData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::BlockCCControlData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::BlockCCControlData");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "BlockCCControlData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::BlockCCControlData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::BlockCCControlData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_BlockData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::BlockData * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_BlockData = {
  "Cocos2d::extension::BlockData",
  mrb_free_cocos2d_extension_BlockData
};

static void
mrb_no_free_cocos2d_extension_BlockData(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_BlockData = {
  "Cocos2d::extension::BlockData",
  mrb_no_free_cocos2d_extension_BlockData
};

static struct RClass *
_define_class_cocos2d_extension_BlockData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::BlockData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::BlockData");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "BlockData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::BlockData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::BlockData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_Bone(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::Bone * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_Bone = {
  "Cocos2d::extension::Bone",
  mrb_free_cocos2d_extension_Bone
};

static void
mrb_no_free_cocos2d_extension_Bone(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_Bone = {
  "Cocos2d::extension::Bone",
  mrb_no_free_cocos2d_extension_Bone
};

static struct RClass *
_define_class_cocos2d_extension_Bone(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::Bone") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::Bone");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "Bone", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::Bone");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::Bone, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_BoneData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::BoneData * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_BoneData = {
  "Cocos2d::extension::BoneData",
  mrb_free_cocos2d_extension_BoneData
};

static void
mrb_no_free_cocos2d_extension_BoneData(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_BoneData = {
  "Cocos2d::extension::BoneData",
  mrb_no_free_cocos2d_extension_BoneData
};

static struct RClass *
_define_class_cocos2d_extension_BoneData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::BoneData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::BoneData");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "BoneData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::BoneData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::BoneData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCAnimationData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCAnimationData *obj = static_cast< cocos2d::extension::CCAnimationData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCAnimationData = {
  "Cocos2d::extension::CCAnimationData",
  mrb_free_cocos2d_extension_CCAnimationData
};

static void
mrb_no_free_cocos2d_extension_CCAnimationData(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCAnimationData *obj = static_cast< cocos2d::extension::CCAnimationData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCAnimationData = {
  "Cocos2d::extension::CCAnimationData",
  mrb_no_free_cocos2d_extension_CCAnimationData
};

static struct RClass *
_define_class_cocos2d_extension_CCAnimationData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCAnimationData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCAnimationData");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCAnimationData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCAnimationData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCAnimationData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCArmature(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCArmature *obj = static_cast< cocos2d::extension::CCArmature * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCArmature = {
  "Cocos2d::extension::CCArmature",
  mrb_free_cocos2d_extension_CCArmature
};

static void
mrb_no_free_cocos2d_extension_CCArmature(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCArmature *obj = static_cast< cocos2d::extension::CCArmature * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCArmature = {
  "Cocos2d::extension::CCArmature",
  mrb_no_free_cocos2d_extension_CCArmature
};

static struct RClass *
_define_class_cocos2d_extension_CCArmature(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCArmature") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCArmature");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCArmature", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCBlendProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCArmature");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCArmature, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCArmatureAnimation(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCArmatureAnimation *obj = static_cast< cocos2d::extension::CCArmatureAnimation * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCArmatureAnimation = {
  "Cocos2d::extension::CCArmatureAnimation",
  mrb_free_cocos2d_extension_CCArmatureAnimation
};

static void
mrb_no_free_cocos2d_extension_CCArmatureAnimation(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCArmatureAnimation *obj = static_cast< cocos2d::extension::CCArmatureAnimation * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCArmatureAnimation = {
  "Cocos2d::extension::CCArmatureAnimation",
  mrb_no_free_cocos2d_extension_CCArmatureAnimation
};

static struct RClass *
_define_class_cocos2d_extension_CCArmatureAnimation(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCArmatureAnimation") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCArmatureAnimation");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCProcessBase") == 0) {
    _define_class_cocos2d_extension_CCProcessBase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCProcessBase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCArmatureAnimation", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCArmatureAnimation");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCArmatureAnimation, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCArmatureData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCArmatureData *obj = static_cast< cocos2d::extension::CCArmatureData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCArmatureData = {
  "Cocos2d::extension::CCArmatureData",
  mrb_free_cocos2d_extension_CCArmatureData
};

static void
mrb_no_free_cocos2d_extension_CCArmatureData(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCArmatureData *obj = static_cast< cocos2d::extension::CCArmatureData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCArmatureData = {
  "Cocos2d::extension::CCArmatureData",
  mrb_no_free_cocos2d_extension_CCArmatureData
};

static struct RClass *
_define_class_cocos2d_extension_CCArmatureData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCArmatureData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCArmatureData");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCArmatureData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCArmatureData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCArmatureData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCArmatureDataManager(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCArmatureDataManager *obj = static_cast< cocos2d::extension::CCArmatureDataManager * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCArmatureDataManager = {
  "Cocos2d::extension::CCArmatureDataManager",
  mrb_free_cocos2d_extension_CCArmatureDataManager
};

static void
mrb_no_free_cocos2d_extension_CCArmatureDataManager(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCArmatureDataManager *obj = static_cast< cocos2d::extension::CCArmatureDataManager * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCArmatureDataManager = {
  "Cocos2d::extension::CCArmatureDataManager",
  mrb_no_free_cocos2d_extension_CCArmatureDataManager
};

static struct RClass *
_define_class_cocos2d_extension_CCArmatureDataManager(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCArmatureDataManager") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCArmatureDataManager");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCArmatureDataManager", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCArmatureDataManager");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCArmatureDataManager, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCArmatureDisplayData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCArmatureDisplayData *obj = static_cast< cocos2d::extension::CCArmatureDisplayData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCArmatureDisplayData = {
  "Cocos2d::extension::CCArmatureDisplayData",
  mrb_free_cocos2d_extension_CCArmatureDisplayData
};

static void
mrb_no_free_cocos2d_extension_CCArmatureDisplayData(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCArmatureDisplayData *obj = static_cast< cocos2d::extension::CCArmatureDisplayData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCArmatureDisplayData = {
  "Cocos2d::extension::CCArmatureDisplayData",
  mrb_no_free_cocos2d_extension_CCArmatureDisplayData
};

static struct RClass *
_define_class_cocos2d_extension_CCArmatureDisplayData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCArmatureDisplayData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCArmatureDisplayData");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCDisplayData") == 0) {
    _define_class_cocos2d_extension_CCDisplayData(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDisplayData");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCArmatureDisplayData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCArmatureDisplayData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCArmatureDisplayData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCArrayForObjectSorting(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCArrayForObjectSorting *obj = static_cast< cocos2d::extension::CCArrayForObjectSorting * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCArrayForObjectSorting = {
  "Cocos2d::extension::CCArrayForObjectSorting",
  mrb_free_cocos2d_extension_CCArrayForObjectSorting
};

static void
mrb_no_free_cocos2d_extension_CCArrayForObjectSorting(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCArrayForObjectSorting *obj = static_cast< cocos2d::extension::CCArrayForObjectSorting * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCArrayForObjectSorting = {
  "Cocos2d::extension::CCArrayForObjectSorting",
  mrb_no_free_cocos2d_extension_CCArrayForObjectSorting
};

static struct RClass *
_define_class_cocos2d_extension_CCArrayForObjectSorting(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCArrayForObjectSorting") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCArrayForObjectSorting");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCArray");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCArrayForObjectSorting", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCArrayForObjectSorting");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCArrayForObjectSorting, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBAnimationManager(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBAnimationManager *obj = static_cast< cocos2d::extension::CCBAnimationManager * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBAnimationManager = {
  "Cocos2d::extension::CCBAnimationManager",
  mrb_free_cocos2d_extension_CCBAnimationManager
};

static void
mrb_no_free_cocos2d_extension_CCBAnimationManager(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBAnimationManager *obj = static_cast< cocos2d::extension::CCBAnimationManager * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBAnimationManager = {
  "Cocos2d::extension::CCBAnimationManager",
  mrb_no_free_cocos2d_extension_CCBAnimationManager
};

static struct RClass *
_define_class_cocos2d_extension_CCBAnimationManager(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBAnimationManager") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBAnimationManager");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBAnimationManager", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBAnimationManager");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBAnimationManager, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBAnimationManagerDelegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBAnimationManagerDelegate = {
  "Cocos2d::extension::CCBAnimationManagerDelegate",
  mrb_free_cocos2d_extension_CCBAnimationManagerDelegate
};

static struct RClass *
_define_class_cocos2d_extension_CCBAnimationManagerDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBAnimationManagerDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBAnimationManagerDelegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCBAnimationManagerDelegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBAnimationManagerDelegate");
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBEaseInstant(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBEaseInstant *obj = static_cast< cocos2d::extension::CCBEaseInstant * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBEaseInstant = {
  "Cocos2d::extension::CCBEaseInstant",
  mrb_free_cocos2d_extension_CCBEaseInstant
};

static void
mrb_no_free_cocos2d_extension_CCBEaseInstant(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBEaseInstant *obj = static_cast< cocos2d::extension::CCBEaseInstant * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBEaseInstant = {
  "Cocos2d::extension::CCBEaseInstant",
  mrb_no_free_cocos2d_extension_CCBEaseInstant
};

static struct RClass *
_define_class_cocos2d_extension_CCBEaseInstant(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBEaseInstant") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBEaseInstant");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBEaseInstant", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBEaseInstant");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBEaseInstant, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBFile(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBFile *obj = static_cast< cocos2d::extension::CCBFile * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBFile = {
  "Cocos2d::extension::CCBFile",
  mrb_free_cocos2d_extension_CCBFile
};

static void
mrb_no_free_cocos2d_extension_CCBFile(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBFile *obj = static_cast< cocos2d::extension::CCBFile * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBFile = {
  "Cocos2d::extension::CCBFile",
  mrb_no_free_cocos2d_extension_CCBFile
};

static struct RClass *
_define_class_cocos2d_extension_CCBFile(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBFile") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBFile");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBFile", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBFile");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBFile, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBFileLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBFileLoader *obj = static_cast< cocos2d::extension::CCBFileLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBFileLoader = {
  "Cocos2d::extension::CCBFileLoader",
  mrb_free_cocos2d_extension_CCBFileLoader
};

static void
mrb_no_free_cocos2d_extension_CCBFileLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBFileLoader *obj = static_cast< cocos2d::extension::CCBFileLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBFileLoader = {
  "Cocos2d::extension::CCBFileLoader",
  mrb_no_free_cocos2d_extension_CCBFileLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCBFileLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBFileLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBFileLoader");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBFileLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBFileLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBFileLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBKeyframe(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBKeyframe *obj = static_cast< cocos2d::extension::CCBKeyframe * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBKeyframe = {
  "Cocos2d::extension::CCBKeyframe",
  mrb_free_cocos2d_extension_CCBKeyframe
};

static void
mrb_no_free_cocos2d_extension_CCBKeyframe(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBKeyframe *obj = static_cast< cocos2d::extension::CCBKeyframe * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBKeyframe = {
  "Cocos2d::extension::CCBKeyframe",
  mrb_no_free_cocos2d_extension_CCBKeyframe
};

static struct RClass *
_define_class_cocos2d_extension_CCBKeyframe(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBKeyframe") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBKeyframe");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBKeyframe", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBKeyframe");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBKeyframe, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBMemberVariableAssigner(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::CCBMemberVariableAssigner * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBMemberVariableAssigner = {
  "Cocos2d::extension::CCBMemberVariableAssigner",
  mrb_free_cocos2d_extension_CCBMemberVariableAssigner
};

static void
mrb_no_free_cocos2d_extension_CCBMemberVariableAssigner(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBMemberVariableAssigner = {
  "Cocos2d::extension::CCBMemberVariableAssigner",
  mrb_no_free_cocos2d_extension_CCBMemberVariableAssigner
};

static struct RClass *
_define_class_cocos2d_extension_CCBMemberVariableAssigner(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBMemberVariableAssigner") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBMemberVariableAssigner");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBMemberVariableAssigner", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBMemberVariableAssigner");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBMemberVariableAssigner, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBReader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBReader *obj = static_cast< cocos2d::extension::CCBReader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBReader = {
  "Cocos2d::extension::CCBReader",
  mrb_free_cocos2d_extension_CCBReader
};

static void
mrb_no_free_cocos2d_extension_CCBReader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBReader *obj = static_cast< cocos2d::extension::CCBReader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBReader = {
  "Cocos2d::extension::CCBReader",
  mrb_no_free_cocos2d_extension_CCBReader
};

static struct RClass *
_define_class_cocos2d_extension_CCBReader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBReader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBReader");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBReader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBReader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBReader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBRotateTo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBRotateTo *obj = static_cast< cocos2d::extension::CCBRotateTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBRotateTo = {
  "Cocos2d::extension::CCBRotateTo",
  mrb_free_cocos2d_extension_CCBRotateTo
};

static void
mrb_no_free_cocos2d_extension_CCBRotateTo(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBRotateTo *obj = static_cast< cocos2d::extension::CCBRotateTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBRotateTo = {
  "Cocos2d::extension::CCBRotateTo",
  mrb_no_free_cocos2d_extension_CCBRotateTo
};

static struct RClass *
_define_class_cocos2d_extension_CCBRotateTo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBRotateTo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBRotateTo");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBRotateTo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBRotateTo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBRotateTo, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBRotateXTo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBRotateXTo *obj = static_cast< cocos2d::extension::CCBRotateXTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBRotateXTo = {
  "Cocos2d::extension::CCBRotateXTo",
  mrb_free_cocos2d_extension_CCBRotateXTo
};

static void
mrb_no_free_cocos2d_extension_CCBRotateXTo(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBRotateXTo *obj = static_cast< cocos2d::extension::CCBRotateXTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBRotateXTo = {
  "Cocos2d::extension::CCBRotateXTo",
  mrb_no_free_cocos2d_extension_CCBRotateXTo
};

static struct RClass *
_define_class_cocos2d_extension_CCBRotateXTo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBRotateXTo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBRotateXTo");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBRotateXTo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBRotateXTo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBRotateXTo, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBRotateYTo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBRotateYTo *obj = static_cast< cocos2d::extension::CCBRotateYTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBRotateYTo = {
  "Cocos2d::extension::CCBRotateYTo",
  mrb_free_cocos2d_extension_CCBRotateYTo
};

static void
mrb_no_free_cocos2d_extension_CCBRotateYTo(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBRotateYTo *obj = static_cast< cocos2d::extension::CCBRotateYTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBRotateYTo = {
  "Cocos2d::extension::CCBRotateYTo",
  mrb_no_free_cocos2d_extension_CCBRotateYTo
};

static struct RClass *
_define_class_cocos2d_extension_CCBRotateYTo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBRotateYTo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBRotateYTo");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBRotateYTo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBRotateYTo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBRotateYTo, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBScriptOwnerProtocol(mrb_state *mrb, void *ptr)
{
  //delete static_cast< cocos2d::extension::CCBScriptOwnerProtocol * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBScriptOwnerProtocol = {
  "Cocos2d::extension::CCBScriptOwnerProtocol",
  mrb_free_cocos2d_extension_CCBScriptOwnerProtocol
};

static struct RClass *
_define_class_cocos2d_extension_CCBScriptOwnerProtocol(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBScriptOwnerProtocol") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBScriptOwnerProtocol");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCBScriptOwnerProtocol");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBScriptOwnerProtocol");
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBSelectorResolver(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::CCBSelectorResolver * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBSelectorResolver = {
  "Cocos2d::extension::CCBSelectorResolver",
  mrb_free_cocos2d_extension_CCBSelectorResolver
};

static void
mrb_no_free_cocos2d_extension_CCBSelectorResolver(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBSelectorResolver = {
  "Cocos2d::extension::CCBSelectorResolver",
  mrb_no_free_cocos2d_extension_CCBSelectorResolver
};

static struct RClass *
_define_class_cocos2d_extension_CCBSelectorResolver(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBSelectorResolver") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBSelectorResolver");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBSelectorResolver", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBSelectorResolver");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBSelectorResolver, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBSequence(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBSequence *obj = static_cast< cocos2d::extension::CCBSequence * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBSequence = {
  "Cocos2d::extension::CCBSequence",
  mrb_free_cocos2d_extension_CCBSequence
};

static void
mrb_no_free_cocos2d_extension_CCBSequence(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBSequence *obj = static_cast< cocos2d::extension::CCBSequence * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBSequence = {
  "Cocos2d::extension::CCBSequence",
  mrb_no_free_cocos2d_extension_CCBSequence
};

static struct RClass *
_define_class_cocos2d_extension_CCBSequence(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBSequence") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBSequence");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBSequence", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBSequence");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBSequence, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBSequenceProperty(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBSequenceProperty *obj = static_cast< cocos2d::extension::CCBSequenceProperty * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBSequenceProperty = {
  "Cocos2d::extension::CCBSequenceProperty",
  mrb_free_cocos2d_extension_CCBSequenceProperty
};

static void
mrb_no_free_cocos2d_extension_CCBSequenceProperty(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBSequenceProperty *obj = static_cast< cocos2d::extension::CCBSequenceProperty * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBSequenceProperty = {
  "Cocos2d::extension::CCBSequenceProperty",
  mrb_no_free_cocos2d_extension_CCBSequenceProperty
};

static struct RClass *
_define_class_cocos2d_extension_CCBSequenceProperty(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBSequenceProperty") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBSequenceProperty");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBSequenceProperty", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBSequenceProperty");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBSequenceProperty, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBSetSpriteFrame(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBSetSpriteFrame *obj = static_cast< cocos2d::extension::CCBSetSpriteFrame * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBSetSpriteFrame = {
  "Cocos2d::extension::CCBSetSpriteFrame",
  mrb_free_cocos2d_extension_CCBSetSpriteFrame
};

static void
mrb_no_free_cocos2d_extension_CCBSetSpriteFrame(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBSetSpriteFrame *obj = static_cast< cocos2d::extension::CCBSetSpriteFrame * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBSetSpriteFrame = {
  "Cocos2d::extension::CCBSetSpriteFrame",
  mrb_no_free_cocos2d_extension_CCBSetSpriteFrame
};

static struct RClass *
_define_class_cocos2d_extension_CCBSetSpriteFrame(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBSetSpriteFrame") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBSetSpriteFrame");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBSetSpriteFrame", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBSetSpriteFrame");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBSetSpriteFrame, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBSoundEffect(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBSoundEffect *obj = static_cast< cocos2d::extension::CCBSoundEffect * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBSoundEffect = {
  "Cocos2d::extension::CCBSoundEffect",
  mrb_free_cocos2d_extension_CCBSoundEffect
};

static void
mrb_no_free_cocos2d_extension_CCBSoundEffect(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBSoundEffect *obj = static_cast< cocos2d::extension::CCBSoundEffect * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBSoundEffect = {
  "Cocos2d::extension::CCBSoundEffect",
  mrb_no_free_cocos2d_extension_CCBSoundEffect
};

static struct RClass *
_define_class_cocos2d_extension_CCBSoundEffect(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBSoundEffect") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBSoundEffect");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBSoundEffect", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBSoundEffect");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBSoundEffect, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBValue(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBValue *obj = static_cast< cocos2d::extension::CCBValue * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBValue = {
  "Cocos2d::extension::CCBValue",
  mrb_free_cocos2d_extension_CCBValue
};

static void
mrb_no_free_cocos2d_extension_CCBValue(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBValue *obj = static_cast< cocos2d::extension::CCBValue * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBValue = {
  "Cocos2d::extension::CCBValue",
  mrb_no_free_cocos2d_extension_CCBValue
};

static struct RClass *
_define_class_cocos2d_extension_CCBValue(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBValue") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBValue");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBValue", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBValue");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBValue, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBaseData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBaseData *obj = static_cast< cocos2d::extension::CCBaseData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBaseData = {
  "Cocos2d::extension::CCBaseData",
  mrb_free_cocos2d_extension_CCBaseData
};

static void
mrb_no_free_cocos2d_extension_CCBaseData(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBaseData *obj = static_cast< cocos2d::extension::CCBaseData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBaseData = {
  "Cocos2d::extension::CCBaseData",
  mrb_no_free_cocos2d_extension_CCBaseData
};

static struct RClass *
_define_class_cocos2d_extension_CCBaseData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBaseData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBaseData");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBaseData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBaseData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBaseData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBatchNode(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBatchNode *obj = static_cast< cocos2d::extension::CCBatchNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBatchNode = {
  "Cocos2d::extension::CCBatchNode",
  mrb_free_cocos2d_extension_CCBatchNode
};

static void
mrb_no_free_cocos2d_extension_CCBatchNode(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBatchNode *obj = static_cast< cocos2d::extension::CCBatchNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBatchNode = {
  "Cocos2d::extension::CCBatchNode",
  mrb_no_free_cocos2d_extension_CCBatchNode
};

static struct RClass *
_define_class_cocos2d_extension_CCBatchNode(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBatchNode") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBatchNode");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBatchNode", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBatchNode");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBatchNode, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBone(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBone *obj = static_cast< cocos2d::extension::CCBone * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBone = {
  "Cocos2d::extension::CCBone",
  mrb_free_cocos2d_extension_CCBone
};

static void
mrb_no_free_cocos2d_extension_CCBone(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBone *obj = static_cast< cocos2d::extension::CCBone * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBone = {
  "Cocos2d::extension::CCBone",
  mrb_no_free_cocos2d_extension_CCBone
};

static struct RClass *
_define_class_cocos2d_extension_CCBone(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBone") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBone");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBone", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBone");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBone, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCBoneData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCBoneData *obj = static_cast< cocos2d::extension::CCBoneData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCBoneData = {
  "Cocos2d::extension::CCBoneData",
  mrb_free_cocos2d_extension_CCBoneData
};

static void
mrb_no_free_cocos2d_extension_CCBoneData(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCBoneData *obj = static_cast< cocos2d::extension::CCBoneData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCBoneData = {
  "Cocos2d::extension::CCBoneData",
  mrb_no_free_cocos2d_extension_CCBoneData
};

static struct RClass *
_define_class_cocos2d_extension_CCBoneData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBoneData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBoneData");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBaseData") == 0) {
    _define_class_cocos2d_extension_CCBaseData(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBaseData");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBoneData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCBoneData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCBoneData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCColliderDetector(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCColliderDetector *obj = static_cast< cocos2d::extension::CCColliderDetector * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCColliderDetector = {
  "Cocos2d::extension::CCColliderDetector",
  mrb_free_cocos2d_extension_CCColliderDetector
};

static void
mrb_no_free_cocos2d_extension_CCColliderDetector(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCColliderDetector *obj = static_cast< cocos2d::extension::CCColliderDetector * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCColliderDetector = {
  "Cocos2d::extension::CCColliderDetector",
  mrb_no_free_cocos2d_extension_CCColliderDetector
};

static struct RClass *
_define_class_cocos2d_extension_CCColliderDetector(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCColliderDetector") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCColliderDetector");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCColliderDetector", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCColliderDetector");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCColliderDetector, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCColor3bObject(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCColor3bObject *obj = static_cast< cocos2d::extension::CCColor3bObject * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCColor3bObject = {
  "Cocos2d::extension::CCColor3bObject",
  mrb_free_cocos2d_extension_CCColor3bObject
};

static void
mrb_no_free_cocos2d_extension_CCColor3bObject(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCColor3bObject *obj = static_cast< cocos2d::extension::CCColor3bObject * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCColor3bObject = {
  "Cocos2d::extension::CCColor3bObject",
  mrb_no_free_cocos2d_extension_CCColor3bObject
};

static struct RClass *
_define_class_cocos2d_extension_CCColor3bObject(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCColor3bObject") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCColor3bObject");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCColor3bObject", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCColor3bObject");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCColor3bObject, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCComAttribute(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCComAttribute *obj = static_cast< cocos2d::extension::CCComAttribute * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCComAttribute = {
  "Cocos2d::extension::CCComAttribute",
  mrb_free_cocos2d_extension_CCComAttribute
};

static void
mrb_no_free_cocos2d_extension_CCComAttribute(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCComAttribute *obj = static_cast< cocos2d::extension::CCComAttribute * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCComAttribute = {
  "Cocos2d::extension::CCComAttribute",
  mrb_no_free_cocos2d_extension_CCComAttribute
};

static struct RClass *
_define_class_cocos2d_extension_CCComAttribute(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCComAttribute") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCComAttribute");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCComponent");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCComAttribute", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCComAttribute");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCComAttribute, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCComAudio(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCComAudio *obj = static_cast< cocos2d::extension::CCComAudio * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCComAudio = {
  "Cocos2d::extension::CCComAudio",
  mrb_free_cocos2d_extension_CCComAudio
};

static void
mrb_no_free_cocos2d_extension_CCComAudio(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCComAudio *obj = static_cast< cocos2d::extension::CCComAudio * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCComAudio = {
  "Cocos2d::extension::CCComAudio",
  mrb_no_free_cocos2d_extension_CCComAudio
};

static struct RClass *
_define_class_cocos2d_extension_CCComAudio(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCComAudio") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCComAudio");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCComponent");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCComAudio", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCComAudio");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCComAudio, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCComController(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCComController *obj = static_cast< cocos2d::extension::CCComController * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCComController = {
  "Cocos2d::extension::CCComController",
  mrb_free_cocos2d_extension_CCComController
};

static void
mrb_no_free_cocos2d_extension_CCComController(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCComController *obj = static_cast< cocos2d::extension::CCComController * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCComController = {
  "Cocos2d::extension::CCComController",
  mrb_no_free_cocos2d_extension_CCComController
};

static struct RClass *
_define_class_cocos2d_extension_CCComController(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCComController") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCComController");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCInputDelegate") == 0) {
    _define_class_cocos2d_extension_CCInputDelegate(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCComponent");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCComController", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCInputDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCComController");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCComController, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCContourData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCContourData *obj = static_cast< cocos2d::extension::CCContourData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCContourData = {
  "Cocos2d::extension::CCContourData",
  mrb_free_cocos2d_extension_CCContourData
};

static void
mrb_no_free_cocos2d_extension_CCContourData(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCContourData *obj = static_cast< cocos2d::extension::CCContourData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCContourData = {
  "Cocos2d::extension::CCContourData",
  mrb_no_free_cocos2d_extension_CCContourData
};

static struct RClass *
_define_class_cocos2d_extension_CCContourData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCContourData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCContourData");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCContourData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCContourData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCContourData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCContourVertex2(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCContourVertex2 *obj = static_cast< cocos2d::extension::CCContourVertex2 * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCContourVertex2 = {
  "Cocos2d::extension::CCContourVertex2",
  mrb_free_cocos2d_extension_CCContourVertex2
};

static void
mrb_no_free_cocos2d_extension_CCContourVertex2(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCContourVertex2 *obj = static_cast< cocos2d::extension::CCContourVertex2 * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCContourVertex2 = {
  "Cocos2d::extension::CCContourVertex2",
  mrb_no_free_cocos2d_extension_CCContourVertex2
};

static struct RClass *
_define_class_cocos2d_extension_CCContourVertex2(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCContourVertex2") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCContourVertex2");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCContourVertex2", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCContourVertex2");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCContourVertex2, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCControl(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCControl *obj = static_cast< cocos2d::extension::CCControl * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCControl = {
  "Cocos2d::extension::CCControl",
  mrb_free_cocos2d_extension_CCControl
};

static void
mrb_no_free_cocos2d_extension_CCControl(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCControl *obj = static_cast< cocos2d::extension::CCControl * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCControl = {
  "Cocos2d::extension::CCControl",
  mrb_no_free_cocos2d_extension_CCControl
};

static struct RClass *
_define_class_cocos2d_extension_CCControl(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayerRGBA");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCControl", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCControl");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCControl, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCControlButton(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCControlButton *obj = static_cast< cocos2d::extension::CCControlButton * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCControlButton = {
  "Cocos2d::extension::CCControlButton",
  mrb_free_cocos2d_extension_CCControlButton
};

static void
mrb_no_free_cocos2d_extension_CCControlButton(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCControlButton *obj = static_cast< cocos2d::extension::CCControlButton * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCControlButton = {
  "Cocos2d::extension::CCControlButton",
  mrb_no_free_cocos2d_extension_CCControlButton
};

static struct RClass *
_define_class_cocos2d_extension_CCControlButton(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControlButton") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlButton");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCControlButton", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCControlButton");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCControlButton, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCControlButtonLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCControlButtonLoader *obj = static_cast< cocos2d::extension::CCControlButtonLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCControlButtonLoader = {
  "Cocos2d::extension::CCControlButtonLoader",
  mrb_free_cocos2d_extension_CCControlButtonLoader
};

static void
mrb_no_free_cocos2d_extension_CCControlButtonLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCControlButtonLoader *obj = static_cast< cocos2d::extension::CCControlButtonLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCControlButtonLoader = {
  "Cocos2d::extension::CCControlButtonLoader",
  mrb_no_free_cocos2d_extension_CCControlButtonLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCControlButtonLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControlButtonLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlButtonLoader");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControlLoader") == 0) {
    _define_class_cocos2d_extension_CCControlLoader(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlLoader");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCControlButtonLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCControlButtonLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCControlButtonLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCControlColourPicker(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCControlColourPicker *obj = static_cast< cocos2d::extension::CCControlColourPicker * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCControlColourPicker = {
  "Cocos2d::extension::CCControlColourPicker",
  mrb_free_cocos2d_extension_CCControlColourPicker
};

static void
mrb_no_free_cocos2d_extension_CCControlColourPicker(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCControlColourPicker *obj = static_cast< cocos2d::extension::CCControlColourPicker * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCControlColourPicker = {
  "Cocos2d::extension::CCControlColourPicker",
  mrb_no_free_cocos2d_extension_CCControlColourPicker
};

static struct RClass *
_define_class_cocos2d_extension_CCControlColourPicker(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControlColourPicker") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlColourPicker");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCControlColourPicker", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCControlColourPicker");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCControlColourPicker, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCControlHuePicker(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCControlHuePicker *obj = static_cast< cocos2d::extension::CCControlHuePicker * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCControlHuePicker = {
  "Cocos2d::extension::CCControlHuePicker",
  mrb_free_cocos2d_extension_CCControlHuePicker
};

static void
mrb_no_free_cocos2d_extension_CCControlHuePicker(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCControlHuePicker *obj = static_cast< cocos2d::extension::CCControlHuePicker * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCControlHuePicker = {
  "Cocos2d::extension::CCControlHuePicker",
  mrb_no_free_cocos2d_extension_CCControlHuePicker
};

static struct RClass *
_define_class_cocos2d_extension_CCControlHuePicker(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControlHuePicker") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlHuePicker");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCControlHuePicker", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCControlHuePicker");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCControlHuePicker, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCControlLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCControlLoader *obj = static_cast< cocos2d::extension::CCControlLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCControlLoader = {
  "Cocos2d::extension::CCControlLoader",
  mrb_free_cocos2d_extension_CCControlLoader
};

static void
mrb_no_free_cocos2d_extension_CCControlLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCControlLoader *obj = static_cast< cocos2d::extension::CCControlLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCControlLoader = {
  "Cocos2d::extension::CCControlLoader",
  mrb_no_free_cocos2d_extension_CCControlLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCControlLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControlLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlLoader");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCControlLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCControlLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCControlLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCControlPotentiometer(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCControlPotentiometer *obj = static_cast< cocos2d::extension::CCControlPotentiometer * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCControlPotentiometer = {
  "Cocos2d::extension::CCControlPotentiometer",
  mrb_free_cocos2d_extension_CCControlPotentiometer
};

static void
mrb_no_free_cocos2d_extension_CCControlPotentiometer(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCControlPotentiometer *obj = static_cast< cocos2d::extension::CCControlPotentiometer * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCControlPotentiometer = {
  "Cocos2d::extension::CCControlPotentiometer",
  mrb_no_free_cocos2d_extension_CCControlPotentiometer
};

static struct RClass *
_define_class_cocos2d_extension_CCControlPotentiometer(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControlPotentiometer") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlPotentiometer");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCControlPotentiometer", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCControlPotentiometer");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCControlPotentiometer, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCControlSaturationBrightnessPicker(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCControlSaturationBrightnessPicker *obj = static_cast< cocos2d::extension::CCControlSaturationBrightnessPicker * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCControlSaturationBrightnessPicker = {
  "Cocos2d::extension::CCControlSaturationBrightnessPicker",
  mrb_free_cocos2d_extension_CCControlSaturationBrightnessPicker
};

static void
mrb_no_free_cocos2d_extension_CCControlSaturationBrightnessPicker(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCControlSaturationBrightnessPicker *obj = static_cast< cocos2d::extension::CCControlSaturationBrightnessPicker * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCControlSaturationBrightnessPicker = {
  "Cocos2d::extension::CCControlSaturationBrightnessPicker",
  mrb_no_free_cocos2d_extension_CCControlSaturationBrightnessPicker
};

static struct RClass *
_define_class_cocos2d_extension_CCControlSaturationBrightnessPicker(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControlSaturationBrightnessPicker") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlSaturationBrightnessPicker");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCControlSaturationBrightnessPicker", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCControlSaturationBrightnessPicker");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCControlSaturationBrightnessPicker, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCControlSlider(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCControlSlider *obj = static_cast< cocos2d::extension::CCControlSlider * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCControlSlider = {
  "Cocos2d::extension::CCControlSlider",
  mrb_free_cocos2d_extension_CCControlSlider
};

static void
mrb_no_free_cocos2d_extension_CCControlSlider(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCControlSlider *obj = static_cast< cocos2d::extension::CCControlSlider * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCControlSlider = {
  "Cocos2d::extension::CCControlSlider",
  mrb_no_free_cocos2d_extension_CCControlSlider
};

static struct RClass *
_define_class_cocos2d_extension_CCControlSlider(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControlSlider") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlSlider");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCControlSlider", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCControlSlider");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCControlSlider, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCControlStepper(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCControlStepper *obj = static_cast< cocos2d::extension::CCControlStepper * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCControlStepper = {
  "Cocos2d::extension::CCControlStepper",
  mrb_free_cocos2d_extension_CCControlStepper
};

static void
mrb_no_free_cocos2d_extension_CCControlStepper(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCControlStepper *obj = static_cast< cocos2d::extension::CCControlStepper * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCControlStepper = {
  "Cocos2d::extension::CCControlStepper",
  mrb_no_free_cocos2d_extension_CCControlStepper
};

static struct RClass *
_define_class_cocos2d_extension_CCControlStepper(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControlStepper") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlStepper");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCControlStepper", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCControlStepper");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCControlStepper, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCControlSwitch(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCControlSwitch *obj = static_cast< cocos2d::extension::CCControlSwitch * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCControlSwitch = {
  "Cocos2d::extension::CCControlSwitch",
  mrb_free_cocos2d_extension_CCControlSwitch
};

static void
mrb_no_free_cocos2d_extension_CCControlSwitch(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCControlSwitch *obj = static_cast< cocos2d::extension::CCControlSwitch * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCControlSwitch = {
  "Cocos2d::extension::CCControlSwitch",
  mrb_no_free_cocos2d_extension_CCControlSwitch
};

static struct RClass *
_define_class_cocos2d_extension_CCControlSwitch(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControlSwitch") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlSwitch");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCControlSwitch", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCControlSwitch");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCControlSwitch, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCControlUtils(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::CCControlUtils * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_CCControlUtils = {
  "Cocos2d::extension::CCControlUtils",
  mrb_free_cocos2d_extension_CCControlUtils
};

static void
mrb_no_free_cocos2d_extension_CCControlUtils(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCControlUtils = {
  "Cocos2d::extension::CCControlUtils",
  mrb_no_free_cocos2d_extension_CCControlUtils
};

static struct RClass *
_define_class_cocos2d_extension_CCControlUtils(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControlUtils") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlUtils");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCControlUtils", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCControlUtils");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCControlUtils, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCData *obj = static_cast< cocos2d::extension::CCData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCData = {
  "Cocos2d::extension::CCData",
  mrb_free_cocos2d_extension_CCData
};

static void
mrb_no_free_cocos2d_extension_CCData(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCData *obj = static_cast< cocos2d::extension::CCData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCData = {
  "Cocos2d::extension::CCData",
  mrb_no_free_cocos2d_extension_CCData
};

static struct RClass *
_define_class_cocos2d_extension_CCData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCData");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCDecorativeDisplay(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCDecorativeDisplay *obj = static_cast< cocos2d::extension::CCDecorativeDisplay * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCDecorativeDisplay = {
  "Cocos2d::extension::CCDecorativeDisplay",
  mrb_free_cocos2d_extension_CCDecorativeDisplay
};

static void
mrb_no_free_cocos2d_extension_CCDecorativeDisplay(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCDecorativeDisplay *obj = static_cast< cocos2d::extension::CCDecorativeDisplay * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCDecorativeDisplay = {
  "Cocos2d::extension::CCDecorativeDisplay",
  mrb_no_free_cocos2d_extension_CCDecorativeDisplay
};

static struct RClass *
_define_class_cocos2d_extension_CCDecorativeDisplay(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCDecorativeDisplay") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDecorativeDisplay");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCDecorativeDisplay", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCDecorativeDisplay");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCDecorativeDisplay, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCDisplayData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCDisplayData *obj = static_cast< cocos2d::extension::CCDisplayData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCDisplayData = {
  "Cocos2d::extension::CCDisplayData",
  mrb_free_cocos2d_extension_CCDisplayData
};

static void
mrb_no_free_cocos2d_extension_CCDisplayData(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCDisplayData *obj = static_cast< cocos2d::extension::CCDisplayData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCDisplayData = {
  "Cocos2d::extension::CCDisplayData",
  mrb_no_free_cocos2d_extension_CCDisplayData
};

static struct RClass *
_define_class_cocos2d_extension_CCDisplayData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCDisplayData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDisplayData");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCDisplayData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCDisplayData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCDisplayData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCDisplayFactory(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::CCDisplayFactory * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_CCDisplayFactory = {
  "Cocos2d::extension::CCDisplayFactory",
  mrb_free_cocos2d_extension_CCDisplayFactory
};

static void
mrb_no_free_cocos2d_extension_CCDisplayFactory(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCDisplayFactory = {
  "Cocos2d::extension::CCDisplayFactory",
  mrb_no_free_cocos2d_extension_CCDisplayFactory
};

static struct RClass *
_define_class_cocos2d_extension_CCDisplayFactory(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCDisplayFactory") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDisplayFactory");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCDisplayFactory", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCDisplayFactory");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCDisplayFactory, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCDisplayManager(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCDisplayManager *obj = static_cast< cocos2d::extension::CCDisplayManager * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCDisplayManager = {
  "Cocos2d::extension::CCDisplayManager",
  mrb_free_cocos2d_extension_CCDisplayManager
};

static void
mrb_no_free_cocos2d_extension_CCDisplayManager(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCDisplayManager *obj = static_cast< cocos2d::extension::CCDisplayManager * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCDisplayManager = {
  "Cocos2d::extension::CCDisplayManager",
  mrb_no_free_cocos2d_extension_CCDisplayManager
};

static struct RClass *
_define_class_cocos2d_extension_CCDisplayManager(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCDisplayManager") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDisplayManager");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCDisplayManager", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCDisplayManager");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCDisplayManager, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCEditBox(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCEditBox *obj = static_cast< cocos2d::extension::CCEditBox * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCEditBox = {
  "Cocos2d::extension::CCEditBox",
  mrb_free_cocos2d_extension_CCEditBox
};

static void
mrb_no_free_cocos2d_extension_CCEditBox(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCEditBox *obj = static_cast< cocos2d::extension::CCEditBox * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCEditBox = {
  "Cocos2d::extension::CCEditBox",
  mrb_no_free_cocos2d_extension_CCEditBox
};

static struct RClass *
_define_class_cocos2d_extension_CCEditBox(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCEditBox") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCEditBox");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControlButton") == 0) {
    _define_class_cocos2d_extension_CCControlButton(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlButton");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEditBox", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCIMEDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCEditBox");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCEditBox, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCEditBoxDelegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCEditBoxDelegate = {
  "Cocos2d::extension::CCEditBoxDelegate",
  mrb_free_cocos2d_extension_CCEditBoxDelegate
};

static struct RClass *
_define_class_cocos2d_extension_CCEditBoxDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCEditBoxDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCEditBoxDelegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCEditBoxDelegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCEditBoxDelegate");
  return rc;
}

static void
mrb_free_cocos2d_extension_CCFrameData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCFrameData *obj = static_cast< cocos2d::extension::CCFrameData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCFrameData = {
  "Cocos2d::extension::CCFrameData",
  mrb_free_cocos2d_extension_CCFrameData
};

static void
mrb_no_free_cocos2d_extension_CCFrameData(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCFrameData *obj = static_cast< cocos2d::extension::CCFrameData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCFrameData = {
  "Cocos2d::extension::CCFrameData",
  mrb_no_free_cocos2d_extension_CCFrameData
};

static struct RClass *
_define_class_cocos2d_extension_CCFrameData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCFrameData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCFrameData");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBaseData") == 0) {
    _define_class_cocos2d_extension_CCBaseData(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBaseData");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFrameData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCFrameData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCFrameData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCHttpClient(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCHttpClient *obj = static_cast< cocos2d::extension::CCHttpClient * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCHttpClient = {
  "Cocos2d::extension::CCHttpClient",
  mrb_free_cocos2d_extension_CCHttpClient
};

static void
mrb_no_free_cocos2d_extension_CCHttpClient(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCHttpClient *obj = static_cast< cocos2d::extension::CCHttpClient * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCHttpClient = {
  "Cocos2d::extension::CCHttpClient",
  mrb_no_free_cocos2d_extension_CCHttpClient
};

static struct RClass *
_define_class_cocos2d_extension_CCHttpClient(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCHttpClient") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCHttpClient");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCHttpClient", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCHttpClient");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCHttpClient, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCHttpRequest(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCHttpRequest *obj = static_cast< cocos2d::extension::CCHttpRequest * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCHttpRequest = {
  "Cocos2d::extension::CCHttpRequest",
  mrb_free_cocos2d_extension_CCHttpRequest
};

static void
mrb_no_free_cocos2d_extension_CCHttpRequest(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCHttpRequest *obj = static_cast< cocos2d::extension::CCHttpRequest * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCHttpRequest = {
  "Cocos2d::extension::CCHttpRequest",
  mrb_no_free_cocos2d_extension_CCHttpRequest
};

static struct RClass *
_define_class_cocos2d_extension_CCHttpRequest(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCHttpRequest") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCHttpRequest");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCHttpRequest", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCHttpRequest");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCHttpRequest, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCHttpRequest__prxy(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::CCHttpRequest::_prxy * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_CCHttpRequest__prxy = {
  "Cocos2d::extension::CCHttpRequest::_prxy",
  mrb_free_cocos2d_extension_CCHttpRequest__prxy
};

static void
mrb_no_free_cocos2d_extension_CCHttpRequest__prxy(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCHttpRequest__prxy = {
  "Cocos2d::extension::CCHttpRequest::_prxy",
  mrb_no_free_cocos2d_extension_CCHttpRequest__prxy
};

static struct RClass *
_define_class_cocos2d_extension_CCHttpRequest__prxy(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCHttpRequest::CC_prxy") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCHttpRequest::CC_prxy");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_prxy -> CC_prxy\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCHttpRequest");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_prxy", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCHttpRequest::CC_prxy");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCHttpRequest::_prxy, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCHttpResponse(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCHttpResponse *obj = static_cast< cocos2d::extension::CCHttpResponse * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCHttpResponse = {
  "Cocos2d::extension::CCHttpResponse",
  mrb_free_cocos2d_extension_CCHttpResponse
};

static void
mrb_no_free_cocos2d_extension_CCHttpResponse(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCHttpResponse *obj = static_cast< cocos2d::extension::CCHttpResponse * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCHttpResponse = {
  "Cocos2d::extension::CCHttpResponse",
  mrb_no_free_cocos2d_extension_CCHttpResponse
};

static struct RClass *
_define_class_cocos2d_extension_CCHttpResponse(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCHttpResponse") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCHttpResponse");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCHttpResponse", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCHttpResponse");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCHttpResponse, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCInputDelegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCInputDelegate = {
  "Cocos2d::extension::CCInputDelegate",
  mrb_free_cocos2d_extension_CCInputDelegate
};

static struct RClass *
_define_class_cocos2d_extension_CCInputDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCInputDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCInputDelegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCInputDelegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCInputDelegate");
  return rc;
}

static void
mrb_free_cocos2d_extension_CCInvocation(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCInvocation *obj = static_cast< cocos2d::extension::CCInvocation * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCInvocation = {
  "Cocos2d::extension::CCInvocation",
  mrb_free_cocos2d_extension_CCInvocation
};

static void
mrb_no_free_cocos2d_extension_CCInvocation(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCInvocation *obj = static_cast< cocos2d::extension::CCInvocation * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCInvocation = {
  "Cocos2d::extension::CCInvocation",
  mrb_no_free_cocos2d_extension_CCInvocation
};

static struct RClass *
_define_class_cocos2d_extension_CCInvocation(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCInvocation") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCInvocation");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCInvocation", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCInvocation");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCInvocation, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCLabelBMFontLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCLabelBMFontLoader *obj = static_cast< cocos2d::extension::CCLabelBMFontLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCLabelBMFontLoader = {
  "Cocos2d::extension::CCLabelBMFontLoader",
  mrb_free_cocos2d_extension_CCLabelBMFontLoader
};

static void
mrb_no_free_cocos2d_extension_CCLabelBMFontLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCLabelBMFontLoader *obj = static_cast< cocos2d::extension::CCLabelBMFontLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCLabelBMFontLoader = {
  "Cocos2d::extension::CCLabelBMFontLoader",
  mrb_no_free_cocos2d_extension_CCLabelBMFontLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCLabelBMFontLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCLabelBMFontLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLabelBMFontLoader");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCLabelBMFontLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCLabelBMFontLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCLabelBMFontLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCLabelTTFLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCLabelTTFLoader *obj = static_cast< cocos2d::extension::CCLabelTTFLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCLabelTTFLoader = {
  "Cocos2d::extension::CCLabelTTFLoader",
  mrb_free_cocos2d_extension_CCLabelTTFLoader
};

static void
mrb_no_free_cocos2d_extension_CCLabelTTFLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCLabelTTFLoader *obj = static_cast< cocos2d::extension::CCLabelTTFLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCLabelTTFLoader = {
  "Cocos2d::extension::CCLabelTTFLoader",
  mrb_no_free_cocos2d_extension_CCLabelTTFLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCLabelTTFLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCLabelTTFLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLabelTTFLoader");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCLabelTTFLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCLabelTTFLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCLabelTTFLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCLayerColorLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCLayerColorLoader *obj = static_cast< cocos2d::extension::CCLayerColorLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCLayerColorLoader = {
  "Cocos2d::extension::CCLayerColorLoader",
  mrb_free_cocos2d_extension_CCLayerColorLoader
};

static void
mrb_no_free_cocos2d_extension_CCLayerColorLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCLayerColorLoader *obj = static_cast< cocos2d::extension::CCLayerColorLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCLayerColorLoader = {
  "Cocos2d::extension::CCLayerColorLoader",
  mrb_no_free_cocos2d_extension_CCLayerColorLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCLayerColorLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCLayerColorLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLayerColorLoader");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCLayerLoader") == 0) {
    _define_class_cocos2d_extension_CCLayerLoader(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLayerLoader");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCLayerColorLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCLayerColorLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCLayerColorLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCLayerGradientLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCLayerGradientLoader *obj = static_cast< cocos2d::extension::CCLayerGradientLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCLayerGradientLoader = {
  "Cocos2d::extension::CCLayerGradientLoader",
  mrb_free_cocos2d_extension_CCLayerGradientLoader
};

static void
mrb_no_free_cocos2d_extension_CCLayerGradientLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCLayerGradientLoader *obj = static_cast< cocos2d::extension::CCLayerGradientLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCLayerGradientLoader = {
  "Cocos2d::extension::CCLayerGradientLoader",
  mrb_no_free_cocos2d_extension_CCLayerGradientLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCLayerGradientLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCLayerGradientLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLayerGradientLoader");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCLayerLoader") == 0) {
    _define_class_cocos2d_extension_CCLayerLoader(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLayerLoader");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCLayerGradientLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCLayerGradientLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCLayerGradientLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCLayerLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCLayerLoader *obj = static_cast< cocos2d::extension::CCLayerLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCLayerLoader = {
  "Cocos2d::extension::CCLayerLoader",
  mrb_free_cocos2d_extension_CCLayerLoader
};

static void
mrb_no_free_cocos2d_extension_CCLayerLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCLayerLoader *obj = static_cast< cocos2d::extension::CCLayerLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCLayerLoader = {
  "Cocos2d::extension::CCLayerLoader",
  mrb_no_free_cocos2d_extension_CCLayerLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCLayerLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCLayerLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLayerLoader");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCLayerLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCLayerLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCLayerLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCMenuItemImageLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCMenuItemImageLoader *obj = static_cast< cocos2d::extension::CCMenuItemImageLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCMenuItemImageLoader = {
  "Cocos2d::extension::CCMenuItemImageLoader",
  mrb_free_cocos2d_extension_CCMenuItemImageLoader
};

static void
mrb_no_free_cocos2d_extension_CCMenuItemImageLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCMenuItemImageLoader *obj = static_cast< cocos2d::extension::CCMenuItemImageLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCMenuItemImageLoader = {
  "Cocos2d::extension::CCMenuItemImageLoader",
  mrb_no_free_cocos2d_extension_CCMenuItemImageLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCMenuItemImageLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCMenuItemImageLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCMenuItemImageLoader");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCMenuItemLoader") == 0) {
    _define_class_cocos2d_extension_CCMenuItemLoader(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCMenuItemLoader");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMenuItemImageLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCMenuItemImageLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCMenuItemImageLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCMenuItemLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCMenuItemLoader *obj = static_cast< cocos2d::extension::CCMenuItemLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCMenuItemLoader = {
  "Cocos2d::extension::CCMenuItemLoader",
  mrb_free_cocos2d_extension_CCMenuItemLoader
};

static void
mrb_no_free_cocos2d_extension_CCMenuItemLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCMenuItemLoader *obj = static_cast< cocos2d::extension::CCMenuItemLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCMenuItemLoader = {
  "Cocos2d::extension::CCMenuItemLoader",
  mrb_no_free_cocos2d_extension_CCMenuItemLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCMenuItemLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCMenuItemLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCMenuItemLoader");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMenuItemLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCMenuItemLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCMenuItemLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCMenuLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCMenuLoader *obj = static_cast< cocos2d::extension::CCMenuLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCMenuLoader = {
  "Cocos2d::extension::CCMenuLoader",
  mrb_free_cocos2d_extension_CCMenuLoader
};

static void
mrb_no_free_cocos2d_extension_CCMenuLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCMenuLoader *obj = static_cast< cocos2d::extension::CCMenuLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCMenuLoader = {
  "Cocos2d::extension::CCMenuLoader",
  mrb_no_free_cocos2d_extension_CCMenuLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCMenuLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCMenuLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCMenuLoader");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCLayerLoader") == 0) {
    _define_class_cocos2d_extension_CCLayerLoader(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLayerLoader");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMenuLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCMenuLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCMenuLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCMovementBoneData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCMovementBoneData *obj = static_cast< cocos2d::extension::CCMovementBoneData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCMovementBoneData = {
  "Cocos2d::extension::CCMovementBoneData",
  mrb_free_cocos2d_extension_CCMovementBoneData
};

static void
mrb_no_free_cocos2d_extension_CCMovementBoneData(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCMovementBoneData *obj = static_cast< cocos2d::extension::CCMovementBoneData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCMovementBoneData = {
  "Cocos2d::extension::CCMovementBoneData",
  mrb_no_free_cocos2d_extension_CCMovementBoneData
};

static struct RClass *
_define_class_cocos2d_extension_CCMovementBoneData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCMovementBoneData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCMovementBoneData");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMovementBoneData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCMovementBoneData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCMovementBoneData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCMovementData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCMovementData *obj = static_cast< cocos2d::extension::CCMovementData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCMovementData = {
  "Cocos2d::extension::CCMovementData",
  mrb_free_cocos2d_extension_CCMovementData
};

static void
mrb_no_free_cocos2d_extension_CCMovementData(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCMovementData *obj = static_cast< cocos2d::extension::CCMovementData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCMovementData = {
  "Cocos2d::extension::CCMovementData",
  mrb_no_free_cocos2d_extension_CCMovementData
};

static struct RClass *
_define_class_cocos2d_extension_CCMovementData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCMovementData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCMovementData");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMovementData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCMovementData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCMovementData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCNodeLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCNodeLoader *obj = static_cast< cocos2d::extension::CCNodeLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCNodeLoader = {
  "Cocos2d::extension::CCNodeLoader",
  mrb_free_cocos2d_extension_CCNodeLoader
};

static void
mrb_no_free_cocos2d_extension_CCNodeLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCNodeLoader *obj = static_cast< cocos2d::extension::CCNodeLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCNodeLoader = {
  "Cocos2d::extension::CCNodeLoader",
  mrb_no_free_cocos2d_extension_CCNodeLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCNodeLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCNodeLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCNodeLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCNodeLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCNodeLoaderLibrary(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCNodeLoaderLibrary *obj = static_cast< cocos2d::extension::CCNodeLoaderLibrary * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCNodeLoaderLibrary = {
  "Cocos2d::extension::CCNodeLoaderLibrary",
  mrb_free_cocos2d_extension_CCNodeLoaderLibrary
};

static void
mrb_no_free_cocos2d_extension_CCNodeLoaderLibrary(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCNodeLoaderLibrary *obj = static_cast< cocos2d::extension::CCNodeLoaderLibrary * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCNodeLoaderLibrary = {
  "Cocos2d::extension::CCNodeLoaderLibrary",
  mrb_no_free_cocos2d_extension_CCNodeLoaderLibrary
};

static struct RClass *
_define_class_cocos2d_extension_CCNodeLoaderLibrary(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoaderLibrary") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoaderLibrary");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCNodeLoaderLibrary", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCNodeLoaderLibrary");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCNodeLoaderLibrary, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCNodeLoaderListener(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::CCNodeLoaderListener * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_CCNodeLoaderListener = {
  "Cocos2d::extension::CCNodeLoaderListener",
  mrb_free_cocos2d_extension_CCNodeLoaderListener
};

static void
mrb_no_free_cocos2d_extension_CCNodeLoaderListener(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCNodeLoaderListener = {
  "Cocos2d::extension::CCNodeLoaderListener",
  mrb_no_free_cocos2d_extension_CCNodeLoaderListener
};

static struct RClass *
_define_class_cocos2d_extension_CCNodeLoaderListener(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoaderListener") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoaderListener");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCNodeLoaderListener", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCNodeLoaderListener");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCNodeLoaderListener, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCParticleDisplayData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCParticleDisplayData *obj = static_cast< cocos2d::extension::CCParticleDisplayData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCParticleDisplayData = {
  "Cocos2d::extension::CCParticleDisplayData",
  mrb_free_cocos2d_extension_CCParticleDisplayData
};

static void
mrb_no_free_cocos2d_extension_CCParticleDisplayData(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCParticleDisplayData *obj = static_cast< cocos2d::extension::CCParticleDisplayData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCParticleDisplayData = {
  "Cocos2d::extension::CCParticleDisplayData",
  mrb_no_free_cocos2d_extension_CCParticleDisplayData
};

static struct RClass *
_define_class_cocos2d_extension_CCParticleDisplayData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCParticleDisplayData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCParticleDisplayData");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCDisplayData") == 0) {
    _define_class_cocos2d_extension_CCDisplayData(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDisplayData");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleDisplayData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCParticleDisplayData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCParticleDisplayData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCParticleSystemQuadLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCParticleSystemQuadLoader *obj = static_cast< cocos2d::extension::CCParticleSystemQuadLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCParticleSystemQuadLoader = {
  "Cocos2d::extension::CCParticleSystemQuadLoader",
  mrb_free_cocos2d_extension_CCParticleSystemQuadLoader
};

static void
mrb_no_free_cocos2d_extension_CCParticleSystemQuadLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCParticleSystemQuadLoader *obj = static_cast< cocos2d::extension::CCParticleSystemQuadLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCParticleSystemQuadLoader = {
  "Cocos2d::extension::CCParticleSystemQuadLoader",
  mrb_no_free_cocos2d_extension_CCParticleSystemQuadLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCParticleSystemQuadLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCParticleSystemQuadLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCParticleSystemQuadLoader");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleSystemQuadLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCParticleSystemQuadLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCParticleSystemQuadLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCProcessBase(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCProcessBase *obj = static_cast< cocos2d::extension::CCProcessBase * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCProcessBase = {
  "Cocos2d::extension::CCProcessBase",
  mrb_free_cocos2d_extension_CCProcessBase
};

static void
mrb_no_free_cocos2d_extension_CCProcessBase(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCProcessBase *obj = static_cast< cocos2d::extension::CCProcessBase * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCProcessBase = {
  "Cocos2d::extension::CCProcessBase",
  mrb_no_free_cocos2d_extension_CCProcessBase
};

static struct RClass *
_define_class_cocos2d_extension_CCProcessBase(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCProcessBase") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCProcessBase");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCProcessBase", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCProcessBase");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCProcessBase, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCScale9Sprite(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCScale9Sprite *obj = static_cast< cocos2d::extension::CCScale9Sprite * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCScale9Sprite = {
  "Cocos2d::extension::CCScale9Sprite",
  mrb_free_cocos2d_extension_CCScale9Sprite
};

static void
mrb_no_free_cocos2d_extension_CCScale9Sprite(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCScale9Sprite *obj = static_cast< cocos2d::extension::CCScale9Sprite * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCScale9Sprite = {
  "Cocos2d::extension::CCScale9Sprite",
  mrb_no_free_cocos2d_extension_CCScale9Sprite
};

static struct RClass *
_define_class_cocos2d_extension_CCScale9Sprite(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCScale9Sprite") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCScale9Sprite");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCScale9Sprite", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCScale9Sprite");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCScale9Sprite, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCScale9SpriteLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCScale9SpriteLoader *obj = static_cast< cocos2d::extension::CCScale9SpriteLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCScale9SpriteLoader = {
  "Cocos2d::extension::CCScale9SpriteLoader",
  mrb_free_cocos2d_extension_CCScale9SpriteLoader
};

static void
mrb_no_free_cocos2d_extension_CCScale9SpriteLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCScale9SpriteLoader *obj = static_cast< cocos2d::extension::CCScale9SpriteLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCScale9SpriteLoader = {
  "Cocos2d::extension::CCScale9SpriteLoader",
  mrb_no_free_cocos2d_extension_CCScale9SpriteLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCScale9SpriteLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCScale9SpriteLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCScale9SpriteLoader");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCScale9SpriteLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCScale9SpriteLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCScale9SpriteLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCScrollView(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCScrollView *obj = static_cast< cocos2d::extension::CCScrollView * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCScrollView = {
  "Cocos2d::extension::CCScrollView",
  mrb_free_cocos2d_extension_CCScrollView
};

static void
mrb_no_free_cocos2d_extension_CCScrollView(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCScrollView *obj = static_cast< cocos2d::extension::CCScrollView * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCScrollView = {
  "Cocos2d::extension::CCScrollView",
  mrb_no_free_cocos2d_extension_CCScrollView
};

static struct RClass *
_define_class_cocos2d_extension_CCScrollView(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCScrollView") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCScrollView");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayer");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCScrollView", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCScrollView");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCScrollView, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCScrollViewDelegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCScrollViewDelegate = {
  "Cocos2d::extension::CCScrollViewDelegate",
  mrb_free_cocos2d_extension_CCScrollViewDelegate
};

static struct RClass *
_define_class_cocos2d_extension_CCScrollViewDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCScrollViewDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCScrollViewDelegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCScrollViewDelegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCScrollViewDelegate");
  return rc;
}

static void
mrb_free_cocos2d_extension_CCScrollViewLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCScrollViewLoader *obj = static_cast< cocos2d::extension::CCScrollViewLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCScrollViewLoader = {
  "Cocos2d::extension::CCScrollViewLoader",
  mrb_free_cocos2d_extension_CCScrollViewLoader
};

static void
mrb_no_free_cocos2d_extension_CCScrollViewLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCScrollViewLoader *obj = static_cast< cocos2d::extension::CCScrollViewLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCScrollViewLoader = {
  "Cocos2d::extension::CCScrollViewLoader",
  mrb_no_free_cocos2d_extension_CCScrollViewLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCScrollViewLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCScrollViewLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCScrollViewLoader");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCScrollViewLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCScrollViewLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCScrollViewLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCShaderDisplayData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCShaderDisplayData *obj = static_cast< cocos2d::extension::CCShaderDisplayData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCShaderDisplayData = {
  "Cocos2d::extension::CCShaderDisplayData",
  mrb_free_cocos2d_extension_CCShaderDisplayData
};

static void
mrb_no_free_cocos2d_extension_CCShaderDisplayData(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCShaderDisplayData *obj = static_cast< cocos2d::extension::CCShaderDisplayData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCShaderDisplayData = {
  "Cocos2d::extension::CCShaderDisplayData",
  mrb_no_free_cocos2d_extension_CCShaderDisplayData
};

static struct RClass *
_define_class_cocos2d_extension_CCShaderDisplayData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCShaderDisplayData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCShaderDisplayData");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCDisplayData") == 0) {
    _define_class_cocos2d_extension_CCDisplayData(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDisplayData");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCShaderDisplayData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCShaderDisplayData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCShaderDisplayData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCSkeleton(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCSkeleton *obj = static_cast< cocos2d::extension::CCSkeleton * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCSkeleton = {
  "Cocos2d::extension::CCSkeleton",
  mrb_free_cocos2d_extension_CCSkeleton
};

static void
mrb_no_free_cocos2d_extension_CCSkeleton(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCSkeleton *obj = static_cast< cocos2d::extension::CCSkeleton * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCSkeleton = {
  "Cocos2d::extension::CCSkeleton",
  mrb_no_free_cocos2d_extension_CCSkeleton
};

static struct RClass *
_define_class_cocos2d_extension_CCSkeleton(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCSkeleton") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCSkeleton");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSkeleton", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCBlendProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCSkeleton");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCSkeleton, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCSkeletonAnimation(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCSkeletonAnimation *obj = static_cast< cocos2d::extension::CCSkeletonAnimation * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCSkeletonAnimation = {
  "Cocos2d::extension::CCSkeletonAnimation",
  mrb_free_cocos2d_extension_CCSkeletonAnimation
};

static void
mrb_no_free_cocos2d_extension_CCSkeletonAnimation(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCSkeletonAnimation *obj = static_cast< cocos2d::extension::CCSkeletonAnimation * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCSkeletonAnimation = {
  "Cocos2d::extension::CCSkeletonAnimation",
  mrb_no_free_cocos2d_extension_CCSkeletonAnimation
};

static struct RClass *
_define_class_cocos2d_extension_CCSkeletonAnimation(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCSkeletonAnimation") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCSkeletonAnimation");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCSkeleton") == 0) {
    _define_class_cocos2d_extension_CCSkeleton(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCSkeleton");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSkeletonAnimation", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCSkeletonAnimation");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCSkeletonAnimation, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCSpriteDisplayData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCSpriteDisplayData *obj = static_cast< cocos2d::extension::CCSpriteDisplayData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCSpriteDisplayData = {
  "Cocos2d::extension::CCSpriteDisplayData",
  mrb_free_cocos2d_extension_CCSpriteDisplayData
};

static void
mrb_no_free_cocos2d_extension_CCSpriteDisplayData(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCSpriteDisplayData *obj = static_cast< cocos2d::extension::CCSpriteDisplayData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCSpriteDisplayData = {
  "Cocos2d::extension::CCSpriteDisplayData",
  mrb_no_free_cocos2d_extension_CCSpriteDisplayData
};

static struct RClass *
_define_class_cocos2d_extension_CCSpriteDisplayData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCSpriteDisplayData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCSpriteDisplayData");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCDisplayData") == 0) {
    _define_class_cocos2d_extension_CCDisplayData(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDisplayData");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSpriteDisplayData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCSpriteDisplayData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCSpriteDisplayData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCSpriteLoader(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCSpriteLoader *obj = static_cast< cocos2d::extension::CCSpriteLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCSpriteLoader = {
  "Cocos2d::extension::CCSpriteLoader",
  mrb_free_cocos2d_extension_CCSpriteLoader
};

static void
mrb_no_free_cocos2d_extension_CCSpriteLoader(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCSpriteLoader *obj = static_cast< cocos2d::extension::CCSpriteLoader * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCSpriteLoader = {
  "Cocos2d::extension::CCSpriteLoader",
  mrb_no_free_cocos2d_extension_CCSpriteLoader
};

static struct RClass *
_define_class_cocos2d_extension_CCSpriteLoader(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCSpriteLoader") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCSpriteLoader");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSpriteLoader", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCSpriteLoader");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCSpriteLoader, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCTableView(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCTableView *obj = static_cast< cocos2d::extension::CCTableView * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCTableView = {
  "Cocos2d::extension::CCTableView",
  mrb_free_cocos2d_extension_CCTableView
};

static void
mrb_no_free_cocos2d_extension_CCTableView(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCTableView *obj = static_cast< cocos2d::extension::CCTableView * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCTableView = {
  "Cocos2d::extension::CCTableView",
  mrb_no_free_cocos2d_extension_CCTableView
};

static struct RClass *
_define_class_cocos2d_extension_CCTableView(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCTableView") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCTableView");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCScrollView") == 0) {
    _define_class_cocos2d_extension_CCScrollView(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCScrollViewDelegate") == 0) {
    _define_class_cocos2d_extension_CCScrollViewDelegate(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCScrollView");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTableView", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCScrollViewDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCTableView");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCTableView, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCTableViewCell(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCTableViewCell *obj = static_cast< cocos2d::extension::CCTableViewCell * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCTableViewCell = {
  "Cocos2d::extension::CCTableViewCell",
  mrb_free_cocos2d_extension_CCTableViewCell
};

static void
mrb_no_free_cocos2d_extension_CCTableViewCell(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCTableViewCell *obj = static_cast< cocos2d::extension::CCTableViewCell * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCTableViewCell = {
  "Cocos2d::extension::CCTableViewCell",
  mrb_no_free_cocos2d_extension_CCTableViewCell
};

static struct RClass *
_define_class_cocos2d_extension_CCTableViewCell(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCTableViewCell") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCTableViewCell");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTableViewCell", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCTableViewCell");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCTableViewCell, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCTableViewDataSource(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::CCTableViewDataSource * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_CCTableViewDataSource = {
  "Cocos2d::extension::CCTableViewDataSource",
  mrb_free_cocos2d_extension_CCTableViewDataSource
};

static void
mrb_no_free_cocos2d_extension_CCTableViewDataSource(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCTableViewDataSource = {
  "Cocos2d::extension::CCTableViewDataSource",
  mrb_no_free_cocos2d_extension_CCTableViewDataSource
};

static struct RClass *
_define_class_cocos2d_extension_CCTableViewDataSource(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCTableViewDataSource") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCTableViewDataSource");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTableViewDataSource", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCTableViewDataSource");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCTableViewDataSource, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCTableViewDelegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCTableViewDelegate = {
  "Cocos2d::extension::CCTableViewDelegate",
  mrb_free_cocos2d_extension_CCTableViewDelegate
};

static struct RClass *
_define_class_cocos2d_extension_CCTableViewDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCTableViewDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCTableViewDelegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCTableViewDelegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCTableViewDelegate");
  return rc;
}

static void
mrb_free_cocos2d_extension_CCTextureData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCTextureData *obj = static_cast< cocos2d::extension::CCTextureData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCTextureData = {
  "Cocos2d::extension::CCTextureData",
  mrb_free_cocos2d_extension_CCTextureData
};

static void
mrb_no_free_cocos2d_extension_CCTextureData(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCTextureData *obj = static_cast< cocos2d::extension::CCTextureData * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCTextureData = {
  "Cocos2d::extension::CCTextureData",
  mrb_no_free_cocos2d_extension_CCTextureData
};

static struct RClass *
_define_class_cocos2d_extension_CCTextureData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCTextureData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCTextureData");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTextureData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCTextureData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCTextureData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCTween(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCTween *obj = static_cast< cocos2d::extension::CCTween * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCTween = {
  "Cocos2d::extension::CCTween",
  mrb_free_cocos2d_extension_CCTween
};

static void
mrb_no_free_cocos2d_extension_CCTween(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCTween *obj = static_cast< cocos2d::extension::CCTween * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCTween = {
  "Cocos2d::extension::CCTween",
  mrb_no_free_cocos2d_extension_CCTween
};

static struct RClass *
_define_class_cocos2d_extension_CCTween(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCTween") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCTween");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCProcessBase") == 0) {
    _define_class_cocos2d_extension_CCProcessBase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCProcessBase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTween", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCTween");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCTween, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CCTweenFunction(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::CCTweenFunction * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_CCTweenFunction = {
  "Cocos2d::extension::CCTweenFunction",
  mrb_free_cocos2d_extension_CCTweenFunction
};

static void
mrb_no_free_cocos2d_extension_CCTweenFunction(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCTweenFunction = {
  "Cocos2d::extension::CCTweenFunction",
  mrb_no_free_cocos2d_extension_CCTweenFunction
};

static struct RClass *
_define_class_cocos2d_extension_CCTweenFunction(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCTweenFunction") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCTweenFunction");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTweenFunction", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCTweenFunction");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCTweenFunction, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_ColliderBody(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::ColliderBody *obj = static_cast< cocos2d::extension::ColliderBody * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_ColliderBody = {
  "Cocos2d::extension::ColliderBody",
  mrb_free_cocos2d_extension_ColliderBody
};

static void
mrb_no_free_cocos2d_extension_ColliderBody(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::ColliderBody *obj = static_cast< cocos2d::extension::ColliderBody * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_ColliderBody = {
  "Cocos2d::extension::ColliderBody",
  mrb_no_free_cocos2d_extension_ColliderBody
};

static struct RClass *
_define_class_cocos2d_extension_ColliderBody(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::ColliderBody") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::ColliderBody");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "ColliderBody", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::ColliderBody");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::ColliderBody, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_CurveTimeline(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::CurveTimeline * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_CurveTimeline = {
  "Cocos2d::extension::CurveTimeline",
  mrb_free_cocos2d_extension_CurveTimeline
};

static void
mrb_no_free_cocos2d_extension_CurveTimeline(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CurveTimeline = {
  "Cocos2d::extension::CurveTimeline",
  mrb_no_free_cocos2d_extension_CurveTimeline
};

static struct RClass *
_define_class_cocos2d_extension_CurveTimeline(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CurveTimeline") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CurveTimeline");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CurveTimeline", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CurveTimeline");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CurveTimeline, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_HSV(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::HSV * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_HSV = {
  "Cocos2d::extension::HSV",
  mrb_free_cocos2d_extension_HSV
};

static void
mrb_no_free_cocos2d_extension_HSV(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_HSV = {
  "Cocos2d::extension::HSV",
  mrb_no_free_cocos2d_extension_HSV
};

static struct RClass *
_define_class_cocos2d_extension_HSV(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::HSV") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::HSV");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "HSV", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::HSV");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::HSV, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_RGBA(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::RGBA * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_RGBA = {
  "Cocos2d::extension::RGBA",
  mrb_free_cocos2d_extension_RGBA
};

static void
mrb_no_free_cocos2d_extension_RGBA(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_RGBA = {
  "Cocos2d::extension::RGBA",
  mrb_no_free_cocos2d_extension_RGBA
};

static struct RClass *
_define_class_cocos2d_extension_RGBA(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::RGBA") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::RGBA");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "RGBA", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::RGBA");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::RGBA, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_RegionAttachment(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::RegionAttachment * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_RegionAttachment = {
  "Cocos2d::extension::RegionAttachment",
  mrb_free_cocos2d_extension_RegionAttachment
};

static void
mrb_no_free_cocos2d_extension_RegionAttachment(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_RegionAttachment = {
  "Cocos2d::extension::RegionAttachment",
  mrb_no_free_cocos2d_extension_RegionAttachment
};

static struct RClass *
_define_class_cocos2d_extension_RegionAttachment(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::RegionAttachment") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::RegionAttachment");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "RegionAttachment", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::RegionAttachment");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::RegionAttachment, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_Skeleton(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::Skeleton * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_Skeleton = {
  "Cocos2d::extension::Skeleton",
  mrb_free_cocos2d_extension_Skeleton
};

static void
mrb_no_free_cocos2d_extension_Skeleton(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_Skeleton = {
  "Cocos2d::extension::Skeleton",
  mrb_no_free_cocos2d_extension_Skeleton
};

static struct RClass *
_define_class_cocos2d_extension_Skeleton(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::Skeleton") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::Skeleton");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "Skeleton", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::Skeleton");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::Skeleton, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_SkeletonData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::SkeletonData * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_SkeletonData = {
  "Cocos2d::extension::SkeletonData",
  mrb_free_cocos2d_extension_SkeletonData
};

static void
mrb_no_free_cocos2d_extension_SkeletonData(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_SkeletonData = {
  "Cocos2d::extension::SkeletonData",
  mrb_no_free_cocos2d_extension_SkeletonData
};

static struct RClass *
_define_class_cocos2d_extension_SkeletonData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::SkeletonData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::SkeletonData");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "SkeletonData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::SkeletonData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::SkeletonData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_SkeletonJson(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::SkeletonJson * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_SkeletonJson = {
  "Cocos2d::extension::SkeletonJson",
  mrb_free_cocos2d_extension_SkeletonJson
};

static void
mrb_no_free_cocos2d_extension_SkeletonJson(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_SkeletonJson = {
  "Cocos2d::extension::SkeletonJson",
  mrb_no_free_cocos2d_extension_SkeletonJson
};

static struct RClass *
_define_class_cocos2d_extension_SkeletonJson(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::SkeletonJson") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::SkeletonJson");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "SkeletonJson", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::SkeletonJson");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::SkeletonJson, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_Skin(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::Skin * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_Skin = {
  "Cocos2d::extension::Skin",
  mrb_free_cocos2d_extension_Skin
};

static void
mrb_no_free_cocos2d_extension_Skin(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_Skin = {
  "Cocos2d::extension::Skin",
  mrb_no_free_cocos2d_extension_Skin
};

static struct RClass *
_define_class_cocos2d_extension_Skin(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::Skin") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::Skin");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "Skin", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::Skin");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::Skin, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_Slot(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::Slot * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_Slot = {
  "Cocos2d::extension::Slot",
  mrb_free_cocos2d_extension_Slot
};

static void
mrb_no_free_cocos2d_extension_Slot(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_Slot = {
  "Cocos2d::extension::Slot",
  mrb_no_free_cocos2d_extension_Slot
};

static struct RClass *
_define_class_cocos2d_extension_Slot(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::Slot") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::Slot");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "Slot", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::Slot");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::Slot, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_SlotData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::SlotData * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_SlotData = {
  "Cocos2d::extension::SlotData",
  mrb_free_cocos2d_extension_SlotData
};

static void
mrb_no_free_cocos2d_extension_SlotData(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_SlotData = {
  "Cocos2d::extension::SlotData",
  mrb_no_free_cocos2d_extension_SlotData
};

static struct RClass *
_define_class_cocos2d_extension_SlotData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::SlotData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::SlotData");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "SlotData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::SlotData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::SlotData, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_Timeline(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::Timeline * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_Timeline = {
  "Cocos2d::extension::Timeline",
  mrb_free_cocos2d_extension_Timeline
};

static void
mrb_no_free_cocos2d_extension_Timeline(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_Timeline = {
  "Cocos2d::extension::Timeline",
  mrb_no_free_cocos2d_extension_Timeline
};

static struct RClass *
_define_class_cocos2d_extension_Timeline(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::Timeline") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::Timeline");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "Timeline", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::Timeline");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::Timeline, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_WebSocket(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::WebSocket * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_WebSocket = {
  "Cocos2d::extension::WebSocket",
  mrb_free_cocos2d_extension_WebSocket
};

static void
mrb_no_free_cocos2d_extension_WebSocket(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_WebSocket = {
  "Cocos2d::extension::WebSocket",
  mrb_no_free_cocos2d_extension_WebSocket
};

static struct RClass *
_define_class_cocos2d_extension_WebSocket(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::WebSocket") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::WebSocket");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "WebSocket", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::WebSocket");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::WebSocket, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_WebSocket_Data(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::WebSocket::Data * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension_WebSocket_Data = {
  "Cocos2d::extension::WebSocket::Data",
  mrb_free_cocos2d_extension_WebSocket_Data
};

static void
mrb_no_free_cocos2d_extension_WebSocket_Data(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_WebSocket_Data = {
  "Cocos2d::extension::WebSocket::Data",
  mrb_no_free_cocos2d_extension_WebSocket_Data
};

static struct RClass *
_define_class_cocos2d_extension_WebSocket_Data(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::WebSocket::Data") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::WebSocket::Data");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension::WebSocket");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "Data", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::WebSocket::Data");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::WebSocket::Data, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_WebSocket_Delegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_WebSocket_Delegate = {
  "Cocos2d::extension::WebSocket::Delegate",
  mrb_free_cocos2d_extension_WebSocket_Delegate
};

static struct RClass *
_define_class_cocos2d_extension_WebSocket_Delegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::WebSocket::Delegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::WebSocket::Delegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension::WebSocket");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "Delegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::WebSocket::Delegate");
  return rc;
}

static void
mrb_free_cocos2d_extension_CCMRubyWebSocketDelegate(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::CCMRubyWebSocketDelegate *obj = static_cast< cocos2d::extension::CCMRubyWebSocketDelegate * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_CCMRubyWebSocketDelegate = {
  "Cocos2d::extension::CCMRubyWebSocketDelegate",
  mrb_free_cocos2d_extension_CCMRubyWebSocketDelegate
};

static void
mrb_no_free_cocos2d_extension_CCMRubyWebSocketDelegate(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::CCMRubyWebSocketDelegate *obj = static_cast< cocos2d::extension::CCMRubyWebSocketDelegate * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_CCMRubyWebSocketDelegate = {
  "Cocos2d::extension::CCMRubyWebSocketDelegate",
  mrb_no_free_cocos2d_extension_CCMRubyWebSocketDelegate
};

static struct RClass *
_define_class_cocos2d_extension_CCMRubyWebSocketDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCMRubyWebSocketDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CCMRubyWebSocketDelegate");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMRubyWebSocketDelegate", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CCMRubyWebSocketDelegate");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::CCMRubyWebSocketDelegate, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension__AnimationState(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::_AnimationState * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension__AnimationState = {
  "Cocos2d::extension::_AnimationState",
  mrb_free_cocos2d_extension__AnimationState
};

static void
mrb_no_free_cocos2d_extension__AnimationState(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension__AnimationState = {
  "Cocos2d::extension::_AnimationState",
  mrb_no_free_cocos2d_extension__AnimationState
};

static struct RClass *
_define_class_cocos2d_extension__AnimationState(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CC_AnimationState") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CC_AnimationState");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_AnimationState -> CC_AnimationState\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_AnimationState", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CC_AnimationState");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::_AnimationState, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension__AttachmentTimeline(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::_AttachmentTimeline * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension__AttachmentTimeline = {
  "Cocos2d::extension::_AttachmentTimeline",
  mrb_free_cocos2d_extension__AttachmentTimeline
};

static void
mrb_no_free_cocos2d_extension__AttachmentTimeline(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension__AttachmentTimeline = {
  "Cocos2d::extension::_AttachmentTimeline",
  mrb_no_free_cocos2d_extension__AttachmentTimeline
};

static struct RClass *
_define_class_cocos2d_extension__AttachmentTimeline(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CC_AttachmentTimeline") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CC_AttachmentTimeline");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_AttachmentTimeline -> CC_AttachmentTimeline\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_AttachmentTimeline", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CC_AttachmentTimeline");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::_AttachmentTimeline, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension__ColorTimeline(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::extension::_ColorTimeline * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_extension__ColorTimeline = {
  "Cocos2d::extension::_ColorTimeline",
  mrb_free_cocos2d_extension__ColorTimeline
};

static void
mrb_no_free_cocos2d_extension__ColorTimeline(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension__ColorTimeline = {
  "Cocos2d::extension::_ColorTimeline",
  mrb_no_free_cocos2d_extension__ColorTimeline
};

static struct RClass *
_define_class_cocos2d_extension__ColorTimeline(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CC_ColorTimeline") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::CC_ColorTimeline");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ColorTimeline -> CC_ColorTimeline\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ColorTimeline", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::CC_ColorTimeline");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::_ColorTimeline, rc);
  return rc;
}

static void
mrb_free_cocos2d_extension_ccColor3BWapper(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::extension::ccColor3BWapper *obj = static_cast< cocos2d::extension::ccColor3BWapper * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_extension_ccColor3BWapper = {
  "Cocos2d::extension::ccColor3BWapper",
  mrb_free_cocos2d_extension_ccColor3BWapper
};

static void
mrb_no_free_cocos2d_extension_ccColor3BWapper(mrb_state *mrb, void *ptr)
{
  cocos2d::extension::ccColor3BWapper *obj = static_cast< cocos2d::extension::ccColor3BWapper * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_extension_ccColor3BWapper = {
  "Cocos2d::extension::ccColor3BWapper",
  mrb_no_free_cocos2d_extension_ccColor3BWapper
};

static struct RClass *
_define_class_cocos2d_extension_ccColor3BWapper(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::ccColor3BWapper") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::Extension::ccColor3BWapper");
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "ccColor3BWapper", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::Extension::ccColor3BWapper");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::extension::ccColor3BWapper, rc);
  return rc;
}

static mrb_value
mrb_cocos2d_extension__get_ANIMATION_LOOP_BACK(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ANIMATION_LOOP_BACK;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ANIMATION_LOOP_FRONT(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ANIMATION_LOOP_FRONT;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ANIMATION_MAX(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ANIMATION_MAX;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ANIMATION_NO_LOOP(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ANIMATION_NO_LOOP;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ANIMATION_TO_LOOP_BACK(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ANIMATION_TO_LOOP_BACK;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ANIMATION_TO_LOOP_FRONT(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ANIMATION_TO_LOOP_FRONT;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_ALPHA(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_ALPHA;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_CLAMPTOEDGE(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_CLAMPTOEDGE;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_INTENSITY(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_INTENSITY;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_LINEAR(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_LINEAR;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_LUMINANCE_ALPHA(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_LUMINANCE_ALPHA;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_MIPMAP(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_MIPMAP;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_MIPMAP_LINEAR_LINEAR(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_MIPMAP_LINEAR_LINEAR;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_MIPMAP_LINEAR_NEAREST(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_MIPMAP_LINEAR_NEAREST;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_MIPMAP_NEAREST_LINEAR(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_MIPMAP_NEAREST_LINEAR;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_MIPMAP_NEAREST_NEAREST(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_MIPMAP_NEAREST_NEAREST;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_MIRROREDREPEAT(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_MIRROREDREPEAT;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_NEAREST(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_NEAREST;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_REPEAT(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_REPEAT;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_RGB565(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_RGB565;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_RGB888(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_RGB888;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_RGBA4444(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_RGBA4444;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATLAS_RGBA8888(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATLAS_RGBA8888;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATTACHMENT_REGION(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATTACHMENT_REGION;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_ATTACHMENT_REGION_SEQUENCE(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::ATTACHMENT_REGION_SEQUENCE;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_Animation__get_duration(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Animation *obj_self = static_cast< cocos2d::extension::Animation * >(DATA_PTR(mrb_self));
  float res = obj_self->duration;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Animation__set_duration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float duration;
  if (1 == mrb_get_args(mrb, "f", &duration)) {
    cocos2d::extension::Animation *obj_self = static_cast< cocos2d::extension::Animation * >(DATA_PTR(mrb_self));
    
    obj_self->duration = duration;
    return mrb_float_value(mrb, duration);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Animation#duration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Animation__get_name(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Animation *obj_self = static_cast< cocos2d::extension::Animation * >(DATA_PTR(mrb_self));
  std::string res = obj_self->name;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_Animation__get_timelineCount(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Animation *obj_self = static_cast< cocos2d::extension::Animation * >(DATA_PTR(mrb_self));
  int res = obj_self->timelineCount;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_Animation__set_timelineCount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int timelineCount;
  if (1 == mrb_get_args(mrb, "i", &timelineCount)) {
    cocos2d::extension::Animation *obj_self = static_cast< cocos2d::extension::Animation * >(DATA_PTR(mrb_self));
    
    obj_self->timelineCount = timelineCount;
    return mrb_fixnum_value(timelineCount);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Animation#timelineCount");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Animation__get_timelines(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Animation *obj_self = static_cast< cocos2d::extension::Animation * >(DATA_PTR(mrb_self));
  Timeline ** res = obj_self->timelines;
  return mrb_obj_value(res) /* TODO: handle as array. */ ;
}

static mrb_value
mrb_cocos2d_extension_Animation__set_timelines(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value timelines;
  if (1 == mrb_get_args(mrb, "o", &timelines)) {
    cocos2d::extension::Animation *obj_self = static_cast< cocos2d::extension::Animation * >(DATA_PTR(mrb_self));
    
    obj_self->timelines = static_cast< Timeline ** >(DATA_PTR(timelines));
    return timelines;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Animation#timelines");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Animation_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_Animation;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::Animation * res = new cocos2d::extension::Animation();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Animation#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationStateData__get_skeletonData(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AnimationStateData *obj_self = static_cast< cocos2d::extension::AnimationStateData * >(DATA_PTR(mrb_self));
  cocos2d::extension::SkeletonData * res = obj_self->skeletonData;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::SkeletonData"),
                       &mrb_no_free_type_cocos2d_extension_SkeletonData,
                       res));
}

static mrb_value
mrb_cocos2d_extension_AnimationStateData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_AnimationStateData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::AnimationStateData * res = new cocos2d::extension::AnimationStateData();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationStateData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationStateData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value skeletonData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &skeletonData)) {
      AnimationStateData * res = cocos2d::extension::AnimationStateData_create(static_cast< SkeletonData * >(cc_mrb_data_get_ptr(mrb, skeletonData, &mrb_type_cocos2d_extension_SkeletonData, &mrb_no_free_type_cocos2d_extension_SkeletonData)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::AnimationStateData"),
                       &mrb_type_cocos2d_extension_AnimationStateData,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationStateData_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationStateData_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::AnimationStateData_dispose(static_cast< AnimationStateData * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_AnimationStateData, &mrb_no_free_type_cocos2d_extension_AnimationStateData)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationStateData_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationStateData_getMix(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value from;
    mrb_value to;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &self, &from, &to)) {
      float res = cocos2d::extension::AnimationStateData_getMix(static_cast< AnimationStateData * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_AnimationStateData, &mrb_no_free_type_cocos2d_extension_AnimationStateData)), static_cast< Animation * >(cc_mrb_data_get_ptr(mrb, from, &mrb_type_cocos2d_extension_Animation, &mrb_no_free_type_cocos2d_extension_Animation)), static_cast< Animation * >(cc_mrb_data_get_ptr(mrb, to, &mrb_type_cocos2d_extension_Animation, &mrb_no_free_type_cocos2d_extension_Animation)));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationStateData_getMix");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationStateData_setMix(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value from;
    mrb_value to;
    mrb_float duration;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ooof", &self, &from, &to, &duration)) {
      cocos2d::extension::AnimationStateData_setMix(static_cast< AnimationStateData * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_AnimationStateData, &mrb_no_free_type_cocos2d_extension_AnimationStateData)), static_cast< Animation * >(cc_mrb_data_get_ptr(mrb, from, &mrb_type_cocos2d_extension_Animation, &mrb_no_free_type_cocos2d_extension_Animation)), static_cast< Animation * >(cc_mrb_data_get_ptr(mrb, to, &mrb_type_cocos2d_extension_Animation, &mrb_no_free_type_cocos2d_extension_Animation)), duration);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationStateData_setMix");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationStateData_setMixByName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value fromName;
    mrb_value toName;
    mrb_float duration;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oSSf", &self, &fromName, &toName, &duration)) {
      cocos2d::extension::AnimationStateData_setMixByName(static_cast< AnimationStateData * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_AnimationStateData, &mrb_no_free_type_cocos2d_extension_AnimationStateData)), RSTRING_PTR(fromName), RSTRING_PTR(toName), duration);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationStateData_setMixByName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationState_addAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value animation;
    mrb_int loop;
    mrb_float delay;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ooif", &self, &animation, &loop, &delay)) {
      cocos2d::extension::AnimationState_addAnimation(static_cast< AnimationState * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension__AnimationState, &mrb_no_free_type_cocos2d_extension__AnimationState)), static_cast< Animation * >(cc_mrb_data_get_ptr(mrb, animation, &mrb_type_cocos2d_extension_Animation, &mrb_no_free_type_cocos2d_extension_Animation)), loop, delay);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationState_addAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationState_addAnimationByName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value animationName;
    mrb_int loop;
    mrb_float delay;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oSif", &self, &animationName, &loop, &delay)) {
      cocos2d::extension::AnimationState_addAnimationByName(static_cast< AnimationState * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension__AnimationState, &mrb_no_free_type_cocos2d_extension__AnimationState)), RSTRING_PTR(animationName), loop, delay);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationState_addAnimationByName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationState_apply(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value skeleton;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &self, &skeleton)) {
      cocos2d::extension::AnimationState_apply(static_cast< AnimationState * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension__AnimationState, &mrb_no_free_type_cocos2d_extension__AnimationState)), static_cast< struct Skeleton * >(cc_mrb_data_get_ptr(mrb, skeleton, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationState_apply");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationState_clearAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::AnimationState_clearAnimation(static_cast< AnimationState * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension__AnimationState, &mrb_no_free_type_cocos2d_extension__AnimationState)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationState_clearAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationState_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value data;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &data)) {
      AnimationState * res = cocos2d::extension::AnimationState_create(static_cast< AnimationStateData * >(cc_mrb_data_get_ptr(mrb, data, &mrb_type_cocos2d_extension_AnimationStateData, &mrb_no_free_type_cocos2d_extension_AnimationStateData)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CC_AnimationState"),
                       &mrb_type_cocos2d_extension__AnimationState,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationState_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationState_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::AnimationState_dispose(static_cast< AnimationState * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension__AnimationState, &mrb_no_free_type_cocos2d_extension__AnimationState)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationState_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationState_isComplete(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      int res = cocos2d::extension::AnimationState_isComplete(static_cast< AnimationState * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension__AnimationState, &mrb_no_free_type_cocos2d_extension__AnimationState)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationState_isComplete");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationState_setAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value animation;
    mrb_int loop;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooi", &self, &animation, &loop)) {
      cocos2d::extension::AnimationState_setAnimation(static_cast< AnimationState * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension__AnimationState, &mrb_no_free_type_cocos2d_extension__AnimationState)), static_cast< Animation * >(cc_mrb_data_get_ptr(mrb, animation, &mrb_type_cocos2d_extension_Animation, &mrb_no_free_type_cocos2d_extension_Animation)), loop);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationState_setAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationState_setAnimationByName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value animationName;
    mrb_int loop;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oSi", &self, &animationName, &loop)) {
      cocos2d::extension::AnimationState_setAnimationByName(static_cast< AnimationState * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension__AnimationState, &mrb_no_free_type_cocos2d_extension__AnimationState)), RSTRING_PTR(animationName), loop);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationState_setAnimationByName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AnimationState_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_float delta;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &self, &delta)) {
      cocos2d::extension::AnimationState_update(static_cast< AnimationState * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension__AnimationState, &mrb_no_free_type_cocos2d_extension__AnimationState)), delta);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AnimationState_update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Animation_apply(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value skeleton;
    mrb_float time;
    mrb_int loop;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oofi", &self, &skeleton, &time, &loop)) {
      cocos2d::extension::Animation_apply(static_cast< Animation * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Animation, &mrb_no_free_type_cocos2d_extension_Animation)), static_cast< struct Skeleton * >(cc_mrb_data_get_ptr(mrb, skeleton, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)), time, loop);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Animation_apply");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Animation_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    mrb_int timelineCount;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &name, &timelineCount)) {
      Animation * res = cocos2d::extension::Animation_create(RSTRING_PTR(name), timelineCount);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Animation"),
                       &mrb_type_cocos2d_extension_Animation,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Animation_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Animation_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::Animation_dispose(static_cast< Animation * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Animation, &mrb_no_free_type_cocos2d_extension_Animation)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Animation_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Animation_mix(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value skeleton;
    mrb_float time;
    mrb_int loop;
    mrb_float alpha;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "oofif", &self, &skeleton, &time, &loop, &alpha)) {
      cocos2d::extension::Animation_mix(static_cast< Animation * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Animation, &mrb_no_free_type_cocos2d_extension_Animation)), static_cast< struct Skeleton * >(cc_mrb_data_get_ptr(mrb, skeleton, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)), time, loop, alpha);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Animation_mix");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Atlas__get_pages(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Atlas *obj_self = static_cast< cocos2d::extension::Atlas * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::AtlasPage * res = obj_self->pages;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::AtlasPage"),
                       &mrb_no_free_type_cocos2d_extension_AtlasPage,
                       res));
}

static mrb_value
mrb_cocos2d_extension_Atlas__set_pages(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value pages;
  if (1 == mrb_get_args(mrb, "o", &pages)) {
    cocos2d::extension::Atlas *obj_self = static_cast< cocos2d::extension::Atlas * >(DATA_PTR(mrb_self));
    
    obj_self->pages = static_cast< struct cocos2d::extension::AtlasPage * >(cc_mrb_data_get_ptr(mrb, pages, &mrb_type_cocos2d_extension_AtlasPage, &mrb_no_free_type_cocos2d_extension_AtlasPage));
    return pages;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Atlas#pages");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Atlas__get_regions(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Atlas *obj_self = static_cast< cocos2d::extension::Atlas * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::AtlasRegion * res = obj_self->regions;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::AtlasRegion"),
                       &mrb_no_free_type_cocos2d_extension_AtlasRegion,
                       res));
}

static mrb_value
mrb_cocos2d_extension_Atlas__set_regions(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value regions;
  if (1 == mrb_get_args(mrb, "o", &regions)) {
    cocos2d::extension::Atlas *obj_self = static_cast< cocos2d::extension::Atlas * >(DATA_PTR(mrb_self));
    
    obj_self->regions = static_cast< struct cocos2d::extension::AtlasRegion * >(cc_mrb_data_get_ptr(mrb, regions, &mrb_type_cocos2d_extension_AtlasRegion, &mrb_no_free_type_cocos2d_extension_AtlasRegion));
    return regions;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Atlas#regions");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Atlas_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_Atlas;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::Atlas * res = new cocos2d::extension::Atlas();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Atlas#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasAttachmentLoader__get_atlas(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasAttachmentLoader *obj_self = static_cast< cocos2d::extension::AtlasAttachmentLoader * >(DATA_PTR(mrb_self));
  cocos2d::extension::Atlas * res = obj_self->atlas;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Atlas"),
                       &mrb_no_free_type_cocos2d_extension_Atlas,
                       res));
}

static mrb_value
mrb_cocos2d_extension_AtlasAttachmentLoader__set_atlas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value atlas;
  if (1 == mrb_get_args(mrb, "o", &atlas)) {
    cocos2d::extension::AtlasAttachmentLoader *obj_self = static_cast< cocos2d::extension::AtlasAttachmentLoader * >(DATA_PTR(mrb_self));
    
    obj_self->atlas = static_cast< cocos2d::extension::Atlas * >(cc_mrb_data_get_ptr(mrb, atlas, &mrb_type_cocos2d_extension_Atlas, &mrb_no_free_type_cocos2d_extension_Atlas));
    return atlas;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasAttachmentLoader#atlas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasAttachmentLoader__get_super(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasAttachmentLoader *obj_self = static_cast< cocos2d::extension::AtlasAttachmentLoader * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::AttachmentLoader *res = &obj_self->super;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::AttachmentLoader"),
                       &mrb_no_free_type_cocos2d_extension_AttachmentLoader,
                       res));
}

static mrb_value
mrb_cocos2d_extension_AtlasAttachmentLoader__set_super(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value super;
  if (1 == mrb_get_args(mrb, "o", &super)) {
    cocos2d::extension::AtlasAttachmentLoader *obj_self = static_cast< cocos2d::extension::AtlasAttachmentLoader * >(DATA_PTR(mrb_self));
    
    obj_self->super = *(static_cast< struct cocos2d::extension::AttachmentLoader * >(cc_mrb_data_get_ptr(mrb, super, &mrb_type_cocos2d_extension_AttachmentLoader, &mrb_no_free_type_cocos2d_extension_AttachmentLoader)));
    return super;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasAttachmentLoader#super");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasAttachmentLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_AtlasAttachmentLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::AtlasAttachmentLoader * res = new cocos2d::extension::AtlasAttachmentLoader();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasAttachmentLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasAttachmentLoader_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value atlas;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &atlas)) {
      AtlasAttachmentLoader * res = cocos2d::extension::AtlasAttachmentLoader_create(static_cast< Atlas * >(cc_mrb_data_get_ptr(mrb, atlas, &mrb_type_cocos2d_extension_Atlas, &mrb_no_free_type_cocos2d_extension_Atlas)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::AtlasAttachmentLoader"),
                       &mrb_type_cocos2d_extension_AtlasAttachmentLoader,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasAttachmentLoader_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__get_format(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
  cocos2d::extension::AtlasFormat res = obj_self->format;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__set_format(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int format;
  if (1 == mrb_get_args(mrb, "i", &format)) {
    cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
    
    obj_self->format = (cocos2d::extension::AtlasFormat)format;
    return mrb_fixnum_value(format);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasPage#format");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__get_height(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
  int res = obj_self->height;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__set_height(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int height;
  if (1 == mrb_get_args(mrb, "i", &height)) {
    cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
    
    obj_self->height = height;
    return mrb_fixnum_value(height);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasPage#height");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__get_magFilter(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
  cocos2d::extension::AtlasFilter res = obj_self->magFilter;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__set_magFilter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int magFilter;
  if (1 == mrb_get_args(mrb, "i", &magFilter)) {
    cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
    
    obj_self->magFilter = (cocos2d::extension::AtlasFilter)magFilter;
    return mrb_fixnum_value(magFilter);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasPage#magFilter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__get_minFilter(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
  cocos2d::extension::AtlasFilter res = obj_self->minFilter;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__set_minFilter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int minFilter;
  if (1 == mrb_get_args(mrb, "i", &minFilter)) {
    cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
    
    obj_self->minFilter = (cocos2d::extension::AtlasFilter)minFilter;
    return mrb_fixnum_value(minFilter);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasPage#minFilter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__get_name(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
  std::string res = obj_self->name;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__set_name(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value name;
  if (1 == mrb_get_args(mrb, "S", &name)) {
    cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
    
    obj_self->name = RSTRING_PTR(name);
    return name;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasPage#name");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__get_next(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::AtlasPage * res = obj_self->next;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::AtlasPage"),
                       &mrb_no_free_type_cocos2d_extension_AtlasPage,
                       res));
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__set_next(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value next;
  if (1 == mrb_get_args(mrb, "o", &next)) {
    cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
    
    obj_self->next = static_cast< struct cocos2d::extension::AtlasPage * >(cc_mrb_data_get_ptr(mrb, next, &mrb_type_cocos2d_extension_AtlasPage, &mrb_no_free_type_cocos2d_extension_AtlasPage));
    return next;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasPage#next");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__get_uWrap(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
  cocos2d::extension::AtlasWrap res = obj_self->uWrap;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__set_uWrap(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int uWrap;
  if (1 == mrb_get_args(mrb, "i", &uWrap)) {
    cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
    
    obj_self->uWrap = (cocos2d::extension::AtlasWrap)uWrap;
    return mrb_fixnum_value(uWrap);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasPage#uWrap");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__get_vWrap(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
  cocos2d::extension::AtlasWrap res = obj_self->vWrap;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__set_vWrap(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int vWrap;
  if (1 == mrb_get_args(mrb, "i", &vWrap)) {
    cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
    
    obj_self->vWrap = (cocos2d::extension::AtlasWrap)vWrap;
    return mrb_fixnum_value(vWrap);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasPage#vWrap");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__get_width(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
  int res = obj_self->width;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasPage__set_width(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int width;
  if (1 == mrb_get_args(mrb, "i", &width)) {
    cocos2d::extension::AtlasPage *obj_self = static_cast< cocos2d::extension::AtlasPage * >(DATA_PTR(mrb_self));
    
    obj_self->width = width;
    return mrb_fixnum_value(width);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasPage#width");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasPage_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_AtlasPage;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::AtlasPage * res = new cocos2d::extension::AtlasPage();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasPage#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasPage_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      struct cocos2d::extension::AtlasPage * res = cocos2d::extension::AtlasPage_create(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::AtlasPage"),
                       &mrb_type_cocos2d_extension_AtlasPage,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasPage_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasPage_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::AtlasPage_dispose(static_cast< struct cocos2d::extension::AtlasPage * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_AtlasPage, &mrb_no_free_type_cocos2d_extension_AtlasPage)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasPage_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_flip(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  int res = obj_self->flip;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_flip(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int flip;
  if (1 == mrb_get_args(mrb, "i", &flip)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->flip = flip;
    return mrb_fixnum_value(flip);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#flip");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_height(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  int res = obj_self->height;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_height(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int height;
  if (1 == mrb_get_args(mrb, "i", &height)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->height = height;
    return mrb_fixnum_value(height);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#height");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_index(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  int res = obj_self->index;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_index(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int index;
  if (1 == mrb_get_args(mrb, "i", &index)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->index = index;
    return mrb_fixnum_value(index);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#index");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_name(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  std::string res = obj_self->name;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_name(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value name;
  if (1 == mrb_get_args(mrb, "S", &name)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->name = RSTRING_PTR(name);
    return name;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#name");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_next(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::AtlasRegion * res = obj_self->next;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::AtlasRegion"),
                       &mrb_no_free_type_cocos2d_extension_AtlasRegion,
                       res));
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_next(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value next;
  if (1 == mrb_get_args(mrb, "o", &next)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->next = static_cast< struct cocos2d::extension::AtlasRegion * >(cc_mrb_data_get_ptr(mrb, next, &mrb_type_cocos2d_extension_AtlasRegion, &mrb_no_free_type_cocos2d_extension_AtlasRegion));
    return next;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#next");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_offsetX(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  int res = obj_self->offsetX;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_offsetX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int offsetX;
  if (1 == mrb_get_args(mrb, "i", &offsetX)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->offsetX = offsetX;
    return mrb_fixnum_value(offsetX);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#offsetX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_offsetY(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  int res = obj_self->offsetY;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_offsetY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int offsetY;
  if (1 == mrb_get_args(mrb, "i", &offsetY)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->offsetY = offsetY;
    return mrb_fixnum_value(offsetY);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#offsetY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_originalHeight(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  int res = obj_self->originalHeight;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_originalHeight(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int originalHeight;
  if (1 == mrb_get_args(mrb, "i", &originalHeight)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->originalHeight = originalHeight;
    return mrb_fixnum_value(originalHeight);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#originalHeight");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_originalWidth(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  int res = obj_self->originalWidth;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_originalWidth(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int originalWidth;
  if (1 == mrb_get_args(mrb, "i", &originalWidth)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->originalWidth = originalWidth;
    return mrb_fixnum_value(originalWidth);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#originalWidth");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_pads(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  int *res = obj_self->pads;
  return cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 1), reinterpret_cast< int * >(res), 1);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_pads(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value pads;
  if (1 == mrb_get_args(mrb, "A", &pads)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    cc_mrb_ary_conv_to_c_array(mrb, pads, reinterpret_cast< int * >(obj_self->pads), 1);
    return pads;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#pads");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_page(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::AtlasPage * res = obj_self->page;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::AtlasPage"),
                       &mrb_no_free_type_cocos2d_extension_AtlasPage,
                       res));
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_page(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value page;
  if (1 == mrb_get_args(mrb, "o", &page)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->page = static_cast< struct cocos2d::extension::AtlasPage * >(cc_mrb_data_get_ptr(mrb, page, &mrb_type_cocos2d_extension_AtlasPage, &mrb_no_free_type_cocos2d_extension_AtlasPage));
    return page;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#page");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_rotate(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  int res = obj_self->rotate;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_rotate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int rotate;
  if (1 == mrb_get_args(mrb, "i", &rotate)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->rotate = rotate;
    return mrb_fixnum_value(rotate);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#rotate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_splits(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  int *res = obj_self->splits;
  return cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 1), reinterpret_cast< int * >(res), 1);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_splits(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value splits;
  if (1 == mrb_get_args(mrb, "A", &splits)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    cc_mrb_ary_conv_to_c_array(mrb, splits, reinterpret_cast< int * >(obj_self->splits), 1);
    return splits;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#splits");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_u(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  float res = obj_self->u;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_u(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float u;
  if (1 == mrb_get_args(mrb, "f", &u)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->u = u;
    return mrb_float_value(mrb, u);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#u");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_u2(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  float res = obj_self->u2;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_u2(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float u2;
  if (1 == mrb_get_args(mrb, "f", &u2)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->u2 = u2;
    return mrb_float_value(mrb, u2);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#u2");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_v(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  float res = obj_self->v;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_v(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float v;
  if (1 == mrb_get_args(mrb, "f", &v)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->v = v;
    return mrb_float_value(mrb, v);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#v");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_v2(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  float res = obj_self->v2;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_v2(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float v2;
  if (1 == mrb_get_args(mrb, "f", &v2)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->v2 = v2;
    return mrb_float_value(mrb, v2);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#v2");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_width(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  int res = obj_self->width;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_width(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int width;
  if (1 == mrb_get_args(mrb, "i", &width)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->width = width;
    return mrb_fixnum_value(width);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#width");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_x(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  int res = obj_self->x;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_x(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int x;
  if (1 == mrb_get_args(mrb, "i", &x)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->x = x;
    return mrb_fixnum_value(x);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#x");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__get_y(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
  int res = obj_self->y;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion__set_y(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int y;
  if (1 == mrb_get_args(mrb, "i", &y)) {
    cocos2d::extension::AtlasRegion *obj_self = static_cast< cocos2d::extension::AtlasRegion * >(DATA_PTR(mrb_self));
    
    obj_self->y = y;
    return mrb_fixnum_value(y);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#y");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_AtlasRegion;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::AtlasRegion * res = new cocos2d::extension::AtlasRegion();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      struct cocos2d::extension::AtlasRegion * res = cocos2d::extension::AtlasRegion_create();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::AtlasRegion"),
                       &mrb_type_cocos2d_extension_AtlasRegion,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AtlasRegion_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::AtlasRegion_dispose(static_cast< struct cocos2d::extension::AtlasRegion * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_AtlasRegion, &mrb_no_free_type_cocos2d_extension_AtlasRegion)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AtlasRegion_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Atlas_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value atlas;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &atlas)) {
      cocos2d::extension::Atlas_dispose(static_cast< Atlas * >(cc_mrb_data_get_ptr(mrb, atlas, &mrb_type_cocos2d_extension_Atlas, &mrb_no_free_type_cocos2d_extension_Atlas)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Atlas_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Atlas_findRegion(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value name;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &self, &name)) {
      struct cocos2d::extension::AtlasRegion * res = cocos2d::extension::Atlas_findRegion(static_cast< Atlas * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Atlas, &mrb_no_free_type_cocos2d_extension_Atlas)), RSTRING_PTR(name));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::AtlasRegion"),
                       &mrb_type_cocos2d_extension_AtlasRegion,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Atlas_findRegion");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Atlas_readAtlas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value data;
    mrb_int length;
    mrb_value dir;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SiS", &data, &length, &dir)) {
      Atlas * res = cocos2d::extension::Atlas_readAtlas(RSTRING_PTR(data), length, RSTRING_PTR(dir));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Atlas"),
                       &mrb_type_cocos2d_extension_Atlas,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Atlas_readAtlas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Atlas_readAtlasFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value path;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &path)) {
      Atlas * res = cocos2d::extension::Atlas_readAtlasFile(RSTRING_PTR(path));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Atlas"),
                       &mrb_type_cocos2d_extension_Atlas,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Atlas_readAtlasFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Attachment_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_Attachment;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::Attachment * res = new cocos2d::extension::Attachment();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Attachment#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Attachment__get_name(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Attachment *obj_self = static_cast< cocos2d::extension::Attachment * >(DATA_PTR(mrb_self));
  std::string res = obj_self->name;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_Attachment_assign(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::extension::Attachment *obj_self = static_cast< cocos2d::extension::Attachment * >(DATA_PTR(mrb_self));
      struct Attachment *res = new struct Attachment(); *res = obj_self->operator=(*(static_cast< struct Attachment * >(DATA_PTR(other))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Attachment"),
                       &mrb_type_cocos2d_extension_Attachment,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Attachment#operator=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Attachment__get_type(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Attachment *obj_self = static_cast< cocos2d::extension::Attachment * >(DATA_PTR(mrb_self));
  cocos2d::extension::AttachmentType res = obj_self->type;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_Attachment__set_type(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int type;
  if (1 == mrb_get_args(mrb, "i", &type)) {
    cocos2d::extension::Attachment *obj_self = static_cast< cocos2d::extension::Attachment * >(DATA_PTR(mrb_self));
    
    obj_self->type = (cocos2d::extension::AttachmentType)type;
    return mrb_fixnum_value(type);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Attachment#type");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AttachmentLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_AttachmentLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::AttachmentLoader * res = new cocos2d::extension::AttachmentLoader();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AttachmentLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AttachmentLoader__get_error1(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AttachmentLoader *obj_self = static_cast< cocos2d::extension::AttachmentLoader * >(DATA_PTR(mrb_self));
  std::string res = obj_self->error1;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_AttachmentLoader__set_error1(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value error1;
  if (1 == mrb_get_args(mrb, "S", &error1)) {
    cocos2d::extension::AttachmentLoader *obj_self = static_cast< cocos2d::extension::AttachmentLoader * >(DATA_PTR(mrb_self));
    
    obj_self->error1 = RSTRING_PTR(error1);
    return error1;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AttachmentLoader#error1");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AttachmentLoader__get_error2(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::AttachmentLoader *obj_self = static_cast< cocos2d::extension::AttachmentLoader * >(DATA_PTR(mrb_self));
  std::string res = obj_self->error2;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_AttachmentLoader__set_error2(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value error2;
  if (1 == mrb_get_args(mrb, "S", &error2)) {
    cocos2d::extension::AttachmentLoader *obj_self = static_cast< cocos2d::extension::AttachmentLoader * >(DATA_PTR(mrb_self));
    
    obj_self->error2 = RSTRING_PTR(error2);
    return error2;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AttachmentLoader#error2");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AttachmentLoader_assign(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::extension::AttachmentLoader *obj_self = static_cast< cocos2d::extension::AttachmentLoader * >(DATA_PTR(mrb_self));
      struct AttachmentLoader *res = new struct AttachmentLoader(); *res = obj_self->operator=(*(static_cast< struct AttachmentLoader * >(DATA_PTR(other))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::AttachmentLoader"),
                       &mrb_type_cocos2d_extension_AttachmentLoader,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AttachmentLoader#operator=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AttachmentLoader_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::AttachmentLoader_dispose(static_cast< struct cocos2d::extension::AttachmentLoader * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_AttachmentLoader, &mrb_no_free_type_cocos2d_extension_AttachmentLoader)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AttachmentLoader_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AttachmentLoader_newAttachment(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value skin;
    mrb_int type;
    mrb_value name;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ooiS", &self, &skin, &type, &name)) {
      Attachment * res = cocos2d::extension::AttachmentLoader_newAttachment(static_cast< struct cocos2d::extension::AttachmentLoader * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_AttachmentLoader, &mrb_no_free_type_cocos2d_extension_AttachmentLoader)), static_cast< Skin * >(cc_mrb_data_get_ptr(mrb, skin, &mrb_type_cocos2d_extension_Skin, &mrb_no_free_type_cocos2d_extension_Skin)), (AttachmentType)type, RSTRING_PTR(name));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Attachment"),
                       &mrb_type_cocos2d_extension_Attachment,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AttachmentLoader_newAttachment");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AttachmentTimeline_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int frameCount;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &frameCount)) {
      AttachmentTimeline * res = cocos2d::extension::AttachmentTimeline_create(frameCount);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CC_AttachmentTimeline"),
                       &mrb_type_cocos2d_extension__AttachmentTimeline,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AttachmentTimeline_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_AttachmentTimeline_setFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_int frameIndex;
    mrb_float time;
    mrb_value attachmentName;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oifS", &self, &frameIndex, &time, &attachmentName)) {
      cocos2d::extension::AttachmentTimeline_setFrame(static_cast< AttachmentTimeline * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension__AttachmentTimeline, &mrb_no_free_type_cocos2d_extension__AttachmentTimeline)), frameIndex, time, RSTRING_PTR(attachmentName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::AttachmentTimeline_setFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Attachment_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::Attachment_dispose(static_cast< struct cocos2d::extension::Attachment * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Attachment, &mrb_no_free_type_cocos2d_extension_Attachment)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Attachment_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__get_Back_EaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Back_EaseIn;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Back_EaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Back_EaseInOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Back_EaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Back_EaseOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_BaseTimeline_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_BaseTimeline;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::BaseTimeline * res = new cocos2d::extension::BaseTimeline();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BaseTimeline#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BaseTimeline__get_boneIndex(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::BaseTimeline *obj_self = static_cast< cocos2d::extension::BaseTimeline * >(DATA_PTR(mrb_self));
  int res = obj_self->boneIndex;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_BaseTimeline__set_boneIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int boneIndex;
  if (1 == mrb_get_args(mrb, "i", &boneIndex)) {
    cocos2d::extension::BaseTimeline *obj_self = static_cast< cocos2d::extension::BaseTimeline * >(DATA_PTR(mrb_self));
    
    obj_self->boneIndex = boneIndex;
    return mrb_fixnum_value(boneIndex);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BaseTimeline#boneIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BaseTimeline__get_frames(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::BaseTimeline *obj_self = static_cast< cocos2d::extension::BaseTimeline * >(DATA_PTR(mrb_self));
  float *res = obj_self->frames;
  return cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 1), reinterpret_cast< float * >(res), 1);
}

static mrb_value
mrb_cocos2d_extension_BaseTimeline__get_framesLength(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::BaseTimeline *obj_self = static_cast< cocos2d::extension::BaseTimeline * >(DATA_PTR(mrb_self));
  int res = obj_self->framesLength;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_BaseTimeline_assign(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::extension::BaseTimeline *obj_self = static_cast< cocos2d::extension::BaseTimeline * >(DATA_PTR(mrb_self));
      struct BaseTimeline *res = new struct BaseTimeline(); *res = obj_self->operator=(*(static_cast< struct BaseTimeline * >(DATA_PTR(other))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::BaseTimeline"),
                       &mrb_type_cocos2d_extension_BaseTimeline,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BaseTimeline#operator=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BaseTimeline__get_super(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::BaseTimeline *obj_self = static_cast< cocos2d::extension::BaseTimeline * >(DATA_PTR(mrb_self));
  cocos2d::extension::CurveTimeline *res = &obj_self->super;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CurveTimeline"),
                       &mrb_no_free_type_cocos2d_extension_CurveTimeline,
                       res));
}

static mrb_value
mrb_cocos2d_extension_BaseTimeline__set_super(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value super;
  if (1 == mrb_get_args(mrb, "o", &super)) {
    cocos2d::extension::BaseTimeline *obj_self = static_cast< cocos2d::extension::BaseTimeline * >(DATA_PTR(mrb_self));
    
    obj_self->super = *(static_cast< cocos2d::extension::CurveTimeline * >(cc_mrb_data_get_ptr(mrb, super, &mrb_type_cocos2d_extension_CurveTimeline, &mrb_no_free_type_cocos2d_extension_CurveTimeline)));
    return super;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BaseTimeline#super");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BlockCCControlData__get_mControlEvents(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::BlockCCControlData *obj_self = static_cast< cocos2d::extension::BlockCCControlData * >(DATA_PTR(mrb_self));
  int res = obj_self->mControlEvents;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_BlockCCControlData__set_mControlEvents(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int mControlEvents;
  if (1 == mrb_get_args(mrb, "i", &mControlEvents)) {
    cocos2d::extension::BlockCCControlData *obj_self = static_cast< cocos2d::extension::BlockCCControlData * >(DATA_PTR(mrb_self));
    
    obj_self->mControlEvents = mControlEvents;
    return mrb_fixnum_value(mControlEvents);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BlockCCControlData#mControlEvents");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BlockCCControlData__get_mTarget(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::BlockCCControlData *obj_self = static_cast< cocos2d::extension::BlockCCControlData * >(DATA_PTR(mrb_self));
  class cocos2d::CCObject * res = obj_self->mTarget;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCObject"),
                       &mrb_type_cocos2d_CCObject,
                       res));
}

static mrb_value
mrb_cocos2d_extension_BlockCCControlData__set_mTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value mTarget;
  if (1 == mrb_get_args(mrb, "o", &mTarget)) {
    static_cast< cocos2d::CCObject * >(DATA_PTR(mTarget))->retain();
    cocos2d::extension::BlockCCControlData *obj_self = static_cast< cocos2d::extension::BlockCCControlData * >(DATA_PTR(mrb_self));
    if (obj_self->mTarget) { obj_self->mTarget->release(); }
    obj_self->mTarget = static_cast< cocos2d::CCObject * >(DATA_PTR(mTarget));
    return mTarget;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BlockCCControlData#mTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BlockCCControlData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_BlockCCControlData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::BlockCCControlData * res = new cocos2d::extension::BlockCCControlData();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BlockCCControlData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BlockData__get_mTarget(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::BlockData *obj_self = static_cast< cocos2d::extension::BlockData * >(DATA_PTR(mrb_self));
  class cocos2d::CCObject * res = obj_self->mTarget;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCObject"),
                       &mrb_type_cocos2d_CCObject,
                       res));
}

static mrb_value
mrb_cocos2d_extension_BlockData__set_mTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value mTarget;
  if (1 == mrb_get_args(mrb, "o", &mTarget)) {
    static_cast< cocos2d::CCObject * >(DATA_PTR(mTarget))->retain();
    cocos2d::extension::BlockData *obj_self = static_cast< cocos2d::extension::BlockData * >(DATA_PTR(mrb_self));
    if (obj_self->mTarget) { obj_self->mTarget->release(); }
    obj_self->mTarget = static_cast< cocos2d::CCObject * >(DATA_PTR(mTarget));
    return mTarget;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BlockData#mTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BlockData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_BlockData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::BlockData * res = new cocos2d::extension::BlockData();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BlockData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Bone__get_data(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::BoneData * res = obj_self->data;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::BoneData"),
                       &mrb_no_free_type_cocos2d_extension_BoneData,
                       res));
}

static mrb_value
mrb_cocos2d_extension_Bone__get_m00(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  float res = obj_self->m00;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Bone__get_m01(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  float res = obj_self->m01;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Bone__get_m10(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  float res = obj_self->m10;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Bone__get_m11(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  float res = obj_self->m11;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Bone__get_parent(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::Bone * res = obj_self->parent;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Bone"),
                       &mrb_no_free_type_cocos2d_extension_Bone,
                       res));
}

static mrb_value
mrb_cocos2d_extension_Bone__get_rotation(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  float res = obj_self->rotation;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Bone__set_rotation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float rotation;
  if (1 == mrb_get_args(mrb, "f", &rotation)) {
    cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
    
    obj_self->rotation = rotation;
    return mrb_float_value(mrb, rotation);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Bone#rotation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Bone__get_scaleX(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  float res = obj_self->scaleX;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Bone__set_scaleX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float scaleX;
  if (1 == mrb_get_args(mrb, "f", &scaleX)) {
    cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
    
    obj_self->scaleX = scaleX;
    return mrb_float_value(mrb, scaleX);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Bone#scaleX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Bone__get_scaleY(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  float res = obj_self->scaleY;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Bone__set_scaleY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float scaleY;
  if (1 == mrb_get_args(mrb, "f", &scaleY)) {
    cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
    
    obj_self->scaleY = scaleY;
    return mrb_float_value(mrb, scaleY);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Bone#scaleY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Bone__get_worldRotation(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  float res = obj_self->worldRotation;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Bone__get_worldScaleX(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  float res = obj_self->worldScaleX;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Bone__get_worldScaleY(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  float res = obj_self->worldScaleY;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Bone__get_worldX(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  float res = obj_self->worldX;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Bone__get_worldY(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  float res = obj_self->worldY;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Bone__get_x(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  float res = obj_self->x;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Bone__set_x(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float x;
  if (1 == mrb_get_args(mrb, "f", &x)) {
    cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
    
    obj_self->x = x;
    return mrb_float_value(mrb, x);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Bone#x");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Bone__get_y(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
  float res = obj_self->y;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Bone__set_y(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float y;
  if (1 == mrb_get_args(mrb, "f", &y)) {
    cocos2d::extension::Bone *obj_self = static_cast< cocos2d::extension::Bone * >(DATA_PTR(mrb_self));
    
    obj_self->y = y;
    return mrb_float_value(mrb, y);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Bone#y");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Bone_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_Bone;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::Bone * res = new cocos2d::extension::Bone();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Bone#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BoneData__get_length(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::BoneData *obj_self = static_cast< cocos2d::extension::BoneData * >(DATA_PTR(mrb_self));
  float res = obj_self->length;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_BoneData__set_length(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float length;
  if (1 == mrb_get_args(mrb, "f", &length)) {
    cocos2d::extension::BoneData *obj_self = static_cast< cocos2d::extension::BoneData * >(DATA_PTR(mrb_self));
    
    obj_self->length = length;
    return mrb_float_value(mrb, length);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BoneData#length");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BoneData__get_name(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::BoneData *obj_self = static_cast< cocos2d::extension::BoneData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->name;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_BoneData__get_parent(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::BoneData *obj_self = static_cast< cocos2d::extension::BoneData * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::BoneData * res = obj_self->parent;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::BoneData"),
                       &mrb_no_free_type_cocos2d_extension_BoneData,
                       res));
}

static mrb_value
mrb_cocos2d_extension_BoneData__get_rotation(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::BoneData *obj_self = static_cast< cocos2d::extension::BoneData * >(DATA_PTR(mrb_self));
  float res = obj_self->rotation;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_BoneData__set_rotation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float rotation;
  if (1 == mrb_get_args(mrb, "f", &rotation)) {
    cocos2d::extension::BoneData *obj_self = static_cast< cocos2d::extension::BoneData * >(DATA_PTR(mrb_self));
    
    obj_self->rotation = rotation;
    return mrb_float_value(mrb, rotation);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BoneData#rotation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BoneData__get_scaleX(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::BoneData *obj_self = static_cast< cocos2d::extension::BoneData * >(DATA_PTR(mrb_self));
  float res = obj_self->scaleX;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_BoneData__set_scaleX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float scaleX;
  if (1 == mrb_get_args(mrb, "f", &scaleX)) {
    cocos2d::extension::BoneData *obj_self = static_cast< cocos2d::extension::BoneData * >(DATA_PTR(mrb_self));
    
    obj_self->scaleX = scaleX;
    return mrb_float_value(mrb, scaleX);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BoneData#scaleX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BoneData__get_scaleY(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::BoneData *obj_self = static_cast< cocos2d::extension::BoneData * >(DATA_PTR(mrb_self));
  float res = obj_self->scaleY;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_BoneData__set_scaleY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float scaleY;
  if (1 == mrb_get_args(mrb, "f", &scaleY)) {
    cocos2d::extension::BoneData *obj_self = static_cast< cocos2d::extension::BoneData * >(DATA_PTR(mrb_self));
    
    obj_self->scaleY = scaleY;
    return mrb_float_value(mrb, scaleY);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BoneData#scaleY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BoneData__get_x(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::BoneData *obj_self = static_cast< cocos2d::extension::BoneData * >(DATA_PTR(mrb_self));
  float res = obj_self->x;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_BoneData__set_x(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float x;
  if (1 == mrb_get_args(mrb, "f", &x)) {
    cocos2d::extension::BoneData *obj_self = static_cast< cocos2d::extension::BoneData * >(DATA_PTR(mrb_self));
    
    obj_self->x = x;
    return mrb_float_value(mrb, x);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BoneData#x");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BoneData__get_y(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::BoneData *obj_self = static_cast< cocos2d::extension::BoneData * >(DATA_PTR(mrb_self));
  float res = obj_self->y;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_BoneData__set_y(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float y;
  if (1 == mrb_get_args(mrb, "f", &y)) {
    cocos2d::extension::BoneData *obj_self = static_cast< cocos2d::extension::BoneData * >(DATA_PTR(mrb_self));
    
    obj_self->y = y;
    return mrb_float_value(mrb, y);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BoneData#y");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BoneData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_BoneData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::BoneData * res = new cocos2d::extension::BoneData();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BoneData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BoneData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    mrb_value parent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &name, &parent)) {
      struct cocos2d::extension::BoneData * res = cocos2d::extension::BoneData_create(RSTRING_PTR(name), static_cast< struct cocos2d::extension::BoneData * >(cc_mrb_data_get_ptr(mrb, parent, &mrb_type_cocos2d_extension_BoneData, &mrb_no_free_type_cocos2d_extension_BoneData)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::BoneData"),
                       &mrb_type_cocos2d_extension_BoneData,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BoneData_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_BoneData_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::BoneData_dispose(static_cast< struct cocos2d::extension::BoneData * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_BoneData, &mrb_no_free_type_cocos2d_extension_BoneData)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::BoneData_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Bone_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value data;
    mrb_value parent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &data, &parent)) {
      struct cocos2d::extension::Bone * res = cocos2d::extension::Bone_create(static_cast< BoneData * >(cc_mrb_data_get_ptr(mrb, data, &mrb_type_cocos2d_extension_BoneData, &mrb_no_free_type_cocos2d_extension_BoneData)), static_cast< struct cocos2d::extension::Bone * >(cc_mrb_data_get_ptr(mrb, parent, &mrb_type_cocos2d_extension_Bone, &mrb_no_free_type_cocos2d_extension_Bone)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Bone"),
                       &mrb_type_cocos2d_extension_Bone,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Bone_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Bone_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::Bone_dispose(static_cast< struct cocos2d::extension::Bone * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Bone, &mrb_no_free_type_cocos2d_extension_Bone)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Bone_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Bone_setToSetupPose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::Bone_setToSetupPose(static_cast< struct cocos2d::extension::Bone * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Bone, &mrb_no_free_type_cocos2d_extension_Bone)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Bone_setToSetupPose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Bone_setYDown(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int yDown;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &yDown)) {
      cocos2d::extension::Bone_setYDown(yDown);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Bone_setYDown");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Bone_updateWorldTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_int flipX;
    mrb_int flipY;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oii", &self, &flipX, &flipY)) {
      cocos2d::extension::Bone_updateWorldTransform(static_cast< struct cocos2d::extension::Bone * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Bone, &mrb_no_free_type_cocos2d_extension_Bone)), flipX, flipY);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Bone_updateWorldTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__get_Bounce_EaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Bounce_EaseIn;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Bounce_EaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Bounce_EaseInOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Bounce_EaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Bounce_EaseOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCAnimationData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCAnimationData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCAnimationData * res = new cocos2d::extension::CCAnimationData();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCAnimationData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCAnimationData_addMovement(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value movData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &movData)) {
      cocos2d::extension::CCAnimationData *obj_self = static_cast< cocos2d::extension::CCAnimationData * >(DATA_PTR(mrb_self));
      obj_self->addMovement(static_cast< cocos2d::extension::CCMovementData * >(cc_mrb_data_get_ptr(mrb, movData, &mrb_type_cocos2d_extension_CCMovementData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCAnimationData#addMovement");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCAnimationData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCAnimationData * res = cocos2d::extension::CCAnimationData::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCAnimationData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCAnimationData::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCAnimationData_getMovement(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value movementName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &movementName)) {
      cocos2d::extension::CCAnimationData *obj_self = static_cast< cocos2d::extension::CCAnimationData * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCMovementData * res = obj_self->getMovement(RSTRING_PTR(movementName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCMovementData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCAnimationData#getMovement");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCAnimationData_getMovementCount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCAnimationData *obj_self = static_cast< cocos2d::extension::CCAnimationData * >(DATA_PTR(mrb_self));
      int res = obj_self->getMovementCount();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCAnimationData#getMovementCount");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCAnimationData__get_movementDataDic(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCAnimationData *obj_self = static_cast< cocos2d::extension::CCAnimationData * >(DATA_PTR(mrb_self));
  class cocos2d::CCDictionary *res = &obj_self->movementDataDic;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCDictionary"),
                       &mrb_no_free_type_cocos2d_CCDictionary,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCAnimationData__set_movementDataDic(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value movementDataDic;
  if (1 == mrb_get_args(mrb, "o", &movementDataDic)) {
    cocos2d::extension::CCAnimationData *obj_self = static_cast< cocos2d::extension::CCAnimationData * >(DATA_PTR(mrb_self));
    
    obj_self->movementDataDic = *(static_cast< cocos2d::CCDictionary * >(DATA_PTR(movementDataDic)));
    return movementDataDic;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCAnimationData#movementDataDic");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCAnimationData__get_movementNames(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCAnimationData *obj_self = static_cast< cocos2d::extension::CCAnimationData * >(DATA_PTR(mrb_self));
  std::vector<std::string> res = obj_self->movementNames;
  return cc_mrb_ary_conv_from(mrb, mrb_ary_new(mrb), res);
}

static mrb_value
mrb_cocos2d_extension_CCAnimationData__set_movementNames(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value movementNames;
  if (1 == mrb_get_args(mrb, "A", &movementNames)) {
    cocos2d::extension::CCAnimationData *obj_self = static_cast< cocos2d::extension::CCAnimationData * >(DATA_PTR(mrb_self));
    
    cc_mrb_ary_conv_to(mrb, movementNames, obj_self->movementNames);
    return movementNames;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCAnimationData#movementNames");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCAnimationData__get_name(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCAnimationData *obj_self = static_cast< cocos2d::extension::CCAnimationData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->name;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCAnimationData__set_name(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value name;
  if (1 == mrb_get_args(mrb, "S", &name)) {
    cocos2d::extension::CCAnimationData *obj_self = static_cast< cocos2d::extension::CCAnimationData * >(DATA_PTR(mrb_self));
    
    obj_self->name = RSTRING_PTR(name);
    return name;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCAnimationData#name");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCAnimationData_release(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCAnimationData *obj_self = static_cast< cocos2d::extension::CCAnimationData * >(DATA_PTR(mrb_self));
      obj_self->release();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCAnimationData#release");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCAnimationData_retain(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCAnimationData *obj_self = static_cast< cocos2d::extension::CCAnimationData * >(DATA_PTR(mrb_self));
      obj_self->retain();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCAnimationData#retain");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCArmature;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCArmature * res = new cocos2d::extension::CCArmature();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_addBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value parentName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &bone, &parentName)) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      obj_self->addBone(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), RSTRING_PTR(parentName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#addBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_boundingBox(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      class cocos2d::CCRect *res = new class cocos2d::CCRect(); *res = obj_self->boundingBox();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#boundingBox");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_changeBoneParent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value parentName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &bone, &parentName)) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      obj_self->changeBoneParent(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), RSTRING_PTR(parentName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#changeBoneParent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCArmature * res = cocos2d::extension::CCArmature::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCArmature,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      class cocos2d::extension::CCArmature * res = cocos2d::extension::CCArmature::create(RSTRING_PTR(name));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCArmature,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value name;
    mrb_value parentBone;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &name, &parentBone)) {
      class cocos2d::extension::CCArmature * res = cocos2d::extension::CCArmature::create(RSTRING_PTR(name), static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, parentBone, &mrb_type_cocos2d_extension_CCBone, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCArmature,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_getAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCArmatureAnimation * res = obj_self->getAnimation();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCArmatureAnimation,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#getAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_getBatchNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCBatchNode * res = obj_self->getBatchNode();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCBatchNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#getBatchNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_getBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      ccBlendFunc *res = new ccBlendFunc(); *res = obj_self->getBlendFunc();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccBlendFunc"),
                       &mrb_type_cocos2d__ccBlendFunc,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#getBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_getBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCBone * res = obj_self->getBone(RSTRING_PTR(name));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCBone,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#getBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_getBoneAtPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float x;
    mrb_float y;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &x, &y)) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCBone * res = obj_self->getBoneAtPoint(x, y);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCBone,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#getBoneAtPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_getBoneDic(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getBoneDic();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#getBoneDic");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_getCCArmatureData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCArmatureData * res = obj_self->getCCArmatureData();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCArmatureData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#getCCArmatureData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_getName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#getName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_getParentBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCBone * res = obj_self->getParentBone();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCBone,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#getParentBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_getTextureAtlas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      class cocos2d::CCTextureAtlas * res = obj_self->getTextureAtlas();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTextureAtlas,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#getTextureAtlas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value name;
    mrb_value parentBone;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &name, &parentBone)) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init(RSTRING_PTR(name), static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, parentBone, &mrb_type_cocos2d_extension_CCBone, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_nodeToParentTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      struct cocos2d::CCAffineTransform *res = new struct cocos2d::CCAffineTransform(); *res = obj_self->nodeToParentTransform();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform"),
                       &mrb_type_cocos2d_CCAffineTransform,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#nodeToParentTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_removeBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_bool recursion;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ob", &bone, &recursion)) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      obj_self->removeBone(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), recursion);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#removeBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_setAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      obj_self->setAnimation(static_cast< cocos2d::extension::CCArmatureAnimation * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCArmatureAnimation, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#setAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_setBatchNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      obj_self->setBatchNode(static_cast< cocos2d::extension::CCBatchNode * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCBatchNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#setBatchNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_setBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value blendFunc;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &blendFunc)) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      obj_self->setBlendFunc(*(static_cast< ccBlendFunc * >(DATA_PTR(blendFunc))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#setBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_setCCArmatureData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      obj_self->setCCArmatureData(static_cast< cocos2d::extension::CCArmatureData * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCArmatureData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#setCCArmatureData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_setName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &var)) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      obj_self->setName(RSTRING_PTR(var));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#setName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_setParentBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      obj_self->setParentBone(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCBone, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#setParentBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_setTextureAtlas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      obj_self->setTextureAtlas(static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#setTextureAtlas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      obj_self->update(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_updateOffsetPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      obj_self->updateOffsetPoint();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#updateOffsetPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmature_visit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmature *obj_self = static_cast< cocos2d::extension::CCArmature * >(DATA_PTR(mrb_self));
      obj_self->visit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmature#visit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCArmatureAnimation;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCArmatureAnimation * res = new cocos2d::extension::CCArmatureAnimation();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value armature;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &armature)) {
      class cocos2d::extension::CCArmatureAnimation * res = cocos2d::extension::CCArmatureAnimation::create(static_cast< cocos2d::extension::CCArmature * >(cc_mrb_data_get_ptr(mrb, armature, &mrb_type_cocos2d_extension_CCArmature, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCArmatureAnimation,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation_getAnimationData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCAnimationData * res = obj_self->getAnimationData();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCAnimationData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#getAnimationData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation_getMovementCount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
      int res = obj_self->getMovementCount();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#getMovementCount");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value armature;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &armature)) {
      cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init(static_cast< cocos2d::extension::CCArmature * >(cc_mrb_data_get_ptr(mrb, armature, &mrb_type_cocos2d_extension_CCArmature, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation__get_m_iPrevFrameIndex(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
  int res = obj_self->m_iPrevFrameIndex;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation__set_m_iPrevFrameIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_iPrevFrameIndex;
  if (1 == mrb_get_args(mrb, "i", &m_iPrevFrameIndex)) {
    cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
    
    obj_self->m_iPrevFrameIndex = m_iPrevFrameIndex;
    return mrb_fixnum_value(m_iPrevFrameIndex);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#m_iPrevFrameIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation__get_m_iToIndex(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
  int res = obj_self->m_iToIndex;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation__set_m_iToIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_iToIndex;
  if (1 == mrb_get_args(mrb, "i", &m_iToIndex)) {
    cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
    
    obj_self->m_iToIndex = m_iToIndex;
    return mrb_fixnum_value(m_iToIndex);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#m_iToIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation__get_m_pArmature(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
  class cocos2d::extension::CCArmature * res = obj_self->m_pArmature;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCArmature"),
                       &mrb_type_cocos2d_extension_CCArmature,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation__set_m_pArmature(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pArmature;
  if (1 == mrb_get_args(mrb, "o", &m_pArmature)) {
    static_cast< cocos2d::extension::CCArmature * >(cc_mrb_data_get_ptr(mrb, m_pArmature, &mrb_type_cocos2d_extension_CCArmature, NULL))->retain();
    cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
    if (obj_self->m_pArmature) { obj_self->m_pArmature->release(); }
    obj_self->m_pArmature = static_cast< cocos2d::extension::CCArmature * >(cc_mrb_data_get_ptr(mrb, m_pArmature, &mrb_type_cocos2d_extension_CCArmature, NULL));
    return m_pArmature;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#m_pArmature");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation__get_m_pMovementData(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
  class cocos2d::extension::CCMovementData * res = obj_self->m_pMovementData;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCMovementData"),
                       &mrb_type_cocos2d_extension_CCMovementData,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation__set_m_pMovementData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pMovementData;
  if (1 == mrb_get_args(mrb, "o", &m_pMovementData)) {
    static_cast< cocos2d::extension::CCMovementData * >(cc_mrb_data_get_ptr(mrb, m_pMovementData, &mrb_type_cocos2d_extension_CCMovementData, NULL))->retain();
    cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
    if (obj_self->m_pMovementData) { obj_self->m_pMovementData->release(); }
    obj_self->m_pMovementData = static_cast< cocos2d::extension::CCMovementData * >(cc_mrb_data_get_ptr(mrb, m_pMovementData, &mrb_type_cocos2d_extension_CCMovementData, NULL));
    return m_pMovementData;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#m_pMovementData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation__get_m_pTweenList(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
  class cocos2d::CCArray * res = obj_self->m_pTweenList;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCArray"),
                       &mrb_type_cocos2d_CCArray,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation__set_m_pTweenList(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pTweenList;
  if (1 == mrb_get_args(mrb, "o", &m_pTweenList)) {
    static_cast< cocos2d::CCArray * >(DATA_PTR(m_pTweenList))->retain();
    cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
    if (obj_self->m_pTweenList) { obj_self->m_pTweenList->release(); }
    obj_self->m_pTweenList = static_cast< cocos2d::CCArray * >(DATA_PTR(m_pTweenList));
    return m_pTweenList;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#m_pTweenList");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation__get_m_strMovementID(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
  std::string res = obj_self->m_strMovementID;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation__set_m_strMovementID(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_strMovementID;
  if (1 == mrb_get_args(mrb, "S", &m_strMovementID)) {
    cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
    
    obj_self->m_strMovementID = RSTRING_PTR(m_strMovementID);
    return m_strMovementID;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#m_strMovementID");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation_pause(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
      obj_self->pause();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#pause");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation_play(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value animationName;
    mrb_int durationTo;
    mrb_int durationTween;
    mrb_int loop;
    mrb_int tweenEasing;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "Siiii", &animationName, &durationTo, &durationTween, &loop, &tweenEasing)) {
      cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
      obj_self->play(RSTRING_PTR(animationName), durationTo, durationTween, loop, tweenEasing);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#play");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation_playByIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int animationIndex;
    mrb_int durationTo;
    mrb_int durationTween;
    mrb_int loop;
    mrb_int tweenEasing;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "iiiii", &animationIndex, &durationTo, &durationTween, &loop, &tweenEasing)) {
      cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
      obj_self->playByIndex(animationIndex, durationTo, durationTween, loop, tweenEasing);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#playByIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation_resume(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
      obj_self->resume();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#resume");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation_setAnimationData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
      obj_self->setAnimationData(static_cast< cocos2d::extension::CCAnimationData * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCAnimationData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#setAnimationData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation_setAnimationScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float animationScale;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &animationScale)) {
      cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
      obj_self->setAnimationScale(animationScale);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#setAnimationScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation_stop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
      obj_self->stop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#stop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureAnimation_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::extension::CCArmatureAnimation *obj_self = static_cast< cocos2d::extension::CCArmatureAnimation * >(DATA_PTR(mrb_self));
      obj_self->update(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureAnimation#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCArmatureData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCArmatureData * res = new cocos2d::extension::CCArmatureData();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureData_addBoneData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value boneData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &boneData)) {
      cocos2d::extension::CCArmatureData *obj_self = static_cast< cocos2d::extension::CCArmatureData * >(DATA_PTR(mrb_self));
      obj_self->addBoneData(static_cast< cocos2d::extension::CCBoneData * >(cc_mrb_data_get_ptr(mrb, boneData, &mrb_type_cocos2d_extension_CCBoneData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureData#addBoneData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureData__get_boneDataDic(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCArmatureData *obj_self = static_cast< cocos2d::extension::CCArmatureData * >(DATA_PTR(mrb_self));
  class cocos2d::CCDictionary *res = &obj_self->boneDataDic;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCDictionary"),
                       &mrb_no_free_type_cocos2d_CCDictionary,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCArmatureData__set_boneDataDic(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value boneDataDic;
  if (1 == mrb_get_args(mrb, "o", &boneDataDic)) {
    cocos2d::extension::CCArmatureData *obj_self = static_cast< cocos2d::extension::CCArmatureData * >(DATA_PTR(mrb_self));
    
    obj_self->boneDataDic = *(static_cast< cocos2d::CCDictionary * >(DATA_PTR(boneDataDic)));
    return boneDataDic;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureData#boneDataDic");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureData__get_boneList(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCArmatureData *obj_self = static_cast< cocos2d::extension::CCArmatureData * >(DATA_PTR(mrb_self));
  class cocos2d::CCArray *res = &obj_self->boneList;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCArray"),
                       &mrb_no_free_type_cocos2d_CCArray,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCArmatureData__set_boneList(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value boneList;
  if (1 == mrb_get_args(mrb, "o", &boneList)) {
    cocos2d::extension::CCArmatureData *obj_self = static_cast< cocos2d::extension::CCArmatureData * >(DATA_PTR(mrb_self));
    
    obj_self->boneList = *(static_cast< cocos2d::CCArray * >(DATA_PTR(boneList)));
    return boneList;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureData#boneList");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCArmatureData * res = cocos2d::extension::CCArmatureData::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCArmatureData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureData::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureData_getBoneData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value boneName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &boneName)) {
      cocos2d::extension::CCArmatureData *obj_self = static_cast< cocos2d::extension::CCArmatureData * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCBoneData * res = obj_self->getBoneData(RSTRING_PTR(boneName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCBoneData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureData#getBoneData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureData_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmatureData *obj_self = static_cast< cocos2d::extension::CCArmatureData * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureData#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureData__get_name(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCArmatureData *obj_self = static_cast< cocos2d::extension::CCArmatureData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->name;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCArmatureData__set_name(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value name;
  if (1 == mrb_get_args(mrb, "S", &name)) {
    cocos2d::extension::CCArmatureData *obj_self = static_cast< cocos2d::extension::CCArmatureData * >(DATA_PTR(mrb_self));
    
    obj_self->name = RSTRING_PTR(name);
    return name;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureData#name");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDataManager_addAnimationData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value id;
    mrb_value animationData;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &id, &animationData)) {
      cocos2d::extension::CCArmatureDataManager *obj_self = static_cast< cocos2d::extension::CCArmatureDataManager * >(DATA_PTR(mrb_self));
      obj_self->addAnimationData(RSTRING_PTR(id), static_cast< cocos2d::extension::CCAnimationData * >(cc_mrb_data_get_ptr(mrb, animationData, &mrb_type_cocos2d_extension_CCAnimationData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDataManager#addAnimationData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDataManager_addArmatureData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value id;
    mrb_value armatureData;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &id, &armatureData)) {
      cocos2d::extension::CCArmatureDataManager *obj_self = static_cast< cocos2d::extension::CCArmatureDataManager * >(DATA_PTR(mrb_self));
      obj_self->addArmatureData(RSTRING_PTR(id), static_cast< cocos2d::extension::CCArmatureData * >(cc_mrb_data_get_ptr(mrb, armatureData, &mrb_type_cocos2d_extension_CCArmatureData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDataManager#addArmatureData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDataManager_addArmatureFileInfo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value armatureName;
    mrb_value useExistFileInfo;
    mrb_value imagePath;
    mrb_value plistPath;
    mrb_value configFilePath;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "SSSSS", &armatureName, &useExistFileInfo, &imagePath, &plistPath, &configFilePath)) {
      cocos2d::extension::CCArmatureDataManager *obj_self = static_cast< cocos2d::extension::CCArmatureDataManager * >(DATA_PTR(mrb_self));
      obj_self->addArmatureFileInfo(RSTRING_PTR(armatureName), RSTRING_PTR(useExistFileInfo), RSTRING_PTR(imagePath), RSTRING_PTR(plistPath), RSTRING_PTR(configFilePath));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value imagePath;
    mrb_value plistPath;
    mrb_value configFilePath;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSS", &imagePath, &plistPath, &configFilePath)) {
      cocos2d::extension::CCArmatureDataManager *obj_self = static_cast< cocos2d::extension::CCArmatureDataManager * >(DATA_PTR(mrb_self));
      obj_self->addArmatureFileInfo(RSTRING_PTR(imagePath), RSTRING_PTR(plistPath), RSTRING_PTR(configFilePath));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDataManager#addArmatureFileInfo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDataManager_addSpriteFrameFromFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value plistPath;
    mrb_value imagePath;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &plistPath, &imagePath)) {
      cocos2d::extension::CCArmatureDataManager *obj_self = static_cast< cocos2d::extension::CCArmatureDataManager * >(DATA_PTR(mrb_self));
      obj_self->addSpriteFrameFromFile(RSTRING_PTR(plistPath), RSTRING_PTR(imagePath));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDataManager#addSpriteFrameFromFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDataManager_addTextureData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value id;
    mrb_value textureData;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &id, &textureData)) {
      cocos2d::extension::CCArmatureDataManager *obj_self = static_cast< cocos2d::extension::CCArmatureDataManager * >(DATA_PTR(mrb_self));
      obj_self->addTextureData(RSTRING_PTR(id), static_cast< cocos2d::extension::CCTextureData * >(cc_mrb_data_get_ptr(mrb, textureData, &mrb_type_cocos2d_extension_CCTextureData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDataManager#addTextureData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDataManager_getAnimationData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value id;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &id)) {
      cocos2d::extension::CCArmatureDataManager *obj_self = static_cast< cocos2d::extension::CCArmatureDataManager * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCAnimationData * res = obj_self->getAnimationData(RSTRING_PTR(id));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCAnimationData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDataManager#getAnimationData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDataManager_getAnimationDatas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmatureDataManager *obj_self = static_cast< cocos2d::extension::CCArmatureDataManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getAnimationDatas();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDataManager#getAnimationDatas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDataManager_getArmarureDatas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmatureDataManager *obj_self = static_cast< cocos2d::extension::CCArmatureDataManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getArmarureDatas();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDataManager#getArmarureDatas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDataManager_getArmatureData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value id;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &id)) {
      cocos2d::extension::CCArmatureDataManager *obj_self = static_cast< cocos2d::extension::CCArmatureDataManager * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCArmatureData * res = obj_self->getArmatureData(RSTRING_PTR(id));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCArmatureData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDataManager#getArmatureData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDataManager_getTextureData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value id;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &id)) {
      cocos2d::extension::CCArmatureDataManager *obj_self = static_cast< cocos2d::extension::CCArmatureDataManager * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCTextureData * res = obj_self->getTextureData(RSTRING_PTR(id));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCTextureData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDataManager#getTextureData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDataManager_getTextureDatas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmatureDataManager *obj_self = static_cast< cocos2d::extension::CCArmatureDataManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getTextureDatas();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDataManager#getTextureDatas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDataManager_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmatureDataManager *obj_self = static_cast< cocos2d::extension::CCArmatureDataManager * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDataManager#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDataManager_purgeArmatureSystem(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmatureDataManager::purgeArmatureSystem();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDataManager::purgeArmatureSystem");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDataManager_removeAll(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCArmatureDataManager *obj_self = static_cast< cocos2d::extension::CCArmatureDataManager * >(DATA_PTR(mrb_self));
      obj_self->removeAll();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDataManager#removeAll");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDataManager_sharedArmatureDataManager(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCArmatureDataManager * res = cocos2d::extension::CCArmatureDataManager::sharedArmatureDataManager();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCArmatureDataManager,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDataManager::sharedArmatureDataManager");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDisplayData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCArmatureDisplayData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCArmatureDisplayData * res = new cocos2d::extension::CCArmatureDisplayData();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDisplayData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDisplayData_copy(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value displayData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &displayData)) {
      cocos2d::extension::CCArmatureDisplayData *obj_self = static_cast< cocos2d::extension::CCArmatureDisplayData * >(DATA_PTR(mrb_self));
      obj_self->copy(static_cast< cocos2d::extension::CCArmatureDisplayData * >(cc_mrb_data_get_ptr(mrb, displayData, &mrb_type_cocos2d_extension_CCArmatureDisplayData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDisplayData#copy");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDisplayData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCArmatureDisplayData * res = cocos2d::extension::CCArmatureDisplayData::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCArmatureDisplayData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDisplayData::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDisplayData__get_displayName(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCArmatureDisplayData *obj_self = static_cast< cocos2d::extension::CCArmatureDisplayData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->displayName;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDisplayData__set_displayName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value displayName;
  if (1 == mrb_get_args(mrb, "S", &displayName)) {
    cocos2d::extension::CCArmatureDisplayData *obj_self = static_cast< cocos2d::extension::CCArmatureDisplayData * >(DATA_PTR(mrb_self));
    
    obj_self->displayName = RSTRING_PTR(displayName);
    return displayName;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDisplayData#displayName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArmatureDisplayData_setParam(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value displayName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &displayName)) {
      cocos2d::extension::CCArmatureDisplayData *obj_self = static_cast< cocos2d::extension::CCArmatureDisplayData * >(DATA_PTR(mrb_self));
      obj_self->setParam(RSTRING_PTR(displayName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArmatureDisplayData#setParam");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArrayForObjectSorting_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCArrayForObjectSorting;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCArrayForObjectSorting * res = new cocos2d::extension::CCArrayForObjectSorting();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArrayForObjectSorting#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArrayForObjectSorting_indexOfSortedObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value obj;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &obj)) {
      cocos2d::extension::CCArrayForObjectSorting *obj_self = static_cast< cocos2d::extension::CCArrayForObjectSorting * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->indexOfSortedObject(static_cast< cocos2d::extension::CCSortableObject * >(DATA_PTR(obj)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArrayForObjectSorting#indexOfSortedObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArrayForObjectSorting_insertSortedObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value object;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &object)) {
      cocos2d::extension::CCArrayForObjectSorting *obj_self = static_cast< cocos2d::extension::CCArrayForObjectSorting * >(DATA_PTR(mrb_self));
      obj_self->insertSortedObject(static_cast< cocos2d::extension::CCSortableObject * >(DATA_PTR(object)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArrayForObjectSorting#insertSortedObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArrayForObjectSorting_removeSortedObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value object;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &object)) {
      cocos2d::extension::CCArrayForObjectSorting *obj_self = static_cast< cocos2d::extension::CCArrayForObjectSorting * >(DATA_PTR(mrb_self));
      obj_self->removeSortedObject(static_cast< cocos2d::extension::CCSortableObject * >(DATA_PTR(object)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArrayForObjectSorting#removeSortedObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCArrayForObjectSorting_setObjectID_ofSortedObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int tag;
    mrb_value object;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "io", &tag, &object)) {
      cocos2d::extension::CCArrayForObjectSorting *obj_self = static_cast< cocos2d::extension::CCArrayForObjectSorting * >(DATA_PTR(mrb_self));
      obj_self->setObjectID_ofSortedObject(tag, static_cast< cocos2d::extension::CCSortableObject * >(DATA_PTR(object)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCArrayForObjectSorting#setObjectID_ofSortedObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBAnimationManager;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager * res = new cocos2d::extension::CCBAnimationManager();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_actionForCallbackChannel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value channel;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &channel)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->actionForCallbackChannel(static_cast< cocos2d::extension::CCBSequenceProperty * >(cc_mrb_data_get_ptr(mrb, channel, &mrb_type_cocos2d_extension_CCBSequenceProperty, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#actionForCallbackChannel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_actionForSoundChannel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value channel;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &channel)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->actionForSoundChannel(static_cast< cocos2d::extension::CCBSequenceProperty * >(cc_mrb_data_get_ptr(mrb, channel, &mrb_type_cocos2d_extension_CCBSequenceProperty, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#actionForSoundChannel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_addDocumentCallbackName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->addDocumentCallbackName(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#addDocumentCallbackName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_addDocumentCallbackNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value node;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &node)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->addDocumentCallbackNode(static_cast< cocos2d::CCNode * >(DATA_PTR(node)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#addDocumentCallbackNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_addDocumentOutletName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->addDocumentOutletName(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#addDocumentOutletName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_addDocumentOutletNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value node;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &node)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->addDocumentOutletNode(static_cast< cocos2d::CCNode * >(DATA_PTR(node)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#addDocumentOutletNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_addNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pNode;
    mrb_value pSeq;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pNode, &pSeq)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->addNode(static_cast< cocos2d::CCNode * >(DATA_PTR(pNode)), static_cast< cocos2d::CCDictionary * >(DATA_PTR(pSeq)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#addNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_debug(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->debug();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#debug");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_getAutoPlaySequenceId(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      int res = obj_self->getAutoPlaySequenceId();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#getAutoPlaySequenceId");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_getContainerSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pNode;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pNode)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getContainerSize(static_cast< cocos2d::CCNode * >(DATA_PTR(pNode)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#getContainerSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_getDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCBAnimationManagerDelegate * res = obj_self->getDelegate();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      /* XXX: class implrements *Delegate or *Protocol, must be a subclass of CCObject. */
      ccobj_res = dynamic_cast< cocos2d::CCObject * >(res);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCBAnimationManagerDelegate,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#getDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_getDocumentCallbackNames(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getDocumentCallbackNames();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#getDocumentCallbackNames");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_getDocumentCallbackNodes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getDocumentCallbackNodes();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#getDocumentCallbackNodes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_getDocumentControllerName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getDocumentControllerName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#getDocumentControllerName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_getDocumentOutletNames(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getDocumentOutletNames();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#getDocumentOutletNames");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_getDocumentOutletNodes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getDocumentOutletNodes();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#getDocumentOutletNodes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_getKeyframeCallbacks(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getKeyframeCallbacks();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#getKeyframeCallbacks");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_getLastCompletedSequenceName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getLastCompletedSequenceName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#getLastCompletedSequenceName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_getRootContainerSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getRootContainerSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#getRootContainerSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_getRootNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getRootNode();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#getRootNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_getRunningSequenceName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getRunningSequenceName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#getRunningSequenceName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_getSequences(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getSequences();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#getSequences");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager__get_jsControlled(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->jsControlled;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager__set_jsControlled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool jsControlled;
  if (1 == mrb_get_args(mrb, "b", &jsControlled)) {
    cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
    
    obj_self->jsControlled = jsControlled;
    return mrb_bool_value(jsControlled);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#jsControlled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager__get_mOwner(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
  class cocos2d::CCObject * res = obj_self->mOwner;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCObject"),
                       &mrb_type_cocos2d_CCObject,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager__set_mOwner(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value mOwner;
  if (1 == mrb_get_args(mrb, "o", &mOwner)) {
    static_cast< cocos2d::CCObject * >(DATA_PTR(mOwner))->retain();
    cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
    if (obj_self->mOwner) { obj_self->mOwner->release(); }
    obj_self->mOwner = static_cast< cocos2d::CCObject * >(DATA_PTR(mOwner));
    return mOwner;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#mOwner");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_moveAnimationsFromNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value fromNode;
    mrb_value toNode;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &fromNode, &toNode)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->moveAnimationsFromNode(static_cast< cocos2d::CCNode * >(DATA_PTR(fromNode)), static_cast< cocos2d::CCNode * >(DATA_PTR(toNode)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#moveAnimationsFromNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_removeCallFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value callbackNamed;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &callbackNamed)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->removeCallFunc(RSTRING_PTR(callbackNamed));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#removeCallFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_runAnimations(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pName;
    mrb_float fTweenDuration;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sf", &pName, &fTweenDuration)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->runAnimations(RSTRING_PTR(pName), fTweenDuration);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value pName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pName)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->runAnimations(RSTRING_PTR(pName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_int nSeqId;
    mrb_float fTweenDuraiton;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "if", &nSeqId, &fTweenDuraiton)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->runAnimations(nSeqId, fTweenDuraiton);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#runAnimations");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_runAnimationsForSequenceIdTweenDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nSeqId;
    mrb_float fTweenDuraiton;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "if", &nSeqId, &fTweenDuraiton)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->runAnimationsForSequenceIdTweenDuration(nSeqId, fTweenDuraiton);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#runAnimationsForSequenceIdTweenDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_runAnimationsForSequenceNamed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pName)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->runAnimationsForSequenceNamed(RSTRING_PTR(pName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#runAnimationsForSequenceNamed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_runAnimationsForSequenceNamedTweenDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pName;
    mrb_float fTweenDuration;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sf", &pName, &fTweenDuration)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->runAnimationsForSequenceNamedTweenDuration(RSTRING_PTR(pName), fTweenDuration);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#runAnimationsForSequenceNamedTweenDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_setAnimationCompletedCallback(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value callbackFunc;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &target, &callbackFunc)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->setAnimationCompletedCallback(CCMRubyCallbackWrapper::create(mrb, target, callbackFunc), callfunc_selector(CCMRubyCallbackWrapper::SEL_CallFunc_Impl));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#setAnimationCompletedCallback");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_setAutoPlaySequenceId(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int autoPlaySequenceId;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &autoPlaySequenceId)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->setAutoPlaySequenceId(autoPlaySequenceId);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#setAutoPlaySequenceId");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_setBaseValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pValue;
    mrb_value pNode;
    mrb_value pPropName;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooS", &pValue, &pNode, &pPropName)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->setBaseValue(static_cast< cocos2d::CCObject * >(DATA_PTR(pValue)), static_cast< cocos2d::CCNode * >(DATA_PTR(pNode)), RSTRING_PTR(pPropName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#setBaseValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_setCallFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value callFunc;
    mrb_value callbackNamed;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &callFunc, &callbackNamed)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->setCallFunc(static_cast< cocos2d::CCCallFunc * >(DATA_PTR(callFunc)), RSTRING_PTR(callbackNamed));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#setCallFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_setDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->setDelegate(static_cast< cocos2d::extension::CCBAnimationManagerDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_extension_CCBAnimationManagerDelegate, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#setDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_setDocumentControllerName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->setDocumentControllerName(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#setDocumentControllerName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_setRootContainerSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value rootContainerSize;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &rootContainerSize)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->setRootContainerSize(*(static_cast< cocos2d::CCSize * >(DATA_PTR(rootContainerSize))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#setRootContainerSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_setRootNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pRootNode;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pRootNode)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->setRootNode(static_cast< cocos2d::CCNode * >(DATA_PTR(pRootNode)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#setRootNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManager_setSequences(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value seq;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &seq)) {
      cocos2d::extension::CCBAnimationManager *obj_self = static_cast< cocos2d::extension::CCBAnimationManager * >(DATA_PTR(mrb_self));
      obj_self->setSequences(static_cast< cocos2d::CCArray * >(DATA_PTR(seq)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManager#setSequences");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBAnimationManagerDelegate_completedAnimationSequenceNamed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::extension::CCBAnimationManagerDelegate *obj_self = static_cast< cocos2d::extension::CCBAnimationManagerDelegate * >(DATA_PTR(mrb_self));
      obj_self->completedAnimationSequenceNamed(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBAnimationManagerDelegate#completedAnimationSequenceNamed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBEaseInstant_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::extension::CCBEaseInstant * res = cocos2d::extension::CCBEaseInstant::create(static_cast< cocos2d::CCActionInterval * >(DATA_PTR(pAction)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBEaseInstant,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBEaseInstant::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBEaseInstant_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::extension::CCBEaseInstant *obj_self = static_cast< cocos2d::extension::CCBEaseInstant * >(DATA_PTR(mrb_self));
      obj_self->update(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBEaseInstant#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBEaseInstant_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBEaseInstant;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBEaseInstant * res = new cocos2d::extension::CCBEaseInstant();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBEaseInstant#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBFile_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBFile;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBFile * res = new cocos2d::extension::CCBFile();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBFile#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBFile_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCBFile * res = cocos2d::extension::CCBFile::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBFile,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBFile::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBFile_getCCBFileNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBFile *obj_self = static_cast< cocos2d::extension::CCBFile * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getCCBFileNode();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBFile#getCCBFileNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBFile_setCCBFileNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pNode;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pNode)) {
      cocos2d::extension::CCBFile *obj_self = static_cast< cocos2d::extension::CCBFile * >(DATA_PTR(mrb_self));
      obj_self->setCCBFileNode(static_cast< cocos2d::CCNode * >(DATA_PTR(pNode)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBFile#setCCBFileNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBFileLoader_loader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCBFileLoader * res = cocos2d::extension::CCBFileLoader::loader();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCBFileLoader,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBFileLoader::loader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBFileLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBFileLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBFileLoader * res = new cocos2d::extension::CCBFileLoader();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBFileLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBKeyframe_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBKeyframe;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBKeyframe * res = new cocos2d::extension::CCBKeyframe();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBKeyframe#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBKeyframe_getEasingOpt(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBKeyframe *obj_self = static_cast< cocos2d::extension::CCBKeyframe * >(DATA_PTR(mrb_self));
      float res = obj_self->getEasingOpt();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBKeyframe#getEasingOpt");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBKeyframe_getEasingType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBKeyframe *obj_self = static_cast< cocos2d::extension::CCBKeyframe * >(DATA_PTR(mrb_self));
      int res = obj_self->getEasingType();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBKeyframe#getEasingType");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBKeyframe_getTime(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBKeyframe *obj_self = static_cast< cocos2d::extension::CCBKeyframe * >(DATA_PTR(mrb_self));
      float res = obj_self->getTime();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBKeyframe#getTime");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBKeyframe_getValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBKeyframe *obj_self = static_cast< cocos2d::extension::CCBKeyframe * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->getValue();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBKeyframe#getValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBKeyframe_setEasingOpt(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fEasingOpt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fEasingOpt)) {
      cocos2d::extension::CCBKeyframe *obj_self = static_cast< cocos2d::extension::CCBKeyframe * >(DATA_PTR(mrb_self));
      obj_self->setEasingOpt(fEasingOpt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBKeyframe#setEasingOpt");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBKeyframe_setEasingType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nEasingType;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nEasingType)) {
      cocos2d::extension::CCBKeyframe *obj_self = static_cast< cocos2d::extension::CCBKeyframe * >(DATA_PTR(mrb_self));
      obj_self->setEasingType(nEasingType);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBKeyframe#setEasingType");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBKeyframe_setTime(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fTime;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fTime)) {
      cocos2d::extension::CCBKeyframe *obj_self = static_cast< cocos2d::extension::CCBKeyframe * >(DATA_PTR(mrb_self));
      obj_self->setTime(fTime);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBKeyframe#setTime");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBKeyframe_setValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pValue)) {
      cocos2d::extension::CCBKeyframe *obj_self = static_cast< cocos2d::extension::CCBKeyframe * >(DATA_PTR(mrb_self));
      obj_self->setValue(static_cast< cocos2d::CCObject * >(DATA_PTR(pValue)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBKeyframe#setValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBMemberVariableAssigner_onAssignCCBCustomProperty(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    mrb_value pMemberVariableName;
    mrb_value pCCBValue;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oSo", &pTarget, &pMemberVariableName, &pCCBValue)) {
      cocos2d::extension::CCBMemberVariableAssigner *obj_self = static_cast< cocos2d::extension::CCBMemberVariableAssigner * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->onAssignCCBCustomProperty(static_cast< cocos2d::CCObject * >(DATA_PTR(pTarget)), RSTRING_PTR(pMemberVariableName), static_cast< cocos2d::extension::CCBValue * >(cc_mrb_data_get_ptr(mrb, pCCBValue, &mrb_type_cocos2d_extension_CCBValue, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBMemberVariableAssigner#onAssignCCBCustomProperty");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBMemberVariableAssigner_onAssignCCBMemberVariable(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    mrb_value pMemberVariableName;
    mrb_value pNode;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oSo", &pTarget, &pMemberVariableName, &pNode)) {
      cocos2d::extension::CCBMemberVariableAssigner *obj_self = static_cast< cocos2d::extension::CCBMemberVariableAssigner * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->onAssignCCBMemberVariable(static_cast< cocos2d::CCObject * >(DATA_PTR(pTarget)), RSTRING_PTR(pMemberVariableName), static_cast< cocos2d::CCNode * >(DATA_PTR(pNode)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBMemberVariableAssigner#onAssignCCBMemberVariable");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pCCNodeLoaderLibrary;
    mrb_value pCCBMemberVariableAssigner;
    mrb_value pCCBSelectorResolver;
    mrb_value pCCNodeLoaderListener;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBReader;
    DATA_PTR(mrb_self) = NULL;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oooo", &pCCNodeLoaderLibrary, &pCCBMemberVariableAssigner, &pCCBSelectorResolver, &pCCNodeLoaderListener)) {
      cocos2d::extension::CCBReader * res = new cocos2d::extension::CCBReader(static_cast< cocos2d::extension::CCNodeLoaderLibrary * >(cc_mrb_data_get_ptr(mrb, pCCNodeLoaderLibrary, &mrb_type_cocos2d_extension_CCNodeLoaderLibrary, NULL)), static_cast< cocos2d::extension::CCBMemberVariableAssigner * >(cc_mrb_data_get_ptr(mrb, pCCBMemberVariableAssigner, &mrb_type_cocos2d_extension_CCBMemberVariableAssigner, &mrb_no_free_type_cocos2d_extension_CCBMemberVariableAssigner)), static_cast< cocos2d::extension::CCBSelectorResolver * >(cc_mrb_data_get_ptr(mrb, pCCBSelectorResolver, &mrb_type_cocos2d_extension_CCBSelectorResolver, &mrb_no_free_type_cocos2d_extension_CCBSelectorResolver)), static_cast< cocos2d::extension::CCNodeLoaderListener * >(cc_mrb_data_get_ptr(mrb, pCCNodeLoaderListener, &mrb_type_cocos2d_extension_CCNodeLoaderListener, &mrb_no_free_type_cocos2d_extension_CCNodeLoaderListener)));
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  {
    mrb_value pCCBReader;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBReader;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pCCBReader)) {
      cocos2d::extension::CCBReader * res = new cocos2d::extension::CCBReader(static_cast< cocos2d::extension::CCBReader * >(cc_mrb_data_get_ptr(mrb, pCCBReader, &mrb_type_cocos2d_extension_CCBReader, NULL)));
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBReader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBReader * res = new cocos2d::extension::CCBReader();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_addDocumentCallbackName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      obj_self->addDocumentCallbackName(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#addDocumentCallbackName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_addDocumentCallbackNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value node;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &node)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      obj_self->addDocumentCallbackNode(static_cast< cocos2d::CCNode * >(DATA_PTR(node)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#addDocumentCallbackNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_addOwnerCallbackName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      obj_self->addOwnerCallbackName(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#addOwnerCallbackName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_addOwnerCallbackNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value node;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &node)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      obj_self->addOwnerCallbackNode(static_cast< cocos2d::CCNode * >(DATA_PTR(node)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#addOwnerCallbackNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_addOwnerOutletName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      obj_self->addOwnerOutletName(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#addOwnerOutletName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_addOwnerOutletNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value node;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &node)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      obj_self->addOwnerOutletNode(static_cast< cocos2d::CCNode * >(DATA_PTR(node)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#addOwnerOutletNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_createSceneWithNodeGraphFromFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pCCBFileName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pCCBFileName)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCScene * res = obj_self->createSceneWithNodeGraphFromFile(RSTRING_PTR(pCCBFileName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCScene,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pCCBFileName;
    mrb_value pOwner;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &pCCBFileName, &pOwner)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCScene * res = obj_self->createSceneWithNodeGraphFromFile(RSTRING_PTR(pCCBFileName), static_cast< cocos2d::CCObject * >(DATA_PTR(pOwner)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCScene,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pCCBFileName;
    mrb_value pOwner;
    mrb_value parentSize;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "Soo", &pCCBFileName, &pOwner, &parentSize)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCScene * res = obj_self->createSceneWithNodeGraphFromFile(RSTRING_PTR(pCCBFileName), static_cast< cocos2d::CCObject * >(DATA_PTR(pOwner)), *(static_cast< cocos2d::CCSize * >(DATA_PTR(parentSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCScene,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#createSceneWithNodeGraphFromFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_deletePathExtension(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pString;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pString)) {
      std::string res = cocos2d::extension::CCBReader::deletePathExtension(RSTRING_PTR(pString));
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader::deletePathExtension");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_endsWith(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pString;
    mrb_value pEnding;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &pString, &pEnding)) {
      _Bool res = cocos2d::extension::CCBReader::endsWith(RSTRING_PTR(pString), RSTRING_PTR(pEnding));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader::endsWith");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_getAnimatedProperties(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      std::set<std::string> * res = obj_self->getAnimatedProperties();
      mrb_value mrb_res = cc_mrb_ary_conv_from(mrb, mrb_ary_new(mrb), res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#getAnimatedProperties");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_getAnimationManager(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCBAnimationManager * res = obj_self->getAnimationManager();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCBAnimationManager,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#getAnimationManager");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_getAnimationManagers(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getAnimationManagers();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#getAnimationManagers");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_getAnimationManagersForNodes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getAnimationManagersForNodes();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#getAnimationManagersForNodes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_getCCBMemberVariableAssigner(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCBMemberVariableAssigner * res = obj_self->getCCBMemberVariableAssigner();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBMemberVariableAssigner"),
                       &mrb_type_cocos2d_extension_CCBMemberVariableAssigner,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#getCCBMemberVariableAssigner");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_getCCBRootPath(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getCCBRootPath();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#getCCBRootPath");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_getCCBSelectorResolver(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCBSelectorResolver * res = obj_self->getCCBSelectorResolver();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBSelectorResolver"),
                       &mrb_type_cocos2d_extension_CCBSelectorResolver,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#getCCBSelectorResolver");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_getLoadedSpriteSheet(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      std::set<std::string> res = obj_self->getLoadedSpriteSheet();
      mrb_value mrb_res = cc_mrb_ary_conv_from(mrb, mrb_ary_new(mrb), res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#getLoadedSpriteSheet");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_getNodesWithAnimationManagers(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getNodesWithAnimationManagers();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#getNodesWithAnimationManagers");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_getOwner(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->getOwner();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#getOwner");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_getOwnerCallbackNames(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getOwnerCallbackNames();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#getOwnerCallbackNames");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_getOwnerCallbackNodes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getOwnerCallbackNodes();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#getOwnerCallbackNodes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_getOwnerOutletNames(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getOwnerOutletNames();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#getOwnerOutletNames");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_getOwnerOutletNodes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getOwnerOutletNodes();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#getOwnerOutletNodes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_getResolutionScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      float res = cocos2d::extension::CCBReader::getResolutionScale();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader::getResolutionScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_isJSControlled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isJSControlled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#isJSControlled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader__get_jsControlled(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->jsControlled;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCBReader__set_jsControlled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool jsControlled;
  if (1 == mrb_get_args(mrb, "b", &jsControlled)) {
    cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
    
    obj_self->jsControlled = jsControlled;
    return mrb_bool_value(jsControlled);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#jsControlled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_lastPathComponent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pString;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pString)) {
      std::string res = cocos2d::extension::CCBReader::lastPathComponent(RSTRING_PTR(pString));
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader::lastPathComponent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_readBool(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->readBool();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#readBool");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_readByte(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      unsigned char res = obj_self->readByte();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#readByte");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_readCachedString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      std::string res = obj_self->readCachedString();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#readCachedString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_readCallbackKeyframesForSeq(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value seq;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &seq)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->readCallbackKeyframesForSeq(static_cast< cocos2d::extension::CCBSequence * >(cc_mrb_data_get_ptr(mrb, seq, &mrb_type_cocos2d_extension_CCBSequence, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#readCallbackKeyframesForSeq");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_readFileWithCleanUp(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bCleanUp;
    mrb_value am;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "bo", &bCleanUp, &am)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->readFileWithCleanUp(bCleanUp, static_cast< cocos2d::CCDictionary * >(DATA_PTR(am)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#readFileWithCleanUp");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_readFloat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      float res = obj_self->readFloat();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#readFloat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_readInt(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool pSigned;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &pSigned)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      int res = obj_self->readInt(pSigned);
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#readInt");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_readNodeGraphFromData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pData;
    mrb_value pOwner;
    mrb_value parentSize;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &pData, &pOwner, &parentSize)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->readNodeGraphFromData(static_cast< cocos2d::extension::CCData * >(cc_mrb_data_get_ptr(mrb, pData, &mrb_type_cocos2d_extension_CCData, NULL)), static_cast< cocos2d::CCObject * >(DATA_PTR(pOwner)), *(static_cast< cocos2d::CCSize * >(DATA_PTR(parentSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#readNodeGraphFromData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_readNodeGraphFromFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pCCBFileName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pCCBFileName)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->readNodeGraphFromFile(RSTRING_PTR(pCCBFileName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pCCBFileName;
    mrb_value pOwner;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &pCCBFileName, &pOwner)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->readNodeGraphFromFile(RSTRING_PTR(pCCBFileName), static_cast< cocos2d::CCObject * >(DATA_PTR(pOwner)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pCCBFileName;
    mrb_value pOwner;
    mrb_value parentSize;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "Soo", &pCCBFileName, &pOwner, &parentSize)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->readNodeGraphFromFile(RSTRING_PTR(pCCBFileName), static_cast< cocos2d::CCObject * >(DATA_PTR(pOwner)), *(static_cast< cocos2d::CCSize * >(DATA_PTR(parentSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#readNodeGraphFromFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_readSoundKeyframesForSeq(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value seq;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &seq)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->readSoundKeyframesForSeq(static_cast< cocos2d::extension::CCBSequence * >(cc_mrb_data_get_ptr(mrb, seq, &mrb_type_cocos2d_extension_CCBSequence, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#readSoundKeyframesForSeq");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_readUTF8(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      std::string res = obj_self->readUTF8();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#readUTF8");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_setAnimationManager(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAnimationManager;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAnimationManager)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      obj_self->setAnimationManager(static_cast< cocos2d::extension::CCBAnimationManager * >(cc_mrb_data_get_ptr(mrb, pAnimationManager, &mrb_type_cocos2d_extension_CCBAnimationManager, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#setAnimationManager");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_setAnimationManagers(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value x;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &x)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      obj_self->setAnimationManagers(static_cast< cocos2d::CCDictionary * >(DATA_PTR(x)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#setAnimationManagers");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_setCCBRootPath(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pCCBRootPath;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pCCBRootPath)) {
      cocos2d::extension::CCBReader *obj_self = static_cast< cocos2d::extension::CCBReader * >(DATA_PTR(mrb_self));
      obj_self->setCCBRootPath(RSTRING_PTR(pCCBRootPath));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader#setCCBRootPath");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_setResolutionScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float scale;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &scale)) {
      cocos2d::extension::CCBReader::setResolutionScale(scale);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader::setResolutionScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBReader_toLowerCase(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pCCString;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pCCString)) {
      std::string res = cocos2d::extension::CCBReader::toLowerCase(RSTRING_PTR(pCCString));
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBReader::toLowerCase");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateTo_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::extension::CCBRotateTo *obj_self = static_cast< cocos2d::extension::CCBRotateTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(DATA_PTR(pZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateTo#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateTo_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fDuration;
    mrb_float fAngle;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &fDuration, &fAngle)) {
      class cocos2d::extension::CCBRotateTo * res = cocos2d::extension::CCBRotateTo::create(fDuration, fAngle);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBRotateTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateTo::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateTo_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fDuration;
    mrb_float fAngle;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &fDuration, &fAngle)) {
      cocos2d::extension::CCBRotateTo *obj_self = static_cast< cocos2d::extension::CCBRotateTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(fDuration, fAngle);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateTo#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateTo_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pNode;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pNode)) {
      cocos2d::extension::CCBRotateTo *obj_self = static_cast< cocos2d::extension::CCBRotateTo * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(DATA_PTR(pNode)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateTo#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateTo_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::extension::CCBRotateTo *obj_self = static_cast< cocos2d::extension::CCBRotateTo * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateTo#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateTo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBRotateTo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBRotateTo * res = new cocos2d::extension::CCBRotateTo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateTo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateXTo_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::extension::CCBRotateXTo *obj_self = static_cast< cocos2d::extension::CCBRotateXTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(DATA_PTR(pZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateXTo#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateXTo_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fDuration;
    mrb_float fAngle;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &fDuration, &fAngle)) {
      class cocos2d::extension::CCBRotateXTo * res = cocos2d::extension::CCBRotateXTo::create(fDuration, fAngle);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBRotateXTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateXTo::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateXTo_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fDuration;
    mrb_float fAngle;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &fDuration, &fAngle)) {
      cocos2d::extension::CCBRotateXTo *obj_self = static_cast< cocos2d::extension::CCBRotateXTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(fDuration, fAngle);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateXTo#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateXTo_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pNode;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pNode)) {
      cocos2d::extension::CCBRotateXTo *obj_self = static_cast< cocos2d::extension::CCBRotateXTo * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(DATA_PTR(pNode)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateXTo#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateXTo_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::extension::CCBRotateXTo *obj_self = static_cast< cocos2d::extension::CCBRotateXTo * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateXTo#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateXTo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBRotateXTo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBRotateXTo * res = new cocos2d::extension::CCBRotateXTo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateXTo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateYTo_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::extension::CCBRotateYTo *obj_self = static_cast< cocos2d::extension::CCBRotateYTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(DATA_PTR(pZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateYTo#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateYTo_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fDuration;
    mrb_float fAngle;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &fDuration, &fAngle)) {
      class cocos2d::extension::CCBRotateYTo * res = cocos2d::extension::CCBRotateYTo::create(fDuration, fAngle);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBRotateYTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateYTo::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateYTo_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fDuration;
    mrb_float fAngle;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &fDuration, &fAngle)) {
      cocos2d::extension::CCBRotateYTo *obj_self = static_cast< cocos2d::extension::CCBRotateYTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(fDuration, fAngle);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateYTo#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateYTo_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pNode;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pNode)) {
      cocos2d::extension::CCBRotateYTo *obj_self = static_cast< cocos2d::extension::CCBRotateYTo * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(DATA_PTR(pNode)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateYTo#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateYTo_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::extension::CCBRotateYTo *obj_self = static_cast< cocos2d::extension::CCBRotateYTo * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateYTo#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBRotateYTo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBRotateYTo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBRotateYTo * res = new cocos2d::extension::CCBRotateYTo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBRotateYTo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBScriptOwnerProtocol_createNew(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBScriptOwnerProtocol *obj_self = static_cast< cocos2d::extension::CCBScriptOwnerProtocol * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCBSelectorResolver * res = obj_self->createNew();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBSelectorResolver"),
                       &mrb_type_cocos2d_extension_CCBSelectorResolver,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBScriptOwnerProtocol#createNew");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequence_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBSequence;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBSequence * res = new cocos2d::extension::CCBSequence();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequence#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequence_getCallbackChannel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBSequence *obj_self = static_cast< cocos2d::extension::CCBSequence * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCBSequenceProperty * res = obj_self->getCallbackChannel();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCBSequenceProperty,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequence#getCallbackChannel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequence_getChainedSequenceId(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBSequence *obj_self = static_cast< cocos2d::extension::CCBSequence * >(DATA_PTR(mrb_self));
      int res = obj_self->getChainedSequenceId();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequence#getChainedSequenceId");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequence_getDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBSequence *obj_self = static_cast< cocos2d::extension::CCBSequence * >(DATA_PTR(mrb_self));
      float res = obj_self->getDuration();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequence#getDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequence_getName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBSequence *obj_self = static_cast< cocos2d::extension::CCBSequence * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequence#getName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequence_getSequenceId(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBSequence *obj_self = static_cast< cocos2d::extension::CCBSequence * >(DATA_PTR(mrb_self));
      int res = obj_self->getSequenceId();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequence#getSequenceId");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequence_getSoundChannel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBSequence *obj_self = static_cast< cocos2d::extension::CCBSequence * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCBSequenceProperty * res = obj_self->getSoundChannel();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCBSequenceProperty,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequence#getSoundChannel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequence_setCallbackChannel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value callbackChannel;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &callbackChannel)) {
      cocos2d::extension::CCBSequence *obj_self = static_cast< cocos2d::extension::CCBSequence * >(DATA_PTR(mrb_self));
      obj_self->setCallbackChannel(static_cast< cocos2d::extension::CCBSequenceProperty * >(cc_mrb_data_get_ptr(mrb, callbackChannel, &mrb_type_cocos2d_extension_CCBSequenceProperty, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequence#setCallbackChannel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequence_setChainedSequenceId(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nChainedSequenceId;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nChainedSequenceId)) {
      cocos2d::extension::CCBSequence *obj_self = static_cast< cocos2d::extension::CCBSequence * >(DATA_PTR(mrb_self));
      obj_self->setChainedSequenceId(nChainedSequenceId);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequence#setChainedSequenceId");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequence_setDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fDuration;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fDuration)) {
      cocos2d::extension::CCBSequence *obj_self = static_cast< cocos2d::extension::CCBSequence * >(DATA_PTR(mrb_self));
      obj_self->setDuration(fDuration);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequence#setDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequence_setName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pName)) {
      cocos2d::extension::CCBSequence *obj_self = static_cast< cocos2d::extension::CCBSequence * >(DATA_PTR(mrb_self));
      obj_self->setName(RSTRING_PTR(pName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequence#setName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequence_setSequenceId(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nSequenceId;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nSequenceId)) {
      cocos2d::extension::CCBSequence *obj_self = static_cast< cocos2d::extension::CCBSequence * >(DATA_PTR(mrb_self));
      obj_self->setSequenceId(nSequenceId);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequence#setSequenceId");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequence_setSoundChannel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value soundChannel;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &soundChannel)) {
      cocos2d::extension::CCBSequence *obj_self = static_cast< cocos2d::extension::CCBSequence * >(DATA_PTR(mrb_self));
      obj_self->setSoundChannel(static_cast< cocos2d::extension::CCBSequenceProperty * >(cc_mrb_data_get_ptr(mrb, soundChannel, &mrb_type_cocos2d_extension_CCBSequenceProperty, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequence#setSoundChannel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequenceProperty_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBSequenceProperty;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBSequenceProperty * res = new cocos2d::extension::CCBSequenceProperty();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequenceProperty#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequenceProperty_getKeyframes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBSequenceProperty *obj_self = static_cast< cocos2d::extension::CCBSequenceProperty * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getKeyframes();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequenceProperty#getKeyframes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequenceProperty_getName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBSequenceProperty *obj_self = static_cast< cocos2d::extension::CCBSequenceProperty * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequenceProperty#getName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequenceProperty_getType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBSequenceProperty *obj_self = static_cast< cocos2d::extension::CCBSequenceProperty * >(DATA_PTR(mrb_self));
      int res = obj_self->getType();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequenceProperty#getType");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequenceProperty_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBSequenceProperty *obj_self = static_cast< cocos2d::extension::CCBSequenceProperty * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequenceProperty#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequenceProperty_setName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pName)) {
      cocos2d::extension::CCBSequenceProperty *obj_self = static_cast< cocos2d::extension::CCBSequenceProperty * >(DATA_PTR(mrb_self));
      obj_self->setName(RSTRING_PTR(pName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequenceProperty#setName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSequenceProperty_setType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nType;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nType)) {
      cocos2d::extension::CCBSequenceProperty *obj_self = static_cast< cocos2d::extension::CCBSequenceProperty * >(DATA_PTR(mrb_self));
      obj_self->setType(nType);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSequenceProperty#setType");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSetSpriteFrame_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::extension::CCBSetSpriteFrame *obj_self = static_cast< cocos2d::extension::CCBSetSpriteFrame * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(DATA_PTR(pZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSetSpriteFrame#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSetSpriteFrame_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSpriteFrame;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pSpriteFrame)) {
      class cocos2d::extension::CCBSetSpriteFrame * res = cocos2d::extension::CCBSetSpriteFrame::create(static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(pSpriteFrame)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBSetSpriteFrame,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSetSpriteFrame::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSetSpriteFrame_initWithSpriteFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSpriteFrame;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pSpriteFrame)) {
      cocos2d::extension::CCBSetSpriteFrame *obj_self = static_cast< cocos2d::extension::CCBSetSpriteFrame * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSpriteFrame(static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(pSpriteFrame)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSetSpriteFrame#initWithSpriteFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSetSpriteFrame_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::extension::CCBSetSpriteFrame *obj_self = static_cast< cocos2d::extension::CCBSetSpriteFrame * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSetSpriteFrame#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSetSpriteFrame_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBSetSpriteFrame;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBSetSpriteFrame * res = new cocos2d::extension::CCBSetSpriteFrame();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSetSpriteFrame#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSoundEffect_actionWithSoundFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value file;
    mrb_float pitch;
    mrb_float pan;
    mrb_float gain;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "Sfff", &file, &pitch, &pan, &gain)) {
      class cocos2d::extension::CCBSoundEffect * res = cocos2d::extension::CCBSoundEffect::actionWithSoundFile(RSTRING_PTR(file), pitch, pan, gain);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCBSoundEffect,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSoundEffect::actionWithSoundFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSoundEffect_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::extension::CCBSoundEffect *obj_self = static_cast< cocos2d::extension::CCBSoundEffect * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(DATA_PTR(pZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSoundEffect#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSoundEffect_initWithSoundFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value file;
    mrb_float pitch;
    mrb_float pan;
    mrb_float gain;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "Sfff", &file, &pitch, &pan, &gain)) {
      cocos2d::extension::CCBSoundEffect *obj_self = static_cast< cocos2d::extension::CCBSoundEffect * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSoundFile(RSTRING_PTR(file), pitch, pan, gain);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSoundEffect#initWithSoundFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSoundEffect_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::extension::CCBSoundEffect *obj_self = static_cast< cocos2d::extension::CCBSoundEffect * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSoundEffect#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBSoundEffect_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBSoundEffect;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBSoundEffect * res = new cocos2d::extension::CCBSoundEffect();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBSoundEffect#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBValue_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nValue)) {
      class cocos2d::extension::CCBValue * res = cocos2d::extension::CCBValue::create(nValue);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBValue,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_bool bValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bValue)) {
      class cocos2d::extension::CCBValue * res = cocos2d::extension::CCBValue::create(bValue);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBValue,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_float fValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fValue)) {
      class cocos2d::extension::CCBValue * res = cocos2d::extension::CCBValue::create((float)fValue);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBValue,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
#if 0
  {
    mrb_int byte;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &byte)) {
      class cocos2d::extension::CCBValue * res = cocos2d::extension::CCBValue::create(byte);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBValue,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
#endif
  {
    mrb_value pStr;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pStr)) {
      class cocos2d::extension::CCBValue * res = cocos2d::extension::CCBValue::create(RSTRING_PTR(pStr));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBValue,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pArr;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pArr)) {
      class cocos2d::extension::CCBValue * res = cocos2d::extension::CCBValue::create(static_cast< cocos2d::CCArray * >(DATA_PTR(pArr)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBValue,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBValue::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBValue_getArrayValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBValue *obj_self = static_cast< cocos2d::extension::CCBValue * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getArrayValue();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBValue#getArrayValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBValue_getBoolValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBValue *obj_self = static_cast< cocos2d::extension::CCBValue * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getBoolValue();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBValue#getBoolValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBValue_getByteValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBValue *obj_self = static_cast< cocos2d::extension::CCBValue * >(DATA_PTR(mrb_self));
      unsigned char res = obj_self->getByteValue();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBValue#getByteValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBValue_getFloatValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBValue *obj_self = static_cast< cocos2d::extension::CCBValue * >(DATA_PTR(mrb_self));
      float res = obj_self->getFloatValue();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBValue#getFloatValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBValue_getIntValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBValue *obj_self = static_cast< cocos2d::extension::CCBValue * >(DATA_PTR(mrb_self));
      int res = obj_self->getIntValue();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBValue#getIntValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBValue_getStringValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBValue *obj_self = static_cast< cocos2d::extension::CCBValue * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getStringValue();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBValue#getStringValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBValue_getType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBValue *obj_self = static_cast< cocos2d::extension::CCBValue * >(DATA_PTR(mrb_self));
      int res = obj_self->getType();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBValue#getType");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBValue_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBValue;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBValue * res = new cocos2d::extension::CCBValue();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBValue#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBaseData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBaseData * res = new cocos2d::extension::CCBaseData();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__get_a(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
  int res = obj_self->a;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__set_a(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int a;
  if (1 == mrb_get_args(mrb, "i", &a)) {
    cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
    
    obj_self->a = a;
    return mrb_fixnum_value(a);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#a");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__get_b(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
  int res = obj_self->b;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__set_b(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int b;
  if (1 == mrb_get_args(mrb, "i", &b)) {
    cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
    
    obj_self->b = b;
    return mrb_fixnum_value(b);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#b");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData_copy(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value _node;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &_node)) {
      cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
      obj_self->copy(static_cast< cocos2d::extension::CCBaseData * >(cc_mrb_data_get_ptr(mrb, _node, &mrb_type_cocos2d_extension_CCBaseData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#copy");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCBaseData * res = cocos2d::extension::CCBaseData::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBaseData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__get_g(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
  int res = obj_self->g;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__set_g(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int g;
  if (1 == mrb_get_args(mrb, "i", &g)) {
    cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
    
    obj_self->g = g;
    return mrb_fixnum_value(g);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#g");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__get_isUseColorInfo(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->isUseColorInfo;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__set_isUseColorInfo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool isUseColorInfo;
  if (1 == mrb_get_args(mrb, "b", &isUseColorInfo)) {
    cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
    
    obj_self->isUseColorInfo = isUseColorInfo;
    return mrb_bool_value(isUseColorInfo);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#isUseColorInfo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__get_r(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
  int res = obj_self->r;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__set_r(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int r;
  if (1 == mrb_get_args(mrb, "i", &r)) {
    cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
    
    obj_self->r = r;
    return mrb_fixnum_value(r);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#r");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__get_scaleX(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
  float res = obj_self->scaleX;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__set_scaleX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float scaleX;
  if (1 == mrb_get_args(mrb, "f", &scaleX)) {
    cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
    
    obj_self->scaleX = scaleX;
    return mrb_float_value(mrb, scaleX);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#scaleX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__get_scaleY(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
  float res = obj_self->scaleY;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__set_scaleY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float scaleY;
  if (1 == mrb_get_args(mrb, "f", &scaleY)) {
    cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
    
    obj_self->scaleY = scaleY;
    return mrb_float_value(mrb, scaleY);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#scaleY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__get_skewX(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
  float res = obj_self->skewX;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__set_skewX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float skewX;
  if (1 == mrb_get_args(mrb, "f", &skewX)) {
    cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
    
    obj_self->skewX = skewX;
    return mrb_float_value(mrb, skewX);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#skewX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__get_skewY(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
  float res = obj_self->skewY;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__set_skewY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float skewY;
  if (1 == mrb_get_args(mrb, "f", &skewY)) {
    cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
    
    obj_self->skewY = skewY;
    return mrb_float_value(mrb, skewY);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#skewY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData_subtract(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value _from;
    mrb_value _to;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &_from, &_to)) {
      cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
      obj_self->subtract(static_cast< cocos2d::extension::CCBaseData * >(cc_mrb_data_get_ptr(mrb, _from, &mrb_type_cocos2d_extension_CCBaseData, NULL)), static_cast< cocos2d::extension::CCBaseData * >(cc_mrb_data_get_ptr(mrb, _to, &mrb_type_cocos2d_extension_CCBaseData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#subtract");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__get_tweenRotate(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
  float res = obj_self->tweenRotate;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__set_tweenRotate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float tweenRotate;
  if (1 == mrb_get_args(mrb, "f", &tweenRotate)) {
    cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
    
    obj_self->tweenRotate = tweenRotate;
    return mrb_float_value(mrb, tweenRotate);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#tweenRotate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__get_x(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
  float res = obj_self->x;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__set_x(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float x;
  if (1 == mrb_get_args(mrb, "f", &x)) {
    cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
    
    obj_self->x = x;
    return mrb_float_value(mrb, x);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#x");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__get_y(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
  float res = obj_self->y;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__set_y(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float y;
  if (1 == mrb_get_args(mrb, "f", &y)) {
    cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
    
    obj_self->y = y;
    return mrb_float_value(mrb, y);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#y");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__get_zOrder(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
  int res = obj_self->zOrder;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCBaseData__set_zOrder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int zOrder;
  if (1 == mrb_get_args(mrb, "i", &zOrder)) {
    cocos2d::extension::CCBaseData *obj_self = static_cast< cocos2d::extension::CCBaseData * >(DATA_PTR(mrb_self));
    
    obj_self->zOrder = zOrder;
    return mrb_fixnum_value(zOrder);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBaseData#zOrder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBatchNode_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBatchNode;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBatchNode * res = new cocos2d::extension::CCBatchNode();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBatchNode#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBatchNode_addChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    mrb_int zOrder;
    mrb_int tag;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oii", &child, &zOrder, &tag)) {
      cocos2d::extension::CCBatchNode *obj_self = static_cast< cocos2d::extension::CCBatchNode * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(DATA_PTR(child)), zOrder, tag);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBatchNode#addChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBatchNode_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCBatchNode * res = cocos2d::extension::CCBatchNode::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBatchNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBatchNode::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBatchNode_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBatchNode *obj_self = static_cast< cocos2d::extension::CCBatchNode * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBatchNode#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBatchNode_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBatchNode *obj_self = static_cast< cocos2d::extension::CCBatchNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBatchNode#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBatchNode_visit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBatchNode *obj_self = static_cast< cocos2d::extension::CCBatchNode * >(DATA_PTR(mrb_self));
      obj_self->visit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBatchNode#visit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBone;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBone * res = new cocos2d::extension::CCBone();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_addChildBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value _child;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &_child)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->addChildBone(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, _child, &mrb_type_cocos2d_extension_CCBone, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#addChildBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_addDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value displayData;
    mrb_int index;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &displayData, &index)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->addDisplay(static_cast< cocos2d::extension::CCDisplayData * >(cc_mrb_data_get_ptr(mrb, displayData, &mrb_type_cocos2d_extension_CCDisplayData, NULL)), index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#addDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_changeDisplayByIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    mrb_bool force;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ib", &index, &force)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->changeDisplayByIndex(index, force);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#changeDisplayByIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_childrenAlloc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->childrenAlloc();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#childrenAlloc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCBone * res = cocos2d::extension::CCBone::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBone,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      class cocos2d::extension::CCBone * res = cocos2d::extension::CCBone::create(RSTRING_PTR(name));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBone,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_getArmature(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCArmature * res = obj_self->getArmature();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCArmature,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#getArmature");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_getBoneData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCBoneData * res = obj_self->getBoneData();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCBoneData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#getBoneData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_getChildArmature(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCArmature * res = obj_self->getChildArmature();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCArmature,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#getChildArmature");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_getChildren(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getChildren();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#getChildren");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_getDisplayManager(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCDisplayManager * res = obj_self->getDisplayManager();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCDisplayManager,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#getDisplayManager");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_getIgnoreMovementBoneData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getIgnoreMovementBoneData();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#getIgnoreMovementBoneData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_getName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#getName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_getParentBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCBone * res = obj_self->getParentBone();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCBone,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#getParentBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_getTween(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCTween * res = obj_self->getTween();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCTween,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#getTween");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_getTweenData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCFrameData * res = obj_self->getTweenData();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCFrameData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#getTweenData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_isTransformDirty(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isTransformDirty();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#isTransformDirty");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone__get_m_bTransformDirty(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bTransformDirty;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCBone__set_m_bTransformDirty(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bTransformDirty;
  if (1 == mrb_get_args(mrb, "b", &m_bTransformDirty)) {
    cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
    
    obj_self->m_bTransformDirty = m_bTransformDirty;
    return mrb_bool_value(m_bTransformDirty);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#m_bTransformDirty");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone__get_m_pChildren(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
  class cocos2d::CCArray * res = obj_self->m_pChildren;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCArray"),
                       &mrb_type_cocos2d_CCArray,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCBone__set_m_pChildren(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pChildren;
  if (1 == mrb_get_args(mrb, "o", &m_pChildren)) {
    static_cast< cocos2d::CCArray * >(DATA_PTR(m_pChildren))->retain();
    cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
    if (obj_self->m_pChildren) { obj_self->m_pChildren->release(); }
    obj_self->m_pChildren = static_cast< cocos2d::CCArray * >(DATA_PTR(m_pChildren));
    return m_pChildren;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#m_pChildren");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone__get_m_pParent(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
  class cocos2d::extension::CCBone * res = obj_self->m_pParent;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBone"),
                       &mrb_type_cocos2d_extension_CCBone,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCBone__set_m_pParent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pParent;
  if (1 == mrb_get_args(mrb, "o", &m_pParent)) {
    static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, m_pParent, &mrb_type_cocos2d_extension_CCBone, NULL))->retain();
    cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
    if (obj_self->m_pParent) { obj_self->m_pParent->release(); }
    obj_self->m_pParent = static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, m_pParent, &mrb_type_cocos2d_extension_CCBone, NULL));
    return m_pParent;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#m_pParent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone__get_m_tWorldTransform(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
  struct cocos2d::CCAffineTransform *res = &obj_self->m_tWorldTransform;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform"),
                       &mrb_no_free_type_cocos2d_CCAffineTransform,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCBone__set_m_tWorldTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_tWorldTransform;
  if (1 == mrb_get_args(mrb, "o", &m_tWorldTransform)) {
    cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
    
    obj_self->m_tWorldTransform = *(static_cast< struct cocos2d::CCAffineTransform * >(DATA_PTR(m_tWorldTransform)));
    return m_tWorldTransform;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#m_tWorldTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_nodeToArmatureTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      struct cocos2d::CCAffineTransform *res = new struct cocos2d::CCAffineTransform(); *res = obj_self->nodeToArmatureTransform();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform"),
                       &mrb_type_cocos2d_CCAffineTransform,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#nodeToArmatureTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_removeChildBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_bool recursion;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ob", &bone, &recursion)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->removeChildBone(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), recursion);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#removeChildBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_removeFromParent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool recursion;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &recursion)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->removeFromParent(recursion);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#removeFromParent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_setArmature(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->setArmature(static_cast< cocos2d::extension::CCArmature * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCArmature, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#setArmature");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_setBoneData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->setBoneData(static_cast< cocos2d::extension::CCBoneData * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCBoneData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#setBoneData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_setChildArmature(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->setChildArmature(static_cast< cocos2d::extension::CCArmature * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCArmature, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#setChildArmature");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_setDisplayManager(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->setDisplayManager(static_cast< cocos2d::extension::CCDisplayManager * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCDisplayManager, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#setDisplayManager");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_setIgnoreMovementBoneData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &var)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->setIgnoreMovementBoneData(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#setIgnoreMovementBoneData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_setName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &var)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->setName(RSTRING_PTR(var));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#setName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_setParentBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value parent;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &parent)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->setParentBone(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, parent, &mrb_type_cocos2d_extension_CCBone, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#setParentBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_setTransformDirty(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool dirty;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &dirty)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->setTransformDirty(dirty);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#setTransformDirty");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_setZOrder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int zOrder;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &zOrder)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->setZOrder(zOrder);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#setZOrder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float delta;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &delta)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->update(delta);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_updateColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->updateColor();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#updateColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_updateDisplayedColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value parentColor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &parentColor)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->updateDisplayedColor(*(static_cast< ccColor3B * >(DATA_PTR(parentColor))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#updateDisplayedColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBone_updateDisplayedOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int parentOpacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &parentOpacity)) {
      cocos2d::extension::CCBone *obj_self = static_cast< cocos2d::extension::CCBone * >(DATA_PTR(mrb_self));
      obj_self->updateDisplayedOpacity(parentOpacity);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBone#updateDisplayedOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBoneData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCBoneData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCBoneData * res = new cocos2d::extension::CCBoneData();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBoneData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBoneData_addDisplayData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value displayData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &displayData)) {
      cocos2d::extension::CCBoneData *obj_self = static_cast< cocos2d::extension::CCBoneData * >(DATA_PTR(mrb_self));
      obj_self->addDisplayData(static_cast< cocos2d::extension::CCDisplayData * >(cc_mrb_data_get_ptr(mrb, displayData, &mrb_type_cocos2d_extension_CCDisplayData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBoneData#addDisplayData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBoneData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCBoneData * res = cocos2d::extension::CCBoneData::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCBoneData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBoneData::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBoneData__get_displayDataList(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBoneData *obj_self = static_cast< cocos2d::extension::CCBoneData * >(DATA_PTR(mrb_self));
  class cocos2d::CCArray *res = &obj_self->displayDataList;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCArray"),
                       &mrb_no_free_type_cocos2d_CCArray,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCBoneData__set_displayDataList(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value displayDataList;
  if (1 == mrb_get_args(mrb, "o", &displayDataList)) {
    cocos2d::extension::CCBoneData *obj_self = static_cast< cocos2d::extension::CCBoneData * >(DATA_PTR(mrb_self));
    
    obj_self->displayDataList = *(static_cast< cocos2d::CCArray * >(DATA_PTR(displayDataList)));
    return displayDataList;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBoneData#displayDataList");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBoneData_getDisplayData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &index)) {
      cocos2d::extension::CCBoneData *obj_self = static_cast< cocos2d::extension::CCBoneData * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCDisplayData * res = obj_self->getDisplayData(index);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCDisplayData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBoneData#getDisplayData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBoneData_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCBoneData *obj_self = static_cast< cocos2d::extension::CCBoneData * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBoneData#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBoneData__get_name(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBoneData *obj_self = static_cast< cocos2d::extension::CCBoneData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->name;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCBoneData__set_name(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value name;
  if (1 == mrb_get_args(mrb, "S", &name)) {
    cocos2d::extension::CCBoneData *obj_self = static_cast< cocos2d::extension::CCBoneData * >(DATA_PTR(mrb_self));
    
    obj_self->name = RSTRING_PTR(name);
    return name;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBoneData#name");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCBoneData__get_parentName(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCBoneData *obj_self = static_cast< cocos2d::extension::CCBoneData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->parentName;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCBoneData__set_parentName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value parentName;
  if (1 == mrb_get_args(mrb, "S", &parentName)) {
    cocos2d::extension::CCBoneData *obj_self = static_cast< cocos2d::extension::CCBoneData * >(DATA_PTR(mrb_self));
    
    obj_self->parentName = RSTRING_PTR(parentName);
    return parentName;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCBoneData#parentName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCColliderDetector_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCColliderDetector;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCColliderDetector * res = new cocos2d::extension::CCColliderDetector();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCColliderDetector#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCColliderDetector_addContourData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value contourData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &contourData)) {
      cocos2d::extension::CCColliderDetector *obj_self = static_cast< cocos2d::extension::CCColliderDetector * >(DATA_PTR(mrb_self));
      obj_self->addContourData(static_cast< cocos2d::extension::CCContourData * >(cc_mrb_data_get_ptr(mrb, contourData, &mrb_type_cocos2d_extension_CCContourData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCColliderDetector#addContourData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCColliderDetector_addContourDataList(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value contourDataList;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &contourDataList)) {
      cocos2d::extension::CCColliderDetector *obj_self = static_cast< cocos2d::extension::CCColliderDetector * >(DATA_PTR(mrb_self));
      obj_self->addContourDataList(static_cast< cocos2d::CCArray * >(DATA_PTR(contourDataList)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCColliderDetector#addContourDataList");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCColliderDetector_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCColliderDetector * res = cocos2d::extension::CCColliderDetector::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCColliderDetector,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value bone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &bone)) {
      class cocos2d::extension::CCColliderDetector * res = cocos2d::extension::CCColliderDetector::create(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCColliderDetector,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCColliderDetector::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCColliderDetector_getBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCColliderDetector *obj_self = static_cast< cocos2d::extension::CCColliderDetector * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCBone * res = obj_self->getBone();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCBone,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCColliderDetector#getBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCColliderDetector_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCColliderDetector *obj_self = static_cast< cocos2d::extension::CCColliderDetector * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value bone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &bone)) {
      cocos2d::extension::CCColliderDetector *obj_self = static_cast< cocos2d::extension::CCColliderDetector * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCColliderDetector#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCColliderDetector_removeAll(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCColliderDetector *obj_self = static_cast< cocos2d::extension::CCColliderDetector * >(DATA_PTR(mrb_self));
      obj_self->removeAll();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCColliderDetector#removeAll");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCColliderDetector_removeContourData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value contourData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &contourData)) {
      cocos2d::extension::CCColliderDetector *obj_self = static_cast< cocos2d::extension::CCColliderDetector * >(DATA_PTR(mrb_self));
      obj_self->removeContourData(static_cast< cocos2d::extension::CCContourData * >(cc_mrb_data_get_ptr(mrb, contourData, &mrb_type_cocos2d_extension_CCContourData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCColliderDetector#removeContourData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCColliderDetector_setActive(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool active;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &active)) {
      cocos2d::extension::CCColliderDetector *obj_self = static_cast< cocos2d::extension::CCColliderDetector * >(DATA_PTR(mrb_self));
      obj_self->setActive(active);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCColliderDetector#setActive");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCColliderDetector_setBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCColliderDetector *obj_self = static_cast< cocos2d::extension::CCColliderDetector * >(DATA_PTR(mrb_self));
      obj_self->setBone(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCBone, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCColliderDetector#setBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCColliderDetector_setColliderFilter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value filter;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &filter)) {
      cocos2d::extension::CCColliderDetector *obj_self = static_cast< cocos2d::extension::CCColliderDetector * >(DATA_PTR(mrb_self));
      obj_self->setColliderFilter(*(static_cast< struct b2Filter * >(DATA_PTR(filter))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCColliderDetector#setColliderFilter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCColliderDetector_updateTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value t;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &t)) {
      cocos2d::extension::CCColliderDetector *obj_self = static_cast< cocos2d::extension::CCColliderDetector * >(DATA_PTR(mrb_self));
      obj_self->updateTransform(*(static_cast< struct cocos2d::CCAffineTransform * >(DATA_PTR(t))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCColliderDetector#updateTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCColor3bObject_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value s_value;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCColor3bObject;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &s_value)) {
      cocos2d::extension::CCColor3bObject * res = new cocos2d::extension::CCColor3bObject(*(static_cast< ccColor3B * >(DATA_PTR(s_value))));
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCColor3bObject#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCColor3bObject__get_value(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCColor3bObject *obj_self = static_cast< cocos2d::extension::CCColor3bObject * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccColor3B *res = &obj_self->value;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_no_free_type_cocos2d__ccColor3B,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCColor3bObject__set_value(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value value;
  if (1 == mrb_get_args(mrb, "o", &value)) {
    cocos2d::extension::CCColor3bObject *obj_self = static_cast< cocos2d::extension::CCColor3bObject * >(DATA_PTR(mrb_self));
    
    obj_self->value = *(static_cast< struct cocos2d::_ccColor3B * >(DATA_PTR(value)));
    return value;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCColor3bObject#value");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAttribute_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCComAttribute * res = cocos2d::extension::CCComAttribute::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCComAttribute,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAttribute::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAttribute_getBool(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &key)) {
      cocos2d::extension::CCComAttribute *obj_self = static_cast< cocos2d::extension::CCComAttribute * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getBool(RSTRING_PTR(key));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAttribute#getBool");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAttribute_getCString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &key)) {
      cocos2d::extension::CCComAttribute *obj_self = static_cast< cocos2d::extension::CCComAttribute * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getCString(RSTRING_PTR(key));
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAttribute#getCString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAttribute_getDouble(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &key)) {
      cocos2d::extension::CCComAttribute *obj_self = static_cast< cocos2d::extension::CCComAttribute * >(DATA_PTR(mrb_self));
      double res = obj_self->getDouble(RSTRING_PTR(key));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAttribute#getDouble");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAttribute_getFloat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &key)) {
      cocos2d::extension::CCComAttribute *obj_self = static_cast< cocos2d::extension::CCComAttribute * >(DATA_PTR(mrb_self));
      float res = obj_self->getFloat(RSTRING_PTR(key));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAttribute#getFloat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAttribute_getInt(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &key)) {
      cocos2d::extension::CCComAttribute *obj_self = static_cast< cocos2d::extension::CCComAttribute * >(DATA_PTR(mrb_self));
      int res = obj_self->getInt(RSTRING_PTR(key));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAttribute#getInt");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAttribute_getObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &key)) {
      cocos2d::extension::CCComAttribute *obj_self = static_cast< cocos2d::extension::CCComAttribute * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->getObject(RSTRING_PTR(key));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAttribute#getObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAttribute_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAttribute *obj_self = static_cast< cocos2d::extension::CCComAttribute * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAttribute#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAttribute_setBool(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    mrb_bool value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sb", &key, &value)) {
      cocos2d::extension::CCComAttribute *obj_self = static_cast< cocos2d::extension::CCComAttribute * >(DATA_PTR(mrb_self));
      obj_self->setBool(RSTRING_PTR(key), value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAttribute#setBool");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAttribute_setCString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    mrb_value value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &key, &value)) {
      cocos2d::extension::CCComAttribute *obj_self = static_cast< cocos2d::extension::CCComAttribute * >(DATA_PTR(mrb_self));
      obj_self->setCString(RSTRING_PTR(key), RSTRING_PTR(value));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAttribute#setCString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAttribute_setDouble(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    mrb_float value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sf", &key, &value)) {
      cocos2d::extension::CCComAttribute *obj_self = static_cast< cocos2d::extension::CCComAttribute * >(DATA_PTR(mrb_self));
      obj_self->setDouble(RSTRING_PTR(key), value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAttribute#setDouble");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAttribute_setFloat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    mrb_float value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sf", &key, &value)) {
      cocos2d::extension::CCComAttribute *obj_self = static_cast< cocos2d::extension::CCComAttribute * >(DATA_PTR(mrb_self));
      obj_self->setFloat(RSTRING_PTR(key), value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAttribute#setFloat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAttribute_setInt(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    mrb_int value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &key, &value)) {
      cocos2d::extension::CCComAttribute *obj_self = static_cast< cocos2d::extension::CCComAttribute * >(DATA_PTR(mrb_self));
      obj_self->setInt(RSTRING_PTR(key), value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAttribute#setInt");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAttribute_setObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    mrb_value value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &key, &value)) {
      cocos2d::extension::CCComAttribute *obj_self = static_cast< cocos2d::extension::CCComAttribute * >(DATA_PTR(mrb_self));
      obj_self->setObject(RSTRING_PTR(key), static_cast< cocos2d::CCObject * >(DATA_PTR(value)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAttribute#setObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCComAudio * res = cocos2d::extension::CCComAudio::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCComAudio,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_end(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->end();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#end");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_getBackgroundMusicVolume(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      float res = obj_self->getBackgroundMusicVolume();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#getBackgroundMusicVolume");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_getEffectsVolume(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      float res = obj_self->getEffectsVolume();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#getEffectsVolume");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_isBackgroundMusicPlaying(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isBackgroundMusicPlaying();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#isBackgroundMusicPlaying");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_isEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#isEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_onExit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->onExit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#onExit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_pauseAllEffects(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->pauseAllEffects();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#pauseAllEffects");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_pauseBackgroundMusic(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->pauseBackgroundMusic();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#pauseBackgroundMusic");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_pauseEffect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nSoundId;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nSoundId)) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->pauseEffect(nSoundId);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#pauseEffect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_playBackgroundMusic(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszFilePath;
    mrb_bool bLoop;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sb", &pszFilePath, &bLoop)) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->playBackgroundMusic(RSTRING_PTR(pszFilePath), bLoop);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value pszFilePath;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszFilePath)) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->playBackgroundMusic(RSTRING_PTR(pszFilePath));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#playBackgroundMusic");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_playEffect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszFilePath;
    mrb_bool bLoop;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sb", &pszFilePath, &bLoop)) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->playEffect(RSTRING_PTR(pszFilePath), bLoop);
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value pszFilePath;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszFilePath)) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->playEffect(RSTRING_PTR(pszFilePath));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#playEffect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_preloadBackgroundMusic(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszFilePath;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszFilePath)) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->preloadBackgroundMusic(RSTRING_PTR(pszFilePath));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#preloadBackgroundMusic");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_preloadEffect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszFilePath;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszFilePath)) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->preloadEffect(RSTRING_PTR(pszFilePath));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#preloadEffect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_resumeAllEffects(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->resumeAllEffects();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#resumeAllEffects");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_resumeBackgroundMusic(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->resumeBackgroundMusic();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#resumeBackgroundMusic");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_resumeEffect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nSoundId;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nSoundId)) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->resumeEffect(nSoundId);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#resumeEffect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_rewindBackgroundMusic(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->rewindBackgroundMusic();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#rewindBackgroundMusic");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_setBackgroundMusicVolume(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float volume;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &volume)) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->setBackgroundMusicVolume(volume);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#setBackgroundMusicVolume");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_setEffectsVolume(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float volume;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &volume)) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->setEffectsVolume(volume);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#setEffectsVolume");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool b;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &b)) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(b);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_stopAllEffects(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->stopAllEffects();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#stopAllEffects");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_stopBackgroundMusic(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bReleaseData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bReleaseData)) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->stopBackgroundMusic(bReleaseData);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->stopBackgroundMusic();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#stopBackgroundMusic");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_stopEffect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nSoundId;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nSoundId)) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->stopEffect(nSoundId);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#stopEffect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_unloadEffect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszFilePath;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszFilePath)) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      obj_self->unloadEffect(RSTRING_PTR(pszFilePath));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#unloadEffect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComAudio_willPlayBackgroundMusic(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComAudio *obj_self = static_cast< cocos2d::extension::CCComAudio * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->willPlayBackgroundMusic();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComAudio#willPlayBackgroundMusic");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_ccTouchBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->ccTouchBegan(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#ccTouchBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_ccTouchCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->ccTouchCancelled(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#ccTouchCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_ccTouchEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->ccTouchEnded(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#ccTouchEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_ccTouchMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->ccTouchMoved(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#ccTouchMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_ccTouchesBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesBegan(static_cast< cocos2d::CCSet * >(DATA_PTR(pTouches)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#ccTouchesBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_ccTouchesCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesCancelled(static_cast< cocos2d::CCSet * >(DATA_PTR(pTouches)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#ccTouchesCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_ccTouchesEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesEnded(static_cast< cocos2d::CCSet * >(DATA_PTR(pTouches)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#ccTouchesEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_ccTouchesMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesMoved(static_cast< cocos2d::CCSet * >(DATA_PTR(pTouches)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#ccTouchesMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCComController * res = cocos2d::extension::CCComController::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCComController,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_isEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#isEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_isTouchEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isTouchEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#isTouchEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_onExit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->onExit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#onExit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_registerScriptHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &nHandler)) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->registerScriptHandler(cc_mrb_proc_keep(mrb, nHandler));
      //cc_mrb_proc_keep(mrb, nHandler);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#registerScriptHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_registerScriptTouchHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    mrb_bool bIsMultiTouches;
    mrb_int nPriority;
    mrb_bool bSwallowsTouches;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "obib", &nHandler, &bIsMultiTouches, &nPriority, &bSwallowsTouches)) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->registerScriptTouchHandler(cc_mrb_proc_keep(mrb, nHandler), bIsMultiTouches, nPriority, bSwallowsTouches);
      //cc_mrb_proc_keep(mrb, nHandler);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#registerScriptTouchHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool b;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &b)) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(b);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_setTouchEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &value)) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->setTouchEnabled(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#setTouchEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_unregisterScriptHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->unregisterScriptHandler();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#unregisterScriptHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_unregisterScriptTouchHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->unregisterScriptTouchHandler();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#unregisterScriptTouchHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCComController_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float delta;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &delta)) {
      cocos2d::extension::CCComController *obj_self = static_cast< cocos2d::extension::CCComController * >(DATA_PTR(mrb_self));
      obj_self->update(delta);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCComController#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCContourData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCContourData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCContourData * res = new cocos2d::extension::CCContourData();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCContourData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCContourData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCContourData * res = cocos2d::extension::CCContourData::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCContourData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCContourData::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCContourData_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCContourData *obj_self = static_cast< cocos2d::extension::CCContourData * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCContourData#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCContourData__get_vertexList(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCContourData *obj_self = static_cast< cocos2d::extension::CCContourData * >(DATA_PTR(mrb_self));
  class cocos2d::CCArray *res = &obj_self->vertexList;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCArray"),
                       &mrb_no_free_type_cocos2d_CCArray,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCContourData__set_vertexList(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value vertexList;
  if (1 == mrb_get_args(mrb, "o", &vertexList)) {
    cocos2d::extension::CCContourData *obj_self = static_cast< cocos2d::extension::CCContourData * >(DATA_PTR(mrb_self));
    
    obj_self->vertexList = *(static_cast< cocos2d::CCArray * >(DATA_PTR(vertexList)));
    return vertexList;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCContourData#vertexList");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCContourVertex2_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float x;
    mrb_float y;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCContourVertex2;
    DATA_PTR(mrb_self) = NULL;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &x, &y)) {
      cocos2d::extension::CCContourVertex2 * res = new cocos2d::extension::CCContourVertex2(x, y);
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCContourVertex2#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCContourVertex2__get_x(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCContourVertex2 *obj_self = static_cast< cocos2d::extension::CCContourVertex2 * >(DATA_PTR(mrb_self));
  float res = obj_self->x;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCContourVertex2__set_x(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float x;
  if (1 == mrb_get_args(mrb, "f", &x)) {
    cocos2d::extension::CCContourVertex2 *obj_self = static_cast< cocos2d::extension::CCContourVertex2 * >(DATA_PTR(mrb_self));
    
    obj_self->x = x;
    return mrb_float_value(mrb, x);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCContourVertex2#x");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCContourVertex2__get_y(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCContourVertex2 *obj_self = static_cast< cocos2d::extension::CCContourVertex2 * >(DATA_PTR(mrb_self));
  float res = obj_self->y;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCContourVertex2__set_y(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float y;
  if (1 == mrb_get_args(mrb, "f", &y)) {
    cocos2d::extension::CCContourVertex2 *obj_self = static_cast< cocos2d::extension::CCContourVertex2 * >(DATA_PTR(mrb_self));
    
    obj_self->y = y;
    return mrb_float_value(mrb, y);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCContourVertex2#y");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCControl;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCControl * res = new cocos2d::extension::CCControl();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_addHandleOfControlEvent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nFunID;
    mrb_int controlEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &nFunID, &controlEvent)) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      obj_self->addHandleOfControlEvent(cc_mrb_proc_keep(mrb, nFunID), controlEvent);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#addHandleOfControlEvent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_addTargetWithActionForControlEvents(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value action;
    mrb_int controlEvents;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooi", &target, &action, &controlEvents)) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      obj_self->addTargetWithActionForControlEvents(CCMRubyCallbackWrapper::create(mrb, target, action), cccontrol_selector(CCMRubyCallbackWrapper::SEL_CCControlHandler_Impl), controlEvents);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#addTargetWithActionForControlEvents");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_getState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      CCControlState res = obj_self->getState();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#getState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_getTouchLocation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touch;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &touch)) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getTouchLocation(static_cast< cocos2d::CCTouch * >(DATA_PTR(touch)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#getTouchLocation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_hasVisibleParents(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->hasVisibleParents();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#hasVisibleParents");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_isEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#isEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_isHighlighted(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isHighlighted();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#isHighlighted");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_isSelected(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isSelected();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#isSelected");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_isTouchInside(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touch;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &touch)) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isTouchInside(static_cast< cocos2d::CCTouch * >(DATA_PTR(touch)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#isTouchInside");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_needsLayout(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      obj_self->needsLayout();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#needsLayout");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_onExit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      obj_self->onExit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#onExit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_registerWithTouchDispatcher(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      obj_self->registerWithTouchDispatcher();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#registerWithTouchDispatcher");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_removeHandleOfAllControlEvents(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      obj_self->removeHandleOfAllControlEvents();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#removeHandleOfAllControlEvents");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_removeHandleOfControlEvent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int controlEvent;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &controlEvent)) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      obj_self->removeHandleOfControlEvent(controlEvent);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#removeHandleOfControlEvent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_removeTargetForAllControlEvents(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      obj_self->removeTargetForAllControlEvents();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#removeTargetForAllControlEvents");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_removeTargetWithActionForControlEvents(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value action;
    mrb_int controlEvents;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooi", &target, &action, &controlEvents)) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      obj_self->removeTargetWithActionForControlEvents(CCMRubyCallbackWrapper::create(mrb, target, action), cccontrol_selector(CCMRubyCallbackWrapper::SEL_CCControlHandler_Impl), controlEvents);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#removeTargetWithActionForControlEvents");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_sendActionsForControlEvents(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int controlEvents;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &controlEvents)) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      obj_self->sendActionsForControlEvents(controlEvents);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#sendActionsForControlEvents");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bEnabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bEnabled)) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(bEnabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_setHighlighted(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bHighlighted;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bHighlighted)) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      obj_self->setHighlighted(bHighlighted);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#setHighlighted");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bOpacityModifyRGB;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bOpacityModifyRGB)) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(bOpacityModifyRGB);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControl_setSelected(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bSelected;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bSelected)) {
      cocos2d::extension::CCControl *obj_self = static_cast< cocos2d::extension::CCControl * >(DATA_PTR(mrb_self));
      obj_self->setSelected(bSelected);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControl#setSelected");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCControlButton;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton * res = new cocos2d::extension::CCControlButton();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_ccTouchBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->ccTouchBegan(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#ccTouchBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_ccTouchCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->ccTouchCancelled(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#ccTouchCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_ccTouchEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->ccTouchEnded(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#ccTouchEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_ccTouchMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->ccTouchMoved(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#ccTouchMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value label;
    mrb_value backgroundSprite;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &label, &backgroundSprite)) {
      class cocos2d::extension::CCControlButton * res = cocos2d::extension::CCControlButton::create(static_cast< cocos2d::CCNode * >(DATA_PTR(label)), static_cast< cocos2d::extension::CCScale9Sprite * >(cc_mrb_data_get_ptr(mrb, backgroundSprite, &mrb_type_cocos2d_extension_CCScale9Sprite, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCControlButton,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value title;
    mrb_value fontName;
    mrb_float fontSize;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSf", &title, &fontName, &fontSize)) {
      class cocos2d::extension::CCControlButton * res = cocos2d::extension::CCControlButton::create(RSTRING_PTR(title), RSTRING_PTR(fontName), fontSize);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCControlButton,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value sprite;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sprite)) {
      class cocos2d::extension::CCControlButton * res = cocos2d::extension::CCControlButton::create(static_cast< cocos2d::extension::CCScale9Sprite * >(cc_mrb_data_get_ptr(mrb, sprite, &mrb_type_cocos2d_extension_CCScale9Sprite, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCControlButton,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCControlButton * res = cocos2d::extension::CCControlButton::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCControlButton,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_doesAdjustBackgroundImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->doesAdjustBackgroundImage();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#doesAdjustBackgroundImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getBackgroundSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCScale9Sprite * res = obj_self->getBackgroundSprite();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCScale9Sprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getBackgroundSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getBackgroundSpriteDispatchTable(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getBackgroundSpriteDispatchTable();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getBackgroundSpriteDispatchTable");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getBackgroundSpriteForState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int state;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &state)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCScale9Sprite * res = obj_self->getBackgroundSpriteForState(state);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCScale9Sprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getBackgroundSpriteForState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getCurrentTitle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      class cocos2d::CCString * res = obj_self->getCurrentTitle();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCString,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getCurrentTitle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getCurrentTitleColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getCurrentTitleColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getCurrentTitleColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getHorizontalOrigin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      int res = obj_self->getHorizontalOrigin();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getHorizontalOrigin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getLabelAnchorPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getLabelAnchorPoint();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getLabelAnchorPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      GLubyte res = obj_self->getOpacity();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getPreferredSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getPreferredSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getPreferredSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getTitleBMFontForState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int state;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &state)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getTitleBMFontForState(state);
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getTitleBMFontForState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getTitleColorDispatchTable(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getTitleColorDispatchTable();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getTitleColorDispatchTable");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getTitleColorForState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int state;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &state)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getTitleColorForState(state);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getTitleColorForState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getTitleDispatchTable(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getTitleDispatchTable();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getTitleDispatchTable");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getTitleForState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int state;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &state)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      class cocos2d::CCString * res = obj_self->getTitleForState(state);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCString,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getTitleForState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getTitleLabel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getTitleLabel();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getTitleLabel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getTitleLabelDispatchTable(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getTitleLabelDispatchTable();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getTitleLabelDispatchTable");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getTitleLabelForState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int state;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &state)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getTitleLabelForState(state);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getTitleLabelForState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getTitleTTFForState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int state;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &state)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getTitleTTFForState(state);
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getTitleTTFForState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getTitleTTFSizeForState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int state;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &state)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      float res = obj_self->getTitleTTFSizeForState(state);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getTitleTTFSizeForState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getVerticalMargin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      int res = obj_self->getVerticalMargin();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getVerticalMargin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_getZoomOnTouchDown(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getZoomOnTouchDown();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#getZoomOnTouchDown");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_initWithBackgroundSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sprite;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sprite)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithBackgroundSprite(static_cast< cocos2d::extension::CCScale9Sprite * >(cc_mrb_data_get_ptr(mrb, sprite, &mrb_type_cocos2d_extension_CCScale9Sprite, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#initWithBackgroundSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_initWithLabelAndBackgroundSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value label;
    mrb_value backgroundSprite;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &label, &backgroundSprite)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithLabelAndBackgroundSprite(static_cast< cocos2d::CCNode * >(DATA_PTR(label)), static_cast< cocos2d::extension::CCScale9Sprite * >(cc_mrb_data_get_ptr(mrb, backgroundSprite, &mrb_type_cocos2d_extension_CCScale9Sprite, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#initWithLabelAndBackgroundSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_initWithTitleAndFontNameAndFontSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value title;
    mrb_value fontName;
    mrb_float fontSize;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSf", &title, &fontName, &fontSize)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTitleAndFontNameAndFontSize(RSTRING_PTR(title), RSTRING_PTR(fontName), fontSize);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#initWithTitleAndFontNameAndFontSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_isPushed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isPushed();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#isPushed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton__get_m_doesAdjustBackgroundImage(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_doesAdjustBackgroundImage;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCControlButton__set_m_doesAdjustBackgroundImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_doesAdjustBackgroundImage;
  if (1 == mrb_get_args(mrb, "b", &m_doesAdjustBackgroundImage)) {
    cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
    
    obj_self->m_doesAdjustBackgroundImage = m_doesAdjustBackgroundImage;
    return mrb_bool_value(m_doesAdjustBackgroundImage);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#m_doesAdjustBackgroundImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_needsLayout(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->needsLayout();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#needsLayout");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setAdjustBackgroundImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool adjustBackgroundImage;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &adjustBackgroundImage)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setAdjustBackgroundImage(adjustBackgroundImage);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setAdjustBackgroundImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setBackgroundSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setBackgroundSprite(static_cast< cocos2d::extension::CCScale9Sprite * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCScale9Sprite, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setBackgroundSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setBackgroundSpriteDispatchTable(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setBackgroundSpriteDispatchTable(static_cast< cocos2d::CCDictionary * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setBackgroundSpriteDispatchTable");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setBackgroundSpriteForState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sprite;
    mrb_int state;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &sprite, &state)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setBackgroundSpriteForState(static_cast< cocos2d::extension::CCScale9Sprite * >(cc_mrb_data_get_ptr(mrb, sprite, &mrb_type_cocos2d_extension_CCScale9Sprite, NULL)), state);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setBackgroundSpriteForState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setBackgroundSpriteFrameForState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value spriteFrame;
    mrb_int state;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &spriteFrame, &state)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setBackgroundSpriteFrameForState(static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(spriteFrame)), state);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setBackgroundSpriteFrameForState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arg1;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &arg1)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setColor(*(static_cast< ccColor3B * >(DATA_PTR(arg1))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool enabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &enabled)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(enabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setHighlighted(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool enabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &enabled)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setHighlighted(enabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setHighlighted");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setLabelAnchorPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setLabelAnchorPoint(*(static_cast< cocos2d::CCPoint * >(DATA_PTR(var))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setLabelAnchorPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setMargins(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int marginH;
    mrb_int marginV;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ii", &marginH, &marginV)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setMargins(marginH, marginV);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setMargins");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setOpacity(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setPreferredSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setPreferredSize(*(static_cast< cocos2d::CCSize * >(DATA_PTR(var))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setPreferredSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setSelected(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool enabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &enabled)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setSelected(enabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setSelected");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setTitleBMFontForState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value fntFile;
    mrb_int state;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &fntFile, &state)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setTitleBMFontForState(RSTRING_PTR(fntFile), state);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setTitleBMFontForState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setTitleColorDispatchTable(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setTitleColorDispatchTable(static_cast< cocos2d::CCDictionary * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setTitleColorDispatchTable");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setTitleColorForState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value color;
    mrb_int state;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &color, &state)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setTitleColorForState(*(static_cast< ccColor3B * >(DATA_PTR(color))), state);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setTitleColorForState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setTitleDispatchTable(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setTitleDispatchTable(static_cast< cocos2d::CCDictionary * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setTitleDispatchTable");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setTitleForState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value title;
    mrb_int state;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &title, &state)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setTitleForState(static_cast< cocos2d::CCString * >(DATA_PTR(title)), state);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setTitleForState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setTitleLabel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setTitleLabel(static_cast< cocos2d::CCNode * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setTitleLabel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setTitleLabelDispatchTable(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setTitleLabelDispatchTable(static_cast< cocos2d::CCDictionary * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setTitleLabelDispatchTable");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setTitleLabelForState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value label;
    mrb_int state;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &label, &state)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setTitleLabelForState(static_cast< cocos2d::CCNode * >(DATA_PTR(label)), state);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setTitleLabelForState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setTitleTTFForState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value fntFile;
    mrb_int state;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &fntFile, &state)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setTitleTTFForState(RSTRING_PTR(fntFile), state);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setTitleTTFForState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setTitleTTFSizeForState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float size;
    mrb_int state;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fi", &size, &state)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setTitleTTFSizeForState(size, state);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setTitleTTFSizeForState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButton_setZoomOnTouchDown(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &var)) {
      cocos2d::extension::CCControlButton *obj_self = static_cast< cocos2d::extension::CCControlButton * >(DATA_PTR(mrb_self));
      obj_self->setZoomOnTouchDown(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButton#setZoomOnTouchDown");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButtonLoader_loader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCControlButtonLoader * res = cocos2d::extension::CCControlButtonLoader::loader();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCControlButtonLoader,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButtonLoader::loader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlButtonLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCControlButtonLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCControlButtonLoader * res = new cocos2d::extension::CCControlButtonLoader();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlButtonLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlColourPicker_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCControlColourPicker;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCControlColourPicker * res = new cocos2d::extension::CCControlColourPicker();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlColourPicker#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlColourPicker_colourSliderValueChanged(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sender;
    mrb_int controlEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &sender, &controlEvent)) {
      cocos2d::extension::CCControlColourPicker *obj_self = static_cast< cocos2d::extension::CCControlColourPicker * >(DATA_PTR(mrb_self));
      obj_self->colourSliderValueChanged(static_cast< cocos2d::CCObject * >(DATA_PTR(sender)), controlEvent);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlColourPicker#colourSliderValueChanged");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlColourPicker_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCControlColourPicker * res = cocos2d::extension::CCControlColourPicker::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCControlColourPicker,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlColourPicker::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlColourPicker_getBackground(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlColourPicker *obj_self = static_cast< cocos2d::extension::CCControlColourPicker * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->getBackground();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlColourPicker#getBackground");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlColourPicker_getHuePicker(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlColourPicker *obj_self = static_cast< cocos2d::extension::CCControlColourPicker * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCControlHuePicker * res = obj_self->getHuePicker();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCControlHuePicker,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlColourPicker#getHuePicker");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlColourPicker_getcolourPicker(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlColourPicker *obj_self = static_cast< cocos2d::extension::CCControlColourPicker * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCControlSaturationBrightnessPicker * res = obj_self->getcolourPicker();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCControlSaturationBrightnessPicker,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlColourPicker#getcolourPicker");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlColourPicker_hueSliderValueChanged(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sender;
    mrb_int controlEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &sender, &controlEvent)) {
      cocos2d::extension::CCControlColourPicker *obj_self = static_cast< cocos2d::extension::CCControlColourPicker * >(DATA_PTR(mrb_self));
      obj_self->hueSliderValueChanged(static_cast< cocos2d::CCObject * >(DATA_PTR(sender)), controlEvent);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlColourPicker#hueSliderValueChanged");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlColourPicker_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlColourPicker *obj_self = static_cast< cocos2d::extension::CCControlColourPicker * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlColourPicker#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlColourPicker_setBackground(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlColourPicker *obj_self = static_cast< cocos2d::extension::CCControlColourPicker * >(DATA_PTR(mrb_self));
      obj_self->setBackground(static_cast< cocos2d::CCSprite * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlColourPicker#setBackground");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlColourPicker_setColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value colorValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &colorValue)) {
      cocos2d::extension::CCControlColourPicker *obj_self = static_cast< cocos2d::extension::CCControlColourPicker * >(DATA_PTR(mrb_self));
      obj_self->setColor(*(static_cast< ccColor3B * >(DATA_PTR(colorValue))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlColourPicker#setColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlColourPicker_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bEnabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bEnabled)) {
      cocos2d::extension::CCControlColourPicker *obj_self = static_cast< cocos2d::extension::CCControlColourPicker * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(bEnabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlColourPicker#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlColourPicker_setHuePicker(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlColourPicker *obj_self = static_cast< cocos2d::extension::CCControlColourPicker * >(DATA_PTR(mrb_self));
      obj_self->setHuePicker(static_cast< cocos2d::extension::CCControlHuePicker * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCControlHuePicker, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlColourPicker#setHuePicker");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlColourPicker_setcolourPicker(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlColourPicker *obj_self = static_cast< cocos2d::extension::CCControlColourPicker * >(DATA_PTR(mrb_self));
      obj_self->setcolourPicker(static_cast< cocos2d::extension::CCControlSaturationBrightnessPicker * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCControlSaturationBrightnessPicker, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlColourPicker#setcolourPicker");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__get_CCControlEventTouchCancel(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCControlEventTouchCancel;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CCControlEventTouchDown(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCControlEventTouchDown;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CCControlEventTouchDragEnter(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCControlEventTouchDragEnter;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CCControlEventTouchDragExit(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCControlEventTouchDragExit;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CCControlEventTouchDragInside(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCControlEventTouchDragInside;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CCControlEventTouchDragOutside(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCControlEventTouchDragOutside;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CCControlEventTouchUpInside(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCControlEventTouchUpInside;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CCControlEventTouchUpOutside(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCControlEventTouchUpOutside;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CCControlEventValueChanged(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCControlEventValueChanged;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCControlHuePicker_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCControlHuePicker;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCControlHuePicker * res = new cocos2d::extension::CCControlHuePicker();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlHuePicker#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlHuePicker_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value pos;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &target, &pos)) {
      class cocos2d::extension::CCControlHuePicker * res = cocos2d::extension::CCControlHuePicker::create(static_cast< cocos2d::CCNode * >(DATA_PTR(target)), *(static_cast< cocos2d::CCPoint * >(DATA_PTR(pos))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCControlHuePicker,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlHuePicker::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlHuePicker_getBackground(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlHuePicker *obj_self = static_cast< cocos2d::extension::CCControlHuePicker * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->getBackground();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlHuePicker#getBackground");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlHuePicker_getHue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlHuePicker *obj_self = static_cast< cocos2d::extension::CCControlHuePicker * >(DATA_PTR(mrb_self));
      float res = obj_self->getHue();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlHuePicker#getHue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlHuePicker_getHuePercentage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlHuePicker *obj_self = static_cast< cocos2d::extension::CCControlHuePicker * >(DATA_PTR(mrb_self));
      float res = obj_self->getHuePercentage();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlHuePicker#getHuePercentage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlHuePicker_getSlider(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlHuePicker *obj_self = static_cast< cocos2d::extension::CCControlHuePicker * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->getSlider();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlHuePicker#getSlider");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlHuePicker_getStartPos(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlHuePicker *obj_self = static_cast< cocos2d::extension::CCControlHuePicker * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getStartPos();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlHuePicker#getStartPos");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlHuePicker_initWithTargetAndPos(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value pos;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &target, &pos)) {
      cocos2d::extension::CCControlHuePicker *obj_self = static_cast< cocos2d::extension::CCControlHuePicker * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTargetAndPos(static_cast< cocos2d::CCNode * >(DATA_PTR(target)), *(static_cast< cocos2d::CCPoint * >(DATA_PTR(pos))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlHuePicker#initWithTargetAndPos");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlHuePicker_setBackground(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlHuePicker *obj_self = static_cast< cocos2d::extension::CCControlHuePicker * >(DATA_PTR(mrb_self));
      obj_self->setBackground(static_cast< cocos2d::CCSprite * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlHuePicker#setBackground");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlHuePicker_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool enabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &enabled)) {
      cocos2d::extension::CCControlHuePicker *obj_self = static_cast< cocos2d::extension::CCControlHuePicker * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(enabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlHuePicker#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlHuePicker_setHue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float val;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &val)) {
      cocos2d::extension::CCControlHuePicker *obj_self = static_cast< cocos2d::extension::CCControlHuePicker * >(DATA_PTR(mrb_self));
      obj_self->setHue(val);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlHuePicker#setHue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlHuePicker_setHuePercentage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float val;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &val)) {
      cocos2d::extension::CCControlHuePicker *obj_self = static_cast< cocos2d::extension::CCControlHuePicker * >(DATA_PTR(mrb_self));
      obj_self->setHuePercentage(val);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlHuePicker#setHuePercentage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlHuePicker_setSlider(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlHuePicker *obj_self = static_cast< cocos2d::extension::CCControlHuePicker * >(DATA_PTR(mrb_self));
      obj_self->setSlider(static_cast< cocos2d::CCSprite * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlHuePicker#setSlider");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCControlPotentiometer;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCControlPotentiometer * res = new cocos2d::extension::CCControlPotentiometer();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value beginLineA;
    mrb_value endLineA;
    mrb_value beginLineB;
    mrb_value endLineB;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oooo", &beginLineA, &endLineA, &beginLineB, &endLineB)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      float res = obj_self->angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(*(static_cast< cocos2d::CCPoint * >(DATA_PTR(beginLineA))), *(static_cast< cocos2d::CCPoint * >(DATA_PTR(endLineA))), *(static_cast< cocos2d::CCPoint * >(DATA_PTR(beginLineB))), *(static_cast< cocos2d::CCPoint * >(DATA_PTR(endLineB))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_ccTouchBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->ccTouchBegan(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#ccTouchBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_ccTouchEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      obj_self->ccTouchEnded(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#ccTouchEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_ccTouchMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      obj_self->ccTouchMoved(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#ccTouchMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value backgroundFile;
    mrb_value progressFile;
    mrb_value thumbFile;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSS", &backgroundFile, &progressFile, &thumbFile)) {
      class cocos2d::extension::CCControlPotentiometer * res = cocos2d::extension::CCControlPotentiometer::create(RSTRING_PTR(backgroundFile), RSTRING_PTR(progressFile), RSTRING_PTR(thumbFile));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCControlPotentiometer,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_distanceBetweenPointAndPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value point1;
    mrb_value point2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &point1, &point2)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      float res = obj_self->distanceBetweenPointAndPoint(*(static_cast< cocos2d::CCPoint * >(DATA_PTR(point1))), *(static_cast< cocos2d::CCPoint * >(DATA_PTR(point2))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#distanceBetweenPointAndPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_getMaximumValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      float res = obj_self->getMaximumValue();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#getMaximumValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_getMinimumValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      float res = obj_self->getMinimumValue();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#getMinimumValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_getPreviousLocation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getPreviousLocation();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#getPreviousLocation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_getProgressTimer(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      class cocos2d::CCProgressTimer * res = obj_self->getProgressTimer();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCProgressTimer,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#getProgressTimer");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_getThumbSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->getThumbSprite();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#getThumbSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_getValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      float res = obj_self->getValue();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#getValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_initWithTrackSprite_ProgressTimer_ThumbSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value trackSprite;
    mrb_value progressTimer;
    mrb_value thumbSprite;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &trackSprite, &progressTimer, &thumbSprite)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTrackSprite_ProgressTimer_ThumbSprite(static_cast< cocos2d::CCSprite * >(DATA_PTR(trackSprite)), static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(progressTimer)), static_cast< cocos2d::CCSprite * >(DATA_PTR(thumbSprite)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#initWithTrackSprite_ProgressTimer_ThumbSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_isTouchInside(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touch;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &touch)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isTouchInside(static_cast< cocos2d::CCTouch * >(DATA_PTR(touch)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#isTouchInside");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer__get_m_fMaximumValue(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
  float res = obj_self->m_fMaximumValue;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer__set_m_fMaximumValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float m_fMaximumValue;
  if (1 == mrb_get_args(mrb, "f", &m_fMaximumValue)) {
    cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
    
    obj_self->m_fMaximumValue = m_fMaximumValue;
    return mrb_float_value(mrb, m_fMaximumValue);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#m_fMaximumValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer__get_m_fMinimumValue(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
  float res = obj_self->m_fMinimumValue;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer__set_m_fMinimumValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float m_fMinimumValue;
  if (1 == mrb_get_args(mrb, "f", &m_fMinimumValue)) {
    cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
    
    obj_self->m_fMinimumValue = m_fMinimumValue;
    return mrb_float_value(mrb, m_fMinimumValue);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#m_fMinimumValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer__get_m_fValue(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
  float res = obj_self->m_fValue;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer__set_m_fValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float m_fValue;
  if (1 == mrb_get_args(mrb, "f", &m_fValue)) {
    cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
    
    obj_self->m_fValue = m_fValue;
    return mrb_float_value(mrb, m_fValue);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#m_fValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_potentiometerBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value location;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &location)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      obj_self->potentiometerBegan(*(static_cast< cocos2d::CCPoint * >(DATA_PTR(location))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#potentiometerBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_potentiometerEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value location;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &location)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      obj_self->potentiometerEnded(*(static_cast< cocos2d::CCPoint * >(DATA_PTR(location))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#potentiometerEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_potentiometerMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value location;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &location)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      obj_self->potentiometerMoved(*(static_cast< cocos2d::CCPoint * >(DATA_PTR(location))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#potentiometerMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool enabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &enabled)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(enabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_setMaximumValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float maximumValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &maximumValue)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      obj_self->setMaximumValue(maximumValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#setMaximumValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_setMinimumValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float minimumValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &minimumValue)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      obj_self->setMinimumValue(minimumValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#setMinimumValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_setPreviousLocation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      obj_self->setPreviousLocation(*(static_cast< cocos2d::CCPoint * >(DATA_PTR(var))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#setPreviousLocation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_setProgressTimer(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      obj_self->setProgressTimer(static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#setProgressTimer");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_setThumbSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      obj_self->setThumbSprite(static_cast< cocos2d::CCSprite * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#setThumbSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlPotentiometer_setValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &value)) {
      cocos2d::extension::CCControlPotentiometer *obj_self = static_cast< cocos2d::extension::CCControlPotentiometer * >(DATA_PTR(mrb_self));
      obj_self->setValue(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlPotentiometer#setValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCControlSaturationBrightnessPicker;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCControlSaturationBrightnessPicker * res = new cocos2d::extension::CCControlSaturationBrightnessPicker();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSaturationBrightnessPicker#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value pos;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &target, &pos)) {
      class cocos2d::extension::CCControlSaturationBrightnessPicker * res = cocos2d::extension::CCControlSaturationBrightnessPicker::create(static_cast< cocos2d::CCNode * >(DATA_PTR(target)), *(static_cast< cocos2d::CCPoint * >(DATA_PTR(pos))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCControlSaturationBrightnessPicker,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSaturationBrightnessPicker::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_getBackground(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSaturationBrightnessPicker *obj_self = static_cast< cocos2d::extension::CCControlSaturationBrightnessPicker * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->getBackground();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSaturationBrightnessPicker#getBackground");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_getBrightness(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSaturationBrightnessPicker *obj_self = static_cast< cocos2d::extension::CCControlSaturationBrightnessPicker * >(DATA_PTR(mrb_self));
      float res = obj_self->getBrightness();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSaturationBrightnessPicker#getBrightness");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_getOverlay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSaturationBrightnessPicker *obj_self = static_cast< cocos2d::extension::CCControlSaturationBrightnessPicker * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->getOverlay();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSaturationBrightnessPicker#getOverlay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_getSaturation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSaturationBrightnessPicker *obj_self = static_cast< cocos2d::extension::CCControlSaturationBrightnessPicker * >(DATA_PTR(mrb_self));
      float res = obj_self->getSaturation();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSaturationBrightnessPicker#getSaturation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_getShadow(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSaturationBrightnessPicker *obj_self = static_cast< cocos2d::extension::CCControlSaturationBrightnessPicker * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->getShadow();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSaturationBrightnessPicker#getShadow");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_getSlider(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSaturationBrightnessPicker *obj_self = static_cast< cocos2d::extension::CCControlSaturationBrightnessPicker * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->getSlider();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSaturationBrightnessPicker#getSlider");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_getStartPos(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSaturationBrightnessPicker *obj_self = static_cast< cocos2d::extension::CCControlSaturationBrightnessPicker * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getStartPos();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSaturationBrightnessPicker#getStartPos");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_initWithTargetAndPos(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value pos;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &target, &pos)) {
      cocos2d::extension::CCControlSaturationBrightnessPicker *obj_self = static_cast< cocos2d::extension::CCControlSaturationBrightnessPicker * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTargetAndPos(static_cast< cocos2d::CCNode * >(DATA_PTR(target)), *(static_cast< cocos2d::CCPoint * >(DATA_PTR(pos))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSaturationBrightnessPicker#initWithTargetAndPos");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool enabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &enabled)) {
      cocos2d::extension::CCControlSaturationBrightnessPicker *obj_self = static_cast< cocos2d::extension::CCControlSaturationBrightnessPicker * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(enabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSaturationBrightnessPicker#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_updateDraggerWithHSV(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value hsv;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &hsv)) {
      cocos2d::extension::CCControlSaturationBrightnessPicker *obj_self = static_cast< cocos2d::extension::CCControlSaturationBrightnessPicker * >(DATA_PTR(mrb_self));
      obj_self->updateDraggerWithHSV(*(static_cast< HSV * >(cc_mrb_data_get_ptr(mrb, hsv, &mrb_type_cocos2d_extension_HSV, &mrb_no_free_type_cocos2d_extension_HSV))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSaturationBrightnessPicker#updateDraggerWithHSV");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_updateWithHSV(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value hsv;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &hsv)) {
      cocos2d::extension::CCControlSaturationBrightnessPicker *obj_self = static_cast< cocos2d::extension::CCControlSaturationBrightnessPicker * >(DATA_PTR(mrb_self));
      obj_self->updateWithHSV(*(static_cast< HSV * >(cc_mrb_data_get_ptr(mrb, hsv, &mrb_type_cocos2d_extension_HSV, &mrb_no_free_type_cocos2d_extension_HSV))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSaturationBrightnessPicker#updateWithHSV");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCControlSlider;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCControlSlider * res = new cocos2d::extension::CCControlSlider();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bgFile;
    mrb_value progressFile;
    mrb_value thumbFile;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSS", &bgFile, &progressFile, &thumbFile)) {
      class cocos2d::extension::CCControlSlider * res = cocos2d::extension::CCControlSlider::create(RSTRING_PTR(bgFile), RSTRING_PTR(progressFile), RSTRING_PTR(thumbFile));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCControlSlider,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value backgroundSprite;
    mrb_value pogressSprite;
    mrb_value thumbSprite;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &backgroundSprite, &pogressSprite, &thumbSprite)) {
      class cocos2d::extension::CCControlSlider * res = cocos2d::extension::CCControlSlider::create(static_cast< cocos2d::CCSprite * >(DATA_PTR(backgroundSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(pogressSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(thumbSprite)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCControlSlider,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_getBackgroundSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->getBackgroundSprite();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#getBackgroundSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_getMaximumAllowedValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      float res = obj_self->getMaximumAllowedValue();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#getMaximumAllowedValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_getMaximumValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      float res = obj_self->getMaximumValue();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#getMaximumValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_getMinimumAllowedValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      float res = obj_self->getMinimumAllowedValue();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#getMinimumAllowedValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_getMinimumValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      float res = obj_self->getMinimumValue();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#getMinimumValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_getProgressSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->getProgressSprite();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#getProgressSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_getThumbSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->getThumbSprite();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#getThumbSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_getValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      float res = obj_self->getValue();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#getValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_initWithSprites(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value backgroundSprite;
    mrb_value progressSprite;
    mrb_value thumbSprite;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &backgroundSprite, &progressSprite, &thumbSprite)) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSprites(static_cast< cocos2d::CCSprite * >(DATA_PTR(backgroundSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(progressSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(thumbSprite)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#initWithSprites");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_isTouchInside(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touch;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &touch)) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isTouchInside(static_cast< cocos2d::CCTouch * >(DATA_PTR(touch)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#isTouchInside");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_locationFromTouch(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touch;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &touch)) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->locationFromTouch(static_cast< cocos2d::CCTouch * >(DATA_PTR(touch)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#locationFromTouch");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_needsLayout(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      obj_self->needsLayout();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#needsLayout");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_setBackgroundSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      obj_self->setBackgroundSprite(static_cast< cocos2d::CCSprite * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#setBackgroundSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool enabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &enabled)) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(enabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_setMaximumAllowedValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      obj_self->setMaximumAllowedValue(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#setMaximumAllowedValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_setMaximumValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float val;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &val)) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      obj_self->setMaximumValue(val);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#setMaximumValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_setMinimumAllowedValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      obj_self->setMinimumAllowedValue(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#setMinimumAllowedValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_setMinimumValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float val;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &val)) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      obj_self->setMinimumValue(val);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#setMinimumValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_setProgressSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      obj_self->setProgressSprite(static_cast< cocos2d::CCSprite * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#setProgressSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_setThumbSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      obj_self->setThumbSprite(static_cast< cocos2d::CCSprite * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#setThumbSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSlider_setValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float val;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &val)) {
      cocos2d::extension::CCControlSlider *obj_self = static_cast< cocos2d::extension::CCControlSlider * >(DATA_PTR(mrb_self));
      obj_self->setValue(val);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSlider#setValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__get_CCControlStateDisabled(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCControlStateDisabled;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CCControlStateHighlighted(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCControlStateHighlighted;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CCControlStateNormal(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCControlStateNormal;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CCControlStateSelected(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCControlStateSelected;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCControlStepper;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCControlStepper * res = new cocos2d::extension::CCControlStepper();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_ccTouchBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->ccTouchBegan(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#ccTouchBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_ccTouchEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->ccTouchEnded(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#ccTouchEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_ccTouchMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->ccTouchMoved(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#ccTouchMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value minusSprite;
    mrb_value plusSprite;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &minusSprite, &plusSprite)) {
      class cocos2d::extension::CCControlStepper * res = cocos2d::extension::CCControlStepper::create(static_cast< cocos2d::CCSprite * >(DATA_PTR(minusSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(plusSprite)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCControlStepper,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_getMinusLabel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      class cocos2d::CCLabelTTF * res = obj_self->getMinusLabel();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCLabelTTF,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#getMinusLabel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_getMinusSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->getMinusSprite();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#getMinusSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_getPlusLabel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      class cocos2d::CCLabelTTF * res = obj_self->getPlusLabel();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCLabelTTF,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#getPlusLabel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_getPlusSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->getPlusSprite();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#getPlusSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_getValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      double res = obj_self->getValue();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#getValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_initWithMinusSpriteAndPlusSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value minusSprite;
    mrb_value plusSprite;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &minusSprite, &plusSprite)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithMinusSpriteAndPlusSprite(static_cast< cocos2d::CCSprite * >(DATA_PTR(minusSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(plusSprite)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#initWithMinusSpriteAndPlusSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_isContinuous(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isContinuous();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#isContinuous");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__get_m_bAutorepeat(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bAutorepeat;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__set_m_bAutorepeat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bAutorepeat;
  if (1 == mrb_get_args(mrb, "b", &m_bAutorepeat)) {
    cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
    
    obj_self->m_bAutorepeat = m_bAutorepeat;
    return mrb_bool_value(m_bAutorepeat);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#m_bAutorepeat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__get_m_bContinuous(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bContinuous;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__set_m_bContinuous(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bContinuous;
  if (1 == mrb_get_args(mrb, "b", &m_bContinuous)) {
    cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
    
    obj_self->m_bContinuous = m_bContinuous;
    return mrb_bool_value(m_bContinuous);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#m_bContinuous");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__get_m_bTouchInsideFlag(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bTouchInsideFlag;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__set_m_bTouchInsideFlag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bTouchInsideFlag;
  if (1 == mrb_get_args(mrb, "b", &m_bTouchInsideFlag)) {
    cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
    
    obj_self->m_bTouchInsideFlag = m_bTouchInsideFlag;
    return mrb_bool_value(m_bTouchInsideFlag);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#m_bTouchInsideFlag");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__get_m_bWraps(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bWraps;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__set_m_bWraps(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bWraps;
  if (1 == mrb_get_args(mrb, "b", &m_bWraps)) {
    cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
    
    obj_self->m_bWraps = m_bWraps;
    return mrb_bool_value(m_bWraps);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#m_bWraps");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__get_m_dMaximumValue(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
  double res = obj_self->m_dMaximumValue;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__set_m_dMaximumValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float m_dMaximumValue;
  if (1 == mrb_get_args(mrb, "f", &m_dMaximumValue)) {
    cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
    
    obj_self->m_dMaximumValue = m_dMaximumValue;
    return mrb_float_value(mrb, m_dMaximumValue);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#m_dMaximumValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__get_m_dMinimumValue(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
  double res = obj_self->m_dMinimumValue;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__set_m_dMinimumValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float m_dMinimumValue;
  if (1 == mrb_get_args(mrb, "f", &m_dMinimumValue)) {
    cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
    
    obj_self->m_dMinimumValue = m_dMinimumValue;
    return mrb_float_value(mrb, m_dMinimumValue);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#m_dMinimumValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__get_m_dStepValue(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
  double res = obj_self->m_dStepValue;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__set_m_dStepValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float m_dStepValue;
  if (1 == mrb_get_args(mrb, "f", &m_dStepValue)) {
    cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
    
    obj_self->m_dStepValue = m_dStepValue;
    return mrb_float_value(mrb, m_dStepValue);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#m_dStepValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__get_m_dValue(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
  double res = obj_self->m_dValue;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__set_m_dValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float m_dValue;
  if (1 == mrb_get_args(mrb, "f", &m_dValue)) {
    cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
    
    obj_self->m_dValue = m_dValue;
    return mrb_float_value(mrb, m_dValue);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#m_dValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__get_m_eTouchedPart(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
  cocos2d::extension::CCControlStepperPart res = obj_self->m_eTouchedPart;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__set_m_eTouchedPart(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_eTouchedPart;
  if (1 == mrb_get_args(mrb, "i", &m_eTouchedPart)) {
    cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
    
    obj_self->m_eTouchedPart = (cocos2d::extension::CCControlStepperPart)m_eTouchedPart;
    return mrb_fixnum_value(m_eTouchedPart);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#m_eTouchedPart");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__get_m_nAutorepeatCount(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
  int res = obj_self->m_nAutorepeatCount;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper__set_m_nAutorepeatCount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_nAutorepeatCount;
  if (1 == mrb_get_args(mrb, "i", &m_nAutorepeatCount)) {
    cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
    
    obj_self->m_nAutorepeatCount = m_nAutorepeatCount;
    return mrb_fixnum_value(m_nAutorepeatCount);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#m_nAutorepeatCount");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_setMaximumValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float maximumValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &maximumValue)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->setMaximumValue(maximumValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#setMaximumValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_setMinimumValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float minimumValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &minimumValue)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->setMinimumValue(minimumValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#setMinimumValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_setMinusLabel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->setMinusLabel(static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#setMinusLabel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_setMinusSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->setMinusSprite(static_cast< cocos2d::CCSprite * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#setMinusSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_setPlusLabel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->setPlusLabel(static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#setPlusLabel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_setPlusSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->setPlusSprite(static_cast< cocos2d::CCSprite * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#setPlusSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_setStepValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float stepValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &stepValue)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->setStepValue(stepValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#setStepValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_setValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &value)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->setValue(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#setValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_setValueWithSendingEvent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float value;
    mrb_bool send;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fb", &value, &send)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->setValueWithSendingEvent(value, send);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#setValueWithSendingEvent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_setWraps(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool wraps;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &wraps)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->setWraps(wraps);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#setWraps");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_startAutorepeat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->startAutorepeat();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#startAutorepeat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_stopAutorepeat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->stopAutorepeat();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#stopAutorepeat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->update(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlStepper_updateLayoutUsingTouchLocation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value location;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &location)) {
      cocos2d::extension::CCControlStepper *obj_self = static_cast< cocos2d::extension::CCControlStepper * >(DATA_PTR(mrb_self));
      obj_self->updateLayoutUsingTouchLocation(*(static_cast< cocos2d::CCPoint * >(DATA_PTR(location))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlStepper#updateLayoutUsingTouchLocation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSwitch_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCControlSwitch;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCControlSwitch * res = new cocos2d::extension::CCControlSwitch();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSwitch#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSwitch_ccTouchBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCControlSwitch *obj_self = static_cast< cocos2d::extension::CCControlSwitch * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->ccTouchBegan(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSwitch#ccTouchBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSwitch_ccTouchCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCControlSwitch *obj_self = static_cast< cocos2d::extension::CCControlSwitch * >(DATA_PTR(mrb_self));
      obj_self->ccTouchCancelled(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSwitch#ccTouchCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSwitch_ccTouchEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCControlSwitch *obj_self = static_cast< cocos2d::extension::CCControlSwitch * >(DATA_PTR(mrb_self));
      obj_self->ccTouchEnded(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSwitch#ccTouchEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSwitch_ccTouchMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCControlSwitch *obj_self = static_cast< cocos2d::extension::CCControlSwitch * >(DATA_PTR(mrb_self));
      obj_self->ccTouchMoved(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSwitch#ccTouchMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSwitch_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value maskSprite;
    mrb_value onSprite;
    mrb_value offSprite;
    mrb_value thumbSprite;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oooo", &maskSprite, &onSprite, &offSprite, &thumbSprite)) {
      class cocos2d::extension::CCControlSwitch * res = cocos2d::extension::CCControlSwitch::create(static_cast< cocos2d::CCSprite * >(DATA_PTR(maskSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(onSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(offSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(thumbSprite)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCControlSwitch,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value maskSprite;
    mrb_value onSprite;
    mrb_value offSprite;
    mrb_value thumbSprite;
    mrb_value onLabel;
    mrb_value offLabel;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "oooooo", &maskSprite, &onSprite, &offSprite, &thumbSprite, &onLabel, &offLabel)) {
      class cocos2d::extension::CCControlSwitch * res = cocos2d::extension::CCControlSwitch::create(static_cast< cocos2d::CCSprite * >(DATA_PTR(maskSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(onSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(offSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(thumbSprite)), static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(onLabel)), static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(offLabel)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCControlSwitch,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSwitch::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSwitch_hasMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSwitch *obj_self = static_cast< cocos2d::extension::CCControlSwitch * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->hasMoved();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSwitch#hasMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSwitch_initWithMaskSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value maskSprite;
    mrb_value onSprite;
    mrb_value offSprite;
    mrb_value thumbSprite;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oooo", &maskSprite, &onSprite, &offSprite, &thumbSprite)) {
      cocos2d::extension::CCControlSwitch *obj_self = static_cast< cocos2d::extension::CCControlSwitch * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithMaskSprite(static_cast< cocos2d::CCSprite * >(DATA_PTR(maskSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(onSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(offSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(thumbSprite)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value maskSprite;
    mrb_value onSprite;
    mrb_value offSprite;
    mrb_value thumbSprite;
    mrb_value onLabel;
    mrb_value offLabel;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "oooooo", &maskSprite, &onSprite, &offSprite, &thumbSprite, &onLabel, &offLabel)) {
      cocos2d::extension::CCControlSwitch *obj_self = static_cast< cocos2d::extension::CCControlSwitch * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithMaskSprite(static_cast< cocos2d::CCSprite * >(DATA_PTR(maskSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(onSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(offSprite)), static_cast< cocos2d::CCSprite * >(DATA_PTR(thumbSprite)), static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(onLabel)), static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(offLabel)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSwitch#initWithMaskSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSwitch_isOn(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCControlSwitch *obj_self = static_cast< cocos2d::extension::CCControlSwitch * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOn();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSwitch#isOn");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSwitch_locationFromTouch(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touch;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &touch)) {
      cocos2d::extension::CCControlSwitch *obj_self = static_cast< cocos2d::extension::CCControlSwitch * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->locationFromTouch(static_cast< cocos2d::CCTouch * >(DATA_PTR(touch)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSwitch#locationFromTouch");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSwitch_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool enabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &enabled)) {
      cocos2d::extension::CCControlSwitch *obj_self = static_cast< cocos2d::extension::CCControlSwitch * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(enabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSwitch#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlSwitch_setOn(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool isOn;
    mrb_bool animated;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "bb", &isOn, &animated)) {
      cocos2d::extension::CCControlSwitch *obj_self = static_cast< cocos2d::extension::CCControlSwitch * >(DATA_PTR(mrb_self));
      obj_self->setOn(isOn, animated);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_bool isOn;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &isOn)) {
      cocos2d::extension::CCControlSwitch *obj_self = static_cast< cocos2d::extension::CCControlSwitch * >(DATA_PTR(mrb_self));
      obj_self->setOn(isOn);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlSwitch#setOn");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlUtils_CCRectUnion(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value src1;
    mrb_value src2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &src1, &src2)) {
      class cocos2d::CCRect *res = new class cocos2d::CCRect(); *res = cocos2d::extension::CCControlUtils::CCRectUnion(*(static_cast< cocos2d::CCRect * >(DATA_PTR(src1))), *(static_cast< cocos2d::CCRect * >(DATA_PTR(src2))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlUtils::CCRectUnion");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlUtils_HSVfromRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &value)) {
      HSV *res = new HSV(); *res = cocos2d::extension::CCControlUtils::HSVfromRGB(*(static_cast< RGBA * >(cc_mrb_data_get_ptr(mrb, value, &mrb_type_cocos2d_extension_RGBA, &mrb_no_free_type_cocos2d_extension_RGBA))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::HSV"),
                       &mrb_type_cocos2d_extension_HSV,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlUtils::HSVfromRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlUtils_RGBfromHSV(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &value)) {
      RGBA *res = new RGBA(); *res = cocos2d::extension::CCControlUtils::RGBfromHSV(*(static_cast< HSV * >(cc_mrb_data_get_ptr(mrb, value, &mrb_type_cocos2d_extension_HSV, &mrb_no_free_type_cocos2d_extension_HSV))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::RGBA"),
                       &mrb_type_cocos2d_extension_RGBA,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlUtils::RGBfromHSV");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlUtils_addSpriteToTargetWithPosAndAnchor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value spriteName;
    mrb_value target;
    mrb_value pos;
    mrb_value anchor;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "Sooo", &spriteName, &target, &pos, &anchor)) {
      class cocos2d::CCSprite * res = cocos2d::extension::CCControlUtils::addSpriteToTargetWithPosAndAnchor(RSTRING_PTR(spriteName), static_cast< cocos2d::CCNode * >(DATA_PTR(target)), *(static_cast< cocos2d::CCPoint * >(DATA_PTR(pos))), *(static_cast< cocos2d::CCPoint * >(DATA_PTR(anchor))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlUtils::addSpriteToTargetWithPosAndAnchor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCControlUtils_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCControlUtils;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCControlUtils * res = new cocos2d::extension::CCControlUtils();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCControlUtils#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pBytes;
    mrb_int nSize;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCData;
    DATA_PTR(mrb_self) = NULL;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Ai", &pBytes, &nSize)) {
      unsigned char cxx_pBytes[1]; cc_mrb_ary_conv_to_c_array(mrb, pBytes, reinterpret_cast< unsigned char * >(cxx_pBytes), 1);
      cocos2d::extension::CCData * res = new cocos2d::extension::CCData(cxx_pBytes, nSize);
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      cc_mrb_ary_conv_from_c_array(mrb, pBytes, reinterpret_cast< unsigned char * >(cxx_pBytes), 1);
      return mrb_self;
    }
  }
  {
    mrb_value pData;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCData;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pData)) {
      cocos2d::extension::CCData * res = new cocos2d::extension::CCData(static_cast< cocos2d::extension::CCData * >(cc_mrb_data_get_ptr(mrb, pData, &mrb_type_cocos2d_extension_CCData, NULL)));
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCData_getBytes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCData *obj_self = static_cast< cocos2d::extension::CCData * >(DATA_PTR(mrb_self));
      unsigned char *res = obj_self->getBytes();
      mrb_value mrb_res = cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 1), reinterpret_cast< unsigned char * >(res), 1);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCData#getBytes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCData_getSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCData *obj_self = static_cast< cocos2d::extension::CCData * >(DATA_PTR(mrb_self));
      unsigned long res = obj_self->getSize();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCData#getSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDecorativeDisplay_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCDecorativeDisplay;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCDecorativeDisplay * res = new cocos2d::extension::CCDecorativeDisplay();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDecorativeDisplay#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDecorativeDisplay_anchorPointChanged(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float pointX;
    mrb_float pointY;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &pointX, &pointY)) {
      cocos2d::extension::CCDecorativeDisplay *obj_self = static_cast< cocos2d::extension::CCDecorativeDisplay * >(DATA_PTR(mrb_self));
      obj_self->anchorPointChanged(pointX, pointY);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDecorativeDisplay#anchorPointChanged");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDecorativeDisplay_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCDecorativeDisplay * res = cocos2d::extension::CCDecorativeDisplay::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCDecorativeDisplay,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDecorativeDisplay::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDecorativeDisplay_getColliderDetector(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCDecorativeDisplay *obj_self = static_cast< cocos2d::extension::CCDecorativeDisplay * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCColliderDetector * res = obj_self->getColliderDetector();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCColliderDetector,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDecorativeDisplay#getColliderDetector");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDecorativeDisplay_getDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCDecorativeDisplay *obj_self = static_cast< cocos2d::extension::CCDecorativeDisplay * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getDisplay();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDecorativeDisplay#getDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDecorativeDisplay_getDisplayData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCDecorativeDisplay *obj_self = static_cast< cocos2d::extension::CCDecorativeDisplay * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCDisplayData * res = obj_self->getDisplayData();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCDisplayData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDecorativeDisplay#getDisplayData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDecorativeDisplay_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCDecorativeDisplay *obj_self = static_cast< cocos2d::extension::CCDecorativeDisplay * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDecorativeDisplay#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDecorativeDisplay_setColliderDetector(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCDecorativeDisplay *obj_self = static_cast< cocos2d::extension::CCDecorativeDisplay * >(DATA_PTR(mrb_self));
      obj_self->setColliderDetector(static_cast< cocos2d::extension::CCColliderDetector * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCColliderDetector, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDecorativeDisplay#setColliderDetector");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDecorativeDisplay_setDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCDecorativeDisplay *obj_self = static_cast< cocos2d::extension::CCDecorativeDisplay * >(DATA_PTR(mrb_self));
      obj_self->setDisplay(static_cast< cocos2d::CCNode * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDecorativeDisplay#setDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDecorativeDisplay_setDisplayData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCDecorativeDisplay *obj_self = static_cast< cocos2d::extension::CCDecorativeDisplay * >(DATA_PTR(mrb_self));
      obj_self->setDisplayData(static_cast< cocos2d::extension::CCDisplayData * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCDisplayData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDecorativeDisplay#setDisplayData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCDisplayData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCDisplayData * res = new cocos2d::extension::CCDisplayData();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayData_changeDisplayToTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arg3;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &arg3)) {
      std::string res = cocos2d::extension::CCDisplayData::changeDisplayToTexture(RSTRING_PTR(arg3));
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayData::changeDisplayToTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCDisplayData * res = cocos2d::extension::CCDisplayData::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCDisplayData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayData::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayData__get_displayType(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCDisplayData *obj_self = static_cast< cocos2d::extension::CCDisplayData * >(DATA_PTR(mrb_self));
  enum cocos2d::extension::DisplayType res = obj_self->displayType;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCDisplayData__set_displayType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int displayType;
  if (1 == mrb_get_args(mrb, "i", &displayType)) {
    cocos2d::extension::CCDisplayData *obj_self = static_cast< cocos2d::extension::CCDisplayData * >(DATA_PTR(mrb_self));
    
    obj_self->displayType = (enum cocos2d::extension::DisplayType)displayType;
    return mrb_fixnum_value(displayType);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayData#displayType");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayFactory_addArmatureDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value decoDisplay;
    mrb_value displayData;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &bone, &decoDisplay, &displayData)) {
      cocos2d::extension::CCDisplayFactory::addArmatureDisplay(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), static_cast< cocos2d::extension::CCDecorativeDisplay * >(cc_mrb_data_get_ptr(mrb, decoDisplay, &mrb_type_cocos2d_extension_CCDecorativeDisplay, NULL)), static_cast< cocos2d::extension::CCDisplayData * >(cc_mrb_data_get_ptr(mrb, displayData, &mrb_type_cocos2d_extension_CCDisplayData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayFactory::addArmatureDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayFactory_addDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value decoDisplay;
    mrb_value displayData;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &bone, &decoDisplay, &displayData)) {
      cocos2d::extension::CCDisplayFactory::addDisplay(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), static_cast< cocos2d::extension::CCDecorativeDisplay * >(cc_mrb_data_get_ptr(mrb, decoDisplay, &mrb_type_cocos2d_extension_CCDecorativeDisplay, NULL)), static_cast< cocos2d::extension::CCDisplayData * >(cc_mrb_data_get_ptr(mrb, displayData, &mrb_type_cocos2d_extension_CCDisplayData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayFactory::addDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayFactory_addParticleDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value decoDisplay;
    mrb_value displayData;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &bone, &decoDisplay, &displayData)) {
      cocos2d::extension::CCDisplayFactory::addParticleDisplay(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), static_cast< cocos2d::extension::CCDecorativeDisplay * >(cc_mrb_data_get_ptr(mrb, decoDisplay, &mrb_type_cocos2d_extension_CCDecorativeDisplay, NULL)), static_cast< cocos2d::extension::CCDisplayData * >(cc_mrb_data_get_ptr(mrb, displayData, &mrb_type_cocos2d_extension_CCDisplayData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayFactory::addParticleDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayFactory_addShaderDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value decoDisplay;
    mrb_value displayData;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &bone, &decoDisplay, &displayData)) {
      cocos2d::extension::CCDisplayFactory::addShaderDisplay(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), static_cast< cocos2d::extension::CCDecorativeDisplay * >(cc_mrb_data_get_ptr(mrb, decoDisplay, &mrb_type_cocos2d_extension_CCDecorativeDisplay, NULL)), static_cast< cocos2d::extension::CCDisplayData * >(cc_mrb_data_get_ptr(mrb, displayData, &mrb_type_cocos2d_extension_CCDisplayData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayFactory::addShaderDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayFactory_addSpriteDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value decoDisplay;
    mrb_value displayData;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &bone, &decoDisplay, &displayData)) {
      cocos2d::extension::CCDisplayFactory::addSpriteDisplay(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), static_cast< cocos2d::extension::CCDecorativeDisplay * >(cc_mrb_data_get_ptr(mrb, decoDisplay, &mrb_type_cocos2d_extension_CCDecorativeDisplay, NULL)), static_cast< cocos2d::extension::CCDisplayData * >(cc_mrb_data_get_ptr(mrb, displayData, &mrb_type_cocos2d_extension_CCDisplayData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayFactory::addSpriteDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayFactory_createArmatureDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value decoDisplay;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &bone, &decoDisplay)) {
      cocos2d::extension::CCDisplayFactory::createArmatureDisplay(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), static_cast< cocos2d::extension::CCDecorativeDisplay * >(cc_mrb_data_get_ptr(mrb, decoDisplay, &mrb_type_cocos2d_extension_CCDecorativeDisplay, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayFactory::createArmatureDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayFactory_createDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value decoDisplay;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &bone, &decoDisplay)) {
      cocos2d::extension::CCDisplayFactory::createDisplay(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), static_cast< cocos2d::extension::CCDecorativeDisplay * >(cc_mrb_data_get_ptr(mrb, decoDisplay, &mrb_type_cocos2d_extension_CCDecorativeDisplay, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayFactory::createDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayFactory_createParticleDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value decoDisplay;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &bone, &decoDisplay)) {
      cocos2d::extension::CCDisplayFactory::createParticleDisplay(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), static_cast< cocos2d::extension::CCDecorativeDisplay * >(cc_mrb_data_get_ptr(mrb, decoDisplay, &mrb_type_cocos2d_extension_CCDecorativeDisplay, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayFactory::createParticleDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayFactory_createShaderDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value decoDisplay;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &bone, &decoDisplay)) {
      cocos2d::extension::CCDisplayFactory::createShaderDisplay(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), static_cast< cocos2d::extension::CCDecorativeDisplay * >(cc_mrb_data_get_ptr(mrb, decoDisplay, &mrb_type_cocos2d_extension_CCDecorativeDisplay, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayFactory::createShaderDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayFactory_createSpriteDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value decoDisplay;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &bone, &decoDisplay)) {
      cocos2d::extension::CCDisplayFactory::createSpriteDisplay(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), static_cast< cocos2d::extension::CCDecorativeDisplay * >(cc_mrb_data_get_ptr(mrb, decoDisplay, &mrb_type_cocos2d_extension_CCDecorativeDisplay, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayFactory::createSpriteDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayFactory_updateArmatureDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value decoDisplay;
    mrb_float dt;
    mrb_bool dirty;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oofb", &bone, &decoDisplay, &dt, &dirty)) {
      cocos2d::extension::CCDisplayFactory::updateArmatureDisplay(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), static_cast< cocos2d::extension::CCDecorativeDisplay * >(cc_mrb_data_get_ptr(mrb, decoDisplay, &mrb_type_cocos2d_extension_CCDecorativeDisplay, NULL)), dt, dirty);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayFactory::updateArmatureDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayFactory_updateDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value decoDisplay;
    mrb_float dt;
    mrb_bool dirty;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oofb", &bone, &decoDisplay, &dt, &dirty)) {
      cocos2d::extension::CCDisplayFactory::updateDisplay(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), static_cast< cocos2d::extension::CCDecorativeDisplay * >(cc_mrb_data_get_ptr(mrb, decoDisplay, &mrb_type_cocos2d_extension_CCDecorativeDisplay, NULL)), dt, dirty);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayFactory::updateDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayFactory_updateParticleDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value decoDisplay;
    mrb_float dt;
    mrb_bool dirty;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oofb", &bone, &decoDisplay, &dt, &dirty)) {
      cocos2d::extension::CCDisplayFactory::updateParticleDisplay(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), static_cast< cocos2d::extension::CCDecorativeDisplay * >(cc_mrb_data_get_ptr(mrb, decoDisplay, &mrb_type_cocos2d_extension_CCDecorativeDisplay, NULL)), dt, dirty);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayFactory::updateParticleDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayFactory_updateSpriteDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    mrb_value decoDisplay;
    mrb_float dt;
    mrb_bool dirty;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oofb", &bone, &decoDisplay, &dt, &dirty)) {
      cocos2d::extension::CCDisplayFactory::updateSpriteDisplay(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)), static_cast< cocos2d::extension::CCDecorativeDisplay * >(cc_mrb_data_get_ptr(mrb, decoDisplay, &mrb_type_cocos2d_extension_CCDecorativeDisplay, NULL)), dt, dirty);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayFactory::updateSpriteDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayFactory_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCDisplayFactory;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCDisplayFactory * res = new cocos2d::extension::CCDisplayFactory();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayFactory#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCDisplayManager;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCDisplayManager * res = new cocos2d::extension::CCDisplayManager();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_addDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value displayData;
    mrb_int index;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &displayData, &index)) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      obj_self->addDisplay(static_cast< cocos2d::extension::CCDisplayData * >(cc_mrb_data_get_ptr(mrb, displayData, &mrb_type_cocos2d_extension_CCDisplayData, NULL)), index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#addDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_changeDisplayByIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    mrb_bool force;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ib", &index, &force)) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      obj_self->changeDisplayByIndex(index, force);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#changeDisplayByIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_containPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value _point;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &_point)) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->containPoint(*(static_cast< cocos2d::CCPoint * >(DATA_PTR(_point))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_float x;
    mrb_float y;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &x, &y)) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->containPoint(x, y);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#containPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &bone)) {
      class cocos2d::extension::CCDisplayManager * res = cocos2d::extension::CCDisplayManager::create(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCDisplayManager,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_getAnchorPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getAnchorPoint();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#getAnchorPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_getAnchorPointInPoints(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getAnchorPointInPoints();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#getAnchorPointInPoints");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_getBoundingBox(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCRect *res = new class cocos2d::CCRect(); *res = obj_self->getBoundingBox();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#getBoundingBox");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_getContentSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getContentSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#getContentSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_getCurrentDecorativeDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCDecorativeDisplay * res = obj_self->getCurrentDecorativeDisplay();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCDecorativeDisplay,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#getCurrentDecorativeDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_getCurrentDisplayIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      int res = obj_self->getCurrentDisplayIndex();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#getCurrentDisplayIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_getDecorativeDisplayByIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &index)) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCDecorativeDisplay * res = obj_self->getDecorativeDisplayByIndex(index);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCDecorativeDisplay,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#getDecorativeDisplayByIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_getDisplayRenderNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getDisplayRenderNode();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#getDisplayRenderNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_getForceChangeDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getForceChangeDisplay();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#getForceChangeDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &bone)) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_initDisplayList(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value boneData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &boneData)) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      obj_self->initDisplayList(static_cast< cocos2d::extension::CCBoneData * >(cc_mrb_data_get_ptr(mrb, boneData, &mrb_type_cocos2d_extension_CCBoneData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#initDisplayList");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_isVisible(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isVisible();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#isVisible");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager__get_m_bVisible(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bVisible;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager__set_m_bVisible(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bVisible;
  if (1 == mrb_get_args(mrb, "b", &m_bVisible)) {
    cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
    
    obj_self->m_bVisible = m_bVisible;
    return mrb_bool_value(m_bVisible);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#m_bVisible");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager__get_m_pBone(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
  class cocos2d::extension::CCBone * res = obj_self->m_pBone;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBone"),
                       &mrb_type_cocos2d_extension_CCBone,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager__set_m_pBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pBone;
  if (1 == mrb_get_args(mrb, "o", &m_pBone)) {
    static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, m_pBone, &mrb_type_cocos2d_extension_CCBone, NULL))->retain();
    cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
    if (obj_self->m_pBone) { obj_self->m_pBone->release(); }
    obj_self->m_pBone = static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, m_pBone, &mrb_type_cocos2d_extension_CCBone, NULL));
    return m_pBone;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#m_pBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_removeDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &index)) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      obj_self->removeDisplay(index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#removeDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_setCurrentDecorativeDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value decoDisplay;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &decoDisplay)) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      obj_self->setCurrentDecorativeDisplay(static_cast< cocos2d::extension::CCDecorativeDisplay * >(cc_mrb_data_get_ptr(mrb, decoDisplay, &mrb_type_cocos2d_extension_CCDecorativeDisplay, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#setCurrentDecorativeDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_setForceChangeDisplay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &var)) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      obj_self->setForceChangeDisplay(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#setForceChangeDisplay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCDisplayManager_setVisible(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool visible;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &visible)) {
      cocos2d::extension::CCDisplayManager *obj_self = static_cast< cocos2d::extension::CCDisplayManager * >(DATA_PTR(mrb_self));
      obj_self->setVisible(visible);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCDisplayManager#setVisible");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCEditBox;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCEditBox * res = new cocos2d::extension::CCEditBox();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value size;
    mrb_value pNormal9SpriteBg;
    mrb_value pPressed9SpriteBg;
    mrb_value pDisabled9SpriteBg;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oooo", &size, &pNormal9SpriteBg, &pPressed9SpriteBg, &pDisabled9SpriteBg)) {
      class cocos2d::extension::CCEditBox * res = cocos2d::extension::CCEditBox::create(*(static_cast< cocos2d::CCSize * >(DATA_PTR(size))), static_cast< cocos2d::extension::CCScale9Sprite * >(cc_mrb_data_get_ptr(mrb, pNormal9SpriteBg, &mrb_type_cocos2d_extension_CCScale9Sprite, NULL)), static_cast< cocos2d::extension::CCScale9Sprite * >(cc_mrb_data_get_ptr(mrb, pPressed9SpriteBg, &mrb_type_cocos2d_extension_CCScale9Sprite, NULL)), static_cast< cocos2d::extension::CCScale9Sprite * >(cc_mrb_data_get_ptr(mrb, pDisabled9SpriteBg, &mrb_type_cocos2d_extension_CCScale9Sprite, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCEditBox,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_getDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCEditBoxDelegate * res = obj_self->getDelegate();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      /* XXX: class implrements *Delegate or *Protocol, must be a subclass of CCObject. */
      ccobj_res = dynamic_cast< cocos2d::CCObject * >(res);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCEditBoxDelegate,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#getDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_getMaxLength(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      int res = obj_self->getMaxLength();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#getMaxLength");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_getPlaceHolder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getPlaceHolder();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#getPlaceHolder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_getScriptEditBoxHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      int res = obj_self->getScriptEditBoxHandler();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#getScriptEditBoxHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_getText(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getText();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#getText");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_initWithSizeAndBackgroundSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value size;
    mrb_value pNormal9SpriteBg;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &size, &pNormal9SpriteBg)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSizeAndBackgroundSprite(*(static_cast< cocos2d::CCSize * >(DATA_PTR(size))), static_cast< cocos2d::extension::CCScale9Sprite * >(cc_mrb_data_get_ptr(mrb, pNormal9SpriteBg, &mrb_type_cocos2d_extension_CCScale9Sprite, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#initWithSizeAndBackgroundSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_keyboardDidHide(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value info;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &info)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->keyboardDidHide(*(static_cast< CCIMEKeyboardNotificationInfo * >(DATA_PTR(info))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#keyboardDidHide");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_keyboardDidShow(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value info;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &info)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->keyboardDidShow(*(static_cast< CCIMEKeyboardNotificationInfo * >(DATA_PTR(info))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#keyboardDidShow");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_keyboardWillHide(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value info;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &info)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->keyboardWillHide(*(static_cast< CCIMEKeyboardNotificationInfo * >(DATA_PTR(info))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#keyboardWillHide");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_keyboardWillShow(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value info;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &info)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->keyboardWillShow(*(static_cast< CCIMEKeyboardNotificationInfo * >(DATA_PTR(info))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#keyboardWillShow");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_onExit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->onExit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#onExit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_registerScriptEditBoxHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value handler;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &handler)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->registerScriptEditBoxHandler(cc_mrb_proc_keep(mrb, handler));
      //cc_mrb_proc_keep(mrb, handler);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#registerScriptEditBoxHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setAnchorPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value anchorPoint;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &anchorPoint)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setAnchorPoint(*(static_cast< cocos2d::CCPoint * >(DATA_PTR(anchorPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setAnchorPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setContentSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value size;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &size)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setContentSize(*(static_cast< cocos2d::CCSize * >(DATA_PTR(size))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setContentSize");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_extension_CCEditBox_setDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      cocos2d::extension::CCMRubyEditBoxDelegate *delegate = cocos2d::extension::CCMRubyEditBoxDelegate::create(mrb, pDelegate);
      obj_self->setDelegate(delegate);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setFont(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pFontName;
    mrb_int fontSize;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &pFontName, &fontSize)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setFont(RSTRING_PTR(pFontName), fontSize);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setFont");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setFontColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value color;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &color)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setFontColor(*(static_cast< ccColor3B * >(DATA_PTR(color))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setFontColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setFontName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pFontName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pFontName)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setFontName(RSTRING_PTR(pFontName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setFontName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setFontSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int fontSize;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &fontSize)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setFontSize(fontSize);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setFontSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setInputFlag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int inputFlag;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &inputFlag)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setInputFlag((enum cocos2d::extension::EditBoxInputFlag)inputFlag);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setInputFlag");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setInputMode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int inputMode;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &inputMode)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setInputMode((enum cocos2d::extension::EditBoxInputMode)inputMode);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setInputMode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setMaxLength(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int maxLength;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &maxLength)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setMaxLength(maxLength);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setMaxLength");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setPlaceHolder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pText;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pText)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setPlaceHolder(RSTRING_PTR(pText));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setPlaceHolder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setPlaceholderFont(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pFontName;
    mrb_int fontSize;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &pFontName, &fontSize)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setPlaceholderFont(RSTRING_PTR(pFontName), fontSize);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setPlaceholderFont");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setPlaceholderFontColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value color;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &color)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setPlaceholderFontColor(*(static_cast< ccColor3B * >(DATA_PTR(color))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setPlaceholderFontColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setPlaceholderFontName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pFontName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pFontName)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setPlaceholderFontName(RSTRING_PTR(pFontName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setPlaceholderFontName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setPlaceholderFontSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int fontSize;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &fontSize)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setPlaceholderFontSize(fontSize);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setPlaceholderFontSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pos)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setPosition(*(static_cast< cocos2d::CCPoint * >(DATA_PTR(pos))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setReturnType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int returnType;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &returnType)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setReturnType((enum cocos2d::extension::KeyboardReturnType)returnType);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setReturnType");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setText(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pText;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pText)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setText(RSTRING_PTR(pText));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setText");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_setVisible(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool visible;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &visible)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->setVisible(visible);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#setVisible");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_touchDownAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sender;
    mrb_int controlEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &sender, &controlEvent)) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->touchDownAction(static_cast< cocos2d::CCObject * >(DATA_PTR(sender)), controlEvent);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#touchDownAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_unregisterScriptEditBoxHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->unregisterScriptEditBoxHandler();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#unregisterScriptEditBoxHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBox_visit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCEditBox *obj_self = static_cast< cocos2d::extension::CCEditBox * >(DATA_PTR(mrb_self));
      obj_self->visit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBox#visit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBoxDelegate_editBoxEditingDidBegin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value editBox;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &editBox)) {
      cocos2d::extension::CCEditBoxDelegate *obj_self = static_cast< cocos2d::extension::CCEditBoxDelegate * >(DATA_PTR(mrb_self));
      obj_self->editBoxEditingDidBegin(static_cast< cocos2d::extension::CCEditBox * >(cc_mrb_data_get_ptr(mrb, editBox, &mrb_type_cocos2d_extension_CCEditBox, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBoxDelegate#editBoxEditingDidBegin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBoxDelegate_editBoxEditingDidEnd(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value editBox;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &editBox)) {
      cocos2d::extension::CCEditBoxDelegate *obj_self = static_cast< cocos2d::extension::CCEditBoxDelegate * >(DATA_PTR(mrb_self));
      obj_self->editBoxEditingDidEnd(static_cast< cocos2d::extension::CCEditBox * >(cc_mrb_data_get_ptr(mrb, editBox, &mrb_type_cocos2d_extension_CCEditBox, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBoxDelegate#editBoxEditingDidEnd");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBoxDelegate_editBoxReturn(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value editBox;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &editBox)) {
      cocos2d::extension::CCEditBoxDelegate *obj_self = static_cast< cocos2d::extension::CCEditBoxDelegate * >(DATA_PTR(mrb_self));
      obj_self->editBoxReturn(static_cast< cocos2d::extension::CCEditBox * >(cc_mrb_data_get_ptr(mrb, editBox, &mrb_type_cocos2d_extension_CCEditBox, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBoxDelegate#editBoxReturn");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCEditBoxDelegate_editBoxTextChanged(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value editBox;
    mrb_value text;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &editBox, &text)) {
      cocos2d::extension::CCEditBoxDelegate *obj_self = static_cast< cocos2d::extension::CCEditBoxDelegate * >(DATA_PTR(mrb_self));
      obj_self->editBoxTextChanged(static_cast< cocos2d::extension::CCEditBox * >(cc_mrb_data_get_ptr(mrb, editBox, &mrb_type_cocos2d_extension_CCEditBox, NULL)), RSTRING_PTR(text));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCEditBoxDelegate#editBoxTextChanged");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCFrameData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCFrameData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCFrameData * res = new cocos2d::extension::CCFrameData();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCFrameData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCFrameData_copy(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value frameData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &frameData)) {
      cocos2d::extension::CCFrameData *obj_self = static_cast< cocos2d::extension::CCFrameData * >(DATA_PTR(mrb_self));
      obj_self->copy(static_cast< cocos2d::extension::CCFrameData * >(cc_mrb_data_get_ptr(mrb, frameData, &mrb_type_cocos2d_extension_CCFrameData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCFrameData#copy");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCFrameData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCFrameData * res = cocos2d::extension::CCFrameData::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCFrameData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCFrameData::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCFrameData__get_displayIndex(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCFrameData *obj_self = static_cast< cocos2d::extension::CCFrameData * >(DATA_PTR(mrb_self));
  int res = obj_self->displayIndex;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCFrameData__set_displayIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int displayIndex;
  if (1 == mrb_get_args(mrb, "i", &displayIndex)) {
    cocos2d::extension::CCFrameData *obj_self = static_cast< cocos2d::extension::CCFrameData * >(DATA_PTR(mrb_self));
    
    obj_self->displayIndex = displayIndex;
    return mrb_fixnum_value(displayIndex);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCFrameData#displayIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCFrameData__get_duration(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCFrameData *obj_self = static_cast< cocos2d::extension::CCFrameData * >(DATA_PTR(mrb_self));
  int res = obj_self->duration;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCFrameData__set_duration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int duration;
  if (1 == mrb_get_args(mrb, "i", &duration)) {
    cocos2d::extension::CCFrameData *obj_self = static_cast< cocos2d::extension::CCFrameData * >(DATA_PTR(mrb_self));
    
    obj_self->duration = duration;
    return mrb_fixnum_value(duration);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCFrameData#duration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCFrameData__get_m_strEvent(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCFrameData *obj_self = static_cast< cocos2d::extension::CCFrameData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->m_strEvent;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCFrameData__set_m_strEvent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_strEvent;
  if (1 == mrb_get_args(mrb, "S", &m_strEvent)) {
    cocos2d::extension::CCFrameData *obj_self = static_cast< cocos2d::extension::CCFrameData * >(DATA_PTR(mrb_self));
    
    obj_self->m_strEvent = RSTRING_PTR(m_strEvent);
    return m_strEvent;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCFrameData#m_strEvent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCFrameData__get_m_strMovement(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCFrameData *obj_self = static_cast< cocos2d::extension::CCFrameData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->m_strMovement;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCFrameData__set_m_strMovement(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_strMovement;
  if (1 == mrb_get_args(mrb, "S", &m_strMovement)) {
    cocos2d::extension::CCFrameData *obj_self = static_cast< cocos2d::extension::CCFrameData * >(DATA_PTR(mrb_self));
    
    obj_self->m_strMovement = RSTRING_PTR(m_strMovement);
    return m_strMovement;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCFrameData#m_strMovement");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCFrameData__get_m_strSound(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCFrameData *obj_self = static_cast< cocos2d::extension::CCFrameData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->m_strSound;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCFrameData__set_m_strSound(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_strSound;
  if (1 == mrb_get_args(mrb, "S", &m_strSound)) {
    cocos2d::extension::CCFrameData *obj_self = static_cast< cocos2d::extension::CCFrameData * >(DATA_PTR(mrb_self));
    
    obj_self->m_strSound = RSTRING_PTR(m_strSound);
    return m_strSound;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCFrameData#m_strSound");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCFrameData__get_m_strSoundEffect(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCFrameData *obj_self = static_cast< cocos2d::extension::CCFrameData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->m_strSoundEffect;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCFrameData__set_m_strSoundEffect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_strSoundEffect;
  if (1 == mrb_get_args(mrb, "S", &m_strSoundEffect)) {
    cocos2d::extension::CCFrameData *obj_self = static_cast< cocos2d::extension::CCFrameData * >(DATA_PTR(mrb_self));
    
    obj_self->m_strSoundEffect = RSTRING_PTR(m_strSoundEffect);
    return m_strSoundEffect;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCFrameData#m_strSoundEffect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCFrameData__get_tweenEasing(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCFrameData *obj_self = static_cast< cocos2d::extension::CCFrameData * >(DATA_PTR(mrb_self));
  enum cocos2d::extension::CCTweenType res = obj_self->tweenEasing;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCFrameData__set_tweenEasing(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int tweenEasing;
  if (1 == mrb_get_args(mrb, "i", &tweenEasing)) {
    cocos2d::extension::CCFrameData *obj_self = static_cast< cocos2d::extension::CCFrameData * >(DATA_PTR(mrb_self));
    
    obj_self->tweenEasing = (enum cocos2d::extension::CCTweenType)tweenEasing;
    return mrb_fixnum_value(tweenEasing);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCFrameData#tweenEasing");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpClient_destroyInstance(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpClient::destroyInstance();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpClient::destroyInstance");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpClient_getInstance(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCHttpClient * res = cocos2d::extension::CCHttpClient::getInstance();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCHttpClient,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpClient::getInstance");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpClient_getTimeoutForConnect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpClient *obj_self = static_cast< cocos2d::extension::CCHttpClient * >(DATA_PTR(mrb_self));
      int res = obj_self->getTimeoutForConnect();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpClient#getTimeoutForConnect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpClient_getTimeoutForRead(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpClient *obj_self = static_cast< cocos2d::extension::CCHttpClient * >(DATA_PTR(mrb_self));
      int res = obj_self->getTimeoutForRead();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpClient#getTimeoutForRead");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpClient_send(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value request;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &request)) {
      cocos2d::extension::CCHttpClient *obj_self = static_cast< cocos2d::extension::CCHttpClient * >(DATA_PTR(mrb_self));
      obj_self->send(static_cast< cocos2d::extension::CCHttpRequest * >(cc_mrb_data_get_ptr(mrb, request, &mrb_type_cocos2d_extension_CCHttpRequest, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpClient#send");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpClient_setTimeoutForConnect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &value)) {
      cocos2d::extension::CCHttpClient *obj_self = static_cast< cocos2d::extension::CCHttpClient * >(DATA_PTR(mrb_self));
      obj_self->setTimeoutForConnect(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpClient#setTimeoutForConnect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpClient_setTimeoutForRead(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &value)) {
      cocos2d::extension::CCHttpClient *obj_self = static_cast< cocos2d::extension::CCHttpClient * >(DATA_PTR(mrb_self));
      obj_self->setTimeoutForRead(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpClient#setTimeoutForRead");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCHttpRequest;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCHttpRequest * res = new cocos2d::extension::CCHttpRequest();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest__prxy_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCHttpRequest__prxy;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCHttpRequest::_prxy * res = new cocos2d::extension::CCHttpRequest::_prxy();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  {
    mrb_value cb;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCHttpRequest__prxy;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &cb)) {
      cocos2d::extension::CCHttpRequest::_prxy * res = new cocos2d::extension::CCHttpRequest::_prxy(httpresponse_selector(CCMRubyCallbackWrapper::SEL_HttpResponse_Impl));
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest::_prxy#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest__prxy_assign(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::extension::CCHttpRequest::_prxy *obj_self = static_cast< cocos2d::extension::CCHttpRequest::_prxy * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCHttpRequest::_prxy *res = new class cocos2d::extension::CCHttpRequest::_prxy(); *res = obj_self->operator=(*(static_cast< cocos2d::extension::CCHttpRequest::_prxy * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_extension_CCHttpRequest__prxy, &mrb_no_free_type_cocos2d_extension_CCHttpRequest__prxy))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCHttpRequest::CC_prxy"),
                       &mrb_type_cocos2d_extension_CCHttpRequest__prxy,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest::_prxy#operator=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_autorelease(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->autorelease();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#autorelease");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_getHeaders(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      std::vector<std::string> res = obj_self->getHeaders();
      mrb_value mrb_res = cc_mrb_ary_conv_from(mrb, mrb_ary_new(mrb), res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#getHeaders");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_getRequestData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getRequestData();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#getRequestData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_getRequestDataSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      int res = obj_self->getRequestDataSize();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#getRequestDataSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_getRequestType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      HttpRequestType res = obj_self->getRequestType();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#getRequestType");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_getSelector(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCHttpRequest::_prxy *res = new class cocos2d::extension::CCHttpRequest::_prxy(); *res = obj_self->getSelector();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCHttpRequest::CC_prxy"),
                       &mrb_type_cocos2d_extension_CCHttpRequest__prxy,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#getSelector");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_getTag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getTag();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#getTag");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_getTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->getTarget();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#getTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_getUrl(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getUrl();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#getUrl");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest__get_kHttpDelete(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCHttpRequest::kHttpDelete;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest__get_kHttpGet(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCHttpRequest::kHttpGet;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest__get_kHttpPost(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCHttpRequest::kHttpPost;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest__get_kHttpPut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCHttpRequest::kHttpPut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest__get_kHttpUnkown(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CCHttpRequest::kHttpUnkown;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_removeResponseCallback(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      obj_self->removeResponseCallback();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#removeResponseCallback");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_setHeaders(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pHeaders;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "A", &pHeaders)) {
      std::vector<std::string> cxx_pHeaders; cc_mrb_ary_conv_to(mrb, pHeaders, cxx_pHeaders);
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      obj_self->setHeaders(cxx_pHeaders);
      cc_mrb_ary_conv_from(mrb, pHeaders, cxx_pHeaders);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#setHeaders");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_setRequestData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value buffer;
    mrb_int len;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &buffer, &len)) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      obj_self->setRequestData(RSTRING_PTR(buffer), len);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#setRequestData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_setRequestType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int type;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &type)) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      obj_self->setRequestType((HttpRequestType)type);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#setRequestType");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_extension_CCHttpRequest_setResponseCallback(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    mrb_value pSelector;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTarget, &pSelector)) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      cocos2d::CCMRubyCallbackWrapper *wrapper = cocos2d::CCMRubyCallbackWrapper::create(mrb, pTarget, pSelector);
      obj_self->setResponseCallback(wrapper, httpresponse_selector(cocos2d::CCMRubyCallbackWrapper::SEL_HttpResponse_Impl));
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#setResponseCallback");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_setTag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tag;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &tag)) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      obj_self->setTag(RSTRING_PTR(tag));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#setTag");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_setUrl(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value url;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &url)) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      obj_self->setUrl(RSTRING_PTR(url));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#setUrl");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpRequest_setUserData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pUserData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pUserData)) {
      cocos2d::extension::CCHttpRequest *obj_self = static_cast< cocos2d::extension::CCHttpRequest * >(DATA_PTR(mrb_self));
      obj_self->setUserData(static_cast< void * >(DATA_PTR(pUserData)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpRequest#setUserData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpResponse_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value request;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCHttpResponse;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &request)) {
      cocos2d::extension::CCHttpResponse * res = new cocos2d::extension::CCHttpResponse(static_cast< cocos2d::extension::CCHttpRequest * >(cc_mrb_data_get_ptr(mrb, request, &mrb_type_cocos2d_extension_CCHttpRequest, NULL)));
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpResponse#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpResponse_autorelease(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpResponse *obj_self = static_cast< cocos2d::extension::CCHttpResponse * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->autorelease();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpResponse#autorelease");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpResponse_getErrorBuffer(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpResponse *obj_self = static_cast< cocos2d::extension::CCHttpResponse * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getErrorBuffer();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpResponse#getErrorBuffer");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpResponse_getHttpRequest(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpResponse *obj_self = static_cast< cocos2d::extension::CCHttpResponse * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCHttpRequest * res = obj_self->getHttpRequest();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCHttpRequest,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpResponse#getHttpRequest");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpResponse_getResponseCode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpResponse *obj_self = static_cast< cocos2d::extension::CCHttpResponse * >(DATA_PTR(mrb_self));
      int res = obj_self->getResponseCode();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpResponse#getResponseCode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpResponse_getResponseData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpResponse *obj_self = static_cast< cocos2d::extension::CCHttpResponse * >(DATA_PTR(mrb_self));
      std::vector<char> * res = obj_self->getResponseData();
      mrb_value mrb_res = cc_mrb_ary_conv_from(mrb, mrb_ary_new(mrb), res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpResponse#getResponseData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpResponse_getResponseHeader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpResponse *obj_self = static_cast< cocos2d::extension::CCHttpResponse * >(DATA_PTR(mrb_self));
      std::vector<char> * res = obj_self->getResponseHeader();
      mrb_value mrb_res = cc_mrb_ary_conv_from(mrb, mrb_ary_new(mrb), res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpResponse#getResponseHeader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpResponse_isSucceed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCHttpResponse *obj_self = static_cast< cocos2d::extension::CCHttpResponse * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isSucceed();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpResponse#isSucceed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpResponse_setErrorBuffer(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &value)) {
      cocos2d::extension::CCHttpResponse *obj_self = static_cast< cocos2d::extension::CCHttpResponse * >(DATA_PTR(mrb_self));
      obj_self->setErrorBuffer(RSTRING_PTR(value));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpResponse#setErrorBuffer");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpResponse_setResponseCode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &value)) {
      cocos2d::extension::CCHttpResponse *obj_self = static_cast< cocos2d::extension::CCHttpResponse * >(DATA_PTR(mrb_self));
      obj_self->setResponseCode(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpResponse#setResponseCode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpResponse_setResponseData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value data;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "A", &data)) {
      std::vector<char> * cxx_data; cc_mrb_ary_conv_to(mrb, data, cxx_data);
      cocos2d::extension::CCHttpResponse *obj_self = static_cast< cocos2d::extension::CCHttpResponse * >(DATA_PTR(mrb_self));
      obj_self->setResponseData(cxx_data);
      cc_mrb_ary_conv_from(mrb, data, cxx_data);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpResponse#setResponseData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpResponse_setResponseHeader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value data;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "A", &data)) {
      std::vector<char> * cxx_data; cc_mrb_ary_conv_to(mrb, data, cxx_data);
      cocos2d::extension::CCHttpResponse *obj_self = static_cast< cocos2d::extension::CCHttpResponse * >(DATA_PTR(mrb_self));
      obj_self->setResponseHeader(cxx_data);
      cc_mrb_ary_conv_from(mrb, data, cxx_data);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpResponse#setResponseHeader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCHttpResponse_setSucceed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &value)) {
      cocos2d::extension::CCHttpResponse *obj_self = static_cast< cocos2d::extension::CCHttpResponse * >(DATA_PTR(mrb_self));
      obj_self->setSucceed(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCHttpResponse#setSucceed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_ccTouchBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->ccTouchBegan(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#ccTouchBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_ccTouchCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchCancelled(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#ccTouchCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_ccTouchEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchEnded(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#ccTouchEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_ccTouchMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchMoved(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#ccTouchMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_ccTouchesBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesBegan(static_cast< cocos2d::CCSet * >(DATA_PTR(pTouches)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#ccTouchesBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_ccTouchesCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesCancelled(static_cast< cocos2d::CCSet * >(DATA_PTR(pTouches)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#ccTouchesCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_ccTouchesEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesEnded(static_cast< cocos2d::CCSet * >(DATA_PTR(pTouches)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#ccTouchesEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_ccTouchesMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesMoved(static_cast< cocos2d::CCSet * >(DATA_PTR(pTouches)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#ccTouchesMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_didAccelerate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAccelerationValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAccelerationValue)) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      obj_self->didAccelerate(static_cast< cocos2d::CCAcceleration * >(DATA_PTR(pAccelerationValue)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#didAccelerate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_getTouchMode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      int res = obj_self->getTouchMode();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#getTouchMode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_getTouchPriority(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      int res = obj_self->getTouchPriority();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#getTouchPriority");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_isAccelerometerEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isAccelerometerEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#isAccelerometerEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_isKeypadEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isKeypadEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#isKeypadEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_isTouchEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isTouchEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#isTouchEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_setAccelerometerEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &value)) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      obj_self->setAccelerometerEnabled(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#setAccelerometerEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_setKeypadEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &value)) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      obj_self->setKeypadEnabled(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#setKeypadEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_setTouchEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &value)) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      obj_self->setTouchEnabled(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#setTouchEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_setTouchMode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int mode;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &mode)) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      obj_self->setTouchMode((ccTouchesMode)mode);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#setTouchMode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInputDelegate_setTouchPriority(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int priority;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &priority)) {
      cocos2d::extension::CCInputDelegate *obj_self = static_cast< cocos2d::extension::CCInputDelegate * >(DATA_PTR(mrb_self));
      obj_self->setTouchPriority(priority);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInputDelegate#setTouchPriority");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInvocation_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value action;
    mrb_int controlEvent;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCInvocation;
    DATA_PTR(mrb_self) = NULL;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooi", &target, &action, &controlEvent)) {
      cocos2d::extension::CCInvocation * res = new cocos2d::extension::CCInvocation(CCMRubyCallbackWrapper::create(mrb, target, action), cccontrol_selector(CCMRubyCallbackWrapper::SEL_CCControlHandler_Impl), controlEvent);
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInvocation#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInvocation_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value action;
    mrb_int controlEvent;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooi", &target, &action, &controlEvent)) {
      class cocos2d::extension::CCInvocation * res = cocos2d::extension::CCInvocation::create(CCMRubyCallbackWrapper::create(mrb, target, action), cccontrol_selector(CCMRubyCallbackWrapper::SEL_CCControlHandler_Impl), controlEvent);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCInvocation,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInvocation::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInvocation_getControlEvent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCInvocation *obj_self = static_cast< cocos2d::extension::CCInvocation * >(DATA_PTR(mrb_self));
      CCControlEvent res = obj_self->getControlEvent();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInvocation#getControlEvent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInvocation_getTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCInvocation *obj_self = static_cast< cocos2d::extension::CCInvocation * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->getTarget();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInvocation#getTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCInvocation_invoke(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sender;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sender)) {
      cocos2d::extension::CCInvocation *obj_self = static_cast< cocos2d::extension::CCInvocation * >(DATA_PTR(mrb_self));
      obj_self->invoke(static_cast< cocos2d::CCObject * >(DATA_PTR(sender)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCInvocation#invoke");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCLabelBMFontLoader_loader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCLabelBMFontLoader * res = cocos2d::extension::CCLabelBMFontLoader::loader();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCLabelBMFontLoader,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCLabelBMFontLoader::loader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCLabelBMFontLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCLabelBMFontLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCLabelBMFontLoader * res = new cocos2d::extension::CCLabelBMFontLoader();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCLabelBMFontLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCLabelTTFLoader_loader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCLabelTTFLoader * res = cocos2d::extension::CCLabelTTFLoader::loader();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCLabelTTFLoader,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCLabelTTFLoader::loader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCLabelTTFLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCLabelTTFLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCLabelTTFLoader * res = new cocos2d::extension::CCLabelTTFLoader();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCLabelTTFLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCLayerColorLoader_loader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCLayerColorLoader * res = cocos2d::extension::CCLayerColorLoader::loader();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCLayerColorLoader,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCLayerColorLoader::loader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCLayerColorLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCLayerColorLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCLayerColorLoader * res = new cocos2d::extension::CCLayerColorLoader();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCLayerColorLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCLayerGradientLoader_loader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCLayerGradientLoader * res = cocos2d::extension::CCLayerGradientLoader::loader();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCLayerGradientLoader,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCLayerGradientLoader::loader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCLayerGradientLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCLayerGradientLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCLayerGradientLoader * res = new cocos2d::extension::CCLayerGradientLoader();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCLayerGradientLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCLayerLoader_loader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCLayerLoader * res = cocos2d::extension::CCLayerLoader::loader();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCLayerLoader,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCLayerLoader::loader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCLayerLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCLayerLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCLayerLoader * res = new cocos2d::extension::CCLayerLoader();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCLayerLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMenuItemImageLoader_loader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCMenuItemImageLoader * res = cocos2d::extension::CCMenuItemImageLoader::loader();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCMenuItemImageLoader,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMenuItemImageLoader::loader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMenuItemImageLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCMenuItemImageLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCMenuItemImageLoader * res = new cocos2d::extension::CCMenuItemImageLoader();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMenuItemImageLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMenuLoader_loader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCMenuLoader * res = cocos2d::extension::CCMenuLoader::loader();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCMenuLoader,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMenuLoader::loader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMenuLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCMenuLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCMenuLoader * res = new cocos2d::extension::CCMenuLoader();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMenuLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementBoneData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCMovementBoneData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCMovementBoneData * res = new cocos2d::extension::CCMovementBoneData();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementBoneData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementBoneData_addFrameData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value frameData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &frameData)) {
      cocos2d::extension::CCMovementBoneData *obj_self = static_cast< cocos2d::extension::CCMovementBoneData * >(DATA_PTR(mrb_self));
      obj_self->addFrameData(static_cast< cocos2d::extension::CCFrameData * >(cc_mrb_data_get_ptr(mrb, frameData, &mrb_type_cocos2d_extension_CCFrameData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementBoneData#addFrameData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementBoneData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCMovementBoneData * res = cocos2d::extension::CCMovementBoneData::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCMovementBoneData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementBoneData::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementBoneData__get_delay(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCMovementBoneData *obj_self = static_cast< cocos2d::extension::CCMovementBoneData * >(DATA_PTR(mrb_self));
  float res = obj_self->delay;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCMovementBoneData__set_delay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float delay;
  if (1 == mrb_get_args(mrb, "f", &delay)) {
    cocos2d::extension::CCMovementBoneData *obj_self = static_cast< cocos2d::extension::CCMovementBoneData * >(DATA_PTR(mrb_self));
    
    obj_self->delay = delay;
    return mrb_float_value(mrb, delay);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementBoneData#delay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementBoneData__get_duration(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCMovementBoneData *obj_self = static_cast< cocos2d::extension::CCMovementBoneData * >(DATA_PTR(mrb_self));
  float res = obj_self->duration;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCMovementBoneData__set_duration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float duration;
  if (1 == mrb_get_args(mrb, "f", &duration)) {
    cocos2d::extension::CCMovementBoneData *obj_self = static_cast< cocos2d::extension::CCMovementBoneData * >(DATA_PTR(mrb_self));
    
    obj_self->duration = duration;
    return mrb_float_value(mrb, duration);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementBoneData#duration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementBoneData__get_frameList(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCMovementBoneData *obj_self = static_cast< cocos2d::extension::CCMovementBoneData * >(DATA_PTR(mrb_self));
  class cocos2d::CCArray *res = &obj_self->frameList;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCArray"),
                       &mrb_no_free_type_cocos2d_CCArray,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCMovementBoneData__set_frameList(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value frameList;
  if (1 == mrb_get_args(mrb, "o", &frameList)) {
    cocos2d::extension::CCMovementBoneData *obj_self = static_cast< cocos2d::extension::CCMovementBoneData * >(DATA_PTR(mrb_self));
    
    obj_self->frameList = *(static_cast< cocos2d::CCArray * >(DATA_PTR(frameList)));
    return frameList;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementBoneData#frameList");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementBoneData_getFrameData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &index)) {
      cocos2d::extension::CCMovementBoneData *obj_self = static_cast< cocos2d::extension::CCMovementBoneData * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCFrameData * res = obj_self->getFrameData(index);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCFrameData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementBoneData#getFrameData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementBoneData_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCMovementBoneData *obj_self = static_cast< cocos2d::extension::CCMovementBoneData * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementBoneData#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementBoneData__get_name(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCMovementBoneData *obj_self = static_cast< cocos2d::extension::CCMovementBoneData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->name;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCMovementBoneData__set_name(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value name;
  if (1 == mrb_get_args(mrb, "S", &name)) {
    cocos2d::extension::CCMovementBoneData *obj_self = static_cast< cocos2d::extension::CCMovementBoneData * >(DATA_PTR(mrb_self));
    
    obj_self->name = RSTRING_PTR(name);
    return name;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementBoneData#name");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementBoneData__get_scale(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCMovementBoneData *obj_self = static_cast< cocos2d::extension::CCMovementBoneData * >(DATA_PTR(mrb_self));
  float res = obj_self->scale;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCMovementBoneData__set_scale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float scale;
  if (1 == mrb_get_args(mrb, "f", &scale)) {
    cocos2d::extension::CCMovementBoneData *obj_self = static_cast< cocos2d::extension::CCMovementBoneData * >(DATA_PTR(mrb_self));
    
    obj_self->scale = scale;
    return mrb_float_value(mrb, scale);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementBoneData#scale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCMovementData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCMovementData * res = new cocos2d::extension::CCMovementData();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementData_addMovementBoneData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value movBoneData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &movBoneData)) {
      cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
      obj_self->addMovementBoneData(static_cast< cocos2d::extension::CCMovementBoneData * >(cc_mrb_data_get_ptr(mrb, movBoneData, &mrb_type_cocos2d_extension_CCMovementBoneData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementData#addMovementBoneData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCMovementData * res = cocos2d::extension::CCMovementData::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCMovementData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementData::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementData__get_duration(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
  int res = obj_self->duration;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCMovementData__set_duration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int duration;
  if (1 == mrb_get_args(mrb, "i", &duration)) {
    cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
    
    obj_self->duration = duration;
    return mrb_fixnum_value(duration);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementData#duration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementData__get_durationTo(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
  int res = obj_self->durationTo;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCMovementData__set_durationTo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int durationTo;
  if (1 == mrb_get_args(mrb, "i", &durationTo)) {
    cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
    
    obj_self->durationTo = durationTo;
    return mrb_fixnum_value(durationTo);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementData#durationTo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementData__get_durationTween(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
  int res = obj_self->durationTween;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCMovementData__set_durationTween(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int durationTween;
  if (1 == mrb_get_args(mrb, "i", &durationTween)) {
    cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
    
    obj_self->durationTween = durationTween;
    return mrb_fixnum_value(durationTween);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementData#durationTween");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementData_getMovementBoneData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value boneName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &boneName)) {
      cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCMovementBoneData * res = obj_self->getMovementBoneData(RSTRING_PTR(boneName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCMovementBoneData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementData#getMovementBoneData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementData__get_loop(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->loop;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCMovementData__set_loop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool loop;
  if (1 == mrb_get_args(mrb, "b", &loop)) {
    cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
    
    obj_self->loop = loop;
    return mrb_bool_value(loop);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementData#loop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementData__get_movBoneDataDic(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
  class cocos2d::CCDictionary *res = &obj_self->movBoneDataDic;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCDictionary"),
                       &mrb_no_free_type_cocos2d_CCDictionary,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCMovementData__set_movBoneDataDic(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value movBoneDataDic;
  if (1 == mrb_get_args(mrb, "o", &movBoneDataDic)) {
    cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
    
    obj_self->movBoneDataDic = *(static_cast< cocos2d::CCDictionary * >(DATA_PTR(movBoneDataDic)));
    return movBoneDataDic;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementData#movBoneDataDic");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementData__get_name(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->name;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCMovementData__set_name(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value name;
  if (1 == mrb_get_args(mrb, "S", &name)) {
    cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
    
    obj_self->name = RSTRING_PTR(name);
    return name;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementData#name");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMovementData__get_tweenEasing(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
  enum cocos2d::extension::CCTweenType res = obj_self->tweenEasing;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCMovementData__set_tweenEasing(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int tweenEasing;
  if (1 == mrb_get_args(mrb, "i", &tweenEasing)) {
    cocos2d::extension::CCMovementData *obj_self = static_cast< cocos2d::extension::CCMovementData * >(DATA_PTR(mrb_self));
    
    obj_self->tweenEasing = (enum cocos2d::extension::CCTweenType)tweenEasing;
    return mrb_fixnum_value(tweenEasing);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMovementData#tweenEasing");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCNodeLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCNodeLoader * res = new cocos2d::extension::CCNodeLoader();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoader_getCustomProperties(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCNodeLoader *obj_self = static_cast< cocos2d::extension::CCNodeLoader * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getCustomProperties();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoader#getCustomProperties");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoader_loadCCNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arg5;
    mrb_value pCCBReader;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arg5, &pCCBReader)) {
      cocos2d::extension::CCNodeLoader *obj_self = static_cast< cocos2d::extension::CCNodeLoader * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->loadCCNode(static_cast< cocos2d::CCNode * >(DATA_PTR(arg5)), static_cast< cocos2d::extension::CCBReader * >(cc_mrb_data_get_ptr(mrb, pCCBReader, &mrb_type_cocos2d_extension_CCBReader, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoader#loadCCNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoader_loader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCNodeLoader * res = cocos2d::extension::CCNodeLoader::loader();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCNodeLoader,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoader::loader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoader_parseProperties(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pNode;
    mrb_value pParent;
    mrb_value pCCBReader;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &pNode, &pParent, &pCCBReader)) {
      cocos2d::extension::CCNodeLoader *obj_self = static_cast< cocos2d::extension::CCNodeLoader * >(DATA_PTR(mrb_self));
      obj_self->parseProperties(static_cast< cocos2d::CCNode * >(DATA_PTR(pNode)), static_cast< cocos2d::CCNode * >(DATA_PTR(pParent)), static_cast< cocos2d::extension::CCBReader * >(cc_mrb_data_get_ptr(mrb, pCCBReader, &mrb_type_cocos2d_extension_CCBReader, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoader#parseProperties");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoaderLibrary_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCNodeLoaderLibrary;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCNodeLoaderLibrary * res = new cocos2d::extension::CCNodeLoaderLibrary();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoaderLibrary#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoaderLibrary_getCCNodeLoader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pClassName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pClassName)) {
      cocos2d::extension::CCNodeLoaderLibrary *obj_self = static_cast< cocos2d::extension::CCNodeLoaderLibrary * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCNodeLoader * res = obj_self->getCCNodeLoader(RSTRING_PTR(pClassName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCNodeLoader,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoaderLibrary#getCCNodeLoader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoaderLibrary_library(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCNodeLoaderLibrary * res = cocos2d::extension::CCNodeLoaderLibrary::library();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCNodeLoaderLibrary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoaderLibrary::library");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoaderLibrary_newDefaultCCNodeLoaderLibrary(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCNodeLoaderLibrary * res = cocos2d::extension::CCNodeLoaderLibrary::newDefaultCCNodeLoaderLibrary();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCNodeLoaderLibrary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoaderLibrary::newDefaultCCNodeLoaderLibrary");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoaderLibrary_purge(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool pDelete;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &pDelete)) {
      cocos2d::extension::CCNodeLoaderLibrary *obj_self = static_cast< cocos2d::extension::CCNodeLoaderLibrary * >(DATA_PTR(mrb_self));
      obj_self->purge(pDelete);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoaderLibrary#purge");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoaderLibrary_purgeSharedCCNodeLoaderLibrary(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCNodeLoaderLibrary::purgeSharedCCNodeLoaderLibrary();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoaderLibrary::purgeSharedCCNodeLoaderLibrary");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoaderLibrary_registerCCNodeLoader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pClassName;
    mrb_value pCCNodeLoader;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &pClassName, &pCCNodeLoader)) {
      cocos2d::extension::CCNodeLoaderLibrary *obj_self = static_cast< cocos2d::extension::CCNodeLoaderLibrary * >(DATA_PTR(mrb_self));
      obj_self->registerCCNodeLoader(RSTRING_PTR(pClassName), static_cast< cocos2d::extension::CCNodeLoader * >(cc_mrb_data_get_ptr(mrb, pCCNodeLoader, &mrb_type_cocos2d_extension_CCNodeLoader, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoaderLibrary#registerCCNodeLoader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoaderLibrary_registerDefaultCCNodeLoaders(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCNodeLoaderLibrary *obj_self = static_cast< cocos2d::extension::CCNodeLoaderLibrary * >(DATA_PTR(mrb_self));
      obj_self->registerDefaultCCNodeLoaders();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoaderLibrary#registerDefaultCCNodeLoaders");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoaderLibrary_sharedCCNodeLoaderLibrary(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCNodeLoaderLibrary * res = cocos2d::extension::CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCNodeLoaderLibrary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoaderLibrary_unregisterCCNodeLoader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pClassName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pClassName)) {
      cocos2d::extension::CCNodeLoaderLibrary *obj_self = static_cast< cocos2d::extension::CCNodeLoaderLibrary * >(DATA_PTR(mrb_self));
      obj_self->unregisterCCNodeLoader(RSTRING_PTR(pClassName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoaderLibrary#unregisterCCNodeLoader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCNodeLoaderListener_onNodeLoaded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pNode;
    mrb_value pNodeLoader;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pNode, &pNodeLoader)) {
      cocos2d::extension::CCNodeLoaderListener *obj_self = static_cast< cocos2d::extension::CCNodeLoaderListener * >(DATA_PTR(mrb_self));
      obj_self->onNodeLoaded(static_cast< cocos2d::CCNode * >(DATA_PTR(pNode)), static_cast< cocos2d::extension::CCNodeLoader * >(cc_mrb_data_get_ptr(mrb, pNodeLoader, &mrb_type_cocos2d_extension_CCNodeLoader, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCNodeLoaderListener#onNodeLoaded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCParticleDisplayData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCParticleDisplayData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCParticleDisplayData * res = new cocos2d::extension::CCParticleDisplayData();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCParticleDisplayData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCParticleDisplayData_copy(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value displayData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &displayData)) {
      cocos2d::extension::CCParticleDisplayData *obj_self = static_cast< cocos2d::extension::CCParticleDisplayData * >(DATA_PTR(mrb_self));
      obj_self->copy(static_cast< cocos2d::extension::CCParticleDisplayData * >(cc_mrb_data_get_ptr(mrb, displayData, &mrb_type_cocos2d_extension_CCParticleDisplayData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCParticleDisplayData#copy");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCParticleDisplayData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCParticleDisplayData * res = cocos2d::extension::CCParticleDisplayData::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCParticleDisplayData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCParticleDisplayData::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCParticleDisplayData__get_plist(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCParticleDisplayData *obj_self = static_cast< cocos2d::extension::CCParticleDisplayData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->plist;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCParticleDisplayData__set_plist(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value plist;
  if (1 == mrb_get_args(mrb, "S", &plist)) {
    cocos2d::extension::CCParticleDisplayData *obj_self = static_cast< cocos2d::extension::CCParticleDisplayData * >(DATA_PTR(mrb_self));
    
    obj_self->plist = RSTRING_PTR(plist);
    return plist;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCParticleDisplayData#plist");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCParticleDisplayData_setParam(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value plist;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &plist)) {
      cocos2d::extension::CCParticleDisplayData *obj_self = static_cast< cocos2d::extension::CCParticleDisplayData * >(DATA_PTR(mrb_self));
      obj_self->setParam(RSTRING_PTR(plist));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCParticleDisplayData#setParam");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCParticleSystemQuadLoader_loader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCParticleSystemQuadLoader * res = cocos2d::extension::CCParticleSystemQuadLoader::loader();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCParticleSystemQuadLoader,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCParticleSystemQuadLoader::loader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCParticleSystemQuadLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCParticleSystemQuadLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCParticleSystemQuadLoader * res = new cocos2d::extension::CCParticleSystemQuadLoader();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCParticleSystemQuadLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCProcessBase;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCProcessBase * res = new cocos2d::extension::CCProcessBase();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_getAnimationInternal(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      float res = obj_self->getAnimationInternal();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#getAnimationInternal");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_getAnimationScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      float res = obj_self->getAnimationScale();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#getAnimationScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_getCurrentFrameIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      int res = obj_self->getCurrentFrameIndex();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#getCurrentFrameIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_getCurrentPercent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      float res = obj_self->getCurrentPercent();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#getCurrentPercent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_getIsComplete(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getIsComplete();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#getIsComplete");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_getIsPause(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getIsPause();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#getIsPause");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_getIsPlaying(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getIsPlaying();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#getIsPlaying");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_getLoopType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      enum cocos2d::extension::AnimationType res = obj_self->getLoopType();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#getLoopType");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_getRawDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      int res = obj_self->getRawDuration();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#getRawDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_getTweenEasing(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      enum cocos2d::extension::CCTweenType res = obj_self->getTweenEasing();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#getTweenEasing");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_gotoFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int frameIndex;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &frameIndex)) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      obj_self->gotoFrame(frameIndex);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#gotoFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_pause(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      obj_self->pause();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#pause");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_play(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value animation;
    mrb_int durationTo;
    mrb_int durationTween;
    mrb_int loop;
    mrb_int tweenEasing;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "oiiii", &animation, &durationTo, &durationTween, &loop, &tweenEasing)) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      obj_self->play(static_cast< void * >(DATA_PTR(animation)), durationTo, durationTween, loop, tweenEasing);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#play");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_resume(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      obj_self->resume();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#resume");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_setAnimationInternal(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      obj_self->setAnimationInternal(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#setAnimationInternal");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_setAnimationScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      obj_self->setAnimationScale(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#setAnimationScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_setCurrentPercent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      obj_self->setCurrentPercent(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#setCurrentPercent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_setIsComplete(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &var)) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      obj_self->setIsComplete(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#setIsComplete");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_setIsPause(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &var)) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      obj_self->setIsPause(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#setIsPause");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_setIsPlaying(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &var)) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      obj_self->setIsPlaying(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#setIsPlaying");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_setLoopType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      obj_self->setLoopType((enum cocos2d::extension::AnimationType &)var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#setLoopType");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_setRawDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      obj_self->setRawDuration(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#setRawDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_setTweenEasing(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      obj_self->setTweenEasing((enum cocos2d::extension::CCTweenType &)var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#setTweenEasing");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_stop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      obj_self->stop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#stop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCProcessBase_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::extension::CCProcessBase *obj_self = static_cast< cocos2d::extension::CCProcessBase * >(DATA_PTR(mrb_self));
      obj_self->update(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCProcessBase#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCScale9Sprite;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCScale9Sprite * res = new cocos2d::extension::CCScale9Sprite();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value file;
    mrb_value rect;
    mrb_value capInsets;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "Soo", &file, &rect, &capInsets)) {
      class cocos2d::extension::CCScale9Sprite * res = cocos2d::extension::CCScale9Sprite::create(RSTRING_PTR(file), *(static_cast< cocos2d::CCRect * >(DATA_PTR(rect))), *(static_cast< cocos2d::CCRect * >(DATA_PTR(capInsets))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCScale9Sprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value file;
    mrb_value rect;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &file, &rect)) {
      class cocos2d::extension::CCScale9Sprite * res = cocos2d::extension::CCScale9Sprite::create(RSTRING_PTR(file), *(static_cast< cocos2d::CCRect * >(DATA_PTR(rect))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCScale9Sprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value capInsets;
    mrb_value file;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &capInsets, &file)) {
      class cocos2d::extension::CCScale9Sprite * res = cocos2d::extension::CCScale9Sprite::create(*(static_cast< cocos2d::CCRect * >(DATA_PTR(capInsets))), RSTRING_PTR(file));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCScale9Sprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value file;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &file)) {
      class cocos2d::extension::CCScale9Sprite * res = cocos2d::extension::CCScale9Sprite::create(RSTRING_PTR(file));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCScale9Sprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCScale9Sprite * res = cocos2d::extension::CCScale9Sprite::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCScale9Sprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_createWithSpriteFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value spriteFrame;
    mrb_value capInsets;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &spriteFrame, &capInsets)) {
      class cocos2d::extension::CCScale9Sprite * res = cocos2d::extension::CCScale9Sprite::createWithSpriteFrame(static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(spriteFrame)), *(static_cast< cocos2d::CCRect * >(DATA_PTR(capInsets))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCScale9Sprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value spriteFrame;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &spriteFrame)) {
      class cocos2d::extension::CCScale9Sprite * res = cocos2d::extension::CCScale9Sprite::createWithSpriteFrame(static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(spriteFrame)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCScale9Sprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite::createWithSpriteFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_createWithSpriteFrameName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value spriteFrameName;
    mrb_value capInsets;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &spriteFrameName, &capInsets)) {
      class cocos2d::extension::CCScale9Sprite * res = cocos2d::extension::CCScale9Sprite::createWithSpriteFrameName(RSTRING_PTR(spriteFrameName), *(static_cast< cocos2d::CCRect * >(DATA_PTR(capInsets))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCScale9Sprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value spriteFrameName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &spriteFrameName)) {
      class cocos2d::extension::CCScale9Sprite * res = cocos2d::extension::CCScale9Sprite::createWithSpriteFrameName(RSTRING_PTR(spriteFrameName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCScale9Sprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite::createWithSpriteFrameName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_getCapInsets(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      class cocos2d::CCRect *res = new class cocos2d::CCRect(); *res = obj_self->getCapInsets();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#getCapInsets");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_getColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#getColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_getInsetBottom(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      float res = obj_self->getInsetBottom();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#getInsetBottom");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_getInsetLeft(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      float res = obj_self->getInsetLeft();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#getInsetLeft");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_getInsetRight(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      float res = obj_self->getInsetRight();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#getInsetRight");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_getInsetTop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      float res = obj_self->getInsetTop();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#getInsetTop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_getOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      GLubyte res = obj_self->getOpacity();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#getOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_getOriginalSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getOriginalSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#getOriginalSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_getPreferredSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getPreferredSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#getPreferredSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_initWithBatchNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value batchnode;
    mrb_value rect;
    mrb_bool rotated;
    mrb_value capInsets;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oobo", &batchnode, &rect, &rotated, &capInsets)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithBatchNode(static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(batchnode)), *(static_cast< cocos2d::CCRect * >(DATA_PTR(rect))), rotated, *(static_cast< cocos2d::CCRect * >(DATA_PTR(capInsets))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value batchnode;
    mrb_value rect;
    mrb_value capInsets;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &batchnode, &rect, &capInsets)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithBatchNode(static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(batchnode)), *(static_cast< cocos2d::CCRect * >(DATA_PTR(rect))), *(static_cast< cocos2d::CCRect * >(DATA_PTR(capInsets))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#initWithBatchNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_initWithFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value file;
    mrb_value rect;
    mrb_value capInsets;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "Soo", &file, &rect, &capInsets)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFile(RSTRING_PTR(file), *(static_cast< cocos2d::CCRect * >(DATA_PTR(rect))), *(static_cast< cocos2d::CCRect * >(DATA_PTR(capInsets))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value file;
    mrb_value rect;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &file, &rect)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFile(RSTRING_PTR(file), *(static_cast< cocos2d::CCRect * >(DATA_PTR(rect))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value capInsets;
    mrb_value file;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &capInsets, &file)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFile(*(static_cast< cocos2d::CCRect * >(DATA_PTR(capInsets))), RSTRING_PTR(file));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value file;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &file)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFile(RSTRING_PTR(file));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#initWithFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_initWithSpriteFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value spriteFrame;
    mrb_value capInsets;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &spriteFrame, &capInsets)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSpriteFrame(static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(spriteFrame)), *(static_cast< cocos2d::CCRect * >(DATA_PTR(capInsets))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value spriteFrame;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &spriteFrame)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSpriteFrame(static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(spriteFrame)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#initWithSpriteFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_initWithSpriteFrameName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value spriteFrameName;
    mrb_value capInsets;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &spriteFrameName, &capInsets)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSpriteFrameName(RSTRING_PTR(spriteFrameName), *(static_cast< cocos2d::CCRect * >(DATA_PTR(capInsets))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value spriteFrameName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &spriteFrameName)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSpriteFrameName(RSTRING_PTR(spriteFrameName));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#initWithSpriteFrameName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_resizableSpriteWithCapInsets(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value capInsets;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &capInsets)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCScale9Sprite * res = obj_self->resizableSpriteWithCapInsets(*(static_cast< cocos2d::CCRect * >(DATA_PTR(capInsets))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCScale9Sprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#resizableSpriteWithCapInsets");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_setCapInsets(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      obj_self->setCapInsets(*(static_cast< cocos2d::CCRect * >(DATA_PTR(var))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#setCapInsets");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_setColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value color;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &color)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      obj_self->setColor(*(static_cast< ccColor3B * >(DATA_PTR(color))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#setColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_setContentSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value size;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &size)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      obj_self->setContentSize(*(static_cast< cocos2d::CCSize * >(DATA_PTR(size))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#setContentSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_setInsetBottom(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      obj_self->setInsetBottom(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#setInsetBottom");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_setInsetLeft(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      obj_self->setInsetLeft(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#setInsetLeft");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_setInsetRight(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      obj_self->setInsetRight(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#setInsetRight");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_setInsetTop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      obj_self->setInsetTop(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#setInsetTop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_setOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int opacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &opacity)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      obj_self->setOpacity(opacity);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#setOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bValue)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(bValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_setPreferredSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      obj_self->setPreferredSize(*(static_cast< cocos2d::CCSize * >(DATA_PTR(var))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#setPreferredSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_setSpriteFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value spriteFrame;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &spriteFrame)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      obj_self->setSpriteFrame(static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(spriteFrame)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#setSpriteFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_updateWithBatchNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value batchnode;
    mrb_value rect;
    mrb_bool rotated;
    mrb_value capInsets;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oobo", &batchnode, &rect, &rotated, &capInsets)) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->updateWithBatchNode(static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(batchnode)), *(static_cast< cocos2d::CCRect * >(DATA_PTR(rect))), rotated, *(static_cast< cocos2d::CCRect * >(DATA_PTR(capInsets))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#updateWithBatchNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9Sprite_visit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScale9Sprite *obj_self = static_cast< cocos2d::extension::CCScale9Sprite * >(DATA_PTR(mrb_self));
      obj_self->visit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9Sprite#visit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9SpriteLoader_loader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCScale9SpriteLoader * res = cocos2d::extension::CCScale9SpriteLoader::loader();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCScale9SpriteLoader,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9SpriteLoader::loader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScale9SpriteLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCScale9SpriteLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCScale9SpriteLoader * res = new cocos2d::extension::CCScale9SpriteLoader();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScale9SpriteLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCScrollView;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView * res = new cocos2d::extension::CCScrollView();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_addChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    mrb_int zOrder;
    mrb_int tag;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oii", &child, &zOrder, &tag)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(DATA_PTR(child)), zOrder, tag);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value child;
    mrb_int zOrder;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &child, &zOrder)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(DATA_PTR(child)), zOrder);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value child;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &child)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(DATA_PTR(child)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#addChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_ccTouchBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->ccTouchBegan(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#ccTouchBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_ccTouchCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->ccTouchCancelled(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#ccTouchCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_ccTouchEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->ccTouchEnded(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#ccTouchEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_ccTouchMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->ccTouchMoved(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#ccTouchMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value size;
    mrb_value container;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &size, &container)) {
      class cocos2d::extension::CCScrollView * res = cocos2d::extension::CCScrollView::create(*(static_cast< cocos2d::CCSize * >(DATA_PTR(size))), static_cast< cocos2d::CCNode * >(DATA_PTR(container)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCScrollView,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCScrollView * res = cocos2d::extension::CCScrollView::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCScrollView,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_getContainer(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getContainer();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#getContainer");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_getContentOffset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getContentOffset();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#getContentOffset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_getContentSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getContentSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#getContentSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_getDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCScrollViewDelegate * res = obj_self->getDelegate();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      /* XXX: class implrements *Delegate or *Protocol, must be a subclass of CCObject. */
      ccobj_res = dynamic_cast< cocos2d::CCObject * >(res);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCScrollViewDelegate,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#getDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_getDirection(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      CCScrollViewDirection res = obj_self->getDirection();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#getDirection");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_getViewSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getViewSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#getViewSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_getZoomScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      float res = obj_self->getZoomScale();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#getZoomScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_initWithViewSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value size;
    mrb_value container;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &size, &container)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithViewSize(*(static_cast< cocos2d::CCSize * >(DATA_PTR(size))), static_cast< cocos2d::CCNode * >(DATA_PTR(container)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#initWithViewSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_isBounceable(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isBounceable();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#isBounceable");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_isClippingToBounds(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isClippingToBounds();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#isClippingToBounds");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_isDragging(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isDragging();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#isDragging");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_isNodeVisible(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value node;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &node)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isNodeVisible(static_cast< cocos2d::CCNode * >(DATA_PTR(node)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#isNodeVisible");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_isTouchMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isTouchMoved();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#isTouchMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_maxContainerOffset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->maxContainerOffset();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#maxContainerOffset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_minContainerOffset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->minContainerOffset();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#minContainerOffset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_pause(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sender;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sender)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->pause(static_cast< cocos2d::CCObject * >(DATA_PTR(sender)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#pause");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_registerWithTouchDispatcher(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->registerWithTouchDispatcher();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#registerWithTouchDispatcher");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_resume(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sender;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sender)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->resume(static_cast< cocos2d::CCObject * >(DATA_PTR(sender)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#resume");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_setBounceable(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bBounceable;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bBounceable)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->setBounceable(bBounceable);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#setBounceable");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_setClippingToBounds(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bClippingToBounds;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bClippingToBounds)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->setClippingToBounds(bClippingToBounds);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#setClippingToBounds");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_setContainer(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pContainer;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pContainer)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->setContainer(static_cast< cocos2d::CCNode * >(DATA_PTR(pContainer)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#setContainer");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_setContentOffset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value offset;
    mrb_bool animated;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ob", &offset, &animated)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->setContentOffset(*(static_cast< cocos2d::CCPoint * >(DATA_PTR(offset))), animated);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#setContentOffset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_setContentOffsetInDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value offset;
    mrb_float dt;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &offset, &dt)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->setContentOffsetInDuration(*(static_cast< cocos2d::CCPoint * >(DATA_PTR(offset))), dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#setContentOffsetInDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_setContentSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value size;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &size)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->setContentSize(*(static_cast< cocos2d::CCSize * >(DATA_PTR(size))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#setContentSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_setDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->setDelegate(static_cast< cocos2d::extension::CCScrollViewDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_extension_CCScrollViewDelegate, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#setDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_setDirection(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int eDirection;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &eDirection)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->setDirection((CCScrollViewDirection)eDirection);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#setDirection");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_setTouchEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool e;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &e)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->setTouchEnabled(e);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#setTouchEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_setViewSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value size;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &size)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->setViewSize(*(static_cast< cocos2d::CCSize * >(DATA_PTR(size))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#setViewSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_setZoomScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float s;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &s)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->setZoomScale(s);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_float s;
    mrb_bool animated;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fb", &s, &animated)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->setZoomScale(s, animated);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#setZoomScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_setZoomScaleInDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float s;
    mrb_float dt;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &s, &dt)) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->setZoomScaleInDuration(s, dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#setZoomScaleInDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_updateInset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->updateInset();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#updateInset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollView_visit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCScrollView *obj_self = static_cast< cocos2d::extension::CCScrollView * >(DATA_PTR(mrb_self));
      obj_self->visit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollView#visit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollViewDelegate_scrollViewDidScroll(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value view;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &view)) {
      cocos2d::extension::CCScrollViewDelegate *obj_self = static_cast< cocos2d::extension::CCScrollViewDelegate * >(DATA_PTR(mrb_self));
      obj_self->scrollViewDidScroll(static_cast< cocos2d::extension::CCScrollView * >(cc_mrb_data_get_ptr(mrb, view, &mrb_type_cocos2d_extension_CCScrollView, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollViewDelegate#scrollViewDidScroll");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollViewDelegate_scrollViewDidZoom(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value view;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &view)) {
      cocos2d::extension::CCScrollViewDelegate *obj_self = static_cast< cocos2d::extension::CCScrollViewDelegate * >(DATA_PTR(mrb_self));
      obj_self->scrollViewDidZoom(static_cast< cocos2d::extension::CCScrollView * >(cc_mrb_data_get_ptr(mrb, view, &mrb_type_cocos2d_extension_CCScrollView, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollViewDelegate#scrollViewDidZoom");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollViewLoader_loader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCScrollViewLoader * res = cocos2d::extension::CCScrollViewLoader::loader();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCScrollViewLoader,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollViewLoader::loader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCScrollViewLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCScrollViewLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCScrollViewLoader * res = new cocos2d::extension::CCScrollViewLoader();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCScrollViewLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCShaderDisplayData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCShaderDisplayData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCShaderDisplayData * res = new cocos2d::extension::CCShaderDisplayData();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCShaderDisplayData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCShaderDisplayData_copy(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value displayData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &displayData)) {
      cocos2d::extension::CCShaderDisplayData *obj_self = static_cast< cocos2d::extension::CCShaderDisplayData * >(DATA_PTR(mrb_self));
      obj_self->copy(static_cast< cocos2d::extension::CCShaderDisplayData * >(cc_mrb_data_get_ptr(mrb, displayData, &mrb_type_cocos2d_extension_CCShaderDisplayData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCShaderDisplayData#copy");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCShaderDisplayData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCShaderDisplayData * res = cocos2d::extension::CCShaderDisplayData::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCShaderDisplayData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCShaderDisplayData::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCShaderDisplayData__get_frag(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCShaderDisplayData *obj_self = static_cast< cocos2d::extension::CCShaderDisplayData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->frag;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCShaderDisplayData__set_frag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value frag;
  if (1 == mrb_get_args(mrb, "S", &frag)) {
    cocos2d::extension::CCShaderDisplayData *obj_self = static_cast< cocos2d::extension::CCShaderDisplayData * >(DATA_PTR(mrb_self));
    
    obj_self->frag = RSTRING_PTR(frag);
    return frag;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCShaderDisplayData#frag");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCShaderDisplayData_setParam(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value vert;
    mrb_value frag;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &vert, &frag)) {
      cocos2d::extension::CCShaderDisplayData *obj_self = static_cast< cocos2d::extension::CCShaderDisplayData * >(DATA_PTR(mrb_self));
      obj_self->setParam(RSTRING_PTR(vert), RSTRING_PTR(frag));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCShaderDisplayData#setParam");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCShaderDisplayData__get_vert(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCShaderDisplayData *obj_self = static_cast< cocos2d::extension::CCShaderDisplayData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->vert;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCShaderDisplayData__set_vert(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value vert;
  if (1 == mrb_get_args(mrb, "S", &vert)) {
    cocos2d::extension::CCShaderDisplayData *obj_self = static_cast< cocos2d::extension::CCShaderDisplayData * >(DATA_PTR(mrb_self));
    
    obj_self->vert = RSTRING_PTR(vert);
    return vert;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCShaderDisplayData#vert");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_boundingBox(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      cocos2d::CCRect *res = new cocos2d::CCRect(); *res = obj_self->boundingBox();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#boundingBox");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_createWithData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value skeletonData;
    mrb_bool ownsSkeletonData;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ob", &skeletonData, &ownsSkeletonData)) {
      class cocos2d::extension::CCSkeleton * res = cocos2d::extension::CCSkeleton::createWithData(static_cast< SkeletonData * >(cc_mrb_data_get_ptr(mrb, skeletonData, &mrb_type_cocos2d_extension_SkeletonData, &mrb_no_free_type_cocos2d_extension_SkeletonData)), ownsSkeletonData);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCSkeleton,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton::createWithData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_createWithFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value skeletonDataFile;
    mrb_value atlas;
    mrb_float scale;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "Sof", &skeletonDataFile, &atlas, &scale)) {
      class cocos2d::extension::CCSkeleton * res = cocos2d::extension::CCSkeleton::createWithFile(RSTRING_PTR(skeletonDataFile), static_cast< Atlas * >(cc_mrb_data_get_ptr(mrb, atlas, &mrb_type_cocos2d_extension_Atlas, &mrb_no_free_type_cocos2d_extension_Atlas)), scale);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCSkeleton,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value skeletonDataFile;
    mrb_value atlasFile;
    mrb_float scale;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSf", &skeletonDataFile, &atlasFile, &scale)) {
      class cocos2d::extension::CCSkeleton * res = cocos2d::extension::CCSkeleton::createWithFile(RSTRING_PTR(skeletonDataFile), RSTRING_PTR(atlasFile), scale);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCSkeleton,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton::createWithFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton__get_debugBones(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->debugBones;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton__set_debugBones(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool debugBones;
  if (1 == mrb_get_args(mrb, "b", &debugBones)) {
    cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
    
    obj_self->debugBones = debugBones;
    return mrb_bool_value(debugBones);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#debugBones");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton__get_debugSlots(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->debugSlots;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton__set_debugSlots(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool debugSlots;
  if (1 == mrb_get_args(mrb, "b", &debugSlots)) {
    cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
    
    obj_self->debugSlots = debugSlots;
    return mrb_bool_value(debugSlots);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#debugSlots");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_findBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value boneName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &boneName)) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      Bone * res = obj_self->findBone(RSTRING_PTR(boneName));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Bone"),
                       &mrb_type_cocos2d_extension_Bone,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#findBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_findSlot(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value slotName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &slotName)) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      Slot * res = obj_self->findSlot(RSTRING_PTR(slotName));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Slot"),
                       &mrb_type_cocos2d_extension_Slot,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#findSlot");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_getAttachment(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value slotName;
    mrb_value attachmentName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &slotName, &attachmentName)) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      Attachment * res = obj_self->getAttachment(RSTRING_PTR(slotName), RSTRING_PTR(attachmentName));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Attachment"),
                       &mrb_type_cocos2d_extension_Attachment,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#getAttachment");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_getBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      cocos2d::ccBlendFunc *res = new cocos2d::ccBlendFunc(); *res = obj_self->getBlendFunc();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccBlendFunc"),
                       &mrb_type_cocos2d__ccBlendFunc,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#getBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton__get_premultipliedAlpha(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->premultipliedAlpha;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton__set_premultipliedAlpha(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool premultipliedAlpha;
  if (1 == mrb_get_args(mrb, "b", &premultipliedAlpha)) {
    cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
    
    obj_self->premultipliedAlpha = premultipliedAlpha;
    return mrb_bool_value(premultipliedAlpha);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#premultipliedAlpha");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton__get_rootBone(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::Bone * res = obj_self->rootBone;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Bone"),
                       &mrb_no_free_type_cocos2d_extension_Bone,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton__set_rootBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value rootBone;
  if (1 == mrb_get_args(mrb, "o", &rootBone)) {
    cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
    
    obj_self->rootBone = static_cast< struct cocos2d::extension::Bone * >(cc_mrb_data_get_ptr(mrb, rootBone, &mrb_type_cocos2d_extension_Bone, &mrb_no_free_type_cocos2d_extension_Bone));
    return rootBone;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#rootBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_setAttachment(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value slotName;
    mrb_value attachmentName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &slotName, &attachmentName)) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->setAttachment(RSTRING_PTR(slotName), RSTRING_PTR(attachmentName));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#setAttachment");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_setBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      obj_self->setBlendFunc(*(static_cast< cocos2d::ccBlendFunc * >(DATA_PTR(var))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#setBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_setBonesToSetupPose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      obj_self->setBonesToSetupPose();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#setBonesToSetupPose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &value)) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_setSkin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value skinName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &skinName)) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->setSkin(RSTRING_PTR(skinName));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#setSkin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_setSlotsToSetupPose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      obj_self->setSlotsToSetupPose();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#setSlotsToSetupPose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_setToSetupPose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      obj_self->setToSetupPose();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#setToSetupPose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton__get_skeleton(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::Skeleton * res = obj_self->skeleton;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Skeleton"),
                       &mrb_no_free_type_cocos2d_extension_Skeleton,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton__set_skeleton(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value skeleton;
  if (1 == mrb_get_args(mrb, "o", &skeleton)) {
    cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
    
    obj_self->skeleton = static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, skeleton, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton));
    return skeleton;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#skeleton");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton__get_timeScale(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
  float res = obj_self->timeScale;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton__set_timeScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float timeScale;
  if (1 == mrb_get_args(mrb, "f", &timeScale)) {
    cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
    
    obj_self->timeScale = timeScale;
    return mrb_float_value(mrb, timeScale);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#timeScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float deltaTime;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &deltaTime)) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      obj_self->update(deltaTime);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeleton_updateWorldTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCSkeleton *obj_self = static_cast< cocos2d::extension::CCSkeleton * >(DATA_PTR(mrb_self));
      obj_self->updateWorldTransform();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeleton#updateWorldTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeletonAnimation_addAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    mrb_bool loop;
    mrb_float delay;
    mrb_int stateIndex;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "Sbfi", &name, &loop, &delay, &stateIndex)) {
      cocos2d::extension::CCSkeletonAnimation *obj_self = static_cast< cocos2d::extension::CCSkeletonAnimation * >(DATA_PTR(mrb_self));
      obj_self->addAnimation(RSTRING_PTR(name), loop, delay, stateIndex);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeletonAnimation#addAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeletonAnimation_addAnimationState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value stateData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &stateData)) {
      cocos2d::extension::CCSkeletonAnimation *obj_self = static_cast< cocos2d::extension::CCSkeletonAnimation * >(DATA_PTR(mrb_self));
      obj_self->addAnimationState(static_cast< AnimationStateData * >(cc_mrb_data_get_ptr(mrb, stateData, &mrb_type_cocos2d_extension_AnimationStateData, &mrb_no_free_type_cocos2d_extension_AnimationStateData)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeletonAnimation#addAnimationState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeletonAnimation_clearAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int stateIndex;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &stateIndex)) {
      cocos2d::extension::CCSkeletonAnimation *obj_self = static_cast< cocos2d::extension::CCSkeletonAnimation * >(DATA_PTR(mrb_self));
      obj_self->clearAnimation(stateIndex);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeletonAnimation#clearAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeletonAnimation_createWithData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value skeletonData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &skeletonData)) {
      class cocos2d::extension::CCSkeletonAnimation * res = cocos2d::extension::CCSkeletonAnimation::createWithData(static_cast< SkeletonData * >(cc_mrb_data_get_ptr(mrb, skeletonData, &mrb_type_cocos2d_extension_SkeletonData, &mrb_no_free_type_cocos2d_extension_SkeletonData)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCSkeletonAnimation,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeletonAnimation::createWithData");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_extension_CCSkeletonAnimation_createWithFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value skeletonDataFile;
    mrb_value atlas;
    mrb_float scale;
      if (3 == _argc_ && 3 == mrb_get_args(mrb, "Sof", &skeletonDataFile, &atlas, &scale) && mrb_type(atlas) == MRB_TT_DATA) {
      class cocos2d::extension::CCSkeletonAnimation * res = cocos2d::extension::CCSkeletonAnimation::createWithFile(RSTRING_PTR(skeletonDataFile), static_cast< Atlas * >(cc_mrb_data_get_ptr(mrb, atlas, &mrb_type_cocos2d_extension_Atlas, &mrb_no_free_type_cocos2d_extension_Atlas)), scale);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCSkeletonAnimation,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value skeletonDataFile;
    mrb_value atlasFile;
    mrb_float scale;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSf", &skeletonDataFile, &atlasFile, &scale) && mrb_type(atlasFile) == MRB_TT_STRING) {
      class cocos2d::extension::CCSkeletonAnimation * res = cocos2d::extension::CCSkeletonAnimation::createWithFile(RSTRING_PTR(skeletonDataFile), RSTRING_PTR(atlasFile), scale);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCSkeletonAnimation,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeletonAnimation::createWithFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeletonAnimation_setAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    mrb_bool loop;
    mrb_int stateIndex;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "Sbi", &name, &loop, &stateIndex)) {
      cocos2d::extension::CCSkeletonAnimation *obj_self = static_cast< cocos2d::extension::CCSkeletonAnimation * >(DATA_PTR(mrb_self));
      obj_self->setAnimation(RSTRING_PTR(name), loop, stateIndex);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeletonAnimation#setAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeletonAnimation_setAnimationStateData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value stateData;
    mrb_int stateIndex;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &stateData, &stateIndex)) {
      cocos2d::extension::CCSkeletonAnimation *obj_self = static_cast< cocos2d::extension::CCSkeletonAnimation * >(DATA_PTR(mrb_self));
      obj_self->setAnimationStateData(static_cast< AnimationStateData * >(cc_mrb_data_get_ptr(mrb, stateData, &mrb_type_cocos2d_extension_AnimationStateData, &mrb_no_free_type_cocos2d_extension_AnimationStateData)), stateIndex);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeletonAnimation#setAnimationStateData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeletonAnimation_setMix(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value fromAnimation;
    mrb_value toAnimation;
    mrb_float duration;
    mrb_int stateIndex;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "SSfi", &fromAnimation, &toAnimation, &duration, &stateIndex)) {
      cocos2d::extension::CCSkeletonAnimation *obj_self = static_cast< cocos2d::extension::CCSkeletonAnimation * >(DATA_PTR(mrb_self));
      obj_self->setMix(RSTRING_PTR(fromAnimation), RSTRING_PTR(toAnimation), duration, stateIndex);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeletonAnimation#setMix");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeletonAnimation__get_states(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCSkeletonAnimation *obj_self = static_cast< cocos2d::extension::CCSkeletonAnimation * >(DATA_PTR(mrb_self));
  std::vector<AnimationState *> res = obj_self->states;
  return cc_mrb_ary_conv_from(mrb, mrb_ary_new(mrb), res);
}

static mrb_value
mrb_cocos2d_extension_CCSkeletonAnimation__set_states(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value states;
  if (1 == mrb_get_args(mrb, "A", &states)) {
    cocos2d::extension::CCSkeletonAnimation *obj_self = static_cast< cocos2d::extension::CCSkeletonAnimation * >(DATA_PTR(mrb_self));
    
    cc_mrb_ary_conv_to(mrb, states, obj_self->states);
    return states;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeletonAnimation#states");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSkeletonAnimation_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float deltaTime;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &deltaTime)) {
      cocos2d::extension::CCSkeletonAnimation *obj_self = static_cast< cocos2d::extension::CCSkeletonAnimation * >(DATA_PTR(mrb_self));
      obj_self->update(deltaTime);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSkeletonAnimation#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSpriteDisplayData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCSpriteDisplayData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCSpriteDisplayData * res = new cocos2d::extension::CCSpriteDisplayData();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSpriteDisplayData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSpriteDisplayData_copy(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value displayData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &displayData)) {
      cocos2d::extension::CCSpriteDisplayData *obj_self = static_cast< cocos2d::extension::CCSpriteDisplayData * >(DATA_PTR(mrb_self));
      obj_self->copy(static_cast< cocos2d::extension::CCSpriteDisplayData * >(cc_mrb_data_get_ptr(mrb, displayData, &mrb_type_cocos2d_extension_CCSpriteDisplayData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSpriteDisplayData#copy");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSpriteDisplayData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCSpriteDisplayData * res = cocos2d::extension::CCSpriteDisplayData::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCSpriteDisplayData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSpriteDisplayData::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSpriteDisplayData__get_displayName(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCSpriteDisplayData *obj_self = static_cast< cocos2d::extension::CCSpriteDisplayData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->displayName;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCSpriteDisplayData__set_displayName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value displayName;
  if (1 == mrb_get_args(mrb, "S", &displayName)) {
    cocos2d::extension::CCSpriteDisplayData *obj_self = static_cast< cocos2d::extension::CCSpriteDisplayData * >(DATA_PTR(mrb_self));
    
    obj_self->displayName = RSTRING_PTR(displayName);
    return displayName;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSpriteDisplayData#displayName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSpriteDisplayData_setParam(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value displayName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &displayName)) {
      cocos2d::extension::CCSpriteDisplayData *obj_self = static_cast< cocos2d::extension::CCSpriteDisplayData * >(DATA_PTR(mrb_self));
      obj_self->setParam(RSTRING_PTR(displayName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSpriteDisplayData#setParam");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSpriteLoader_loader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCSpriteLoader * res = cocos2d::extension::CCSpriteLoader::loader();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCSpriteLoader,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSpriteLoader::loader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCSpriteLoader_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCSpriteLoader;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCSpriteLoader * res = new cocos2d::extension::CCSpriteLoader();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCSpriteLoader#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCTableView;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCTableView * res = new cocos2d::extension::CCTableView();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView__updateContentSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      obj_self->_updateContentSize();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#_updateContentSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_ccTouchBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->ccTouchBegan(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#ccTouchBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_ccTouchCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      obj_self->ccTouchCancelled(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#ccTouchCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_ccTouchEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      obj_self->ccTouchEnded(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#ccTouchEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_ccTouchMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      obj_self->ccTouchMoved(static_cast< cocos2d::CCTouch * >(DATA_PTR(pTouch)), static_cast< cocos2d::CCEvent * >(DATA_PTR(pEvent)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#ccTouchMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_cellAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int idx;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &idx)) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCTableViewCell * res = obj_self->cellAtIndex(idx);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCTableViewCell,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#cellAtIndex");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_extension_CCTableView_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value dataSource;
    mrb_value size;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &dataSource, &size)) {
      CCMRubyTableViewDataSource *source = CCMRubyTableViewDataSource::create(mrb, dataSource);
      class cocos2d::extension::CCTableView * res = cocos2d::extension::CCTableView::create(source, *(static_cast< cocos2d::CCSize * >(DATA_PTR(size))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCTableView,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value dataSource;
    mrb_value size;
    mrb_value container;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &dataSource, &size, &container)) {
      CCMRubyTableViewDataSource *source = CCMRubyTableViewDataSource::create(mrb, dataSource);
      class cocos2d::extension::CCTableView * res = cocos2d::extension::CCTableView::create(source, *(static_cast< cocos2d::CCSize * >(DATA_PTR(size))), static_cast< cocos2d::CCNode * >(DATA_PTR(container)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCTableView,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_dequeueCell(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCTableViewCell * res = obj_self->dequeueCell();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCTableViewCell,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#dequeueCell");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_extension_CCTableView_getDataSource(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCTableViewDataSource * res = obj_self->getDataSource();
      cocos2d::CCObject *ccobj_res;
      ccobj_res = dynamic_cast< cocos2d::CCObject * >(res);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
          mrb_res = mrb_obj_value(Data_Wrap_Struct(
                                      mrb,
                                      cc_mrb_class_get(mrb, "Cocos2d::Extension::CCTableViewDataSource"),
                                      &mrb_type_cocos2d_extension_CCTableViewDataSource,
                                      res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#getDataSource");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_extension_CCTableView_getDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCTableViewDelegate * res = obj_self->getDelegate();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      /* XXX: class implrements *Delegate or *Protocol, must be a subclass of CCObject. */
      ccobj_res = dynamic_cast< cocos2d::CCObject * >(res);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCTableViewDelegate,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#getDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_getVerticalFillOrder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      CCTableViewVerticalFillOrder res = obj_self->getVerticalFillOrder();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#getVerticalFillOrder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_initWithViewSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value size;
    mrb_value container;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &size, &container)) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithViewSize(*(static_cast< cocos2d::CCSize * >(DATA_PTR(size))), static_cast< cocos2d::CCNode * >(DATA_PTR(container)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#initWithViewSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_insertCellAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int idx;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &idx)) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      obj_self->insertCellAtIndex(idx);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#insertCellAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_reloadData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      obj_self->reloadData();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#reloadData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_removeCellAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int idx;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &idx)) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      obj_self->removeCellAtIndex(idx);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#removeCellAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_scrollViewDidScroll(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value view;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &view)) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      obj_self->scrollViewDidScroll(static_cast< cocos2d::extension::CCScrollView * >(cc_mrb_data_get_ptr(mrb, view, &mrb_type_cocos2d_extension_CCScrollView, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#scrollViewDidScroll");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_scrollViewDidZoom(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value view;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &view)) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      obj_self->scrollViewDidZoom(static_cast< cocos2d::extension::CCScrollView * >(cc_mrb_data_get_ptr(mrb, view, &mrb_type_cocos2d_extension_CCScrollView, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#scrollViewDidZoom");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_extension_CCTableView_setDataSource(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value source;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &source)) {
      CCMRubyTableViewDataSource *data_source = CCMRubyTableViewDataSource::create(mrb, source);
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      obj_self->setDataSource(data_source);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#setDataSource");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_extension_CCTableView_setDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      CCMRubyTableViewDelegate *delegate = CCMRubyTableViewDelegate::create(mrb, pDelegate);
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      obj_self->setDelegate(delegate);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#setDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_setVerticalFillOrder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int order;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &order)) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      obj_self->setVerticalFillOrder((CCTableViewVerticalFillOrder)order);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#setVerticalFillOrder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableView_updateCellAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int idx;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &idx)) {
      cocos2d::extension::CCTableView *obj_self = static_cast< cocos2d::extension::CCTableView * >(DATA_PTR(mrb_self));
      obj_self->updateCellAtIndex(idx);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableView#updateCellAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableViewCell_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCTableViewCell;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCTableViewCell * res = new cocos2d::extension::CCTableViewCell();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableViewCell#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableViewCell_getIdx(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCTableViewCell *obj_self = static_cast< cocos2d::extension::CCTableViewCell * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getIdx();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableViewCell#getIdx");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableViewCell_getObjectID(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCTableViewCell *obj_self = static_cast< cocos2d::extension::CCTableViewCell * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getObjectID();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableViewCell#getObjectID");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableViewCell_reset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCTableViewCell *obj_self = static_cast< cocos2d::extension::CCTableViewCell * >(DATA_PTR(mrb_self));
      obj_self->reset();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableViewCell#reset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableViewCell_setIdx(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int uIdx;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &uIdx)) {
      cocos2d::extension::CCTableViewCell *obj_self = static_cast< cocos2d::extension::CCTableViewCell * >(DATA_PTR(mrb_self));
      obj_self->setIdx(uIdx);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableViewCell#setIdx");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableViewCell_setObjectID(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int uIdx;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &uIdx)) {
      cocos2d::extension::CCTableViewCell *obj_self = static_cast< cocos2d::extension::CCTableViewCell * >(DATA_PTR(mrb_self));
      obj_self->setObjectID(uIdx);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableViewCell#setObjectID");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableViewDataSource_cellSizeForTable(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value table;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &table)) {
      cocos2d::extension::CCTableViewDataSource *obj_self = static_cast< cocos2d::extension::CCTableViewDataSource * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->cellSizeForTable(static_cast< cocos2d::extension::CCTableView * >(cc_mrb_data_get_ptr(mrb, table, &mrb_type_cocos2d_extension_CCTableView, NULL)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableViewDataSource#cellSizeForTable");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableViewDataSource_numberOfCellsInTableView(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value table;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &table)) {
      cocos2d::extension::CCTableViewDataSource *obj_self = static_cast< cocos2d::extension::CCTableViewDataSource * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->numberOfCellsInTableView(static_cast< cocos2d::extension::CCTableView * >(cc_mrb_data_get_ptr(mrb, table, &mrb_type_cocos2d_extension_CCTableView, NULL)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableViewDataSource#numberOfCellsInTableView");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableViewDataSource_tableCellAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value table;
    mrb_int idx;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &table, &idx)) {
      cocos2d::extension::CCTableViewDataSource *obj_self = static_cast< cocos2d::extension::CCTableViewDataSource * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCTableViewCell * res = obj_self->tableCellAtIndex(static_cast< cocos2d::extension::CCTableView * >(cc_mrb_data_get_ptr(mrb, table, &mrb_type_cocos2d_extension_CCTableView, NULL)), idx);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCTableViewCell,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableViewDataSource#tableCellAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableViewDataSource_tableCellSizeForIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value table;
    mrb_int idx;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &table, &idx)) {
      cocos2d::extension::CCTableViewDataSource *obj_self = static_cast< cocos2d::extension::CCTableViewDataSource * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->tableCellSizeForIndex(static_cast< cocos2d::extension::CCTableView * >(cc_mrb_data_get_ptr(mrb, table, &mrb_type_cocos2d_extension_CCTableView, NULL)), idx);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableViewDataSource#tableCellSizeForIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableViewDelegate_tableCellHighlight(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value table;
    mrb_value cell;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &table, &cell)) {
      cocos2d::extension::CCTableViewDelegate *obj_self = static_cast< cocos2d::extension::CCTableViewDelegate * >(DATA_PTR(mrb_self));
      obj_self->tableCellHighlight(static_cast< cocos2d::extension::CCTableView * >(cc_mrb_data_get_ptr(mrb, table, &mrb_type_cocos2d_extension_CCTableView, NULL)), static_cast< cocos2d::extension::CCTableViewCell * >(cc_mrb_data_get_ptr(mrb, cell, &mrb_type_cocos2d_extension_CCTableViewCell, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableViewDelegate#tableCellHighlight");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableViewDelegate_tableCellTouched(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value table;
    mrb_value cell;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &table, &cell)) {
      cocos2d::extension::CCTableViewDelegate *obj_self = static_cast< cocos2d::extension::CCTableViewDelegate * >(DATA_PTR(mrb_self));
      obj_self->tableCellTouched(static_cast< cocos2d::extension::CCTableView * >(cc_mrb_data_get_ptr(mrb, table, &mrb_type_cocos2d_extension_CCTableView, NULL)), static_cast< cocos2d::extension::CCTableViewCell * >(cc_mrb_data_get_ptr(mrb, cell, &mrb_type_cocos2d_extension_CCTableViewCell, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableViewDelegate#tableCellTouched");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableViewDelegate_tableCellUnhighlight(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value table;
    mrb_value cell;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &table, &cell)) {
      cocos2d::extension::CCTableViewDelegate *obj_self = static_cast< cocos2d::extension::CCTableViewDelegate * >(DATA_PTR(mrb_self));
      obj_self->tableCellUnhighlight(static_cast< cocos2d::extension::CCTableView * >(cc_mrb_data_get_ptr(mrb, table, &mrb_type_cocos2d_extension_CCTableView, NULL)), static_cast< cocos2d::extension::CCTableViewCell * >(cc_mrb_data_get_ptr(mrb, cell, &mrb_type_cocos2d_extension_CCTableViewCell, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableViewDelegate#tableCellUnhighlight");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTableViewDelegate_tableCellWillRecycle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value table;
    mrb_value cell;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &table, &cell)) {
      cocos2d::extension::CCTableViewDelegate *obj_self = static_cast< cocos2d::extension::CCTableViewDelegate * >(DATA_PTR(mrb_self));
      obj_self->tableCellWillRecycle(static_cast< cocos2d::extension::CCTableView * >(cc_mrb_data_get_ptr(mrb, table, &mrb_type_cocos2d_extension_CCTableView, NULL)), static_cast< cocos2d::extension::CCTableViewCell * >(cc_mrb_data_get_ptr(mrb, cell, &mrb_type_cocos2d_extension_CCTableViewCell, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTableViewDelegate#tableCellWillRecycle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTextureData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCTextureData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCTextureData * res = new cocos2d::extension::CCTextureData();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTextureData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTextureData_addContourData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value contourData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &contourData)) {
      cocos2d::extension::CCTextureData *obj_self = static_cast< cocos2d::extension::CCTextureData * >(DATA_PTR(mrb_self));
      obj_self->addContourData(static_cast< cocos2d::extension::CCContourData * >(cc_mrb_data_get_ptr(mrb, contourData, &mrb_type_cocos2d_extension_CCContourData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTextureData#addContourData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTextureData__get_contourDataList(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTextureData *obj_self = static_cast< cocos2d::extension::CCTextureData * >(DATA_PTR(mrb_self));
  class cocos2d::CCArray *res = &obj_self->contourDataList;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCArray"),
                       &mrb_no_free_type_cocos2d_CCArray,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCTextureData__set_contourDataList(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value contourDataList;
  if (1 == mrb_get_args(mrb, "o", &contourDataList)) {
    cocos2d::extension::CCTextureData *obj_self = static_cast< cocos2d::extension::CCTextureData * >(DATA_PTR(mrb_self));
    
    obj_self->contourDataList = *(static_cast< cocos2d::CCArray * >(DATA_PTR(contourDataList)));
    return contourDataList;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTextureData#contourDataList");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTextureData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::extension::CCTextureData * res = cocos2d::extension::CCTextureData::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCTextureData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTextureData::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTextureData_getContourData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &index)) {
      cocos2d::extension::CCTextureData *obj_self = static_cast< cocos2d::extension::CCTextureData * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCContourData * res = obj_self->getContourData(index);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCContourData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTextureData#getContourData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTextureData__get_height(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTextureData *obj_self = static_cast< cocos2d::extension::CCTextureData * >(DATA_PTR(mrb_self));
  float res = obj_self->height;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCTextureData__set_height(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float height;
  if (1 == mrb_get_args(mrb, "f", &height)) {
    cocos2d::extension::CCTextureData *obj_self = static_cast< cocos2d::extension::CCTextureData * >(DATA_PTR(mrb_self));
    
    obj_self->height = height;
    return mrb_float_value(mrb, height);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTextureData#height");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTextureData_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCTextureData *obj_self = static_cast< cocos2d::extension::CCTextureData * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTextureData#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTextureData__get_name(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTextureData *obj_self = static_cast< cocos2d::extension::CCTextureData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->name;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_CCTextureData__set_name(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value name;
  if (1 == mrb_get_args(mrb, "S", &name)) {
    cocos2d::extension::CCTextureData *obj_self = static_cast< cocos2d::extension::CCTextureData * >(DATA_PTR(mrb_self));
    
    obj_self->name = RSTRING_PTR(name);
    return name;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTextureData#name");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTextureData__get_pivotX(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTextureData *obj_self = static_cast< cocos2d::extension::CCTextureData * >(DATA_PTR(mrb_self));
  float res = obj_self->pivotX;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCTextureData__set_pivotX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float pivotX;
  if (1 == mrb_get_args(mrb, "f", &pivotX)) {
    cocos2d::extension::CCTextureData *obj_self = static_cast< cocos2d::extension::CCTextureData * >(DATA_PTR(mrb_self));
    
    obj_self->pivotX = pivotX;
    return mrb_float_value(mrb, pivotX);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTextureData#pivotX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTextureData__get_pivotY(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTextureData *obj_self = static_cast< cocos2d::extension::CCTextureData * >(DATA_PTR(mrb_self));
  float res = obj_self->pivotY;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCTextureData__set_pivotY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float pivotY;
  if (1 == mrb_get_args(mrb, "f", &pivotY)) {
    cocos2d::extension::CCTextureData *obj_self = static_cast< cocos2d::extension::CCTextureData * >(DATA_PTR(mrb_self));
    
    obj_self->pivotY = pivotY;
    return mrb_float_value(mrb, pivotY);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTextureData#pivotY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTextureData__get_width(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTextureData *obj_self = static_cast< cocos2d::extension::CCTextureData * >(DATA_PTR(mrb_self));
  float res = obj_self->width;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_CCTextureData__set_width(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float width;
  if (1 == mrb_get_args(mrb, "f", &width)) {
    cocos2d::extension::CCTextureData *obj_self = static_cast< cocos2d::extension::CCTextureData * >(DATA_PTR(mrb_self));
    
    obj_self->width = width;
    return mrb_float_value(mrb, width);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTextureData#width");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCTween;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCTween * res = new cocos2d::extension::CCTween();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween__get_betweenDuration(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
  int res = obj_self->betweenDuration;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCTween__set_betweenDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int betweenDuration;
  if (1 == mrb_get_args(mrb, "i", &betweenDuration)) {
    cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
    
    obj_self->betweenDuration = betweenDuration;
    return mrb_fixnum_value(betweenDuration);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#betweenDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &bone)) {
      class cocos2d::extension::CCTween * res = cocos2d::extension::CCTween::create(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_CCTween,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween_getAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCArmatureAnimation * res = obj_self->getAnimation();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCArmatureAnimation,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#getAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween_getMovementBoneData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCMovementBoneData * res = obj_self->getMovementBoneData();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCMovementBoneData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#getMovementBoneData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value bone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &bone)) {
      cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init(static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_CCBone, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween__get_m_bIsTweenKeyFrame(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bIsTweenKeyFrame;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCTween__set_m_bIsTweenKeyFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bIsTweenKeyFrame;
  if (1 == mrb_get_args(mrb, "b", &m_bIsTweenKeyFrame)) {
    cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
    
    obj_self->m_bIsTweenKeyFrame = m_bIsTweenKeyFrame;
    return mrb_bool_value(m_bIsTweenKeyFrame);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#m_bIsTweenKeyFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween__get_m_eFrameTweenEasing(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
  enum cocos2d::extension::CCTweenType res = obj_self->m_eFrameTweenEasing;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCTween__set_m_eFrameTweenEasing(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_eFrameTweenEasing;
  if (1 == mrb_get_args(mrb, "i", &m_eFrameTweenEasing)) {
    cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
    
    obj_self->m_eFrameTweenEasing = (enum cocos2d::extension::CCTweenType)m_eFrameTweenEasing;
    return mrb_fixnum_value(m_eFrameTweenEasing);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#m_eFrameTweenEasing");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween__get_m_iFromIndex(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
  int res = obj_self->m_iFromIndex;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCTween__set_m_iFromIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_iFromIndex;
  if (1 == mrb_get_args(mrb, "i", &m_iFromIndex)) {
    cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
    
    obj_self->m_iFromIndex = m_iFromIndex;
    return mrb_fixnum_value(m_iFromIndex);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#m_iFromIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween__get_m_iToIndex(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
  int res = obj_self->m_iToIndex;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCTween__set_m_iToIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_iToIndex;
  if (1 == mrb_get_args(mrb, "i", &m_iToIndex)) {
    cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
    
    obj_self->m_iToIndex = m_iToIndex;
    return mrb_fixnum_value(m_iToIndex);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#m_iToIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween__get_m_iTotalDuration(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
  int res = obj_self->m_iTotalDuration;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CCTween__set_m_iTotalDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_iTotalDuration;
  if (1 == mrb_get_args(mrb, "i", &m_iTotalDuration)) {
    cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
    
    obj_self->m_iTotalDuration = m_iTotalDuration;
    return mrb_fixnum_value(m_iTotalDuration);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#m_iTotalDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween__get_m_pAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
  class cocos2d::extension::CCArmatureAnimation * res = obj_self->m_pAnimation;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCArmatureAnimation"),
                       &mrb_type_cocos2d_extension_CCArmatureAnimation,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCTween__set_m_pAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pAnimation;
  if (1 == mrb_get_args(mrb, "o", &m_pAnimation)) {
    static_cast< cocos2d::extension::CCArmatureAnimation * >(cc_mrb_data_get_ptr(mrb, m_pAnimation, &mrb_type_cocos2d_extension_CCArmatureAnimation, NULL))->retain();
    cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
    if (obj_self->m_pAnimation) { obj_self->m_pAnimation->release(); }
    obj_self->m_pAnimation = static_cast< cocos2d::extension::CCArmatureAnimation * >(cc_mrb_data_get_ptr(mrb, m_pAnimation, &mrb_type_cocos2d_extension_CCArmatureAnimation, NULL));
    return m_pAnimation;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#m_pAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween__get_m_pBetween(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
  class cocos2d::extension::CCFrameData * res = obj_self->m_pBetween;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCFrameData"),
                       &mrb_type_cocos2d_extension_CCFrameData,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCTween__set_m_pBetween(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pBetween;
  if (1 == mrb_get_args(mrb, "o", &m_pBetween)) {
    static_cast< cocos2d::extension::CCFrameData * >(cc_mrb_data_get_ptr(mrb, m_pBetween, &mrb_type_cocos2d_extension_CCFrameData, NULL))->retain();
    cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
    if (obj_self->m_pBetween) { obj_self->m_pBetween->release(); }
    obj_self->m_pBetween = static_cast< cocos2d::extension::CCFrameData * >(cc_mrb_data_get_ptr(mrb, m_pBetween, &mrb_type_cocos2d_extension_CCFrameData, NULL));
    return m_pBetween;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#m_pBetween");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween__get_m_pBone(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
  class cocos2d::extension::CCBone * res = obj_self->m_pBone;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBone"),
                       &mrb_type_cocos2d_extension_CCBone,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCTween__set_m_pBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pBone;
  if (1 == mrb_get_args(mrb, "o", &m_pBone)) {
    static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, m_pBone, &mrb_type_cocos2d_extension_CCBone, NULL))->retain();
    cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
    if (obj_self->m_pBone) { obj_self->m_pBone->release(); }
    obj_self->m_pBone = static_cast< cocos2d::extension::CCBone * >(cc_mrb_data_get_ptr(mrb, m_pBone, &mrb_type_cocos2d_extension_CCBone, NULL));
    return m_pBone;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#m_pBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween__get_m_pCurrentKeyFrame(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
  class cocos2d::extension::CCFrameData * res = obj_self->m_pCurrentKeyFrame;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCFrameData"),
                       &mrb_type_cocos2d_extension_CCFrameData,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCTween__set_m_pCurrentKeyFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pCurrentKeyFrame;
  if (1 == mrb_get_args(mrb, "o", &m_pCurrentKeyFrame)) {
    static_cast< cocos2d::extension::CCFrameData * >(cc_mrb_data_get_ptr(mrb, m_pCurrentKeyFrame, &mrb_type_cocos2d_extension_CCFrameData, NULL))->retain();
    cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
    if (obj_self->m_pCurrentKeyFrame) { obj_self->m_pCurrentKeyFrame->release(); }
    obj_self->m_pCurrentKeyFrame = static_cast< cocos2d::extension::CCFrameData * >(cc_mrb_data_get_ptr(mrb, m_pCurrentKeyFrame, &mrb_type_cocos2d_extension_CCFrameData, NULL));
    return m_pCurrentKeyFrame;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#m_pCurrentKeyFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween__get_m_pFrom(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
  class cocos2d::extension::CCFrameData * res = obj_self->m_pFrom;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCFrameData"),
                       &mrb_type_cocos2d_extension_CCFrameData,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCTween__set_m_pFrom(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pFrom;
  if (1 == mrb_get_args(mrb, "o", &m_pFrom)) {
    static_cast< cocos2d::extension::CCFrameData * >(cc_mrb_data_get_ptr(mrb, m_pFrom, &mrb_type_cocos2d_extension_CCFrameData, NULL))->retain();
    cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
    if (obj_self->m_pFrom) { obj_self->m_pFrom->release(); }
    obj_self->m_pFrom = static_cast< cocos2d::extension::CCFrameData * >(cc_mrb_data_get_ptr(mrb, m_pFrom, &mrb_type_cocos2d_extension_CCFrameData, NULL));
    return m_pFrom;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#m_pFrom");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween__get_m_pTo(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
  class cocos2d::extension::CCFrameData * res = obj_self->m_pTo;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCFrameData"),
                       &mrb_type_cocos2d_extension_CCFrameData,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCTween__set_m_pTo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pTo;
  if (1 == mrb_get_args(mrb, "o", &m_pTo)) {
    static_cast< cocos2d::extension::CCFrameData * >(cc_mrb_data_get_ptr(mrb, m_pTo, &mrb_type_cocos2d_extension_CCFrameData, NULL))->retain();
    cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
    if (obj_self->m_pTo) { obj_self->m_pTo->release(); }
    obj_self->m_pTo = static_cast< cocos2d::extension::CCFrameData * >(cc_mrb_data_get_ptr(mrb, m_pTo, &mrb_type_cocos2d_extension_CCFrameData, NULL));
    return m_pTo;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#m_pTo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween__get_m_pTweenData(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
  class cocos2d::extension::CCFrameData * res = obj_self->m_pTweenData;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CCFrameData"),
                       &mrb_type_cocos2d_extension_CCFrameData,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CCTween__set_m_pTweenData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pTweenData;
  if (1 == mrb_get_args(mrb, "o", &m_pTweenData)) {
    static_cast< cocos2d::extension::CCFrameData * >(cc_mrb_data_get_ptr(mrb, m_pTweenData, &mrb_type_cocos2d_extension_CCFrameData, NULL))->retain();
    cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
    if (obj_self->m_pTweenData) { obj_self->m_pTweenData->release(); }
    obj_self->m_pTweenData = static_cast< cocos2d::extension::CCFrameData * >(cc_mrb_data_get_ptr(mrb, m_pTweenData, &mrb_type_cocos2d_extension_CCFrameData, NULL));
    return m_pTweenData;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#m_pTweenData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween_play(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value movementBoneData;
    mrb_int durationTo;
    mrb_int durationTween;
    mrb_int loop;
    mrb_int tweenEasing;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "oiiii", &movementBoneData, &durationTo, &durationTween, &loop, &tweenEasing)) {
      cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
      obj_self->play(static_cast< cocos2d::extension::CCMovementBoneData * >(cc_mrb_data_get_ptr(mrb, movementBoneData, &mrb_type_cocos2d_extension_CCMovementBoneData, NULL)), durationTo, durationTween, loop, tweenEasing);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#play");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween_setAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value animation;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &animation)) {
      cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
      obj_self->setAnimation(static_cast< cocos2d::extension::CCArmatureAnimation * >(cc_mrb_data_get_ptr(mrb, animation, &mrb_type_cocos2d_extension_CCArmatureAnimation, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#setAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTween_setMovementBoneData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::extension::CCTween *obj_self = static_cast< cocos2d::extension::CCTween * >(DATA_PTR(mrb_self));
      obj_self->setMovementBoneData(static_cast< cocos2d::extension::CCMovementBoneData * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_extension_CCMovementBoneData, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTween#setMovementBoneData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_backEaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    mrb_float s;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "fffff", &t, &b, &c, &d, &s)) {
      float res = cocos2d::extension::CCTweenFunction::backEaseIn(t, b, c, d, s);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::backEaseIn");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_backEaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    mrb_float s;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "fffff", &t, &b, &c, &d, &s)) {
      float res = cocos2d::extension::CCTweenFunction::backEaseInOut(t, b, c, d, s);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::backEaseInOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_backEaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    mrb_float s;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "fffff", &t, &b, &c, &d, &s)) {
      float res = cocos2d::extension::CCTweenFunction::backEaseOut(t, b, c, d, s);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::backEaseOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_bounceEaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::bounceEaseIn(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::bounceEaseIn");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_bounceEaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::bounceEaseInOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::bounceEaseInOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_bounceEaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::bounceEaseOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::bounceEaseOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_circEaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::circEaseIn(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::circEaseIn");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_circEaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::circEaseInOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::circEaseInOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_circEaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::circEaseOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::circEaseOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_cubicEaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::cubicEaseIn(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::cubicEaseIn");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_cubicEaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::cubicEaseInOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::cubicEaseInOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_cubicEaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::cubicEaseOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::cubicEaseOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_elasticEaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    mrb_float a;
    mrb_float p;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "ffffff", &t, &b, &c, &d, &a, &p)) {
      float res = cocos2d::extension::CCTweenFunction::elasticEaseIn(t, b, c, d, a, p);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::elasticEaseIn");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_elasticEaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    mrb_float a;
    mrb_float p;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "ffffff", &t, &b, &c, &d, &a, &p)) {
      float res = cocos2d::extension::CCTweenFunction::elasticEaseInOut(t, b, c, d, a, p);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::elasticEaseInOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_elasticEaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    mrb_float a;
    mrb_float p;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "ffffff", &t, &b, &c, &d, &a, &p)) {
      float res = cocos2d::extension::CCTweenFunction::elasticEaseOut(t, b, c, d, a, p);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::elasticEaseOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_expoEaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::expoEaseIn(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::expoEaseIn");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_expoEaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::expoEaseInOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::expoEaseInOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_expoEaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::expoEaseOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::expoEaseOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_linear(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::linear(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::linear");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_quadEaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::quadEaseIn(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::quadEaseIn");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_quadEaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::quadEaseInOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::quadEaseInOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_quadEaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::quadEaseOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::quadEaseOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_quartEaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::quartEaseIn(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::quartEaseIn");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_quartEaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::quartEaseInOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::quartEaseInOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_quartEaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::quartEaseOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::quartEaseOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_quintEaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::quintEaseIn(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::quintEaseIn");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_quintEaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::quintEaseInOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::quintEaseInOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_quintEaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::quintEaseOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::quintEaseOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_sineEaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::sineEaseIn(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::sineEaseIn");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_sineEaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::sineEaseInOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::sineEaseInOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_sineEaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &t, &b, &c, &d)) {
      float res = cocos2d::extension::CCTweenFunction::sineEaseOut(t, b, c, d);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::sineEaseOut");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_tweenTo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float from;
    mrb_float change;
    mrb_float time;
    mrb_float duration;
    mrb_int tweenType;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "ffffi", &from, &change, &time, &duration, &tweenType)) {
      float res = cocos2d::extension::CCTweenFunction::tweenTo(from, change, time, duration, (enum cocos2d::extension::CCTweenType)tweenType);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction::tweenTo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCTweenFunction_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCTweenFunction;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCTweenFunction * res = new cocos2d::extension::CCTweenFunction();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCTweenFunction#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__get_COMPLETE(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::COMPLETE;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CS_DISPLAY_ARMATURE(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CS_DISPLAY_ARMATURE;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CS_DISPLAY_MAX(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CS_DISPLAY_MAX;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CS_DISPLAY_PARTICLE(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CS_DISPLAY_PARTICLE;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CS_DISPLAY_SHADER(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CS_DISPLAY_SHADER;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_CS_DISPLAY_SPRITE(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::CS_DISPLAY_SPRITE;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Circ_EaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Circ_EaseIn;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Circ_EaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Circ_EaseInOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Circ_EaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Circ_EaseOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_ColliderBody_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value b2b;
    mrb_value contourData;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_ColliderBody;
    DATA_PTR(mrb_self) = NULL;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &b2b, &contourData)) {
      cocos2d::extension::ColliderBody * res = new cocos2d::extension::ColliderBody(static_cast< b2Body * >(DATA_PTR(b2b)), static_cast< cocos2d::extension::CCContourData * >(cc_mrb_data_get_ptr(mrb, contourData, &mrb_type_cocos2d_extension_CCContourData, NULL)));
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::ColliderBody#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_ColliderBody_getB2Body(mrb_state *mrb, mrb_value mrb_self)
{
#if 0
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::ColliderBody *obj_self = static_cast< cocos2d::extension::ColliderBody * >(DATA_PTR(mrb_self));
      class b2Body * res = obj_self->getB2Body();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "B2Body"),
                       &mrb_type_b2Body,
                       res));
      return mrb_res;
    }
  }
#endif
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::ColliderBody#getB2Body");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_ColliderBody_getContourData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::ColliderBody *obj_self = static_cast< cocos2d::extension::ColliderBody * >(DATA_PTR(mrb_self));
      class cocos2d::extension::CCContourData * res = obj_self->getContourData();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_extension_CCContourData,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::ColliderBody#getContourData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_ColorTimeline_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int frameCount;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &frameCount)) {
      ColorTimeline * res = cocos2d::extension::ColorTimeline_create(frameCount);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CC_ColorTimeline"),
                       &mrb_type_cocos2d_extension__ColorTimeline,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::ColorTimeline_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_ColorTimeline_setFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_int frameIndex;
    mrb_float time;
    mrb_float r;
    mrb_float g;
    mrb_float b;
    mrb_float a;
    if (7 == _argc_ && 7 == mrb_get_args(mrb, "oifffff", &self, &frameIndex, &time, &r, &g, &b, &a)) {
      cocos2d::extension::ColorTimeline_setFrame(static_cast< ColorTimeline * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension__ColorTimeline, &mrb_no_free_type_cocos2d_extension__ColorTimeline)), frameIndex, time, r, g, b, a);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::ColorTimeline_setFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__get_Cubic_EaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Cubic_EaseIn;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Cubic_EaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Cubic_EaseInOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Cubic_EaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Cubic_EaseOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_CurveTimeline__get_curves(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CurveTimeline *obj_self = static_cast< cocos2d::extension::CurveTimeline * >(DATA_PTR(mrb_self));
  float *res = obj_self->curves;
  return cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 1), reinterpret_cast< float * >(res), 1);
}

static mrb_value
mrb_cocos2d_extension_CurveTimeline__set_curves(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value curves;
  if (1 == mrb_get_args(mrb, "A", &curves)) {
    cocos2d::extension::CurveTimeline *obj_self = static_cast< cocos2d::extension::CurveTimeline * >(DATA_PTR(mrb_self));
    
    cc_mrb_ary_conv_to_c_array(mrb, curves, reinterpret_cast< float * >(obj_self->curves), 1);
    return curves;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CurveTimeline#curves");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CurveTimeline__get_super(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::CurveTimeline *obj_self = static_cast< cocos2d::extension::CurveTimeline * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::Timeline *res = &obj_self->super;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Timeline"),
                       &mrb_no_free_type_cocos2d_extension_Timeline,
                       res));
}

static mrb_value
mrb_cocos2d_extension_CurveTimeline__set_super(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value super;
  if (1 == mrb_get_args(mrb, "o", &super)) {
    cocos2d::extension::CurveTimeline *obj_self = static_cast< cocos2d::extension::CurveTimeline * >(DATA_PTR(mrb_self));
    
    obj_self->super = *(static_cast< struct cocos2d::extension::Timeline * >(cc_mrb_data_get_ptr(mrb, super, &mrb_type_cocos2d_extension_Timeline, &mrb_no_free_type_cocos2d_extension_Timeline)));
    return super;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CurveTimeline#super");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CurveTimeline_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CurveTimeline;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CurveTimeline * res = new cocos2d::extension::CurveTimeline();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CurveTimeline#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CurveTimeline_getCurvePercent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_int frameIndex;
    mrb_float percent;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oif", &self, &frameIndex, &percent)) {
      float res = cocos2d::extension::CurveTimeline_getCurvePercent(static_cast< CurveTimeline * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_CurveTimeline, &mrb_no_free_type_cocos2d_extension_CurveTimeline)), frameIndex, percent);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CurveTimeline_getCurvePercent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CurveTimeline_setCurve(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_int frameIndex;
    mrb_float cx1;
    mrb_float cy1;
    mrb_float cx2;
    mrb_float cy2;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "oiffff", &self, &frameIndex, &cx1, &cy1, &cx2, &cy2)) {
      cocos2d::extension::CurveTimeline_setCurve(static_cast< CurveTimeline * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_CurveTimeline, &mrb_no_free_type_cocos2d_extension_CurveTimeline)), frameIndex, cx1, cy1, cx2, cy2);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CurveTimeline_setCurve");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CurveTimeline_setLinear(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_int frameIndex;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &self, &frameIndex)) {
      cocos2d::extension::CurveTimeline_setLinear(static_cast< CurveTimeline * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_CurveTimeline, &mrb_no_free_type_cocos2d_extension_CurveTimeline)), frameIndex);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CurveTimeline_setLinear");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CurveTimeline_setStepped(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_int frameIndex;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &self, &frameIndex)) {
      cocos2d::extension::CurveTimeline_setStepped(static_cast< CurveTimeline * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_CurveTimeline, &mrb_no_free_type_cocos2d_extension_CurveTimeline)), frameIndex);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CurveTimeline_setStepped");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__get_Elastic_EaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Elastic_EaseIn;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Elastic_EaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Elastic_EaseInOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Elastic_EaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Elastic_EaseOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Expo_EaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Expo_EaseIn;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Expo_EaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Expo_EaseInOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Expo_EaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Expo_EaseOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_HSV__get_h(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::HSV *obj_self = static_cast< cocos2d::extension::HSV * >(DATA_PTR(mrb_self));
  double res = obj_self->h;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_HSV__set_h(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float h;
  if (1 == mrb_get_args(mrb, "f", &h)) {
    cocos2d::extension::HSV *obj_self = static_cast< cocos2d::extension::HSV * >(DATA_PTR(mrb_self));
    
    obj_self->h = h;
    return mrb_float_value(mrb, h);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::HSV#h");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_HSV__get_s(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::HSV *obj_self = static_cast< cocos2d::extension::HSV * >(DATA_PTR(mrb_self));
  double res = obj_self->s;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_HSV__set_s(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float s;
  if (1 == mrb_get_args(mrb, "f", &s)) {
    cocos2d::extension::HSV *obj_self = static_cast< cocos2d::extension::HSV * >(DATA_PTR(mrb_self));
    
    obj_self->s = s;
    return mrb_float_value(mrb, s);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::HSV#s");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_HSV__get_v(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::HSV *obj_self = static_cast< cocos2d::extension::HSV * >(DATA_PTR(mrb_self));
  double res = obj_self->v;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_HSV__set_v(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float v;
  if (1 == mrb_get_args(mrb, "f", &v)) {
    cocos2d::extension::HSV *obj_self = static_cast< cocos2d::extension::HSV * >(DATA_PTR(mrb_self));
    
    obj_self->v = v;
    return mrb_float_value(mrb, v);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::HSV#v");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_HSV_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_HSV;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::HSV * res = new cocos2d::extension::HSV();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::HSV#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__get_LOOP_COMPLETE(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::LOOP_COMPLETE;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Linear(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Linear;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Quad_EaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Quad_EaseIn;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Quad_EaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Quad_EaseInOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Quad_EaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Quad_EaseOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Quart_EaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Quart_EaseIn;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Quart_EaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Quart_EaseInOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Quart_EaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Quart_EaseOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Quint_EaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Quint_EaseIn;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Quint_EaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Quint_EaseInOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Quint_EaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Quint_EaseOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_RGBA__get_a(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RGBA *obj_self = static_cast< cocos2d::extension::RGBA * >(DATA_PTR(mrb_self));
  double res = obj_self->a;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_RGBA__set_a(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float a;
  if (1 == mrb_get_args(mrb, "f", &a)) {
    cocos2d::extension::RGBA *obj_self = static_cast< cocos2d::extension::RGBA * >(DATA_PTR(mrb_self));
    
    obj_self->a = a;
    return mrb_float_value(mrb, a);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RGBA#a");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RGBA__get_b(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RGBA *obj_self = static_cast< cocos2d::extension::RGBA * >(DATA_PTR(mrb_self));
  double res = obj_self->b;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_RGBA__set_b(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float b;
  if (1 == mrb_get_args(mrb, "f", &b)) {
    cocos2d::extension::RGBA *obj_self = static_cast< cocos2d::extension::RGBA * >(DATA_PTR(mrb_self));
    
    obj_self->b = b;
    return mrb_float_value(mrb, b);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RGBA#b");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RGBA__get_g(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RGBA *obj_self = static_cast< cocos2d::extension::RGBA * >(DATA_PTR(mrb_self));
  double res = obj_self->g;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_RGBA__set_g(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float g;
  if (1 == mrb_get_args(mrb, "f", &g)) {
    cocos2d::extension::RGBA *obj_self = static_cast< cocos2d::extension::RGBA * >(DATA_PTR(mrb_self));
    
    obj_self->g = g;
    return mrb_float_value(mrb, g);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RGBA#g");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RGBA__get_r(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RGBA *obj_self = static_cast< cocos2d::extension::RGBA * >(DATA_PTR(mrb_self));
  double res = obj_self->r;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_RGBA__set_r(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float r;
  if (1 == mrb_get_args(mrb, "f", &r)) {
    cocos2d::extension::RGBA *obj_self = static_cast< cocos2d::extension::RGBA * >(DATA_PTR(mrb_self));
    
    obj_self->r = r;
    return mrb_float_value(mrb, r);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RGBA#r");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RGBA_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_RGBA;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::RGBA * res = new cocos2d::extension::RGBA();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RGBA#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_height(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  float res = obj_self->height;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_height(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float height;
  if (1 == mrb_get_args(mrb, "f", &height)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    obj_self->height = height;
    return mrb_float_value(mrb, height);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#height");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_offset(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  float *res = obj_self->offset;
  return cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 8), reinterpret_cast< float * >(res), 8);
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_offset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value offset;
  if (1 == mrb_get_args(mrb, "A", &offset)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    cc_mrb_ary_conv_to_c_array(mrb, offset, reinterpret_cast< float * >(obj_self->offset), 8);
    return offset;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#offset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_regionHeight(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  int res = obj_self->regionHeight;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_regionHeight(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int regionHeight;
  if (1 == mrb_get_args(mrb, "i", &regionHeight)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    obj_self->regionHeight = regionHeight;
    return mrb_fixnum_value(regionHeight);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#regionHeight");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_regionOffsetX(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  int res = obj_self->regionOffsetX;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_regionOffsetX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int regionOffsetX;
  if (1 == mrb_get_args(mrb, "i", &regionOffsetX)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    obj_self->regionOffsetX = regionOffsetX;
    return mrb_fixnum_value(regionOffsetX);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#regionOffsetX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_regionOffsetY(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  int res = obj_self->regionOffsetY;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_regionOffsetY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int regionOffsetY;
  if (1 == mrb_get_args(mrb, "i", &regionOffsetY)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    obj_self->regionOffsetY = regionOffsetY;
    return mrb_fixnum_value(regionOffsetY);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#regionOffsetY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_regionOriginalHeight(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  int res = obj_self->regionOriginalHeight;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_regionOriginalHeight(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int regionOriginalHeight;
  if (1 == mrb_get_args(mrb, "i", &regionOriginalHeight)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    obj_self->regionOriginalHeight = regionOriginalHeight;
    return mrb_fixnum_value(regionOriginalHeight);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#regionOriginalHeight");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_regionOriginalWidth(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  int res = obj_self->regionOriginalWidth;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_regionOriginalWidth(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int regionOriginalWidth;
  if (1 == mrb_get_args(mrb, "i", &regionOriginalWidth)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    obj_self->regionOriginalWidth = regionOriginalWidth;
    return mrb_fixnum_value(regionOriginalWidth);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#regionOriginalWidth");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_regionWidth(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  int res = obj_self->regionWidth;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_regionWidth(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int regionWidth;
  if (1 == mrb_get_args(mrb, "i", &regionWidth)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    obj_self->regionWidth = regionWidth;
    return mrb_fixnum_value(regionWidth);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#regionWidth");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_rotation(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  float res = obj_self->rotation;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_rotation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float rotation;
  if (1 == mrb_get_args(mrb, "f", &rotation)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    obj_self->rotation = rotation;
    return mrb_float_value(mrb, rotation);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#rotation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_scaleX(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  float res = obj_self->scaleX;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_scaleX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float scaleX;
  if (1 == mrb_get_args(mrb, "f", &scaleX)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    obj_self->scaleX = scaleX;
    return mrb_float_value(mrb, scaleX);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#scaleX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_scaleY(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  float res = obj_self->scaleY;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_scaleY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float scaleY;
  if (1 == mrb_get_args(mrb, "f", &scaleY)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    obj_self->scaleY = scaleY;
    return mrb_float_value(mrb, scaleY);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#scaleY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_super(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::Attachment *res = &obj_self->super;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Attachment"),
                       &mrb_no_free_type_cocos2d_extension_Attachment,
                       res));
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_super(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value super;
  if (1 == mrb_get_args(mrb, "o", &super)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    obj_self->super = *(static_cast< struct cocos2d::extension::Attachment * >(cc_mrb_data_get_ptr(mrb, super, &mrb_type_cocos2d_extension_Attachment, &mrb_no_free_type_cocos2d_extension_Attachment)));
    return super;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#super");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_uvs(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  float *res = obj_self->uvs;
  return cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 8), reinterpret_cast< float * >(res), 8);
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_uvs(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value uvs;
  if (1 == mrb_get_args(mrb, "A", &uvs)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    cc_mrb_ary_conv_to_c_array(mrb, uvs, reinterpret_cast< float * >(obj_self->uvs), 8);
    return uvs;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#uvs");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_width(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  float res = obj_self->width;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_width(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float width;
  if (1 == mrb_get_args(mrb, "f", &width)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    obj_self->width = width;
    return mrb_float_value(mrb, width);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#width");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_x(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  float res = obj_self->x;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_x(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float x;
  if (1 == mrb_get_args(mrb, "f", &x)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    obj_self->x = x;
    return mrb_float_value(mrb, x);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#x");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__get_y(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
  float res = obj_self->y;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment__set_y(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float y;
  if (1 == mrb_get_args(mrb, "f", &y)) {
    cocos2d::extension::RegionAttachment *obj_self = static_cast< cocos2d::extension::RegionAttachment * >(DATA_PTR(mrb_self));
    
    obj_self->y = y;
    return mrb_float_value(mrb, y);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#y");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_RegionAttachment;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::RegionAttachment * res = new cocos2d::extension::RegionAttachment();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment_computeVertices(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_float x;
    mrb_float y;
    mrb_value bone;
    mrb_value vertices;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "offoA", &self, &x, &y, &bone, &vertices)) {
      float cxx_vertices[1]; cc_mrb_ary_conv_to_c_array(mrb, vertices, reinterpret_cast< float * >(cxx_vertices), 1);
      cocos2d::extension::RegionAttachment_computeVertices(static_cast< struct cocos2d::extension::RegionAttachment * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_RegionAttachment, &mrb_no_free_type_cocos2d_extension_RegionAttachment)), x, y, static_cast< Bone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_Bone, &mrb_no_free_type_cocos2d_extension_Bone)), cxx_vertices);
      cc_mrb_ary_conv_from_c_array(mrb, vertices, reinterpret_cast< float * >(cxx_vertices), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment_computeVertices");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      struct cocos2d::extension::RegionAttachment * res = cocos2d::extension::RegionAttachment_create(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::RegionAttachment"),
                       &mrb_type_cocos2d_extension_RegionAttachment,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment_setUVs(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_float u;
    mrb_float v;
    mrb_float u2;
    mrb_float v2;
    mrb_int rotate;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "offffi", &self, &u, &v, &u2, &v2, &rotate)) {
      cocos2d::extension::RegionAttachment_setUVs(static_cast< struct cocos2d::extension::RegionAttachment * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_RegionAttachment, &mrb_no_free_type_cocos2d_extension_RegionAttachment)), u, v, u2, v2, rotate);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment_setUVs");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment_updateOffset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::RegionAttachment_updateOffset(static_cast< struct cocos2d::extension::RegionAttachment * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_RegionAttachment, &mrb_no_free_type_cocos2d_extension_RegionAttachment)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment_updateOffset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RegionAttachment_updateQuad(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value slot;
    mrb_value quad;
    mrb_bool premultiplied;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ooob", &self, &slot, &quad, &premultiplied)) {
      cocos2d::extension::RegionAttachment_updateQuad(static_cast< RegionAttachment * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_RegionAttachment, &mrb_no_free_type_cocos2d_extension_RegionAttachment)), static_cast< Slot * >(cc_mrb_data_get_ptr(mrb, slot, &mrb_type_cocos2d_extension_Slot, &mrb_no_free_type_cocos2d_extension_Slot)), static_cast< cocos2d::ccV3F_C4B_T2F_Quad * >(DATA_PTR(quad)), premultiplied);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RegionAttachment_updateQuad");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RotateTimeline_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int frameCount;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &frameCount)) {
      RotateTimeline * res = cocos2d::extension::RotateTimeline_create(frameCount);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::BaseTimeline"),
                       &mrb_type_cocos2d_extension_BaseTimeline,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RotateTimeline_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_RotateTimeline_setFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_int frameIndex;
    mrb_float time;
    mrb_float angle;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oiff", &self, &frameIndex, &time, &angle)) {
      cocos2d::extension::RotateTimeline_setFrame(static_cast< RotateTimeline * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_BaseTimeline, &mrb_no_free_type_cocos2d_extension_BaseTimeline)), frameIndex, time, angle);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::RotateTimeline_setFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__get_SINGLE_FRAME(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::SINGLE_FRAME;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_START(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::START;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_ScaleTimeline_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int frameCount;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &frameCount)) {
      ScaleTimeline * res = cocos2d::extension::ScaleTimeline_create(frameCount);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::BaseTimeline"),
                       &mrb_type_cocos2d_extension_BaseTimeline,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::ScaleTimeline_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_ScaleTimeline_setFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_int frameIndex;
    mrb_float time;
    mrb_float x;
    mrb_float y;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "oifff", &self, &frameIndex, &time, &x, &y)) {
      cocos2d::extension::ScaleTimeline_setFrame(static_cast< ScaleTimeline * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_BaseTimeline, &mrb_no_free_type_cocos2d_extension_BaseTimeline)), frameIndex, time, x, y);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::ScaleTimeline_setFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__get_Sine_EaseIn(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Sine_EaseIn;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Sine_EaseInOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Sine_EaseInOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_Sine_EaseOut(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::Sine_EaseOut;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_a(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  float res = obj_self->a;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Skeleton__set_a(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float a;
  if (1 == mrb_get_args(mrb, "f", &a)) {
    cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
    
    obj_self->a = a;
    return mrb_float_value(mrb, a);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton#a");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_b(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  float res = obj_self->b;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Skeleton__set_b(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float b;
  if (1 == mrb_get_args(mrb, "f", &b)) {
    cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
    
    obj_self->b = b;
    return mrb_float_value(mrb, b);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton#b");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_boneCount(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  int res = obj_self->boneCount;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_Skeleton__set_boneCount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int boneCount;
  if (1 == mrb_get_args(mrb, "i", &boneCount)) {
    cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
    
    obj_self->boneCount = boneCount;
    return mrb_fixnum_value(boneCount);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton#boneCount");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_bones(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  Bone ** res = obj_self->bones;
  return mrb_obj_value(res) /* TODO: handle as array. */ ;
}

static mrb_value
mrb_cocos2d_extension_Skeleton__set_bones(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value bones;
  if (1 == mrb_get_args(mrb, "o", &bones)) {
    cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
    
    obj_self->bones = static_cast< Bone ** >(DATA_PTR(bones));
    return bones;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton#bones");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_data(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  cocos2d::extension::SkeletonData * res = obj_self->data;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::SkeletonData"),
                       &mrb_no_free_type_cocos2d_extension_SkeletonData,
                       res));
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_drawOrder(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  Slot ** res = obj_self->drawOrder;
  return mrb_obj_value(res) /* TODO: handle as array. */ ;
}

static mrb_value
mrb_cocos2d_extension_Skeleton__set_drawOrder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value drawOrder;
  if (1 == mrb_get_args(mrb, "o", &drawOrder)) {
    cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
    
    obj_self->drawOrder = static_cast< Slot ** >(DATA_PTR(drawOrder));
    return drawOrder;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton#drawOrder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_flipX(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  int res = obj_self->flipX;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_Skeleton__set_flipX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int flipX;
  if (1 == mrb_get_args(mrb, "i", &flipX)) {
    cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
    
    obj_self->flipX = flipX;
    return mrb_fixnum_value(flipX);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton#flipX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_flipY(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  int res = obj_self->flipY;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_Skeleton__set_flipY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int flipY;
  if (1 == mrb_get_args(mrb, "i", &flipY)) {
    cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
    
    obj_self->flipY = flipY;
    return mrb_fixnum_value(flipY);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton#flipY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_g(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  float res = obj_self->g;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Skeleton__set_g(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float g;
  if (1 == mrb_get_args(mrb, "f", &g)) {
    cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
    
    obj_self->g = g;
    return mrb_float_value(mrb, g);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton#g");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_r(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  float res = obj_self->r;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Skeleton__set_r(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float r;
  if (1 == mrb_get_args(mrb, "f", &r)) {
    cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
    
    obj_self->r = r;
    return mrb_float_value(mrb, r);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton#r");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_root(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::Bone * res = obj_self->root;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Bone"),
                       &mrb_no_free_type_cocos2d_extension_Bone,
                       res));
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_skin(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  cocos2d::extension::Skin * res = obj_self->skin;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Skin"),
                       &mrb_no_free_type_cocos2d_extension_Skin,
                       res));
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_slotCount(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  int res = obj_self->slotCount;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_Skeleton__set_slotCount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int slotCount;
  if (1 == mrb_get_args(mrb, "i", &slotCount)) {
    cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
    
    obj_self->slotCount = slotCount;
    return mrb_fixnum_value(slotCount);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton#slotCount");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_slots(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  Slot ** res = obj_self->slots;
  return mrb_obj_value(res) /* TODO: handle as array. */ ;
}

static mrb_value
mrb_cocos2d_extension_Skeleton__set_slots(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value slots;
  if (1 == mrb_get_args(mrb, "o", &slots)) {
    cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
    
    obj_self->slots = static_cast< Slot ** >(DATA_PTR(slots));
    return slots;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton#slots");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_time(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  float res = obj_self->time;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Skeleton__set_time(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float time;
  if (1 == mrb_get_args(mrb, "f", &time)) {
    cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
    
    obj_self->time = time;
    return mrb_float_value(mrb, time);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton#time");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_x(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  float res = obj_self->x;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Skeleton__set_x(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float x;
  if (1 == mrb_get_args(mrb, "f", &x)) {
    cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
    
    obj_self->x = x;
    return mrb_float_value(mrb, x);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton#x");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton__get_y(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
  float res = obj_self->y;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Skeleton__set_y(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float y;
  if (1 == mrb_get_args(mrb, "f", &y)) {
    cocos2d::extension::Skeleton *obj_self = static_cast< cocos2d::extension::Skeleton * >(DATA_PTR(mrb_self));
    
    obj_self->y = y;
    return mrb_float_value(mrb, y);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton#y");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_Skeleton;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::Skeleton * res = new cocos2d::extension::Skeleton();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__get_animationCount(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
  int res = obj_self->animationCount;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__set_animationCount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int animationCount;
  if (1 == mrb_get_args(mrb, "i", &animationCount)) {
    cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
    
    obj_self->animationCount = animationCount;
    return mrb_fixnum_value(animationCount);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData#animationCount");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__get_animations(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
  Animation ** res = obj_self->animations;
  return mrb_obj_value(res) /* TODO: handle as array. */ ;
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__set_animations(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value animations;
  if (1 == mrb_get_args(mrb, "o", &animations)) {
    cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
    
    obj_self->animations = static_cast< Animation ** >(DATA_PTR(animations));
    return animations;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData#animations");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__get_boneCount(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
  int res = obj_self->boneCount;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__set_boneCount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int boneCount;
  if (1 == mrb_get_args(mrb, "i", &boneCount)) {
    cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
    
    obj_self->boneCount = boneCount;
    return mrb_fixnum_value(boneCount);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData#boneCount");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__get_bones(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
  BoneData ** res = obj_self->bones;
  return mrb_obj_value(res) /* TODO: handle as array. */ ;
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__set_bones(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value bones;
  if (1 == mrb_get_args(mrb, "o", &bones)) {
    cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
    
    obj_self->bones = static_cast< BoneData ** >(DATA_PTR(bones));
    return bones;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData#bones");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__get_defaultSkin(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
  cocos2d::extension::Skin * res = obj_self->defaultSkin;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Skin"),
                       &mrb_no_free_type_cocos2d_extension_Skin,
                       res));
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__set_defaultSkin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value defaultSkin;
  if (1 == mrb_get_args(mrb, "o", &defaultSkin)) {
    cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
    
    obj_self->defaultSkin = static_cast< cocos2d::extension::Skin * >(cc_mrb_data_get_ptr(mrb, defaultSkin, &mrb_type_cocos2d_extension_Skin, &mrb_no_free_type_cocos2d_extension_Skin));
    return defaultSkin;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData#defaultSkin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__get_skinCount(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
  int res = obj_self->skinCount;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__set_skinCount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int skinCount;
  if (1 == mrb_get_args(mrb, "i", &skinCount)) {
    cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
    
    obj_self->skinCount = skinCount;
    return mrb_fixnum_value(skinCount);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData#skinCount");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__get_skins(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
  Skin ** res = obj_self->skins;
  return mrb_obj_value(res) /* TODO: handle as array. */ ;
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__set_skins(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value skins;
  if (1 == mrb_get_args(mrb, "o", &skins)) {
    cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
    
    obj_self->skins = static_cast< Skin ** >(DATA_PTR(skins));
    return skins;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData#skins");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__get_slotCount(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
  int res = obj_self->slotCount;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__set_slotCount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int slotCount;
  if (1 == mrb_get_args(mrb, "i", &slotCount)) {
    cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
    
    obj_self->slotCount = slotCount;
    return mrb_fixnum_value(slotCount);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData#slotCount");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__get_slots(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
  SlotData ** res = obj_self->slots;
  return mrb_obj_value(res) /* TODO: handle as array. */ ;
}

static mrb_value
mrb_cocos2d_extension_SkeletonData__set_slots(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value slots;
  if (1 == mrb_get_args(mrb, "o", &slots)) {
    cocos2d::extension::SkeletonData *obj_self = static_cast< cocos2d::extension::SkeletonData * >(DATA_PTR(mrb_self));
    
    obj_self->slots = static_cast< SlotData ** >(DATA_PTR(slots));
    return slots;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData#slots");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_SkeletonData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::SkeletonData * res = new cocos2d::extension::SkeletonData();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      SkeletonData * res = cocos2d::extension::SkeletonData_create();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::SkeletonData"),
                       &mrb_type_cocos2d_extension_SkeletonData,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::SkeletonData_dispose(static_cast< SkeletonData * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_SkeletonData, &mrb_no_free_type_cocos2d_extension_SkeletonData)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData_findAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value animationName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &self, &animationName)) {
      Animation * res = cocos2d::extension::SkeletonData_findAnimation(static_cast< SkeletonData * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_SkeletonData, &mrb_no_free_type_cocos2d_extension_SkeletonData)), RSTRING_PTR(animationName));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Animation"),
                       &mrb_type_cocos2d_extension_Animation,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData_findAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData_findBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value boneName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &self, &boneName)) {
      BoneData * res = cocos2d::extension::SkeletonData_findBone(static_cast< SkeletonData * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_SkeletonData, &mrb_no_free_type_cocos2d_extension_SkeletonData)), RSTRING_PTR(boneName));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::BoneData"),
                       &mrb_type_cocos2d_extension_BoneData,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData_findBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData_findBoneIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value boneName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &self, &boneName)) {
      int res = cocos2d::extension::SkeletonData_findBoneIndex(static_cast< SkeletonData * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_SkeletonData, &mrb_no_free_type_cocos2d_extension_SkeletonData)), RSTRING_PTR(boneName));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData_findBoneIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData_findSkin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value skinName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &self, &skinName)) {
      Skin * res = cocos2d::extension::SkeletonData_findSkin(static_cast< SkeletonData * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_SkeletonData, &mrb_no_free_type_cocos2d_extension_SkeletonData)), RSTRING_PTR(skinName));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Skin"),
                       &mrb_type_cocos2d_extension_Skin,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData_findSkin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData_findSlot(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value slotName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &self, &slotName)) {
      SlotData * res = cocos2d::extension::SkeletonData_findSlot(static_cast< SkeletonData * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_SkeletonData, &mrb_no_free_type_cocos2d_extension_SkeletonData)), RSTRING_PTR(slotName));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::SlotData"),
                       &mrb_type_cocos2d_extension_SlotData,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData_findSlot");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonData_findSlotIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value slotName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &self, &slotName)) {
      int res = cocos2d::extension::SkeletonData_findSlotIndex(static_cast< SkeletonData * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_SkeletonData, &mrb_no_free_type_cocos2d_extension_SkeletonData)), RSTRING_PTR(slotName));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonData_findSlotIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonJson__get_attachmentLoader(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SkeletonJson *obj_self = static_cast< cocos2d::extension::SkeletonJson * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::AttachmentLoader * res = obj_self->attachmentLoader;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::AttachmentLoader"),
                       &mrb_no_free_type_cocos2d_extension_AttachmentLoader,
                       res));
}

static mrb_value
mrb_cocos2d_extension_SkeletonJson__set_attachmentLoader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value attachmentLoader;
  if (1 == mrb_get_args(mrb, "o", &attachmentLoader)) {
    cocos2d::extension::SkeletonJson *obj_self = static_cast< cocos2d::extension::SkeletonJson * >(DATA_PTR(mrb_self));
    
    obj_self->attachmentLoader = static_cast< struct cocos2d::extension::AttachmentLoader * >(cc_mrb_data_get_ptr(mrb, attachmentLoader, &mrb_type_cocos2d_extension_AttachmentLoader, &mrb_no_free_type_cocos2d_extension_AttachmentLoader));
    return attachmentLoader;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonJson#attachmentLoader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonJson__get_error(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SkeletonJson *obj_self = static_cast< cocos2d::extension::SkeletonJson * >(DATA_PTR(mrb_self));
  std::string res = obj_self->error;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_SkeletonJson__get_scale(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SkeletonJson *obj_self = static_cast< cocos2d::extension::SkeletonJson * >(DATA_PTR(mrb_self));
  float res = obj_self->scale;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_SkeletonJson__set_scale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float scale;
  if (1 == mrb_get_args(mrb, "f", &scale)) {
    cocos2d::extension::SkeletonJson *obj_self = static_cast< cocos2d::extension::SkeletonJson * >(DATA_PTR(mrb_self));
    
    obj_self->scale = scale;
    return mrb_float_value(mrb, scale);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonJson#scale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonJson_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_SkeletonJson;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::SkeletonJson * res = new cocos2d::extension::SkeletonJson();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonJson#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonJson_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value atlas;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &atlas)) {
      SkeletonJson * res = cocos2d::extension::SkeletonJson_create(static_cast< Atlas * >(cc_mrb_data_get_ptr(mrb, atlas, &mrb_type_cocos2d_extension_Atlas, &mrb_no_free_type_cocos2d_extension_Atlas)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::SkeletonJson"),
                       &mrb_type_cocos2d_extension_SkeletonJson,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonJson_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonJson_createWithLoader(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value attachmentLoader;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &attachmentLoader)) {
      SkeletonJson * res = cocos2d::extension::SkeletonJson_createWithLoader(static_cast< AttachmentLoader * >(cc_mrb_data_get_ptr(mrb, attachmentLoader, &mrb_type_cocos2d_extension_AttachmentLoader, &mrb_no_free_type_cocos2d_extension_AttachmentLoader)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::SkeletonJson"),
                       &mrb_type_cocos2d_extension_SkeletonJson,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonJson_createWithLoader");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonJson_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::SkeletonJson_dispose(static_cast< SkeletonJson * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_SkeletonJson, &mrb_no_free_type_cocos2d_extension_SkeletonJson)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonJson_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonJson_readSkeletonData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value json;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &self, &json)) {
      SkeletonData * res = cocos2d::extension::SkeletonJson_readSkeletonData(static_cast< SkeletonJson * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_SkeletonJson, &mrb_no_free_type_cocos2d_extension_SkeletonJson)), RSTRING_PTR(json));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::SkeletonData"),
                       &mrb_type_cocos2d_extension_SkeletonData,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonJson_readSkeletonData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SkeletonJson_readSkeletonDataFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value path;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &self, &path)) {
      SkeletonData * res = cocos2d::extension::SkeletonJson_readSkeletonDataFile(static_cast< SkeletonJson * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_SkeletonJson, &mrb_no_free_type_cocos2d_extension_SkeletonJson)), RSTRING_PTR(path));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::SkeletonData"),
                       &mrb_type_cocos2d_extension_SkeletonData,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SkeletonJson_readSkeletonDataFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value data;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &data)) {
      struct cocos2d::extension::Skeleton * res = cocos2d::extension::Skeleton_create(static_cast< SkeletonData * >(cc_mrb_data_get_ptr(mrb, data, &mrb_type_cocos2d_extension_SkeletonData, &mrb_no_free_type_cocos2d_extension_SkeletonData)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Skeleton"),
                       &mrb_type_cocos2d_extension_Skeleton,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::Skeleton_dispose(static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_findBone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value boneName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &self, &boneName)) {
      Bone * res = cocos2d::extension::Skeleton_findBone(static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)), RSTRING_PTR(boneName));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Bone"),
                       &mrb_type_cocos2d_extension_Bone,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_findBone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_findBoneIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value boneName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &self, &boneName)) {
      int res = cocos2d::extension::Skeleton_findBoneIndex(static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)), RSTRING_PTR(boneName));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_findBoneIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_findSlot(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value slotName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &self, &slotName)) {
      Slot * res = cocos2d::extension::Skeleton_findSlot(static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)), RSTRING_PTR(slotName));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Slot"),
                       &mrb_type_cocos2d_extension_Slot,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_findSlot");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_findSlotIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value slotName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &self, &slotName)) {
      int res = cocos2d::extension::Skeleton_findSlotIndex(static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)), RSTRING_PTR(slotName));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_findSlotIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_getAttachmentForSlotIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_int slotIndex;
    mrb_value attachmentName;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oiS", &self, &slotIndex, &attachmentName)) {
      Attachment * res = cocos2d::extension::Skeleton_getAttachmentForSlotIndex(static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)), slotIndex, RSTRING_PTR(attachmentName));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Attachment"),
                       &mrb_type_cocos2d_extension_Attachment,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_getAttachmentForSlotIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_getAttachmentForSlotName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value slotName;
    mrb_value attachmentName;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oSS", &self, &slotName, &attachmentName)) {
      Attachment * res = cocos2d::extension::Skeleton_getAttachmentForSlotName(static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)), RSTRING_PTR(slotName), RSTRING_PTR(attachmentName));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Attachment"),
                       &mrb_type_cocos2d_extension_Attachment,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_getAttachmentForSlotName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_setAttachment(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value slotName;
    mrb_value attachmentName;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oSS", &self, &slotName, &attachmentName)) {
      int res = cocos2d::extension::Skeleton_setAttachment(static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)), RSTRING_PTR(slotName), RSTRING_PTR(attachmentName));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_setAttachment");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_setBonesToSetupPose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::Skeleton_setBonesToSetupPose(static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_setBonesToSetupPose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_setSkin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value skin;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &self, &skin)) {
      cocos2d::extension::Skeleton_setSkin(static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)), static_cast< Skin * >(cc_mrb_data_get_ptr(mrb, skin, &mrb_type_cocos2d_extension_Skin, &mrb_no_free_type_cocos2d_extension_Skin)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_setSkin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_setSkinByName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value skinName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &self, &skinName)) {
      int res = cocos2d::extension::Skeleton_setSkinByName(static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)), RSTRING_PTR(skinName));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_setSkinByName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_setSlotsToSetupPose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::Skeleton_setSlotsToSetupPose(static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_setSlotsToSetupPose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_setToSetupPose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::Skeleton_setToSetupPose(static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_setToSetupPose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_float deltaTime;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &self, &deltaTime)) {
      cocos2d::extension::Skeleton_update(static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)), deltaTime);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skeleton_updateWorldTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::Skeleton_updateWorldTransform(static_cast< struct cocos2d::extension::Skeleton * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skeleton_updateWorldTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skin__get_name(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Skin *obj_self = static_cast< cocos2d::extension::Skin * >(DATA_PTR(mrb_self));
  std::string res = obj_self->name;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_Skin_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_Skin;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::Skin * res = new cocos2d::extension::Skin();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skin#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skin_addAttachment(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_int slotIndex;
    mrb_value name;
    mrb_value attachment;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oiSo", &self, &slotIndex, &name, &attachment)) {
      cocos2d::extension::Skin_addAttachment(static_cast< Skin * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skin, &mrb_no_free_type_cocos2d_extension_Skin)), slotIndex, RSTRING_PTR(name), static_cast< Attachment * >(cc_mrb_data_get_ptr(mrb, attachment, &mrb_type_cocos2d_extension_Attachment, &mrb_no_free_type_cocos2d_extension_Attachment)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skin_addAttachment");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skin_attachAll(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value skeleton;
    mrb_value oldSkin;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &self, &skeleton, &oldSkin)) {
      cocos2d::extension::Skin_attachAll(static_cast< Skin * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skin, &mrb_no_free_type_cocos2d_extension_Skin)), static_cast< struct Skeleton * >(cc_mrb_data_get_ptr(mrb, skeleton, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)), static_cast< Skin * >(cc_mrb_data_get_ptr(mrb, oldSkin, &mrb_type_cocos2d_extension_Skin, &mrb_no_free_type_cocos2d_extension_Skin)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skin_attachAll");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skin_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      Skin * res = cocos2d::extension::Skin_create(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Skin"),
                       &mrb_type_cocos2d_extension_Skin,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skin_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skin_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::Skin_dispose(static_cast< Skin * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skin, &mrb_no_free_type_cocos2d_extension_Skin)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skin_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skin_getAttachment(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_int slotIndex;
    mrb_value name;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oiS", &self, &slotIndex, &name)) {
      Attachment * res = cocos2d::extension::Skin_getAttachment(static_cast< Skin * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skin, &mrb_no_free_type_cocos2d_extension_Skin)), slotIndex, RSTRING_PTR(name));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Attachment"),
                       &mrb_type_cocos2d_extension_Attachment,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skin_getAttachment");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Skin_getAttachmentName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_int slotIndex;
    mrb_int attachmentIndex;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oii", &self, &slotIndex, &attachmentIndex)) {
      std::string res = cocos2d::extension::Skin_getAttachmentName(static_cast< Skin * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Skin, &mrb_no_free_type_cocos2d_extension_Skin)), slotIndex, attachmentIndex);
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Skin_getAttachmentName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Slot__get_a(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Slot *obj_self = static_cast< cocos2d::extension::Slot * >(DATA_PTR(mrb_self));
  float res = obj_self->a;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Slot__set_a(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float a;
  if (1 == mrb_get_args(mrb, "f", &a)) {
    cocos2d::extension::Slot *obj_self = static_cast< cocos2d::extension::Slot * >(DATA_PTR(mrb_self));
    
    obj_self->a = a;
    return mrb_float_value(mrb, a);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Slot#a");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Slot__get_attachment(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Slot *obj_self = static_cast< cocos2d::extension::Slot * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::Attachment * res = obj_self->attachment;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Attachment"),
                       &mrb_no_free_type_cocos2d_extension_Attachment,
                       res));
}

static mrb_value
mrb_cocos2d_extension_Slot__get_b(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Slot *obj_self = static_cast< cocos2d::extension::Slot * >(DATA_PTR(mrb_self));
  float res = obj_self->b;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Slot__set_b(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float b;
  if (1 == mrb_get_args(mrb, "f", &b)) {
    cocos2d::extension::Slot *obj_self = static_cast< cocos2d::extension::Slot * >(DATA_PTR(mrb_self));
    
    obj_self->b = b;
    return mrb_float_value(mrb, b);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Slot#b");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Slot__get_bone(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Slot *obj_self = static_cast< cocos2d::extension::Slot * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::Bone * res = obj_self->bone;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Bone"),
                       &mrb_no_free_type_cocos2d_extension_Bone,
                       res));
}

static mrb_value
mrb_cocos2d_extension_Slot__get_data(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Slot *obj_self = static_cast< cocos2d::extension::Slot * >(DATA_PTR(mrb_self));
  cocos2d::extension::SlotData * res = obj_self->data;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::SlotData"),
                       &mrb_no_free_type_cocos2d_extension_SlotData,
                       res));
}

static mrb_value
mrb_cocos2d_extension_Slot__get_g(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Slot *obj_self = static_cast< cocos2d::extension::Slot * >(DATA_PTR(mrb_self));
  float res = obj_self->g;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Slot__set_g(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float g;
  if (1 == mrb_get_args(mrb, "f", &g)) {
    cocos2d::extension::Slot *obj_self = static_cast< cocos2d::extension::Slot * >(DATA_PTR(mrb_self));
    
    obj_self->g = g;
    return mrb_float_value(mrb, g);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Slot#g");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Slot__get_r(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Slot *obj_self = static_cast< cocos2d::extension::Slot * >(DATA_PTR(mrb_self));
  float res = obj_self->r;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_Slot__set_r(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float r;
  if (1 == mrb_get_args(mrb, "f", &r)) {
    cocos2d::extension::Slot *obj_self = static_cast< cocos2d::extension::Slot * >(DATA_PTR(mrb_self));
    
    obj_self->r = r;
    return mrb_float_value(mrb, r);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Slot#r");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Slot__get_skeleton(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::Slot *obj_self = static_cast< cocos2d::extension::Slot * >(DATA_PTR(mrb_self));
  struct Skeleton * res = obj_self->skeleton;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Skeleton"),
                       &mrb_no_free_type_cocos2d_extension_Skeleton,
                       res));
}

static mrb_value
mrb_cocos2d_extension_Slot_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_Slot;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::Slot * res = new cocos2d::extension::Slot();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Slot#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SlotData__get_a(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SlotData *obj_self = static_cast< cocos2d::extension::SlotData * >(DATA_PTR(mrb_self));
  float res = obj_self->a;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_SlotData__set_a(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float a;
  if (1 == mrb_get_args(mrb, "f", &a)) {
    cocos2d::extension::SlotData *obj_self = static_cast< cocos2d::extension::SlotData * >(DATA_PTR(mrb_self));
    
    obj_self->a = a;
    return mrb_float_value(mrb, a);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SlotData#a");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SlotData__get_attachmentName(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SlotData *obj_self = static_cast< cocos2d::extension::SlotData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->attachmentName;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_SlotData__get_b(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SlotData *obj_self = static_cast< cocos2d::extension::SlotData * >(DATA_PTR(mrb_self));
  float res = obj_self->b;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_SlotData__set_b(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float b;
  if (1 == mrb_get_args(mrb, "f", &b)) {
    cocos2d::extension::SlotData *obj_self = static_cast< cocos2d::extension::SlotData * >(DATA_PTR(mrb_self));
    
    obj_self->b = b;
    return mrb_float_value(mrb, b);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SlotData#b");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_extension_SlotData__get_boneData(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SlotData *obj_self = static_cast< cocos2d::extension::SlotData * >(DATA_PTR(mrb_self));
  const struct cocos2d::extension::BoneData * res = obj_self->boneData;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::BoneData"),
                       &mrb_no_free_type_cocos2d_extension_BoneData,
                       const_cast<struct cocos2d::extension::BoneData *>(res)));
}

static mrb_value
mrb_cocos2d_extension_SlotData__get_g(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SlotData *obj_self = static_cast< cocos2d::extension::SlotData * >(DATA_PTR(mrb_self));
  float res = obj_self->g;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_SlotData__set_g(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float g;
  if (1 == mrb_get_args(mrb, "f", &g)) {
    cocos2d::extension::SlotData *obj_self = static_cast< cocos2d::extension::SlotData * >(DATA_PTR(mrb_self));
    
    obj_self->g = g;
    return mrb_float_value(mrb, g);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SlotData#g");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SlotData__get_name(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SlotData *obj_self = static_cast< cocos2d::extension::SlotData * >(DATA_PTR(mrb_self));
  std::string res = obj_self->name;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_extension_SlotData__get_r(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::SlotData *obj_self = static_cast< cocos2d::extension::SlotData * >(DATA_PTR(mrb_self));
  float res = obj_self->r;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension_SlotData__set_r(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float r;
  if (1 == mrb_get_args(mrb, "f", &r)) {
    cocos2d::extension::SlotData *obj_self = static_cast< cocos2d::extension::SlotData * >(DATA_PTR(mrb_self));
    
    obj_self->r = r;
    return mrb_float_value(mrb, r);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SlotData#r");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SlotData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_SlotData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::SlotData * res = new cocos2d::extension::SlotData();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SlotData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SlotData_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    mrb_value boneData;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &name, &boneData)) {
      SlotData * res = cocos2d::extension::SlotData_create(RSTRING_PTR(name), static_cast< BoneData * >(cc_mrb_data_get_ptr(mrb, boneData, &mrb_type_cocos2d_extension_BoneData, &mrb_no_free_type_cocos2d_extension_BoneData)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::SlotData"),
                       &mrb_type_cocos2d_extension_SlotData,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SlotData_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SlotData_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::SlotData_dispose(static_cast< SlotData * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_SlotData, &mrb_no_free_type_cocos2d_extension_SlotData)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SlotData_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_SlotData_setAttachmentName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value attachmentName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &self, &attachmentName)) {
      cocos2d::extension::SlotData_setAttachmentName(static_cast< SlotData * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_SlotData, &mrb_no_free_type_cocos2d_extension_SlotData)), RSTRING_PTR(attachmentName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::SlotData_setAttachmentName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Slot_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value data;
    mrb_value skeleton;
    mrb_value bone;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &data, &skeleton, &bone)) {
      Slot * res = cocos2d::extension::Slot_create(static_cast< SlotData * >(cc_mrb_data_get_ptr(mrb, data, &mrb_type_cocos2d_extension_SlotData, &mrb_no_free_type_cocos2d_extension_SlotData)), static_cast< struct Skeleton * >(cc_mrb_data_get_ptr(mrb, skeleton, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)), static_cast< Bone * >(cc_mrb_data_get_ptr(mrb, bone, &mrb_type_cocos2d_extension_Bone, &mrb_no_free_type_cocos2d_extension_Bone)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Slot"),
                       &mrb_type_cocos2d_extension_Slot,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Slot_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Slot_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::Slot_dispose(static_cast< Slot * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Slot, &mrb_no_free_type_cocos2d_extension_Slot)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Slot_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Slot_getAttachmentTime(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      float res = cocos2d::extension::Slot_getAttachmentTime(static_cast< Slot * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Slot, &mrb_no_free_type_cocos2d_extension_Slot)));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Slot_getAttachmentTime");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Slot_setAttachment(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value attachment;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &self, &attachment)) {
      cocos2d::extension::Slot_setAttachment(static_cast< Slot * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Slot, &mrb_no_free_type_cocos2d_extension_Slot)), static_cast< Attachment * >(cc_mrb_data_get_ptr(mrb, attachment, &mrb_type_cocos2d_extension_Attachment, &mrb_no_free_type_cocos2d_extension_Attachment)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Slot_setAttachment");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Slot_setAttachmentTime(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_float time;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &self, &time)) {
      cocos2d::extension::Slot_setAttachmentTime(static_cast< Slot * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Slot, &mrb_no_free_type_cocos2d_extension_Slot)), time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Slot_setAttachmentTime");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Slot_setToSetupPose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::Slot_setToSetupPose(static_cast< Slot * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Slot, &mrb_no_free_type_cocos2d_extension_Slot)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Slot_setToSetupPose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__get_TWEEN_EASING_MAX(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::TWEEN_EASING_MAX;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_TWEEN_EASING_MIN(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::TWEEN_EASING_MIN;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_Timeline_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_Timeline;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::Timeline * res = new cocos2d::extension::Timeline();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Timeline#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Timeline_assign(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::extension::Timeline *obj_self = static_cast< cocos2d::extension::Timeline * >(DATA_PTR(mrb_self));
      struct Timeline *res = new struct Timeline(); *res = obj_self->operator=(*(static_cast< struct Timeline * >(DATA_PTR(other))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Timeline"),
                       &mrb_type_cocos2d_extension_Timeline,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Timeline#operator=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Timeline_apply(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_value skeleton;
    mrb_float time;
    mrb_float alpha;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ooff", &self, &skeleton, &time, &alpha)) {
      cocos2d::extension::Timeline_apply(static_cast< struct cocos2d::extension::Timeline * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Timeline, &mrb_no_free_type_cocos2d_extension_Timeline)), static_cast< struct Skeleton * >(cc_mrb_data_get_ptr(mrb, skeleton, &mrb_type_cocos2d_extension_Skeleton, &mrb_no_free_type_cocos2d_extension_Skeleton)), time, alpha);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Timeline_apply");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_Timeline_dispose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &self)) {
      cocos2d::extension::Timeline_dispose(static_cast< struct cocos2d::extension::Timeline * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_Timeline, &mrb_no_free_type_cocos2d_extension_Timeline)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::Timeline_dispose");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_TranslateTimeline_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int frameCount;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &frameCount)) {
      TranslateTimeline * res = cocos2d::extension::TranslateTimeline_create(frameCount);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::BaseTimeline"),
                       &mrb_type_cocos2d_extension_BaseTimeline,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::TranslateTimeline_create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_TranslateTimeline_setFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value self;
    mrb_int frameIndex;
    mrb_float time;
    mrb_float x;
    mrb_float y;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "oifff", &self, &frameIndex, &time, &x, &y)) {
      cocos2d::extension::TranslateTimeline_setFrame(static_cast< TranslateTimeline * >(cc_mrb_data_get_ptr(mrb, self, &mrb_type_cocos2d_extension_BaseTimeline, &mrb_no_free_type_cocos2d_extension_BaseTimeline)), frameIndex, time, x, y);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::TranslateTimeline_setFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__get_VERTEX_X1(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::VERTEX_X1;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_VERTEX_X2(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::VERTEX_X2;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_VERTEX_X3(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::VERTEX_X3;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_VERTEX_X4(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::VERTEX_X4;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_VERTEX_Y1(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::VERTEX_Y1;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_VERTEX_Y2(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::VERTEX_Y2;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_VERTEX_Y3(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::VERTEX_Y3;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_VERTEX_Y4(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::VERTEX_Y4;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_WebSocket_Data_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_WebSocket_Data;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::WebSocket::Data * res = new cocos2d::extension::WebSocket::Data();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::WebSocket::Data#initialize");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_extension_WebSocket_Data__get_bytes(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::WebSocket::Data *obj_self = static_cast< cocos2d::extension::WebSocket::Data * >(DATA_PTR(mrb_self));
  if (obj_self->isBinary) {
      mrb_value ary = mrb_ary_new_capa(mrb, obj_self->len);
      for (int i = 0; i < obj_self->len; ++i) {
          mrb_ary_set(mrb, ary, i, mrb_fixnum_value(obj_self->bytes[i]));
      }
      return ary;
  }
  std::string res = obj_self->bytes;
  return mrb_str_new_cstr(mrb, res.c_str());
}
static mrb_value
mrb_cocos2d_extension_WebSocket_Data__set_bytes(mrb_state *mrb, mrb_value mrb_self)
{
#if 0
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  cocos2d::extension::WebSocket::Data *obj_self = static_cast< cocos2d::extension::WebSocket::Data * >(DATA_PTR(mrb_self));

  if (1 == _argc_ && mrb_array_p(_argv_[0])) {
    mrb_value ary = _argv_[0];
    mrb_int len = mrb_ary_len(mrb, ary);
    if (len > obj_self->len) {
      CC_SAFE_DELETE_ARRAY(obj_self->bytes);
      obj_self->bytes = new char[len];
      obj_self->len = len;
    }

    obj_self->isBinary = true;
    for (mrb_int i = 0; i < len && i < obj_self->len; ++i) {
      mrb_value elem = mrb_ary_ref(mrb, ary, i);
      obj_self->bytes[i] = mrb_fixnum(elem);
    }

    return ary;
  }
  else if (1 == _argc_ && mrb_string_p(_argv_[0])) {
    struct RString *s = mrb_str_ptr(_argv_[0]);
    if (s->len + 1 > obj_self->len) {
      CC_SAFE_DELETE_ARRAY(obj_self->bytes);
      obj_self->bytes = new char[s->len + 1];
      obj_self->len = s->len + 1;
    }

    obj_self->isBinary = false;
    memcpy(obj_self->bytes, s, s->len);
    obj_self->bytes[s->len] = '\0';
    return _argv_[0];
  }
#endif
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::WebSocket::Data#bytes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_WebSocket_Data__get_isBinary(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::WebSocket::Data *obj_self = static_cast< cocos2d::extension::WebSocket::Data * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->isBinary;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_extension_WebSocket_Data__set_isBinary(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool isBinary;
  if (1 == mrb_get_args(mrb, "b", &isBinary)) {
    cocos2d::extension::WebSocket::Data *obj_self = static_cast< cocos2d::extension::WebSocket::Data * >(DATA_PTR(mrb_self));
    
    obj_self->isBinary = isBinary;
    return mrb_bool_value(isBinary);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::WebSocket::Data#isBinary");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_WebSocket_Data__get_len(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::WebSocket::Data *obj_self = static_cast< cocos2d::extension::WebSocket::Data * >(DATA_PTR(mrb_self));
  int res = obj_self->len;
  return mrb_fixnum_value(res);
}
static mrb_value
mrb_cocos2d_extension_WebSocket_Data__set_len(mrb_state *mrb, mrb_value mrb_self)
{
#if 0
  mrb_int len;
  if (1 == mrb_get_args(mrb, "i", &len)) {
    cocos2d::extension::WebSocket::Data *obj_self = static_cast< cocos2d::extension::WebSocket::Data * >(DATA_PTR(mrb_self));
    
    if (len > obj_self->len) {
      char *buf = new char[len];
      memcpy(buf, obj_self->bytes, len);
      CC_SAFE_DELETE_ARRAY(obj_self->bytes);
      obj_self->bytes = buf;
    }

    obj_self->len = len;
    return mrb_fixnum_value(len);
  }
#endif
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::WebSocket::Data#len");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_WebSocket_Delegate_onClose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value ws;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &ws)) {
      cocos2d::extension::WebSocket::Delegate *obj_self = static_cast< cocos2d::extension::WebSocket::Delegate * >(DATA_PTR(mrb_self));
      obj_self->onClose(static_cast< cocos2d::extension::WebSocket * >(cc_mrb_data_get_ptr(mrb, ws, &mrb_type_cocos2d_extension_WebSocket, &mrb_no_free_type_cocos2d_extension_WebSocket)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::WebSocket::Delegate#onClose");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_extension_WebSocket_Delegate_onError(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value ws;
    mrb_int error;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &ws, &error)) {
      cocos2d::extension::WebSocket::Delegate *obj_self = static_cast< cocos2d::extension::WebSocket::Delegate * >(DATA_PTR(mrb_self));
      obj_self->onError(static_cast< cocos2d::extension::WebSocket * >(cc_mrb_data_get_ptr(mrb, ws, &mrb_type_cocos2d_extension_WebSocket, &mrb_type_cocos2d_extension_WebSocket)), (WebSocket::ErrorCode)error);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::WebSocket::Delegate#onError");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_WebSocket_Delegate_onMessage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value ws;
    mrb_value data;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &ws, &data)) {
      cocos2d::extension::WebSocket::Delegate *obj_self = static_cast< cocos2d::extension::WebSocket::Delegate * >(DATA_PTR(mrb_self));
      obj_self->onMessage(static_cast< cocos2d::extension::WebSocket * >(cc_mrb_data_get_ptr(mrb, ws, &mrb_type_cocos2d_extension_WebSocket, &mrb_no_free_type_cocos2d_extension_WebSocket)), *(static_cast< struct cocos2d::extension::WebSocket::Data * >(cc_mrb_data_get_ptr(mrb, data, &mrb_type_cocos2d_extension_WebSocket_Data, &mrb_no_free_type_cocos2d_extension_WebSocket_Data))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::WebSocket::Delegate#onMessage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_WebSocket_Delegate_onOpen(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value ws;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &ws)) {
      cocos2d::extension::WebSocket::Delegate *obj_self = static_cast< cocos2d::extension::WebSocket::Delegate * >(DATA_PTR(mrb_self));
      obj_self->onOpen(static_cast< cocos2d::extension::WebSocket * >(cc_mrb_data_get_ptr(mrb, ws, &mrb_type_cocos2d_extension_WebSocket, &mrb_no_free_type_cocos2d_extension_WebSocket)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::WebSocket::Delegate#onOpen");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_WebSocket_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_WebSocket;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::WebSocket * res = new cocos2d::extension::WebSocket();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::WebSocket#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_WebSocket_close(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::WebSocket *obj_self = static_cast< cocos2d::extension::WebSocket * >(DATA_PTR(mrb_self));
      obj_self->close();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::WebSocket#close");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_WebSocket_getReadyState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::WebSocket *obj_self = static_cast< cocos2d::extension::WebSocket * >(DATA_PTR(mrb_self));
      enum cocos2d::extension::WebSocket::State res = obj_self->getReadyState();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::WebSocket#getReadyState");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_extension_WebSocket_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_value delegate;
  mrb_value url;
  mrb_value protocols = mrb_nil_value();
  if (2 <= mrb_get_args(mrb, "oS*", &delegate, &url, &_argv_, &_argc_) && _argc_ < 2) {
    int ok = 1;
    if (_argc_ == 1) {
      if (mrb_array_p(_argv_[0]) || mrb_nil_p(_argv_[0])) {
        protocols = _argv_[0];
      } else {
        ok = 0;
      }
    }
    if (ok) {
      std::vector<std::string> *cxx_protocols = NULL;
      if (mrb_array_p(protocols)) {
        cxx_protocols = new std::vector<std::string>();
        cc_mrb_ary_conv_to< std::vector<std::string> >(mrb, protocols, cxx_protocols);
      }
      cocos2d::extension::WebSocket *obj_self = static_cast< cocos2d::extension::WebSocket * >(DATA_PTR(mrb_self));
      cocos2d::CCObject *d = (cocos2d::CCObject *)DATA_PTR(delegate);
      _Bool res = obj_self->init(*(dynamic_cast< const class cocos2d::extension::WebSocket::Delegate * >(d)), mrb_str_to_cstr(mrb, url), cxx_protocols);

      if (cxx_protocols) {
          delete cxx_protocols;
      }

      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::WebSocket#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_WebSocket__get_kErrorConnectionFailure(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::WebSocket::kErrorConnectionFailure;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_WebSocket__get_kErrorTimeout(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::WebSocket::kErrorTimeout;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_WebSocket__get_kErrorUnknown(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::WebSocket::kErrorUnknown;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_WebSocket__get_kStateClosed(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::WebSocket::kStateClosed;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_WebSocket__get_kStateClosing(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::WebSocket::kStateClosing;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_WebSocket__get_kStateConnecting(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::WebSocket::kStateConnecting;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_WebSocket__get_kStateOpen(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::WebSocket::kStateOpen;
  return mrb_fixnum_value(res);
}
static mrb_value
mrb_cocos2d_extension_WebSocket_send(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  if (_argc_ == 1 && mrb_string_p(_argv_[0])) {
    mrb_value message = _argv_[0];
    {
      cocos2d::extension::WebSocket *obj_self = static_cast< cocos2d::extension::WebSocket * >(DATA_PTR(mrb_self));
      obj_self->send(RSTRING_PTR(message));
      return mrb_self;
    }
  }
  else if ((_argc_ == 1 || _argc_ == 2) && mrb_array_p(_argv_[0])) {
    mrb_value binaryMsg = _argv_[0];
    mrb_int len = mrb_ary_len(mrb, binaryMsg);
    int ok = 1;
    if (_argc_ == 2 && mrb_fixnum_p(_argv_[1])) {
      len = mrb_fixnum(_argv_[1]);
    }
    else {
      ok = 0;
    }
    if (ok) {
      unsigned char cxx_binaryMsg[len]; cc_mrb_ary_conv_to_c_array< unsigned char >(mrb, binaryMsg, cxx_binaryMsg, len);
      cocos2d::extension::WebSocket *obj_self = static_cast< cocos2d::extension::WebSocket * >(DATA_PTR(mrb_self));
      obj_self->send(cxx_binaryMsg, len);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::WebSocket#send");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMRubyWebSocketDelegate_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_CCMRubyWebSocketDelegate;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::CCMRubyWebSocketDelegate * res = new cocos2d::extension::CCMRubyWebSocketDelegate();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMRubyWebSocketDelegate#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMRubyWebSocketDelegate_onClose(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value ws;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &ws)) {
      cocos2d::extension::CCMRubyWebSocketDelegate *obj_self = static_cast< cocos2d::extension::CCMRubyWebSocketDelegate * >(DATA_PTR(mrb_self));
      obj_self->onClose(static_cast< cocos2d::extension::WebSocket * >(cc_mrb_data_get_ptr(mrb, ws, &mrb_type_cocos2d_extension_WebSocket, &mrb_no_free_type_cocos2d_extension_WebSocket)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMRubyWebSocketDelegate#onClose");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_extension_CCMRubyWebSocketDelegate_onError(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value ws;
    mrb_int error;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &ws, &error)) {
      cocos2d::extension::CCMRubyWebSocketDelegate *obj_self = static_cast< cocos2d::extension::CCMRubyWebSocketDelegate * >(DATA_PTR(mrb_self));
        obj_self->onError(static_cast< cocos2d::extension::WebSocket * >(cc_mrb_data_get_ptr(mrb, ws, &mrb_type_cocos2d_extension_WebSocket, &mrb_type_cocos2d_extension_WebSocket)), (WebSocket::ErrorCode)error);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMRubyWebSocketDelegate#onError");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMRubyWebSocketDelegate_onMessage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value ws;
    mrb_value data;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &ws, &data)) {
      cocos2d::extension::CCMRubyWebSocketDelegate *obj_self = static_cast< cocos2d::extension::CCMRubyWebSocketDelegate * >(DATA_PTR(mrb_self));
      obj_self->onMessage(static_cast< cocos2d::extension::WebSocket * >(cc_mrb_data_get_ptr(mrb, ws, &mrb_type_cocos2d_extension_WebSocket, &mrb_no_free_type_cocos2d_extension_WebSocket)), *(static_cast< WebSocket::Data * >(DATA_PTR(data))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMRubyWebSocketDelegate#onMessage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_CCMRubyWebSocketDelegate_onOpen(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value ws;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &ws)) {
      cocos2d::extension::CCMRubyWebSocketDelegate *obj_self = static_cast< cocos2d::extension::CCMRubyWebSocketDelegate * >(DATA_PTR(mrb_self));
      obj_self->onOpen(static_cast< cocos2d::extension::WebSocket * >(cc_mrb_data_get_ptr(mrb, ws, &mrb_type_cocos2d_extension_WebSocket, &mrb_no_free_type_cocos2d_extension_WebSocket)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::CCMRubyWebSocketDelegate#onOpen");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__AnimationState_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension__AnimationState;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::_AnimationState * res = new cocos2d::extension::_AnimationState();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::_AnimationState#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__AnimationState__get_animation(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::_AnimationState *obj_self = static_cast< cocos2d::extension::_AnimationState * >(DATA_PTR(mrb_self));
  cocos2d::extension::Animation * res = obj_self->animation;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Animation"),
                       &mrb_no_free_type_cocos2d_extension_Animation,
                       res));
}

static mrb_value
mrb_cocos2d_extension__AnimationState__get_data(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::_AnimationState *obj_self = static_cast< cocos2d::extension::_AnimationState * >(DATA_PTR(mrb_self));
  cocos2d::extension::AnimationStateData * res = obj_self->data;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::AnimationStateData"),
                       &mrb_no_free_type_cocos2d_extension_AnimationStateData,
                       res));
}

static mrb_value
mrb_cocos2d_extension__AnimationState__get_loop(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::_AnimationState *obj_self = static_cast< cocos2d::extension::_AnimationState * >(DATA_PTR(mrb_self));
  int res = obj_self->loop;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__AnimationState__set_loop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int loop;
  if (1 == mrb_get_args(mrb, "i", &loop)) {
    cocos2d::extension::_AnimationState *obj_self = static_cast< cocos2d::extension::_AnimationState * >(DATA_PTR(mrb_self));
    
    obj_self->loop = loop;
    return mrb_fixnum_value(loop);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::_AnimationState#loop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__AnimationState_assign(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::extension::_AnimationState *obj_self = static_cast< cocos2d::extension::_AnimationState * >(DATA_PTR(mrb_self));
      struct _AnimationState *res = new struct _AnimationState(); *res = obj_self->operator=(*(static_cast< struct _AnimationState * >(DATA_PTR(other))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CC_AnimationState"),
                       &mrb_type_cocos2d_extension__AnimationState,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::_AnimationState#operator=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__AnimationState__get_time(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::_AnimationState *obj_self = static_cast< cocos2d::extension::_AnimationState * >(DATA_PTR(mrb_self));
  float res = obj_self->time;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_extension__AnimationState__set_time(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float time;
  if (1 == mrb_get_args(mrb, "f", &time)) {
    cocos2d::extension::_AnimationState *obj_self = static_cast< cocos2d::extension::_AnimationState * >(DATA_PTR(mrb_self));
    
    obj_self->time = time;
    return mrb_float_value(mrb, time);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::_AnimationState#time");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__AttachmentTimeline_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension__AttachmentTimeline;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::_AttachmentTimeline * res = new cocos2d::extension::_AttachmentTimeline();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::_AttachmentTimeline#initialize");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_extension__AttachmentTimeline__get_attachmentNames(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::_AttachmentTimeline *obj_self = static_cast< cocos2d::extension::_AttachmentTimeline * >(DATA_PTR(mrb_self));
  const char **const res = obj_self->attachmentNames;
  int len = 0;
  for (len = 0; res[len] != NULL; len++) {}
  mrb_value mrb_res = mrb_ary_new(mrb);
  cc_mrb_ary_conv_from_c_array<const char *>(mrb, mrb_res, res, len);
  return mrb_res;
}

static mrb_value
mrb_cocos2d_extension__AttachmentTimeline__get_frames(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::_AttachmentTimeline *obj_self = static_cast< cocos2d::extension::_AttachmentTimeline * >(DATA_PTR(mrb_self));
  float *res = obj_self->frames;
  return cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 1), reinterpret_cast< float * >(res), 1);
}

static mrb_value
mrb_cocos2d_extension__AttachmentTimeline__get_framesLength(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::_AttachmentTimeline *obj_self = static_cast< cocos2d::extension::_AttachmentTimeline * >(DATA_PTR(mrb_self));
  int res = obj_self->framesLength;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__AttachmentTimeline_assign(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::extension::_AttachmentTimeline *obj_self = static_cast< cocos2d::extension::_AttachmentTimeline * >(DATA_PTR(mrb_self));
      struct _AttachmentTimeline *res = new struct _AttachmentTimeline(); *res = obj_self->operator=(*(static_cast< struct _AttachmentTimeline * >(DATA_PTR(other))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CC_AttachmentTimeline"),
                       &mrb_type_cocos2d_extension__AttachmentTimeline,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::_AttachmentTimeline#operator=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__AttachmentTimeline__get_slotIndex(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::_AttachmentTimeline *obj_self = static_cast< cocos2d::extension::_AttachmentTimeline * >(DATA_PTR(mrb_self));
  int res = obj_self->slotIndex;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__AttachmentTimeline__set_slotIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int slotIndex;
  if (1 == mrb_get_args(mrb, "i", &slotIndex)) {
    cocos2d::extension::_AttachmentTimeline *obj_self = static_cast< cocos2d::extension::_AttachmentTimeline * >(DATA_PTR(mrb_self));
    
    obj_self->slotIndex = slotIndex;
    return mrb_fixnum_value(slotIndex);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::_AttachmentTimeline#slotIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__AttachmentTimeline__get_super(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::_AttachmentTimeline *obj_self = static_cast< cocos2d::extension::_AttachmentTimeline * >(DATA_PTR(mrb_self));
  struct cocos2d::extension::Timeline *res = &obj_self->super;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::Timeline"),
                       &mrb_no_free_type_cocos2d_extension_Timeline,
                       res));
}

static mrb_value
mrb_cocos2d_extension__AttachmentTimeline__set_super(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value super;
  if (1 == mrb_get_args(mrb, "o", &super)) {
    cocos2d::extension::_AttachmentTimeline *obj_self = static_cast< cocos2d::extension::_AttachmentTimeline * >(DATA_PTR(mrb_self));
    
    obj_self->super = *(static_cast< struct cocos2d::extension::Timeline * >(cc_mrb_data_get_ptr(mrb, super, &mrb_type_cocos2d_extension_Timeline, &mrb_no_free_type_cocos2d_extension_Timeline)));
    return super;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::_AttachmentTimeline#super");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__ColorTimeline_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension__ColorTimeline;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::_ColorTimeline * res = new cocos2d::extension::_ColorTimeline();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::_ColorTimeline#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__ColorTimeline__get_frames(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::_ColorTimeline *obj_self = static_cast< cocos2d::extension::_ColorTimeline * >(DATA_PTR(mrb_self));
  float *res = obj_self->frames;
  return cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 1), reinterpret_cast< float * >(res), 1);
}

static mrb_value
mrb_cocos2d_extension__ColorTimeline__get_framesLength(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::_ColorTimeline *obj_self = static_cast< cocos2d::extension::_ColorTimeline * >(DATA_PTR(mrb_self));
  int res = obj_self->framesLength;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__ColorTimeline_assign(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::extension::_ColorTimeline *obj_self = static_cast< cocos2d::extension::_ColorTimeline * >(DATA_PTR(mrb_self));
      struct _ColorTimeline *res = new struct _ColorTimeline(); *res = obj_self->operator=(*(static_cast< struct _ColorTimeline * >(DATA_PTR(other))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CC_ColorTimeline"),
                       &mrb_type_cocos2d_extension__ColorTimeline,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::_ColorTimeline#operator=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__ColorTimeline__get_slotIndex(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::_ColorTimeline *obj_self = static_cast< cocos2d::extension::_ColorTimeline * >(DATA_PTR(mrb_self));
  int res = obj_self->slotIndex;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__ColorTimeline__set_slotIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int slotIndex;
  if (1 == mrb_get_args(mrb, "i", &slotIndex)) {
    cocos2d::extension::_ColorTimeline *obj_self = static_cast< cocos2d::extension::_ColorTimeline * >(DATA_PTR(mrb_self));
    
    obj_self->slotIndex = slotIndex;
    return mrb_fixnum_value(slotIndex);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::_ColorTimeline#slotIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__ColorTimeline__get_super(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::extension::_ColorTimeline *obj_self = static_cast< cocos2d::extension::_ColorTimeline * >(DATA_PTR(mrb_self));
  cocos2d::extension::CurveTimeline *res = &obj_self->super;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::Extension::CurveTimeline"),
                       &mrb_no_free_type_cocos2d_extension_CurveTimeline,
                       res));
}

static mrb_value
mrb_cocos2d_extension__ColorTimeline__set_super(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value super;
  if (1 == mrb_get_args(mrb, "o", &super)) {
    cocos2d::extension::_ColorTimeline *obj_self = static_cast< cocos2d::extension::_ColorTimeline * >(DATA_PTR(mrb_self));
    
    obj_self->super = *(static_cast< cocos2d::extension::CurveTimeline * >(cc_mrb_data_get_ptr(mrb, super, &mrb_type_cocos2d_extension_CurveTimeline, &mrb_no_free_type_cocos2d_extension_CurveTimeline)));
    return super;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::_ColorTimeline#super");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_ccColor3BWapper_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value color;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &color)) {
      class cocos2d::extension::ccColor3BWapper * res = cocos2d::extension::ccColor3BWapper::create(*(static_cast< ccColor3B * >(DATA_PTR(color))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_extension_ccColor3BWapper,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::ccColor3BWapper::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_ccColor3BWapper_getColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::extension::ccColor3BWapper *obj_self = static_cast< cocos2d::extension::ccColor3BWapper * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::ccColor3BWapper#getColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_ccColor3BWapper_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_extension_ccColor3BWapper;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::extension::ccColor3BWapper * res = new cocos2d::extension::ccColor3BWapper();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::ccColor3BWapper#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension_getAbsolutePosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pt;
    mrb_int nType;
    mrb_value containerSize;
    mrb_value pPropName;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oioS", &pt, &nType, &containerSize, &pPropName)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::extension::getAbsolutePosition(*(static_cast< cocos2d::CCPoint * >(DATA_PTR(pt))), nType, *(static_cast< cocos2d::CCSize * >(DATA_PTR(containerSize))), RSTRING_PTR(pPropName));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::getAbsolutePosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_extension__get_kArrayValue(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kArrayValue;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kBoolValue(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kBoolValue;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kCCControlStepperPartMinus(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kCCControlStepperPartMinus;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kCCControlStepperPartNone(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kCCControlStepperPartNone;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kCCControlStepperPartPlus(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kCCControlStepperPartPlus;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kCCScrollViewDirectionBoth(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kCCScrollViewDirectionBoth;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kCCScrollViewDirectionHorizontal(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kCCScrollViewDirectionHorizontal;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kCCScrollViewDirectionNone(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kCCScrollViewDirectionNone;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kCCScrollViewDirectionVertical(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kCCScrollViewDirectionVertical;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kCCTableViewFillBottomUp(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kCCTableViewFillBottomUp;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kCCTableViewFillTopDown(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kCCTableViewFillTopDown;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kEditBoxInputFlagInitialCapsAllCharacters(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kEditBoxInputFlagInitialCapsAllCharacters;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kEditBoxInputFlagInitialCapsSentence(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kEditBoxInputFlagInitialCapsSentence;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kEditBoxInputFlagInitialCapsWord(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kEditBoxInputFlagInitialCapsWord;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kEditBoxInputFlagPassword(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kEditBoxInputFlagPassword;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kEditBoxInputFlagSensitive(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kEditBoxInputFlagSensitive;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kEditBoxInputModeAny(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kEditBoxInputModeAny;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kEditBoxInputModeDecimal(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kEditBoxInputModeDecimal;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kEditBoxInputModeEmailAddr(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kEditBoxInputModeEmailAddr;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kEditBoxInputModeNumeric(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kEditBoxInputModeNumeric;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kEditBoxInputModePhoneNumber(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kEditBoxInputModePhoneNumber;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kEditBoxInputModeSingleLine(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kEditBoxInputModeSingleLine;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kEditBoxInputModeUrl(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kEditBoxInputModeUrl;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kFloatValue(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kFloatValue;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kIntValue(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kIntValue;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kKeyboardReturnTypeDefault(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kKeyboardReturnTypeDefault;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kKeyboardReturnTypeDone(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kKeyboardReturnTypeDone;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kKeyboardReturnTypeGo(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kKeyboardReturnTypeGo;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kKeyboardReturnTypeSearch(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kKeyboardReturnTypeSearch;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kKeyboardReturnTypeSend(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kKeyboardReturnTypeSend;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kStringValue(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kStringValue;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension__get_kUnsignedCharValue(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::extension::kUnsignedCharValue;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_extension_setRelativeScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pNode;
    mrb_float fScaleX;
    mrb_float fScaleY;
    mrb_int nType;
    mrb_value pPropName;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "offiS", &pNode, &fScaleX, &fScaleY, &nType, &pPropName)) {
      cocos2d::extension::setRelativeScale(static_cast< cocos2d::CCNode * >(DATA_PTR(pNode)), fScaleX, fScaleY, nType, RSTRING_PTR(pPropName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::extension::setRelativeScale");
  return mrb_nil_value();
}

void
mrb_init_cocos2d_extension(mrb_state *mrb)
{
  struct RClass *rc = NULL;
  struct RClass *cur_rc = NULL;
  struct RClass *base_rc = NULL;

  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;
  DONE;

  rc = _define_class_cocos2d_extension(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  mrb_define_const(mrb, cur_rc, "ANIMATION_LOOP_BACK", mrb_cocos2d_extension__get_ANIMATION_LOOP_BACK(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ANIMATION_LOOP_FRONT", mrb_cocos2d_extension__get_ANIMATION_LOOP_FRONT(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ANIMATION_MAX", mrb_cocos2d_extension__get_ANIMATION_MAX(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ANIMATION_NO_LOOP", mrb_cocos2d_extension__get_ANIMATION_NO_LOOP(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ANIMATION_TO_LOOP_BACK", mrb_cocos2d_extension__get_ANIMATION_TO_LOOP_BACK(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ANIMATION_TO_LOOP_FRONT", mrb_cocos2d_extension__get_ANIMATION_TO_LOOP_FRONT(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_ALPHA", mrb_cocos2d_extension__get_ATLAS_ALPHA(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_CLAMPTOEDGE", mrb_cocos2d_extension__get_ATLAS_CLAMPTOEDGE(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_INTENSITY", mrb_cocos2d_extension__get_ATLAS_INTENSITY(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_LINEAR", mrb_cocos2d_extension__get_ATLAS_LINEAR(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_LUMINANCE_ALPHA", mrb_cocos2d_extension__get_ATLAS_LUMINANCE_ALPHA(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_MIPMAP", mrb_cocos2d_extension__get_ATLAS_MIPMAP(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_MIPMAP_LINEAR_LINEAR", mrb_cocos2d_extension__get_ATLAS_MIPMAP_LINEAR_LINEAR(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_MIPMAP_LINEAR_NEAREST", mrb_cocos2d_extension__get_ATLAS_MIPMAP_LINEAR_NEAREST(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_MIPMAP_NEAREST_LINEAR", mrb_cocos2d_extension__get_ATLAS_MIPMAP_NEAREST_LINEAR(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_MIPMAP_NEAREST_NEAREST", mrb_cocos2d_extension__get_ATLAS_MIPMAP_NEAREST_NEAREST(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_MIRROREDREPEAT", mrb_cocos2d_extension__get_ATLAS_MIRROREDREPEAT(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_NEAREST", mrb_cocos2d_extension__get_ATLAS_NEAREST(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_REPEAT", mrb_cocos2d_extension__get_ATLAS_REPEAT(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_RGB565", mrb_cocos2d_extension__get_ATLAS_RGB565(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_RGB888", mrb_cocos2d_extension__get_ATLAS_RGB888(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_RGBA4444", mrb_cocos2d_extension__get_ATLAS_RGBA4444(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATLAS_RGBA8888", mrb_cocos2d_extension__get_ATLAS_RGBA8888(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATTACHMENT_REGION", mrb_cocos2d_extension__get_ATTACHMENT_REGION(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ATTACHMENT_REGION_SEQUENCE", mrb_cocos2d_extension__get_ATTACHMENT_REGION_SEQUENCE(mrb, mrb_obj_value(cur_rc)));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_Animation(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::Animation");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "duration", mrb_cocos2d_extension_Animation__get_duration, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "duration=", mrb_cocos2d_extension_Animation__set_duration, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "name", mrb_cocos2d_extension_Animation__get_name, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "timelineCount", mrb_cocos2d_extension_Animation__get_timelineCount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "timelineCount=", mrb_cocos2d_extension_Animation__set_timelineCount, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "timelines", mrb_cocos2d_extension_Animation__get_timelines, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "timelines=", mrb_cocos2d_extension_Animation__set_timelines, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_Animation_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_AnimationStateData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::AnimationStateData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "skeletonData", mrb_cocos2d_extension_AnimationStateData__get_skeletonData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_AnimationStateData_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "AnimationStateData_create", mrb_cocos2d_extension_AnimationStateData_create, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "AnimationStateData_dispose", mrb_cocos2d_extension_AnimationStateData_dispose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "AnimationStateData_getMix", mrb_cocos2d_extension_AnimationStateData_getMix, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "AnimationStateData_setMix", mrb_cocos2d_extension_AnimationStateData_setMix, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "AnimationStateData_setMixByName", mrb_cocos2d_extension_AnimationStateData_setMixByName, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "AnimationState_addAnimation", mrb_cocos2d_extension_AnimationState_addAnimation, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "AnimationState_addAnimationByName", mrb_cocos2d_extension_AnimationState_addAnimationByName, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "AnimationState_apply", mrb_cocos2d_extension_AnimationState_apply, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "AnimationState_clearAnimation", mrb_cocos2d_extension_AnimationState_clearAnimation, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "AnimationState_create", mrb_cocos2d_extension_AnimationState_create, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "AnimationState_dispose", mrb_cocos2d_extension_AnimationState_dispose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "AnimationState_isComplete", mrb_cocos2d_extension_AnimationState_isComplete, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "AnimationState_setAnimation", mrb_cocos2d_extension_AnimationState_setAnimation, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "AnimationState_setAnimationByName", mrb_cocos2d_extension_AnimationState_setAnimationByName, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "AnimationState_update", mrb_cocos2d_extension_AnimationState_update, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "Animation_apply", mrb_cocos2d_extension_Animation_apply, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "Animation_create", mrb_cocos2d_extension_Animation_create, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "Animation_dispose", mrb_cocos2d_extension_Animation_dispose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Animation_mix", mrb_cocos2d_extension_Animation_mix, MRB_ARGS_REQ(5));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_Atlas(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::Atlas");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "pages", mrb_cocos2d_extension_Atlas__get_pages, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pages=", mrb_cocos2d_extension_Atlas__set_pages, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "regions", mrb_cocos2d_extension_Atlas__get_regions, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "regions=", mrb_cocos2d_extension_Atlas__set_regions, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_Atlas_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_AtlasAttachmentLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::AtlasAttachmentLoader");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "atlas", mrb_cocos2d_extension_AtlasAttachmentLoader__get_atlas, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "atlas=", mrb_cocos2d_extension_AtlasAttachmentLoader__set_atlas, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "super", mrb_cocos2d_extension_AtlasAttachmentLoader__get_super, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "super=", mrb_cocos2d_extension_AtlasAttachmentLoader__set_super, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_AtlasAttachmentLoader_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "AtlasAttachmentLoader_create", mrb_cocos2d_extension_AtlasAttachmentLoader_create, MRB_ARGS_REQ(1));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_AtlasPage(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::AtlasPage");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "format", mrb_cocos2d_extension_AtlasPage__get_format, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "format=", mrb_cocos2d_extension_AtlasPage__set_format, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "height", mrb_cocos2d_extension_AtlasPage__get_height, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "height=", mrb_cocos2d_extension_AtlasPage__set_height, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "magFilter", mrb_cocos2d_extension_AtlasPage__get_magFilter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "magFilter=", mrb_cocos2d_extension_AtlasPage__set_magFilter, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "minFilter", mrb_cocos2d_extension_AtlasPage__get_minFilter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "minFilter=", mrb_cocos2d_extension_AtlasPage__set_minFilter, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "name", mrb_cocos2d_extension_AtlasPage__get_name, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "name=", mrb_cocos2d_extension_AtlasPage__set_name, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "next", mrb_cocos2d_extension_AtlasPage__get_next, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "next=", mrb_cocos2d_extension_AtlasPage__set_next, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "uWrap", mrb_cocos2d_extension_AtlasPage__get_uWrap, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "uWrap=", mrb_cocos2d_extension_AtlasPage__set_uWrap, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "vWrap", mrb_cocos2d_extension_AtlasPage__get_vWrap, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "vWrap=", mrb_cocos2d_extension_AtlasPage__set_vWrap, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "width", mrb_cocos2d_extension_AtlasPage__get_width, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "width=", mrb_cocos2d_extension_AtlasPage__set_width, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_AtlasPage_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "AtlasPage_create", mrb_cocos2d_extension_AtlasPage_create, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "AtlasPage_dispose", mrb_cocos2d_extension_AtlasPage_dispose, MRB_ARGS_REQ(1));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_AtlasRegion(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::AtlasRegion");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "flip", mrb_cocos2d_extension_AtlasRegion__get_flip, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "flip=", mrb_cocos2d_extension_AtlasRegion__set_flip, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "height", mrb_cocos2d_extension_AtlasRegion__get_height, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "height=", mrb_cocos2d_extension_AtlasRegion__set_height, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "index", mrb_cocos2d_extension_AtlasRegion__get_index, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "index=", mrb_cocos2d_extension_AtlasRegion__set_index, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "name", mrb_cocos2d_extension_AtlasRegion__get_name, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "name=", mrb_cocos2d_extension_AtlasRegion__set_name, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "next", mrb_cocos2d_extension_AtlasRegion__get_next, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "next=", mrb_cocos2d_extension_AtlasRegion__set_next, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "offsetX", mrb_cocos2d_extension_AtlasRegion__get_offsetX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "offsetX=", mrb_cocos2d_extension_AtlasRegion__set_offsetX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "offsetY", mrb_cocos2d_extension_AtlasRegion__get_offsetY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "offsetY=", mrb_cocos2d_extension_AtlasRegion__set_offsetY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "originalHeight", mrb_cocos2d_extension_AtlasRegion__get_originalHeight, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "originalHeight=", mrb_cocos2d_extension_AtlasRegion__set_originalHeight, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "originalWidth", mrb_cocos2d_extension_AtlasRegion__get_originalWidth, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "originalWidth=", mrb_cocos2d_extension_AtlasRegion__set_originalWidth, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "pads", mrb_cocos2d_extension_AtlasRegion__get_pads, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pads=", mrb_cocos2d_extension_AtlasRegion__set_pads, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "page", mrb_cocos2d_extension_AtlasRegion__get_page, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "page=", mrb_cocos2d_extension_AtlasRegion__set_page, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "rotate", mrb_cocos2d_extension_AtlasRegion__get_rotate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "rotate=", mrb_cocos2d_extension_AtlasRegion__set_rotate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "splits", mrb_cocos2d_extension_AtlasRegion__get_splits, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "splits=", mrb_cocos2d_extension_AtlasRegion__set_splits, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "u", mrb_cocos2d_extension_AtlasRegion__get_u, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "u=", mrb_cocos2d_extension_AtlasRegion__set_u, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "u2", mrb_cocos2d_extension_AtlasRegion__get_u2, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "u2=", mrb_cocos2d_extension_AtlasRegion__set_u2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "v", mrb_cocos2d_extension_AtlasRegion__get_v, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "v=", mrb_cocos2d_extension_AtlasRegion__set_v, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "v2", mrb_cocos2d_extension_AtlasRegion__get_v2, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "v2=", mrb_cocos2d_extension_AtlasRegion__set_v2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "width", mrb_cocos2d_extension_AtlasRegion__get_width, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "width=", mrb_cocos2d_extension_AtlasRegion__set_width, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "x", mrb_cocos2d_extension_AtlasRegion__get_x, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "x=", mrb_cocos2d_extension_AtlasRegion__set_x, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "y", mrb_cocos2d_extension_AtlasRegion__get_y, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "y=", mrb_cocos2d_extension_AtlasRegion__set_y, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_AtlasRegion_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "AtlasRegion_create", mrb_cocos2d_extension_AtlasRegion_create, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "AtlasRegion_dispose", mrb_cocos2d_extension_AtlasRegion_dispose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Atlas_dispose", mrb_cocos2d_extension_Atlas_dispose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Atlas_findRegion", mrb_cocos2d_extension_Atlas_findRegion, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "Atlas_readAtlas", mrb_cocos2d_extension_Atlas_readAtlas, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "Atlas_readAtlasFile", mrb_cocos2d_extension_Atlas_readAtlasFile, MRB_ARGS_REQ(1));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_Attachment(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::Attachment");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_Attachment_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "name", mrb_cocos2d_extension_Attachment__get_name, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "operator=", mrb_cocos2d_extension_Attachment_assign, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "type", mrb_cocos2d_extension_Attachment__get_type, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "type=", mrb_cocos2d_extension_Attachment__set_type, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_AttachmentLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::AttachmentLoader");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_AttachmentLoader_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "error1", mrb_cocos2d_extension_AttachmentLoader__get_error1, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "error1=", mrb_cocos2d_extension_AttachmentLoader__set_error1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "error2", mrb_cocos2d_extension_AttachmentLoader__get_error2, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "error2=", mrb_cocos2d_extension_AttachmentLoader__set_error2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "operator=", mrb_cocos2d_extension_AttachmentLoader_assign, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "AttachmentLoader_dispose", mrb_cocos2d_extension_AttachmentLoader_dispose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "AttachmentLoader_newAttachment", mrb_cocos2d_extension_AttachmentLoader_newAttachment, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "AttachmentTimeline_create", mrb_cocos2d_extension_AttachmentTimeline_create, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "AttachmentTimeline_setFrame", mrb_cocos2d_extension_AttachmentTimeline_setFrame, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "Attachment_dispose", mrb_cocos2d_extension_Attachment_dispose, MRB_ARGS_REQ(1));
  mrb_define_const(mrb, cur_rc, "Back_EaseIn", mrb_cocos2d_extension__get_Back_EaseIn(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Back_EaseInOut", mrb_cocos2d_extension__get_Back_EaseInOut(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Back_EaseOut", mrb_cocos2d_extension__get_Back_EaseOut(mrb, mrb_obj_value(cur_rc)));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_BaseTimeline(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::BaseTimeline");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_BaseTimeline_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "boneIndex", mrb_cocos2d_extension_BaseTimeline__get_boneIndex, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "boneIndex=", mrb_cocos2d_extension_BaseTimeline__set_boneIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "frames", mrb_cocos2d_extension_BaseTimeline__get_frames, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "framesLength", mrb_cocos2d_extension_BaseTimeline__get_framesLength, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "operator=", mrb_cocos2d_extension_BaseTimeline_assign, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "super", mrb_cocos2d_extension_BaseTimeline__get_super, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "super=", mrb_cocos2d_extension_BaseTimeline__set_super, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_BlockCCControlData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::BlockCCControlData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "mControlEvents", mrb_cocos2d_extension_BlockCCControlData__get_mControlEvents, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "mControlEvents=", mrb_cocos2d_extension_BlockCCControlData__set_mControlEvents, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "mTarget", mrb_cocos2d_extension_BlockCCControlData__get_mTarget, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "mTarget=", mrb_cocos2d_extension_BlockCCControlData__set_mTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_BlockCCControlData_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_BlockData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::BlockData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "mTarget", mrb_cocos2d_extension_BlockData__get_mTarget, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "mTarget=", mrb_cocos2d_extension_BlockData__set_mTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_BlockData_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_Bone(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::Bone");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "data", mrb_cocos2d_extension_Bone__get_data, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m00", mrb_cocos2d_extension_Bone__get_m00, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m01", mrb_cocos2d_extension_Bone__get_m01, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m10", mrb_cocos2d_extension_Bone__get_m10, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m11", mrb_cocos2d_extension_Bone__get_m11, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "parent", mrb_cocos2d_extension_Bone__get_parent, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "rotation", mrb_cocos2d_extension_Bone__get_rotation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "rotation=", mrb_cocos2d_extension_Bone__set_rotation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "scaleX", mrb_cocos2d_extension_Bone__get_scaleX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "scaleX=", mrb_cocos2d_extension_Bone__set_scaleX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "scaleY", mrb_cocos2d_extension_Bone__get_scaleY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "scaleY=", mrb_cocos2d_extension_Bone__set_scaleY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "worldRotation", mrb_cocos2d_extension_Bone__get_worldRotation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "worldScaleX", mrb_cocos2d_extension_Bone__get_worldScaleX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "worldScaleY", mrb_cocos2d_extension_Bone__get_worldScaleY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "worldX", mrb_cocos2d_extension_Bone__get_worldX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "worldY", mrb_cocos2d_extension_Bone__get_worldY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "x", mrb_cocos2d_extension_Bone__get_x, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "x=", mrb_cocos2d_extension_Bone__set_x, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "y", mrb_cocos2d_extension_Bone__get_y, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "y=", mrb_cocos2d_extension_Bone__set_y, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_Bone_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_BoneData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::BoneData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "length", mrb_cocos2d_extension_BoneData__get_length, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "length=", mrb_cocos2d_extension_BoneData__set_length, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "name", mrb_cocos2d_extension_BoneData__get_name, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "parent", mrb_cocos2d_extension_BoneData__get_parent, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "rotation", mrb_cocos2d_extension_BoneData__get_rotation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "rotation=", mrb_cocos2d_extension_BoneData__set_rotation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "scaleX", mrb_cocos2d_extension_BoneData__get_scaleX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "scaleX=", mrb_cocos2d_extension_BoneData__set_scaleX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "scaleY", mrb_cocos2d_extension_BoneData__get_scaleY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "scaleY=", mrb_cocos2d_extension_BoneData__set_scaleY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "x", mrb_cocos2d_extension_BoneData__get_x, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "x=", mrb_cocos2d_extension_BoneData__set_x, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "y", mrb_cocos2d_extension_BoneData__get_y, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "y=", mrb_cocos2d_extension_BoneData__set_y, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_BoneData_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "BoneData_create", mrb_cocos2d_extension_BoneData_create, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "BoneData_dispose", mrb_cocos2d_extension_BoneData_dispose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Bone_create", mrb_cocos2d_extension_Bone_create, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "Bone_dispose", mrb_cocos2d_extension_Bone_dispose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Bone_setToSetupPose", mrb_cocos2d_extension_Bone_setToSetupPose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Bone_setYDown", mrb_cocos2d_extension_Bone_setYDown, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Bone_updateWorldTransform", mrb_cocos2d_extension_Bone_updateWorldTransform, MRB_ARGS_REQ(3));
  mrb_define_const(mrb, cur_rc, "Bounce_EaseIn", mrb_cocos2d_extension__get_Bounce_EaseIn(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Bounce_EaseInOut", mrb_cocos2d_extension__get_Bounce_EaseInOut(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Bounce_EaseOut", mrb_cocos2d_extension__get_Bounce_EaseOut(mrb, mrb_obj_value(cur_rc)));

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCAnimationData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCAnimationData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCAnimationData_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addMovement", mrb_cocos2d_extension_CCAnimationData_addMovement, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCAnimationData_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMovement", mrb_cocos2d_extension_CCAnimationData_getMovement, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getMovementCount", mrb_cocos2d_extension_CCAnimationData_getMovementCount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "movementDataDic", mrb_cocos2d_extension_CCAnimationData__get_movementDataDic, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "movementDataDic=", mrb_cocos2d_extension_CCAnimationData__set_movementDataDic, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "movementNames", mrb_cocos2d_extension_CCAnimationData__get_movementNames, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "movementNames=", mrb_cocos2d_extension_CCAnimationData__set_movementNames, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "name", mrb_cocos2d_extension_CCAnimationData__get_name, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "name=", mrb_cocos2d_extension_CCAnimationData__set_name, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "release", mrb_cocos2d_extension_CCAnimationData_release, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "retain", mrb_cocos2d_extension_CCAnimationData_retain, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNodeRGBA") == 0) {
    _define_class_cocos2d_CCNodeRGBA(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCBlendProtocol") == 0) {
    _define_class_cocos2d_CCBlendProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCArmature(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCBlendProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCArmature");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCArmature_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addBone", mrb_cocos2d_extension_CCArmature_addBone, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "boundingBox", mrb_cocos2d_extension_CCArmature_boundingBox, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "changeBoneParent", mrb_cocos2d_extension_CCArmature_changeBoneParent, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCArmature_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_extension_CCArmature_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAnimation", mrb_cocos2d_extension_CCArmature_getAnimation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBatchNode", mrb_cocos2d_extension_CCArmature_getBatchNode, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBlendFunc", mrb_cocos2d_extension_CCArmature_getBlendFunc, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBone", mrb_cocos2d_extension_CCArmature_getBone, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getBoneAtPoint", mrb_cocos2d_extension_CCArmature_getBoneAtPoint, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getBoneDic", mrb_cocos2d_extension_CCArmature_getBoneDic, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCCArmatureData", mrb_cocos2d_extension_CCArmature_getCCArmatureData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getName", mrb_cocos2d_extension_CCArmature_getName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getParentBone", mrb_cocos2d_extension_CCArmature_getParentBone, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTextureAtlas", mrb_cocos2d_extension_CCArmature_getTextureAtlas, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCArmature_init, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "nodeToParentTransform", mrb_cocos2d_extension_CCArmature_nodeToParentTransform, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeBone", mrb_cocos2d_extension_CCArmature_removeBone, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setAnimation", mrb_cocos2d_extension_CCArmature_setAnimation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBatchNode", mrb_cocos2d_extension_CCArmature_setBatchNode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBlendFunc", mrb_cocos2d_extension_CCArmature_setBlendFunc, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setCCArmatureData", mrb_cocos2d_extension_CCArmature_setCCArmatureData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setName", mrb_cocos2d_extension_CCArmature_setName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setParentBone", mrb_cocos2d_extension_CCArmature_setParentBone, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTextureAtlas", mrb_cocos2d_extension_CCArmature_setTextureAtlas, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_extension_CCArmature_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateOffsetPoint", mrb_cocos2d_extension_CCArmature_updateOffsetPoint, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "visit", mrb_cocos2d_extension_CCArmature_visit, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCProcessBase") == 0) {
    _define_class_cocos2d_extension_CCProcessBase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCProcessBase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCArmatureAnimation(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCArmatureAnimation");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCArmatureAnimation_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCArmatureAnimation_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getAnimationData", mrb_cocos2d_extension_CCArmatureAnimation_getAnimationData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMovementCount", mrb_cocos2d_extension_CCArmatureAnimation_getMovementCount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCArmatureAnimation_init, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_iPrevFrameIndex", mrb_cocos2d_extension_CCArmatureAnimation__get_m_iPrevFrameIndex, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_iPrevFrameIndex=", mrb_cocos2d_extension_CCArmatureAnimation__set_m_iPrevFrameIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_iToIndex", mrb_cocos2d_extension_CCArmatureAnimation__get_m_iToIndex, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_iToIndex=", mrb_cocos2d_extension_CCArmatureAnimation__set_m_iToIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pArmature", mrb_cocos2d_extension_CCArmatureAnimation__get_m_pArmature, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pArmature=", mrb_cocos2d_extension_CCArmatureAnimation__set_m_pArmature, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pMovementData", mrb_cocos2d_extension_CCArmatureAnimation__get_m_pMovementData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pMovementData=", mrb_cocos2d_extension_CCArmatureAnimation__set_m_pMovementData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pTweenList", mrb_cocos2d_extension_CCArmatureAnimation__get_m_pTweenList, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pTweenList=", mrb_cocos2d_extension_CCArmatureAnimation__set_m_pTweenList, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_strMovementID", mrb_cocos2d_extension_CCArmatureAnimation__get_m_strMovementID, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_strMovementID=", mrb_cocos2d_extension_CCArmatureAnimation__set_m_strMovementID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "pause", mrb_cocos2d_extension_CCArmatureAnimation_pause, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "play", mrb_cocos2d_extension_CCArmatureAnimation_play, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, cur_rc, "playByIndex", mrb_cocos2d_extension_CCArmatureAnimation_playByIndex, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, cur_rc, "resume", mrb_cocos2d_extension_CCArmatureAnimation_resume, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAnimationData", mrb_cocos2d_extension_CCArmatureAnimation_setAnimationData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAnimationScale", mrb_cocos2d_extension_CCArmatureAnimation_setAnimationScale, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stop", mrb_cocos2d_extension_CCArmatureAnimation_stop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_extension_CCArmatureAnimation_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCArmatureData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCArmatureData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCArmatureData_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addBoneData", mrb_cocos2d_extension_CCArmatureData_addBoneData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "boneDataDic", mrb_cocos2d_extension_CCArmatureData__get_boneDataDic, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "boneDataDic=", mrb_cocos2d_extension_CCArmatureData__set_boneDataDic, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "boneList", mrb_cocos2d_extension_CCArmatureData__get_boneList, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "boneList=", mrb_cocos2d_extension_CCArmatureData__set_boneList, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCArmatureData_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBoneData", mrb_cocos2d_extension_CCArmatureData_getBoneData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCArmatureData_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "name", mrb_cocos2d_extension_CCArmatureData__get_name, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "name=", mrb_cocos2d_extension_CCArmatureData__set_name, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCArmatureDataManager(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCArmatureDataManager");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "addAnimationData", mrb_cocos2d_extension_CCArmatureDataManager_addAnimationData, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "addArmatureData", mrb_cocos2d_extension_CCArmatureDataManager_addArmatureData, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "addArmatureFileInfo", mrb_cocos2d_extension_CCArmatureDataManager_addArmatureFileInfo, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "addSpriteFrameFromFile", mrb_cocos2d_extension_CCArmatureDataManager_addSpriteFrameFromFile, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "addTextureData", mrb_cocos2d_extension_CCArmatureDataManager_addTextureData, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getAnimationData", mrb_cocos2d_extension_CCArmatureDataManager_getAnimationData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getAnimationDatas", mrb_cocos2d_extension_CCArmatureDataManager_getAnimationDatas, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getArmarureDatas", mrb_cocos2d_extension_CCArmatureDataManager_getArmarureDatas, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getArmatureData", mrb_cocos2d_extension_CCArmatureDataManager_getArmatureData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getTextureData", mrb_cocos2d_extension_CCArmatureDataManager_getTextureData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getTextureDatas", mrb_cocos2d_extension_CCArmatureDataManager_getTextureDatas, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCArmatureDataManager_init, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "purgeArmatureSystem", mrb_cocos2d_extension_CCArmatureDataManager_purgeArmatureSystem, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeAll", mrb_cocos2d_extension_CCArmatureDataManager_removeAll, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "sharedArmatureDataManager", mrb_cocos2d_extension_CCArmatureDataManager_sharedArmatureDataManager, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCDisplayData") == 0) {
    _define_class_cocos2d_extension_CCDisplayData(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDisplayData"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCArmatureDisplayData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCArmatureDisplayData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCArmatureDisplayData_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copy", mrb_cocos2d_extension_CCArmatureDisplayData_copy, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCArmatureDisplayData_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "displayName", mrb_cocos2d_extension_CCArmatureDisplayData__get_displayName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "displayName=", mrb_cocos2d_extension_CCArmatureDisplayData__set_displayName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setParam", mrb_cocos2d_extension_CCArmatureDisplayData_setParam, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCArray") == 0) {
    _define_class_cocos2d_CCArray(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCArray"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCArrayForObjectSorting(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCArrayForObjectSorting");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCArrayForObjectSorting_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "indexOfSortedObject", mrb_cocos2d_extension_CCArrayForObjectSorting_indexOfSortedObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "insertSortedObject", mrb_cocos2d_extension_CCArrayForObjectSorting_insertSortedObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeSortedObject", mrb_cocos2d_extension_CCArrayForObjectSorting_removeSortedObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setObjectID_ofSortedObject", mrb_cocos2d_extension_CCArrayForObjectSorting_setObjectID_ofSortedObject, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBAnimationManager(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBAnimationManager");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBAnimationManager_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "actionForCallbackChannel", mrb_cocos2d_extension_CCBAnimationManager_actionForCallbackChannel, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "actionForSoundChannel", mrb_cocos2d_extension_CCBAnimationManager_actionForSoundChannel, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addDocumentCallbackName", mrb_cocos2d_extension_CCBAnimationManager_addDocumentCallbackName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addDocumentCallbackNode", mrb_cocos2d_extension_CCBAnimationManager_addDocumentCallbackNode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addDocumentOutletName", mrb_cocos2d_extension_CCBAnimationManager_addDocumentOutletName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addDocumentOutletNode", mrb_cocos2d_extension_CCBAnimationManager_addDocumentOutletNode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addNode", mrb_cocos2d_extension_CCBAnimationManager_addNode, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "debug", mrb_cocos2d_extension_CCBAnimationManager_debug, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAutoPlaySequenceId", mrb_cocos2d_extension_CCBAnimationManager_getAutoPlaySequenceId, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getContainerSize", mrb_cocos2d_extension_CCBAnimationManager_getContainerSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getDelegate", mrb_cocos2d_extension_CCBAnimationManager_getDelegate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDocumentCallbackNames", mrb_cocos2d_extension_CCBAnimationManager_getDocumentCallbackNames, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDocumentCallbackNodes", mrb_cocos2d_extension_CCBAnimationManager_getDocumentCallbackNodes, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDocumentControllerName", mrb_cocos2d_extension_CCBAnimationManager_getDocumentControllerName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDocumentOutletNames", mrb_cocos2d_extension_CCBAnimationManager_getDocumentOutletNames, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDocumentOutletNodes", mrb_cocos2d_extension_CCBAnimationManager_getDocumentOutletNodes, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getKeyframeCallbacks", mrb_cocos2d_extension_CCBAnimationManager_getKeyframeCallbacks, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getLastCompletedSequenceName", mrb_cocos2d_extension_CCBAnimationManager_getLastCompletedSequenceName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRootContainerSize", mrb_cocos2d_extension_CCBAnimationManager_getRootContainerSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRootNode", mrb_cocos2d_extension_CCBAnimationManager_getRootNode, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRunningSequenceName", mrb_cocos2d_extension_CCBAnimationManager_getRunningSequenceName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSequences", mrb_cocos2d_extension_CCBAnimationManager_getSequences, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCBAnimationManager_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "jsControlled", mrb_cocos2d_extension_CCBAnimationManager__get_jsControlled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "jsControlled=", mrb_cocos2d_extension_CCBAnimationManager__set_jsControlled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "mOwner", mrb_cocos2d_extension_CCBAnimationManager__get_mOwner, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "mOwner=", mrb_cocos2d_extension_CCBAnimationManager__set_mOwner, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "moveAnimationsFromNode", mrb_cocos2d_extension_CCBAnimationManager_moveAnimationsFromNode, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "removeCallFunc", mrb_cocos2d_extension_CCBAnimationManager_removeCallFunc, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "runAnimations", mrb_cocos2d_extension_CCBAnimationManager_runAnimations, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "runAnimationsForSequenceIdTweenDuration", mrb_cocos2d_extension_CCBAnimationManager_runAnimationsForSequenceIdTweenDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "runAnimationsForSequenceNamed", mrb_cocos2d_extension_CCBAnimationManager_runAnimationsForSequenceNamed, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "runAnimationsForSequenceNamedTweenDuration", mrb_cocos2d_extension_CCBAnimationManager_runAnimationsForSequenceNamedTweenDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setAnimationCompletedCallback", mrb_cocos2d_extension_CCBAnimationManager_setAnimationCompletedCallback, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setAutoPlaySequenceId", mrb_cocos2d_extension_CCBAnimationManager_setAutoPlaySequenceId, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBaseValue", mrb_cocos2d_extension_CCBAnimationManager_setBaseValue, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setCallFunc", mrb_cocos2d_extension_CCBAnimationManager_setCallFunc, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setDelegate", mrb_cocos2d_extension_CCBAnimationManager_setDelegate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDocumentControllerName", mrb_cocos2d_extension_CCBAnimationManager_setDocumentControllerName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRootContainerSize", mrb_cocos2d_extension_CCBAnimationManager_setRootContainerSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRootNode", mrb_cocos2d_extension_CCBAnimationManager_setRootNode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSequences", mrb_cocos2d_extension_CCBAnimationManager_setSequences, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_extension_CCBAnimationManagerDelegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBAnimationManagerDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "completedAnimationSequenceNamed", mrb_cocos2d_extension_CCBAnimationManagerDelegate_completedAnimationSequenceNamed, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBEaseInstant(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBEaseInstant");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCBEaseInstant_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_extension_CCBEaseInstant_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBEaseInstant_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBFile(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBFile");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBFile_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCBFile_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCCBFileNode", mrb_cocos2d_extension_CCBFile_getCCBFileNode, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setCCBFileNode", mrb_cocos2d_extension_CCBFile_setCCBFileNode, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBFileLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBFileLoader");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "loader", mrb_cocos2d_extension_CCBFileLoader_loader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBFileLoader_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBKeyframe(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBKeyframe");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBKeyframe_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getEasingOpt", mrb_cocos2d_extension_CCBKeyframe_getEasingOpt, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getEasingType", mrb_cocos2d_extension_CCBKeyframe_getEasingType, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTime", mrb_cocos2d_extension_CCBKeyframe_getTime, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getValue", mrb_cocos2d_extension_CCBKeyframe_getValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setEasingOpt", mrb_cocos2d_extension_CCBKeyframe_setEasingOpt, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEasingType", mrb_cocos2d_extension_CCBKeyframe_setEasingType, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTime", mrb_cocos2d_extension_CCBKeyframe_setTime, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setValue", mrb_cocos2d_extension_CCBKeyframe_setValue, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_CCBMemberVariableAssigner(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBMemberVariableAssigner");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "onAssignCCBCustomProperty", mrb_cocos2d_extension_CCBMemberVariableAssigner_onAssignCCBCustomProperty, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "onAssignCCBMemberVariable", mrb_cocos2d_extension_CCBMemberVariableAssigner_onAssignCCBMemberVariable, MRB_ARGS_REQ(3));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBReader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBReader");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBReader_initialize, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "addDocumentCallbackName", mrb_cocos2d_extension_CCBReader_addDocumentCallbackName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addDocumentCallbackNode", mrb_cocos2d_extension_CCBReader_addDocumentCallbackNode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addOwnerCallbackName", mrb_cocos2d_extension_CCBReader_addOwnerCallbackName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addOwnerCallbackNode", mrb_cocos2d_extension_CCBReader_addOwnerCallbackNode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addOwnerOutletName", mrb_cocos2d_extension_CCBReader_addOwnerOutletName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addOwnerOutletNode", mrb_cocos2d_extension_CCBReader_addOwnerOutletNode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "createSceneWithNodeGraphFromFile", mrb_cocos2d_extension_CCBReader_createSceneWithNodeGraphFromFile, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "deletePathExtension", mrb_cocos2d_extension_CCBReader_deletePathExtension, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "endsWith", mrb_cocos2d_extension_CCBReader_endsWith, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getAnimatedProperties", mrb_cocos2d_extension_CCBReader_getAnimatedProperties, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAnimationManager", mrb_cocos2d_extension_CCBReader_getAnimationManager, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAnimationManagers", mrb_cocos2d_extension_CCBReader_getAnimationManagers, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAnimationManagersForNodes", mrb_cocos2d_extension_CCBReader_getAnimationManagersForNodes, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCCBMemberVariableAssigner", mrb_cocos2d_extension_CCBReader_getCCBMemberVariableAssigner, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCCBRootPath", mrb_cocos2d_extension_CCBReader_getCCBRootPath, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCCBSelectorResolver", mrb_cocos2d_extension_CCBReader_getCCBSelectorResolver, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getLoadedSpriteSheet", mrb_cocos2d_extension_CCBReader_getLoadedSpriteSheet, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getNodesWithAnimationManagers", mrb_cocos2d_extension_CCBReader_getNodesWithAnimationManagers, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOwner", mrb_cocos2d_extension_CCBReader_getOwner, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOwnerCallbackNames", mrb_cocos2d_extension_CCBReader_getOwnerCallbackNames, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOwnerCallbackNodes", mrb_cocos2d_extension_CCBReader_getOwnerCallbackNodes, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOwnerOutletNames", mrb_cocos2d_extension_CCBReader_getOwnerOutletNames, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOwnerOutletNodes", mrb_cocos2d_extension_CCBReader_getOwnerOutletNodes, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "getResolutionScale", mrb_cocos2d_extension_CCBReader_getResolutionScale, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isJSControlled", mrb_cocos2d_extension_CCBReader_isJSControlled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "jsControlled", mrb_cocos2d_extension_CCBReader__get_jsControlled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "jsControlled=", mrb_cocos2d_extension_CCBReader__set_jsControlled, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "lastPathComponent", mrb_cocos2d_extension_CCBReader_lastPathComponent, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "readBool", mrb_cocos2d_extension_CCBReader_readBool, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "readByte", mrb_cocos2d_extension_CCBReader_readByte, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "readCachedString", mrb_cocos2d_extension_CCBReader_readCachedString, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "readCallbackKeyframesForSeq", mrb_cocos2d_extension_CCBReader_readCallbackKeyframesForSeq, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "readFileWithCleanUp", mrb_cocos2d_extension_CCBReader_readFileWithCleanUp, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "readFloat", mrb_cocos2d_extension_CCBReader_readFloat, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "readInt", mrb_cocos2d_extension_CCBReader_readInt, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "readNodeGraphFromData", mrb_cocos2d_extension_CCBReader_readNodeGraphFromData, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "readNodeGraphFromFile", mrb_cocos2d_extension_CCBReader_readNodeGraphFromFile, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "readSoundKeyframesForSeq", mrb_cocos2d_extension_CCBReader_readSoundKeyframesForSeq, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "readUTF8", mrb_cocos2d_extension_CCBReader_readUTF8, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAnimationManager", mrb_cocos2d_extension_CCBReader_setAnimationManager, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAnimationManagers", mrb_cocos2d_extension_CCBReader_setAnimationManagers, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setCCBRootPath", mrb_cocos2d_extension_CCBReader_setCCBRootPath, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "setResolutionScale", mrb_cocos2d_extension_CCBReader_setResolutionScale, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "toLowerCase", mrb_cocos2d_extension_CCBReader_toLowerCase, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBRotateTo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBRotateTo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_extension_CCBRotateTo_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCBRotateTo_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_extension_CCBRotateTo_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_extension_CCBRotateTo_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_extension_CCBRotateTo_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBRotateTo_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBRotateXTo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBRotateXTo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_extension_CCBRotateXTo_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCBRotateXTo_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_extension_CCBRotateXTo_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_extension_CCBRotateXTo_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_extension_CCBRotateXTo_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBRotateXTo_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBRotateYTo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBRotateYTo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_extension_CCBRotateYTo_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCBRotateYTo_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_extension_CCBRotateYTo_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_extension_CCBRotateYTo_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_extension_CCBRotateYTo_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBRotateYTo_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_extension_CCBScriptOwnerProtocol(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBScriptOwnerProtocol");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "createNew", mrb_cocos2d_extension_CCBScriptOwnerProtocol_createNew, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_CCBSelectorResolver(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBSelectorResolver");
  assert(cur_rc);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBSequence(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBSequence");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBSequence_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCallbackChannel", mrb_cocos2d_extension_CCBSequence_getCallbackChannel, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getChainedSequenceId", mrb_cocos2d_extension_CCBSequence_getChainedSequenceId, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDuration", mrb_cocos2d_extension_CCBSequence_getDuration, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getName", mrb_cocos2d_extension_CCBSequence_getName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSequenceId", mrb_cocos2d_extension_CCBSequence_getSequenceId, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSoundChannel", mrb_cocos2d_extension_CCBSequence_getSoundChannel, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setCallbackChannel", mrb_cocos2d_extension_CCBSequence_setCallbackChannel, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setChainedSequenceId", mrb_cocos2d_extension_CCBSequence_setChainedSequenceId, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDuration", mrb_cocos2d_extension_CCBSequence_setDuration, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setName", mrb_cocos2d_extension_CCBSequence_setName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSequenceId", mrb_cocos2d_extension_CCBSequence_setSequenceId, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSoundChannel", mrb_cocos2d_extension_CCBSequence_setSoundChannel, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBSequenceProperty(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBSequenceProperty");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBSequenceProperty_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getKeyframes", mrb_cocos2d_extension_CCBSequenceProperty_getKeyframes, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getName", mrb_cocos2d_extension_CCBSequenceProperty_getName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getType", mrb_cocos2d_extension_CCBSequenceProperty_getType, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCBSequenceProperty_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setName", mrb_cocos2d_extension_CCBSequenceProperty_setName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setType", mrb_cocos2d_extension_CCBSequenceProperty_setType, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBSetSpriteFrame(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBSetSpriteFrame");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_extension_CCBSetSpriteFrame_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCBSetSpriteFrame_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithSpriteFrame", mrb_cocos2d_extension_CCBSetSpriteFrame_initWithSpriteFrame, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_extension_CCBSetSpriteFrame_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBSetSpriteFrame_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBSoundEffect(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBSoundEffect");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "actionWithSoundFile", mrb_cocos2d_extension_CCBSoundEffect_actionWithSoundFile, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_extension_CCBSoundEffect_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithSoundFile", mrb_cocos2d_extension_CCBSoundEffect_initWithSoundFile, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_extension_CCBSoundEffect_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBSoundEffect_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBValue(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBValue");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCBValue_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getArrayValue", mrb_cocos2d_extension_CCBValue_getArrayValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBoolValue", mrb_cocos2d_extension_CCBValue_getBoolValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getByteValue", mrb_cocos2d_extension_CCBValue_getByteValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getFloatValue", mrb_cocos2d_extension_CCBValue_getFloatValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getIntValue", mrb_cocos2d_extension_CCBValue_getIntValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStringValue", mrb_cocos2d_extension_CCBValue_getStringValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getType", mrb_cocos2d_extension_CCBValue_getType, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBValue_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBaseData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBaseData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBaseData_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "a", mrb_cocos2d_extension_CCBaseData__get_a, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "a=", mrb_cocos2d_extension_CCBaseData__set_a, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "b", mrb_cocos2d_extension_CCBaseData__get_b, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "b=", mrb_cocos2d_extension_CCBaseData__set_b, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "copy", mrb_cocos2d_extension_CCBaseData_copy, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCBaseData_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "g", mrb_cocos2d_extension_CCBaseData__get_g, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "g=", mrb_cocos2d_extension_CCBaseData__set_g, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isUseColorInfo", mrb_cocos2d_extension_CCBaseData__get_isUseColorInfo, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isUseColorInfo=", mrb_cocos2d_extension_CCBaseData__set_isUseColorInfo, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "r", mrb_cocos2d_extension_CCBaseData__get_r, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "r=", mrb_cocos2d_extension_CCBaseData__set_r, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "scaleX", mrb_cocos2d_extension_CCBaseData__get_scaleX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "scaleX=", mrb_cocos2d_extension_CCBaseData__set_scaleX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "scaleY", mrb_cocos2d_extension_CCBaseData__get_scaleY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "scaleY=", mrb_cocos2d_extension_CCBaseData__set_scaleY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "skewX", mrb_cocos2d_extension_CCBaseData__get_skewX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "skewX=", mrb_cocos2d_extension_CCBaseData__set_skewX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "skewY", mrb_cocos2d_extension_CCBaseData__get_skewY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "skewY=", mrb_cocos2d_extension_CCBaseData__set_skewY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "subtract", mrb_cocos2d_extension_CCBaseData_subtract, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "tweenRotate", mrb_cocos2d_extension_CCBaseData__get_tweenRotate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tweenRotate=", mrb_cocos2d_extension_CCBaseData__set_tweenRotate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "x", mrb_cocos2d_extension_CCBaseData__get_x, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "x=", mrb_cocos2d_extension_CCBaseData__set_x, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "y", mrb_cocos2d_extension_CCBaseData__get_y, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "y=", mrb_cocos2d_extension_CCBaseData__set_y, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "zOrder", mrb_cocos2d_extension_CCBaseData__get_zOrder, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "zOrder=", mrb_cocos2d_extension_CCBaseData__set_zOrder, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBatchNode(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBatchNode");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBatchNode_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addChild", mrb_cocos2d_extension_CCBatchNode_addChild, MRB_ARGS_REQ(3));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCBatchNode_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_extension_CCBatchNode_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCBatchNode_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "visit", mrb_cocos2d_extension_CCBatchNode_visit, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNodeRGBA") == 0) {
    _define_class_cocos2d_CCNodeRGBA(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBone(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBone");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBone_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addChildBone", mrb_cocos2d_extension_CCBone_addChildBone, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addDisplay", mrb_cocos2d_extension_CCBone_addDisplay, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "changeDisplayByIndex", mrb_cocos2d_extension_CCBone_changeDisplayByIndex, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "childrenAlloc", mrb_cocos2d_extension_CCBone_childrenAlloc, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCBone_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getArmature", mrb_cocos2d_extension_CCBone_getArmature, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBoneData", mrb_cocos2d_extension_CCBone_getBoneData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getChildArmature", mrb_cocos2d_extension_CCBone_getChildArmature, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getChildren", mrb_cocos2d_extension_CCBone_getChildren, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDisplayManager", mrb_cocos2d_extension_CCBone_getDisplayManager, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getIgnoreMovementBoneData", mrb_cocos2d_extension_CCBone_getIgnoreMovementBoneData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getName", mrb_cocos2d_extension_CCBone_getName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getParentBone", mrb_cocos2d_extension_CCBone_getParentBone, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTween", mrb_cocos2d_extension_CCBone_getTween, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTweenData", mrb_cocos2d_extension_CCBone_getTweenData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCBone_init, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "isTransformDirty", mrb_cocos2d_extension_CCBone_isTransformDirty, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bTransformDirty", mrb_cocos2d_extension_CCBone__get_m_bTransformDirty, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bTransformDirty=", mrb_cocos2d_extension_CCBone__set_m_bTransformDirty, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pChildren", mrb_cocos2d_extension_CCBone__get_m_pChildren, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pChildren=", mrb_cocos2d_extension_CCBone__set_m_pChildren, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pParent", mrb_cocos2d_extension_CCBone__get_m_pParent, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pParent=", mrb_cocos2d_extension_CCBone__set_m_pParent, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_tWorldTransform", mrb_cocos2d_extension_CCBone__get_m_tWorldTransform, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_tWorldTransform=", mrb_cocos2d_extension_CCBone__set_m_tWorldTransform, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "nodeToArmatureTransform", mrb_cocos2d_extension_CCBone_nodeToArmatureTransform, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeChildBone", mrb_cocos2d_extension_CCBone_removeChildBone, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "removeFromParent", mrb_cocos2d_extension_CCBone_removeFromParent, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setArmature", mrb_cocos2d_extension_CCBone_setArmature, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBoneData", mrb_cocos2d_extension_CCBone_setBoneData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setChildArmature", mrb_cocos2d_extension_CCBone_setChildArmature, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDisplayManager", mrb_cocos2d_extension_CCBone_setDisplayManager, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setIgnoreMovementBoneData", mrb_cocos2d_extension_CCBone_setIgnoreMovementBoneData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setName", mrb_cocos2d_extension_CCBone_setName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setParentBone", mrb_cocos2d_extension_CCBone_setParentBone, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTransformDirty", mrb_cocos2d_extension_CCBone_setTransformDirty, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setZOrder", mrb_cocos2d_extension_CCBone_setZOrder, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_extension_CCBone_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateColor", mrb_cocos2d_extension_CCBone_updateColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "updateDisplayedColor", mrb_cocos2d_extension_CCBone_updateDisplayedColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateDisplayedOpacity", mrb_cocos2d_extension_CCBone_updateDisplayedOpacity, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBaseData") == 0) {
    _define_class_cocos2d_extension_CCBaseData(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBaseData"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCBoneData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBoneData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCBoneData_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addDisplayData", mrb_cocos2d_extension_CCBoneData_addDisplayData, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCBoneData_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "displayDataList", mrb_cocos2d_extension_CCBoneData__get_displayDataList, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "displayDataList=", mrb_cocos2d_extension_CCBoneData__set_displayDataList, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getDisplayData", mrb_cocos2d_extension_CCBoneData_getDisplayData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCBoneData_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "name", mrb_cocos2d_extension_CCBoneData__get_name, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "name=", mrb_cocos2d_extension_CCBoneData__set_name, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "parentName", mrb_cocos2d_extension_CCBoneData__get_parentName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "parentName=", mrb_cocos2d_extension_CCBoneData__set_parentName, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCColliderDetector(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCColliderDetector");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCColliderDetector_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addContourData", mrb_cocos2d_extension_CCColliderDetector_addContourData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addContourDataList", mrb_cocos2d_extension_CCColliderDetector_addContourDataList, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCColliderDetector_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getBone", mrb_cocos2d_extension_CCColliderDetector_getBone, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCColliderDetector_init, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "removeAll", mrb_cocos2d_extension_CCColliderDetector_removeAll, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeContourData", mrb_cocos2d_extension_CCColliderDetector_removeContourData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setActive", mrb_cocos2d_extension_CCColliderDetector_setActive, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBone", mrb_cocos2d_extension_CCColliderDetector_setBone, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setColliderFilter", mrb_cocos2d_extension_CCColliderDetector_setColliderFilter, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateTransform", mrb_cocos2d_extension_CCColliderDetector_updateTransform, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCColor3bObject(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCColor3bObject");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCColor3bObject_initialize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "value", mrb_cocos2d_extension_CCColor3bObject__get_value, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "value=", mrb_cocos2d_extension_CCColor3bObject__set_value, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCComponent") == 0) {
    _define_class_cocos2d_CCComponent(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCComponent"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCComAttribute(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCComAttribute");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCComAttribute_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBool", mrb_cocos2d_extension_CCComAttribute_getBool, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getCString", mrb_cocos2d_extension_CCComAttribute_getCString, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getDouble", mrb_cocos2d_extension_CCComAttribute_getDouble, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getFloat", mrb_cocos2d_extension_CCComAttribute_getFloat, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getInt", mrb_cocos2d_extension_CCComAttribute_getInt, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getObject", mrb_cocos2d_extension_CCComAttribute_getObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCComAttribute_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setBool", mrb_cocos2d_extension_CCComAttribute_setBool, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setCString", mrb_cocos2d_extension_CCComAttribute_setCString, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setDouble", mrb_cocos2d_extension_CCComAttribute_setDouble, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setFloat", mrb_cocos2d_extension_CCComAttribute_setFloat, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setInt", mrb_cocos2d_extension_CCComAttribute_setInt, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setObject", mrb_cocos2d_extension_CCComAttribute_setObject, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCComponent") == 0) {
    _define_class_cocos2d_CCComponent(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCComponent"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCComAudio(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCComAudio");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCComAudio_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "end", mrb_cocos2d_extension_CCComAudio_end, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBackgroundMusicVolume", mrb_cocos2d_extension_CCComAudio_getBackgroundMusicVolume, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getEffectsVolume", mrb_cocos2d_extension_CCComAudio_getEffectsVolume, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCComAudio_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isBackgroundMusicPlaying", mrb_cocos2d_extension_CCComAudio_isBackgroundMusicPlaying, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isEnabled", mrb_cocos2d_extension_CCComAudio_isEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_extension_CCComAudio_onEnter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onExit", mrb_cocos2d_extension_CCComAudio_onExit, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pauseAllEffects", mrb_cocos2d_extension_CCComAudio_pauseAllEffects, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pauseBackgroundMusic", mrb_cocos2d_extension_CCComAudio_pauseBackgroundMusic, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pauseEffect", mrb_cocos2d_extension_CCComAudio_pauseEffect, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "playBackgroundMusic", mrb_cocos2d_extension_CCComAudio_playBackgroundMusic, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "playEffect", mrb_cocos2d_extension_CCComAudio_playEffect, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "preloadBackgroundMusic", mrb_cocos2d_extension_CCComAudio_preloadBackgroundMusic, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "preloadEffect", mrb_cocos2d_extension_CCComAudio_preloadEffect, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "resumeAllEffects", mrb_cocos2d_extension_CCComAudio_resumeAllEffects, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "resumeBackgroundMusic", mrb_cocos2d_extension_CCComAudio_resumeBackgroundMusic, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "resumeEffect", mrb_cocos2d_extension_CCComAudio_resumeEffect, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "rewindBackgroundMusic", mrb_cocos2d_extension_CCComAudio_rewindBackgroundMusic, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setBackgroundMusicVolume", mrb_cocos2d_extension_CCComAudio_setBackgroundMusicVolume, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEffectsVolume", mrb_cocos2d_extension_CCComAudio_setEffectsVolume, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_extension_CCComAudio_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stopAllEffects", mrb_cocos2d_extension_CCComAudio_stopAllEffects, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "stopBackgroundMusic", mrb_cocos2d_extension_CCComAudio_stopBackgroundMusic, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "stopEffect", mrb_cocos2d_extension_CCComAudio_stopEffect, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "unloadEffect", mrb_cocos2d_extension_CCComAudio_unloadEffect, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "willPlayBackgroundMusic", mrb_cocos2d_extension_CCComAudio_willPlayBackgroundMusic, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCComponent") == 0) {
    _define_class_cocos2d_CCComponent(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCInputDelegate") == 0) {
    _define_class_cocos2d_extension_CCInputDelegate(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCComponent"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCComController(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCInputDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCComController");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "ccTouchBegan", mrb_cocos2d_extension_CCComController_ccTouchBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchCancelled", mrb_cocos2d_extension_CCComController_ccTouchCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchEnded", mrb_cocos2d_extension_CCComController_ccTouchEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchMoved", mrb_cocos2d_extension_CCComController_ccTouchMoved, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesBegan", mrb_cocos2d_extension_CCComController_ccTouchesBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesCancelled", mrb_cocos2d_extension_CCComController_ccTouchesCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesEnded", mrb_cocos2d_extension_CCComController_ccTouchesEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesMoved", mrb_cocos2d_extension_CCComController_ccTouchesMoved, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCComController_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCComController_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isEnabled", mrb_cocos2d_extension_CCComController_isEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isTouchEnabled", mrb_cocos2d_extension_CCComController_isTouchEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_extension_CCComController_onEnter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onExit", mrb_cocos2d_extension_CCComController_onExit, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "registerScriptHandler", mrb_cocos2d_extension_CCComController_registerScriptHandler, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "registerScriptTouchHandler", mrb_cocos2d_extension_CCComController_registerScriptTouchHandler, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_extension_CCComController_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTouchEnabled", mrb_cocos2d_extension_CCComController_setTouchEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "unregisterScriptHandler", mrb_cocos2d_extension_CCComController_unregisterScriptHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "unregisterScriptTouchHandler", mrb_cocos2d_extension_CCComController_unregisterScriptTouchHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_extension_CCComController_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCContourData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCContourData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCContourData_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCContourData_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCContourData_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "vertexList", mrb_cocos2d_extension_CCContourData__get_vertexList, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "vertexList=", mrb_cocos2d_extension_CCContourData__set_vertexList, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCContourVertex2(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCContourVertex2");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCContourVertex2_initialize, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "x", mrb_cocos2d_extension_CCContourVertex2__get_x, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "x=", mrb_cocos2d_extension_CCContourVertex2__set_x, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "y", mrb_cocos2d_extension_CCContourVertex2__get_y, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "y=", mrb_cocos2d_extension_CCContourVertex2__set_y, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayerRGBA") == 0) {
    _define_class_cocos2d_CCLayerRGBA(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayerRGBA"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCControl(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCControl_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addHandleOfControlEvent", mrb_cocos2d_extension_CCControl_addHandleOfControlEvent, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "addTargetWithActionForControlEvents", mrb_cocos2d_extension_CCControl_addTargetWithActionForControlEvents, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "getState", mrb_cocos2d_extension_CCControl_getState, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTouchLocation", mrb_cocos2d_extension_CCControl_getTouchLocation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "hasVisibleParents", mrb_cocos2d_extension_CCControl_hasVisibleParents, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCControl_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isEnabled", mrb_cocos2d_extension_CCControl_isEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isHighlighted", mrb_cocos2d_extension_CCControl_isHighlighted, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_extension_CCControl_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isSelected", mrb_cocos2d_extension_CCControl_isSelected, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isTouchInside", mrb_cocos2d_extension_CCControl_isTouchInside, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "needsLayout", mrb_cocos2d_extension_CCControl_needsLayout, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_extension_CCControl_onEnter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onExit", mrb_cocos2d_extension_CCControl_onExit, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "registerWithTouchDispatcher", mrb_cocos2d_extension_CCControl_registerWithTouchDispatcher, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeHandleOfAllControlEvents", mrb_cocos2d_extension_CCControl_removeHandleOfAllControlEvents, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeHandleOfControlEvent", mrb_cocos2d_extension_CCControl_removeHandleOfControlEvent, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeTargetForAllControlEvents", mrb_cocos2d_extension_CCControl_removeTargetForAllControlEvents, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeTargetWithActionForControlEvents", mrb_cocos2d_extension_CCControl_removeTargetWithActionForControlEvents, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "sendActionsForControlEvents", mrb_cocos2d_extension_CCControl_sendActionsForControlEvents, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_extension_CCControl_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setHighlighted", mrb_cocos2d_extension_CCControl_setHighlighted, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_extension_CCControl_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSelected", mrb_cocos2d_extension_CCControl_setSelected, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCControlButton(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlButton");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCControlButton_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "ccTouchBegan", mrb_cocos2d_extension_CCControlButton_ccTouchBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchCancelled", mrb_cocos2d_extension_CCControlButton_ccTouchCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchEnded", mrb_cocos2d_extension_CCControlButton_ccTouchEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchMoved", mrb_cocos2d_extension_CCControlButton_ccTouchMoved, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCControlButton_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "doesAdjustBackgroundImage", mrb_cocos2d_extension_CCControlButton_doesAdjustBackgroundImage, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBackgroundSprite", mrb_cocos2d_extension_CCControlButton_getBackgroundSprite, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBackgroundSpriteDispatchTable", mrb_cocos2d_extension_CCControlButton_getBackgroundSpriteDispatchTable, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBackgroundSpriteForState", mrb_cocos2d_extension_CCControlButton_getBackgroundSpriteForState, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getColor", mrb_cocos2d_extension_CCControlButton_getColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCurrentTitle", mrb_cocos2d_extension_CCControlButton_getCurrentTitle, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCurrentTitleColor", mrb_cocos2d_extension_CCControlButton_getCurrentTitleColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getHorizontalOrigin", mrb_cocos2d_extension_CCControlButton_getHorizontalOrigin, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getLabelAnchorPoint", mrb_cocos2d_extension_CCControlButton_getLabelAnchorPoint, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOpacity", mrb_cocos2d_extension_CCControlButton_getOpacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPreferredSize", mrb_cocos2d_extension_CCControlButton_getPreferredSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTitleBMFontForState", mrb_cocos2d_extension_CCControlButton_getTitleBMFontForState, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getTitleColorDispatchTable", mrb_cocos2d_extension_CCControlButton_getTitleColorDispatchTable, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTitleColorForState", mrb_cocos2d_extension_CCControlButton_getTitleColorForState, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getTitleDispatchTable", mrb_cocos2d_extension_CCControlButton_getTitleDispatchTable, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTitleForState", mrb_cocos2d_extension_CCControlButton_getTitleForState, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getTitleLabel", mrb_cocos2d_extension_CCControlButton_getTitleLabel, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTitleLabelDispatchTable", mrb_cocos2d_extension_CCControlButton_getTitleLabelDispatchTable, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTitleLabelForState", mrb_cocos2d_extension_CCControlButton_getTitleLabelForState, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getTitleTTFForState", mrb_cocos2d_extension_CCControlButton_getTitleTTFForState, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getTitleTTFSizeForState", mrb_cocos2d_extension_CCControlButton_getTitleTTFSizeForState, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getVerticalMargin", mrb_cocos2d_extension_CCControlButton_getVerticalMargin, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getZoomOnTouchDown", mrb_cocos2d_extension_CCControlButton_getZoomOnTouchDown, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCControlButton_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithBackgroundSprite", mrb_cocos2d_extension_CCControlButton_initWithBackgroundSprite, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithLabelAndBackgroundSprite", mrb_cocos2d_extension_CCControlButton_initWithLabelAndBackgroundSprite, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithTitleAndFontNameAndFontSize", mrb_cocos2d_extension_CCControlButton_initWithTitleAndFontNameAndFontSize, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "isPushed", mrb_cocos2d_extension_CCControlButton_isPushed, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_doesAdjustBackgroundImage", mrb_cocos2d_extension_CCControlButton__get_m_doesAdjustBackgroundImage, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_doesAdjustBackgroundImage=", mrb_cocos2d_extension_CCControlButton__set_m_doesAdjustBackgroundImage, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "needsLayout", mrb_cocos2d_extension_CCControlButton_needsLayout, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAdjustBackgroundImage", mrb_cocos2d_extension_CCControlButton_setAdjustBackgroundImage, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBackgroundSprite", mrb_cocos2d_extension_CCControlButton_setBackgroundSprite, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBackgroundSpriteDispatchTable", mrb_cocos2d_extension_CCControlButton_setBackgroundSpriteDispatchTable, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBackgroundSpriteForState", mrb_cocos2d_extension_CCControlButton_setBackgroundSpriteForState, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setBackgroundSpriteFrameForState", mrb_cocos2d_extension_CCControlButton_setBackgroundSpriteFrameForState, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setColor", mrb_cocos2d_extension_CCControlButton_setColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_extension_CCControlButton_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setHighlighted", mrb_cocos2d_extension_CCControlButton_setHighlighted, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setLabelAnchorPoint", mrb_cocos2d_extension_CCControlButton_setLabelAnchorPoint, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMargins", mrb_cocos2d_extension_CCControlButton_setMargins, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setOpacity", mrb_cocos2d_extension_CCControlButton_setOpacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPreferredSize", mrb_cocos2d_extension_CCControlButton_setPreferredSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSelected", mrb_cocos2d_extension_CCControlButton_setSelected, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTitleBMFontForState", mrb_cocos2d_extension_CCControlButton_setTitleBMFontForState, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setTitleColorDispatchTable", mrb_cocos2d_extension_CCControlButton_setTitleColorDispatchTable, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTitleColorForState", mrb_cocos2d_extension_CCControlButton_setTitleColorForState, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setTitleDispatchTable", mrb_cocos2d_extension_CCControlButton_setTitleDispatchTable, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTitleForState", mrb_cocos2d_extension_CCControlButton_setTitleForState, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setTitleLabel", mrb_cocos2d_extension_CCControlButton_setTitleLabel, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTitleLabelDispatchTable", mrb_cocos2d_extension_CCControlButton_setTitleLabelDispatchTable, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTitleLabelForState", mrb_cocos2d_extension_CCControlButton_setTitleLabelForState, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setTitleTTFForState", mrb_cocos2d_extension_CCControlButton_setTitleTTFForState, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setTitleTTFSizeForState", mrb_cocos2d_extension_CCControlButton_setTitleTTFSizeForState, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setZoomOnTouchDown", mrb_cocos2d_extension_CCControlButton_setZoomOnTouchDown, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControlLoader") == 0) {
    _define_class_cocos2d_extension_CCControlLoader(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlLoader"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCControlButtonLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlButtonLoader");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "loader", mrb_cocos2d_extension_CCControlButtonLoader_loader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCControlButtonLoader_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCControlColourPicker(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlColourPicker");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCControlColourPicker_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "colourSliderValueChanged", mrb_cocos2d_extension_CCControlColourPicker_colourSliderValueChanged, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCControlColourPicker_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBackground", mrb_cocos2d_extension_CCControlColourPicker_getBackground, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getHuePicker", mrb_cocos2d_extension_CCControlColourPicker_getHuePicker, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getcolourPicker", mrb_cocos2d_extension_CCControlColourPicker_getcolourPicker, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hueSliderValueChanged", mrb_cocos2d_extension_CCControlColourPicker_hueSliderValueChanged, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCControlColourPicker_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setBackground", mrb_cocos2d_extension_CCControlColourPicker_setBackground, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setColor", mrb_cocos2d_extension_CCControlColourPicker_setColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_extension_CCControlColourPicker_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setHuePicker", mrb_cocos2d_extension_CCControlColourPicker_setHuePicker, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setcolourPicker", mrb_cocos2d_extension_CCControlColourPicker_setcolourPicker, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_const(mrb, cur_rc, "CCControlEventTouchCancel", mrb_cocos2d_extension__get_CCControlEventTouchCancel(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCControlEventTouchDown", mrb_cocos2d_extension__get_CCControlEventTouchDown(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCControlEventTouchDragEnter", mrb_cocos2d_extension__get_CCControlEventTouchDragEnter(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCControlEventTouchDragExit", mrb_cocos2d_extension__get_CCControlEventTouchDragExit(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCControlEventTouchDragInside", mrb_cocos2d_extension__get_CCControlEventTouchDragInside(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCControlEventTouchDragOutside", mrb_cocos2d_extension__get_CCControlEventTouchDragOutside(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCControlEventTouchUpInside", mrb_cocos2d_extension__get_CCControlEventTouchUpInside(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCControlEventTouchUpOutside", mrb_cocos2d_extension__get_CCControlEventTouchUpOutside(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCControlEventValueChanged", mrb_cocos2d_extension__get_CCControlEventValueChanged(mrb, mrb_obj_value(cur_rc)));

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCControlHuePicker(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlHuePicker");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCControlHuePicker_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCControlHuePicker_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getBackground", mrb_cocos2d_extension_CCControlHuePicker_getBackground, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getHue", mrb_cocos2d_extension_CCControlHuePicker_getHue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getHuePercentage", mrb_cocos2d_extension_CCControlHuePicker_getHuePercentage, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSlider", mrb_cocos2d_extension_CCControlHuePicker_getSlider, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStartPos", mrb_cocos2d_extension_CCControlHuePicker_getStartPos, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTargetAndPos", mrb_cocos2d_extension_CCControlHuePicker_initWithTargetAndPos, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setBackground", mrb_cocos2d_extension_CCControlHuePicker_setBackground, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_extension_CCControlHuePicker_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setHue", mrb_cocos2d_extension_CCControlHuePicker_setHue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setHuePercentage", mrb_cocos2d_extension_CCControlHuePicker_setHuePercentage, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSlider", mrb_cocos2d_extension_CCControlHuePicker_setSlider, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCControlLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlLoader");
  assert(cur_rc);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCControlPotentiometer(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlPotentiometer");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCControlPotentiometer_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint", mrb_cocos2d_extension_CCControlPotentiometer_angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "ccTouchBegan", mrb_cocos2d_extension_CCControlPotentiometer_ccTouchBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchEnded", mrb_cocos2d_extension_CCControlPotentiometer_ccTouchEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchMoved", mrb_cocos2d_extension_CCControlPotentiometer_ccTouchMoved, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCControlPotentiometer_create, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "distanceBetweenPointAndPoint", mrb_cocos2d_extension_CCControlPotentiometer_distanceBetweenPointAndPoint, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getMaximumValue", mrb_cocos2d_extension_CCControlPotentiometer_getMaximumValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMinimumValue", mrb_cocos2d_extension_CCControlPotentiometer_getMinimumValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPreviousLocation", mrb_cocos2d_extension_CCControlPotentiometer_getPreviousLocation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getProgressTimer", mrb_cocos2d_extension_CCControlPotentiometer_getProgressTimer, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getThumbSprite", mrb_cocos2d_extension_CCControlPotentiometer_getThumbSprite, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getValue", mrb_cocos2d_extension_CCControlPotentiometer_getValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTrackSprite_ProgressTimer_ThumbSprite", mrb_cocos2d_extension_CCControlPotentiometer_initWithTrackSprite_ProgressTimer_ThumbSprite, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "isTouchInside", mrb_cocos2d_extension_CCControlPotentiometer_isTouchInside, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_fMaximumValue", mrb_cocos2d_extension_CCControlPotentiometer__get_m_fMaximumValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_fMaximumValue=", mrb_cocos2d_extension_CCControlPotentiometer__set_m_fMaximumValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_fMinimumValue", mrb_cocos2d_extension_CCControlPotentiometer__get_m_fMinimumValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_fMinimumValue=", mrb_cocos2d_extension_CCControlPotentiometer__set_m_fMinimumValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_fValue", mrb_cocos2d_extension_CCControlPotentiometer__get_m_fValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_fValue=", mrb_cocos2d_extension_CCControlPotentiometer__set_m_fValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "potentiometerBegan", mrb_cocos2d_extension_CCControlPotentiometer_potentiometerBegan, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "potentiometerEnded", mrb_cocos2d_extension_CCControlPotentiometer_potentiometerEnded, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "potentiometerMoved", mrb_cocos2d_extension_CCControlPotentiometer_potentiometerMoved, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_extension_CCControlPotentiometer_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMaximumValue", mrb_cocos2d_extension_CCControlPotentiometer_setMaximumValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMinimumValue", mrb_cocos2d_extension_CCControlPotentiometer_setMinimumValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPreviousLocation", mrb_cocos2d_extension_CCControlPotentiometer_setPreviousLocation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setProgressTimer", mrb_cocos2d_extension_CCControlPotentiometer_setProgressTimer, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setThumbSprite", mrb_cocos2d_extension_CCControlPotentiometer_setThumbSprite, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setValue", mrb_cocos2d_extension_CCControlPotentiometer_setValue, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCControlSaturationBrightnessPicker(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlSaturationBrightnessPicker");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getBackground", mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_getBackground, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBrightness", mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_getBrightness, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOverlay", mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_getOverlay, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSaturation", mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_getSaturation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getShadow", mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_getShadow, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSlider", mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_getSlider, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStartPos", mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_getStartPos, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTargetAndPos", mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_initWithTargetAndPos, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateDraggerWithHSV", mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_updateDraggerWithHSV, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateWithHSV", mrb_cocos2d_extension_CCControlSaturationBrightnessPicker_updateWithHSV, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCControlSlider(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlSlider");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCControlSlider_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCControlSlider_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getBackgroundSprite", mrb_cocos2d_extension_CCControlSlider_getBackgroundSprite, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMaximumAllowedValue", mrb_cocos2d_extension_CCControlSlider_getMaximumAllowedValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMaximumValue", mrb_cocos2d_extension_CCControlSlider_getMaximumValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMinimumAllowedValue", mrb_cocos2d_extension_CCControlSlider_getMinimumAllowedValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMinimumValue", mrb_cocos2d_extension_CCControlSlider_getMinimumValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getProgressSprite", mrb_cocos2d_extension_CCControlSlider_getProgressSprite, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getThumbSprite", mrb_cocos2d_extension_CCControlSlider_getThumbSprite, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getValue", mrb_cocos2d_extension_CCControlSlider_getValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithSprites", mrb_cocos2d_extension_CCControlSlider_initWithSprites, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "isTouchInside", mrb_cocos2d_extension_CCControlSlider_isTouchInside, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "locationFromTouch", mrb_cocos2d_extension_CCControlSlider_locationFromTouch, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "needsLayout", mrb_cocos2d_extension_CCControlSlider_needsLayout, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setBackgroundSprite", mrb_cocos2d_extension_CCControlSlider_setBackgroundSprite, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_extension_CCControlSlider_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMaximumAllowedValue", mrb_cocos2d_extension_CCControlSlider_setMaximumAllowedValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMaximumValue", mrb_cocos2d_extension_CCControlSlider_setMaximumValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMinimumAllowedValue", mrb_cocos2d_extension_CCControlSlider_setMinimumAllowedValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMinimumValue", mrb_cocos2d_extension_CCControlSlider_setMinimumValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setProgressSprite", mrb_cocos2d_extension_CCControlSlider_setProgressSprite, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setThumbSprite", mrb_cocos2d_extension_CCControlSlider_setThumbSprite, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setValue", mrb_cocos2d_extension_CCControlSlider_setValue, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_const(mrb, cur_rc, "CCControlStateDisabled", mrb_cocos2d_extension__get_CCControlStateDisabled(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCControlStateHighlighted", mrb_cocos2d_extension__get_CCControlStateHighlighted(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCControlStateNormal", mrb_cocos2d_extension__get_CCControlStateNormal(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCControlStateSelected", mrb_cocos2d_extension__get_CCControlStateSelected(mrb, mrb_obj_value(cur_rc)));

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCControlStepper(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlStepper");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCControlStepper_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "ccTouchBegan", mrb_cocos2d_extension_CCControlStepper_ccTouchBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchEnded", mrb_cocos2d_extension_CCControlStepper_ccTouchEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchMoved", mrb_cocos2d_extension_CCControlStepper_ccTouchMoved, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCControlStepper_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getMinusLabel", mrb_cocos2d_extension_CCControlStepper_getMinusLabel, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMinusSprite", mrb_cocos2d_extension_CCControlStepper_getMinusSprite, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPlusLabel", mrb_cocos2d_extension_CCControlStepper_getPlusLabel, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPlusSprite", mrb_cocos2d_extension_CCControlStepper_getPlusSprite, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getValue", mrb_cocos2d_extension_CCControlStepper_getValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithMinusSpriteAndPlusSprite", mrb_cocos2d_extension_CCControlStepper_initWithMinusSpriteAndPlusSprite, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "isContinuous", mrb_cocos2d_extension_CCControlStepper_isContinuous, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bAutorepeat", mrb_cocos2d_extension_CCControlStepper__get_m_bAutorepeat, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bAutorepeat=", mrb_cocos2d_extension_CCControlStepper__set_m_bAutorepeat, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_bContinuous", mrb_cocos2d_extension_CCControlStepper__get_m_bContinuous, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bContinuous=", mrb_cocos2d_extension_CCControlStepper__set_m_bContinuous, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_bTouchInsideFlag", mrb_cocos2d_extension_CCControlStepper__get_m_bTouchInsideFlag, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bTouchInsideFlag=", mrb_cocos2d_extension_CCControlStepper__set_m_bTouchInsideFlag, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_bWraps", mrb_cocos2d_extension_CCControlStepper__get_m_bWraps, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bWraps=", mrb_cocos2d_extension_CCControlStepper__set_m_bWraps, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_dMaximumValue", mrb_cocos2d_extension_CCControlStepper__get_m_dMaximumValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_dMaximumValue=", mrb_cocos2d_extension_CCControlStepper__set_m_dMaximumValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_dMinimumValue", mrb_cocos2d_extension_CCControlStepper__get_m_dMinimumValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_dMinimumValue=", mrb_cocos2d_extension_CCControlStepper__set_m_dMinimumValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_dStepValue", mrb_cocos2d_extension_CCControlStepper__get_m_dStepValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_dStepValue=", mrb_cocos2d_extension_CCControlStepper__set_m_dStepValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_dValue", mrb_cocos2d_extension_CCControlStepper__get_m_dValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_dValue=", mrb_cocos2d_extension_CCControlStepper__set_m_dValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_eTouchedPart", mrb_cocos2d_extension_CCControlStepper__get_m_eTouchedPart, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_eTouchedPart=", mrb_cocos2d_extension_CCControlStepper__set_m_eTouchedPart, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_nAutorepeatCount", mrb_cocos2d_extension_CCControlStepper__get_m_nAutorepeatCount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_nAutorepeatCount=", mrb_cocos2d_extension_CCControlStepper__set_m_nAutorepeatCount, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMaximumValue", mrb_cocos2d_extension_CCControlStepper_setMaximumValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMinimumValue", mrb_cocos2d_extension_CCControlStepper_setMinimumValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMinusLabel", mrb_cocos2d_extension_CCControlStepper_setMinusLabel, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMinusSprite", mrb_cocos2d_extension_CCControlStepper_setMinusSprite, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPlusLabel", mrb_cocos2d_extension_CCControlStepper_setPlusLabel, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPlusSprite", mrb_cocos2d_extension_CCControlStepper_setPlusSprite, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setStepValue", mrb_cocos2d_extension_CCControlStepper_setStepValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setValue", mrb_cocos2d_extension_CCControlStepper_setValue, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setValueWithSendingEvent", mrb_cocos2d_extension_CCControlStepper_setValueWithSendingEvent, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setWraps", mrb_cocos2d_extension_CCControlStepper_setWraps, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startAutorepeat", mrb_cocos2d_extension_CCControlStepper_startAutorepeat, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "stopAutorepeat", mrb_cocos2d_extension_CCControlStepper_stopAutorepeat, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_extension_CCControlStepper_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateLayoutUsingTouchLocation", mrb_cocos2d_extension_CCControlStepper_updateLayoutUsingTouchLocation, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControl") == 0) {
    _define_class_cocos2d_extension_CCControl(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControl"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCControlSwitch(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlSwitch");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCControlSwitch_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "ccTouchBegan", mrb_cocos2d_extension_CCControlSwitch_ccTouchBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchCancelled", mrb_cocos2d_extension_CCControlSwitch_ccTouchCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchEnded", mrb_cocos2d_extension_CCControlSwitch_ccTouchEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchMoved", mrb_cocos2d_extension_CCControlSwitch_ccTouchMoved, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCControlSwitch_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "hasMoved", mrb_cocos2d_extension_CCControlSwitch_hasMoved, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithMaskSprite", mrb_cocos2d_extension_CCControlSwitch_initWithMaskSprite, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "isOn", mrb_cocos2d_extension_CCControlSwitch_isOn, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "locationFromTouch", mrb_cocos2d_extension_CCControlSwitch_locationFromTouch, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_extension_CCControlSwitch_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOn", mrb_cocos2d_extension_CCControlSwitch_setOn, MRB_ARGS_ANY());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_CCControlUtils(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlUtils");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "CCRectUnion", mrb_cocos2d_extension_CCControlUtils_CCRectUnion, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "HSVfromRGB", mrb_cocos2d_extension_CCControlUtils_HSVfromRGB, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "RGBfromHSV", mrb_cocos2d_extension_CCControlUtils_RGBfromHSV, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "addSpriteToTargetWithPosAndAnchor", mrb_cocos2d_extension_CCControlUtils_addSpriteToTargetWithPosAndAnchor, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCControlUtils_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCData_initialize, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getBytes", mrb_cocos2d_extension_CCData_getBytes, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSize", mrb_cocos2d_extension_CCData_getSize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCDecorativeDisplay(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDecorativeDisplay");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCDecorativeDisplay_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "anchorPointChanged", mrb_cocos2d_extension_CCDecorativeDisplay_anchorPointChanged, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCDecorativeDisplay_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getColliderDetector", mrb_cocos2d_extension_CCDecorativeDisplay_getColliderDetector, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDisplay", mrb_cocos2d_extension_CCDecorativeDisplay_getDisplay, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDisplayData", mrb_cocos2d_extension_CCDecorativeDisplay_getDisplayData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCDecorativeDisplay_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setColliderDetector", mrb_cocos2d_extension_CCDecorativeDisplay_setColliderDetector, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDisplay", mrb_cocos2d_extension_CCDecorativeDisplay_setDisplay, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDisplayData", mrb_cocos2d_extension_CCDecorativeDisplay_setDisplayData, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCDisplayData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDisplayData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCDisplayData_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "changeDisplayToTexture", mrb_cocos2d_extension_CCDisplayData_changeDisplayToTexture, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCDisplayData_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "displayType", mrb_cocos2d_extension_CCDisplayData__get_displayType, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "displayType=", mrb_cocos2d_extension_CCDisplayData__set_displayType, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_CCDisplayFactory(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDisplayFactory");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "addArmatureDisplay", mrb_cocos2d_extension_CCDisplayFactory_addArmatureDisplay, MRB_ARGS_REQ(3));
  mrb_define_class_method(mrb, cur_rc, "addDisplay", mrb_cocos2d_extension_CCDisplayFactory_addDisplay, MRB_ARGS_REQ(3));
  mrb_define_class_method(mrb, cur_rc, "addParticleDisplay", mrb_cocos2d_extension_CCDisplayFactory_addParticleDisplay, MRB_ARGS_REQ(3));
  mrb_define_class_method(mrb, cur_rc, "addShaderDisplay", mrb_cocos2d_extension_CCDisplayFactory_addShaderDisplay, MRB_ARGS_REQ(3));
  mrb_define_class_method(mrb, cur_rc, "addSpriteDisplay", mrb_cocos2d_extension_CCDisplayFactory_addSpriteDisplay, MRB_ARGS_REQ(3));
  mrb_define_class_method(mrb, cur_rc, "createArmatureDisplay", mrb_cocos2d_extension_CCDisplayFactory_createArmatureDisplay, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "createDisplay", mrb_cocos2d_extension_CCDisplayFactory_createDisplay, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "createParticleDisplay", mrb_cocos2d_extension_CCDisplayFactory_createParticleDisplay, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "createShaderDisplay", mrb_cocos2d_extension_CCDisplayFactory_createShaderDisplay, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "createSpriteDisplay", mrb_cocos2d_extension_CCDisplayFactory_createSpriteDisplay, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "updateArmatureDisplay", mrb_cocos2d_extension_CCDisplayFactory_updateArmatureDisplay, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "updateDisplay", mrb_cocos2d_extension_CCDisplayFactory_updateDisplay, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "updateParticleDisplay", mrb_cocos2d_extension_CCDisplayFactory_updateParticleDisplay, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "updateSpriteDisplay", mrb_cocos2d_extension_CCDisplayFactory_updateSpriteDisplay, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCDisplayFactory_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCDisplayManager(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDisplayManager");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCDisplayManager_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addDisplay", mrb_cocos2d_extension_CCDisplayManager_addDisplay, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "changeDisplayByIndex", mrb_cocos2d_extension_CCDisplayManager_changeDisplayByIndex, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "containPoint", mrb_cocos2d_extension_CCDisplayManager_containPoint, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCDisplayManager_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getAnchorPoint", mrb_cocos2d_extension_CCDisplayManager_getAnchorPoint, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAnchorPointInPoints", mrb_cocos2d_extension_CCDisplayManager_getAnchorPointInPoints, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBoundingBox", mrb_cocos2d_extension_CCDisplayManager_getBoundingBox, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getContentSize", mrb_cocos2d_extension_CCDisplayManager_getContentSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCurrentDecorativeDisplay", mrb_cocos2d_extension_CCDisplayManager_getCurrentDecorativeDisplay, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCurrentDisplayIndex", mrb_cocos2d_extension_CCDisplayManager_getCurrentDisplayIndex, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDecorativeDisplayByIndex", mrb_cocos2d_extension_CCDisplayManager_getDecorativeDisplayByIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getDisplayRenderNode", mrb_cocos2d_extension_CCDisplayManager_getDisplayRenderNode, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getForceChangeDisplay", mrb_cocos2d_extension_CCDisplayManager_getForceChangeDisplay, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCDisplayManager_init, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initDisplayList", mrb_cocos2d_extension_CCDisplayManager_initDisplayList, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isVisible", mrb_cocos2d_extension_CCDisplayManager_isVisible, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bVisible", mrb_cocos2d_extension_CCDisplayManager__get_m_bVisible, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bVisible=", mrb_cocos2d_extension_CCDisplayManager__set_m_bVisible, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pBone", mrb_cocos2d_extension_CCDisplayManager__get_m_pBone, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pBone=", mrb_cocos2d_extension_CCDisplayManager__set_m_pBone, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeDisplay", mrb_cocos2d_extension_CCDisplayManager_removeDisplay, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setCurrentDecorativeDisplay", mrb_cocos2d_extension_CCDisplayManager_setCurrentDecorativeDisplay, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setForceChangeDisplay", mrb_cocos2d_extension_CCDisplayManager_setForceChangeDisplay, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setVisible", mrb_cocos2d_extension_CCDisplayManager_setVisible, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCControlButton") == 0) {
    _define_class_cocos2d_extension_CCControlButton(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCIMEDelegate") == 0) {
    _define_class_cocos2d_CCIMEDelegate(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCControlButton"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCEditBox(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCIMEDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCEditBox");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCEditBox_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCEditBox_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "getDelegate", mrb_cocos2d_extension_CCEditBox_getDelegate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMaxLength", mrb_cocos2d_extension_CCEditBox_getMaxLength, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPlaceHolder", mrb_cocos2d_extension_CCEditBox_getPlaceHolder, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getScriptEditBoxHandler", mrb_cocos2d_extension_CCEditBox_getScriptEditBoxHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getText", mrb_cocos2d_extension_CCEditBox_getText, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithSizeAndBackgroundSprite", mrb_cocos2d_extension_CCEditBox_initWithSizeAndBackgroundSprite, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "keyboardDidHide", mrb_cocos2d_extension_CCEditBox_keyboardDidHide, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "keyboardDidShow", mrb_cocos2d_extension_CCEditBox_keyboardDidShow, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "keyboardWillHide", mrb_cocos2d_extension_CCEditBox_keyboardWillHide, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "keyboardWillShow", mrb_cocos2d_extension_CCEditBox_keyboardWillShow, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_extension_CCEditBox_onEnter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onExit", mrb_cocos2d_extension_CCEditBox_onExit, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "registerScriptEditBoxHandler", mrb_cocos2d_extension_CCEditBox_registerScriptEditBoxHandler, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAnchorPoint", mrb_cocos2d_extension_CCEditBox_setAnchorPoint, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setContentSize", mrb_cocos2d_extension_CCEditBox_setContentSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDelegate", mrb_cocos2d_extension_CCEditBox_setDelegate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setFont", mrb_cocos2d_extension_CCEditBox_setFont, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setFontColor", mrb_cocos2d_extension_CCEditBox_setFontColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setFontName", mrb_cocos2d_extension_CCEditBox_setFontName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setFontSize", mrb_cocos2d_extension_CCEditBox_setFontSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setInputFlag", mrb_cocos2d_extension_CCEditBox_setInputFlag, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setInputMode", mrb_cocos2d_extension_CCEditBox_setInputMode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMaxLength", mrb_cocos2d_extension_CCEditBox_setMaxLength, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPlaceHolder", mrb_cocos2d_extension_CCEditBox_setPlaceHolder, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPlaceholderFont", mrb_cocos2d_extension_CCEditBox_setPlaceholderFont, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setPlaceholderFontColor", mrb_cocos2d_extension_CCEditBox_setPlaceholderFontColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPlaceholderFontName", mrb_cocos2d_extension_CCEditBox_setPlaceholderFontName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPlaceholderFontSize", mrb_cocos2d_extension_CCEditBox_setPlaceholderFontSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPosition", mrb_cocos2d_extension_CCEditBox_setPosition, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setReturnType", mrb_cocos2d_extension_CCEditBox_setReturnType, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setText", mrb_cocos2d_extension_CCEditBox_setText, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setVisible", mrb_cocos2d_extension_CCEditBox_setVisible, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "touchDownAction", mrb_cocos2d_extension_CCEditBox_touchDownAction, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "unregisterScriptEditBoxHandler", mrb_cocos2d_extension_CCEditBox_unregisterScriptEditBoxHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "visit", mrb_cocos2d_extension_CCEditBox_visit, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_extension_CCEditBoxDelegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCEditBoxDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "editBoxEditingDidBegin", mrb_cocos2d_extension_CCEditBoxDelegate_editBoxEditingDidBegin, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "editBoxEditingDidEnd", mrb_cocos2d_extension_CCEditBoxDelegate_editBoxEditingDidEnd, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "editBoxReturn", mrb_cocos2d_extension_CCEditBoxDelegate_editBoxReturn, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "editBoxTextChanged", mrb_cocos2d_extension_CCEditBoxDelegate_editBoxTextChanged, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCBaseData") == 0) {
    _define_class_cocos2d_extension_CCBaseData(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCBaseData"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCFrameData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCFrameData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCFrameData_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copy", mrb_cocos2d_extension_CCFrameData_copy, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCFrameData_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "displayIndex", mrb_cocos2d_extension_CCFrameData__get_displayIndex, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "displayIndex=", mrb_cocos2d_extension_CCFrameData__set_displayIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "duration", mrb_cocos2d_extension_CCFrameData__get_duration, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "duration=", mrb_cocos2d_extension_CCFrameData__set_duration, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_strEvent", mrb_cocos2d_extension_CCFrameData__get_m_strEvent, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_strEvent=", mrb_cocos2d_extension_CCFrameData__set_m_strEvent, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_strMovement", mrb_cocos2d_extension_CCFrameData__get_m_strMovement, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_strMovement=", mrb_cocos2d_extension_CCFrameData__set_m_strMovement, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_strSound", mrb_cocos2d_extension_CCFrameData__get_m_strSound, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_strSound=", mrb_cocos2d_extension_CCFrameData__set_m_strSound, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_strSoundEffect", mrb_cocos2d_extension_CCFrameData__get_m_strSoundEffect, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_strSoundEffect=", mrb_cocos2d_extension_CCFrameData__set_m_strSoundEffect, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tweenEasing", mrb_cocos2d_extension_CCFrameData__get_tweenEasing, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tweenEasing=", mrb_cocos2d_extension_CCFrameData__set_tweenEasing, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCHttpClient(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCHttpClient");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "destroyInstance", mrb_cocos2d_extension_CCHttpClient_destroyInstance, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "getInstance", mrb_cocos2d_extension_CCHttpClient_getInstance, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTimeoutForConnect", mrb_cocos2d_extension_CCHttpClient_getTimeoutForConnect, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTimeoutForRead", mrb_cocos2d_extension_CCHttpClient_getTimeoutForRead, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "send", mrb_cocos2d_extension_CCHttpClient_send, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTimeoutForConnect", mrb_cocos2d_extension_CCHttpClient_setTimeoutForConnect, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTimeoutForRead", mrb_cocos2d_extension_CCHttpClient_setTimeoutForRead, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCHttpRequest(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCHttpRequest");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCHttpRequest_initialize, MRB_ARGS_NONE());

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_CCHttpRequest__prxy(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCHttpRequest::CC_prxy");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCHttpRequest__prxy_initialize, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "operator=", mrb_cocos2d_extension_CCHttpRequest__prxy_assign, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCHttpRequest");
  assert(cur_rc);
  DONE;
  mrb_define_method(mrb, cur_rc, "autorelease", mrb_cocos2d_extension_CCHttpRequest_autorelease, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getHeaders", mrb_cocos2d_extension_CCHttpRequest_getHeaders, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRequestData", mrb_cocos2d_extension_CCHttpRequest_getRequestData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRequestDataSize", mrb_cocos2d_extension_CCHttpRequest_getRequestDataSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRequestType", mrb_cocos2d_extension_CCHttpRequest_getRequestType, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSelector", mrb_cocos2d_extension_CCHttpRequest_getSelector, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTag", mrb_cocos2d_extension_CCHttpRequest_getTag, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTarget", mrb_cocos2d_extension_CCHttpRequest_getTarget, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getUrl", mrb_cocos2d_extension_CCHttpRequest_getUrl, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kHttpDelete", mrb_cocos2d_extension_CCHttpRequest__get_kHttpDelete, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kHttpGet", mrb_cocos2d_extension_CCHttpRequest__get_kHttpGet, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kHttpPost", mrb_cocos2d_extension_CCHttpRequest__get_kHttpPost, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kHttpPut", mrb_cocos2d_extension_CCHttpRequest__get_kHttpPut, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kHttpUnkown", mrb_cocos2d_extension_CCHttpRequest__get_kHttpUnkown, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeResponseCallback", mrb_cocos2d_extension_CCHttpRequest_removeResponseCallback, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setHeaders", mrb_cocos2d_extension_CCHttpRequest_setHeaders, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRequestData", mrb_cocos2d_extension_CCHttpRequest_setRequestData, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setRequestType", mrb_cocos2d_extension_CCHttpRequest_setRequestType, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setResponseCallback", mrb_cocos2d_extension_CCHttpRequest_setResponseCallback, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "setTag", mrb_cocos2d_extension_CCHttpRequest_setTag, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setUrl", mrb_cocos2d_extension_CCHttpRequest_setUrl, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setUserData", mrb_cocos2d_extension_CCHttpRequest_setUserData, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCHttpResponse(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCHttpResponse");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCHttpResponse_initialize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "autorelease", mrb_cocos2d_extension_CCHttpResponse_autorelease, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getErrorBuffer", mrb_cocos2d_extension_CCHttpResponse_getErrorBuffer, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getHttpRequest", mrb_cocos2d_extension_CCHttpResponse_getHttpRequest, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getResponseCode", mrb_cocos2d_extension_CCHttpResponse_getResponseCode, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getResponseData", mrb_cocos2d_extension_CCHttpResponse_getResponseData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getResponseHeader", mrb_cocos2d_extension_CCHttpResponse_getResponseHeader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isSucceed", mrb_cocos2d_extension_CCHttpResponse_isSucceed, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setErrorBuffer", mrb_cocos2d_extension_CCHttpResponse_setErrorBuffer, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setResponseCode", mrb_cocos2d_extension_CCHttpResponse_setResponseCode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setResponseData", mrb_cocos2d_extension_CCHttpResponse_setResponseData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setResponseHeader", mrb_cocos2d_extension_CCHttpResponse_setResponseHeader, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSucceed", mrb_cocos2d_extension_CCHttpResponse_setSucceed, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_extension_CCInputDelegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCInputDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "ccTouchBegan", mrb_cocos2d_extension_CCInputDelegate_ccTouchBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchCancelled", mrb_cocos2d_extension_CCInputDelegate_ccTouchCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchEnded", mrb_cocos2d_extension_CCInputDelegate_ccTouchEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchMoved", mrb_cocos2d_extension_CCInputDelegate_ccTouchMoved, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesBegan", mrb_cocos2d_extension_CCInputDelegate_ccTouchesBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesCancelled", mrb_cocos2d_extension_CCInputDelegate_ccTouchesCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesEnded", mrb_cocos2d_extension_CCInputDelegate_ccTouchesEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesMoved", mrb_cocos2d_extension_CCInputDelegate_ccTouchesMoved, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "didAccelerate", mrb_cocos2d_extension_CCInputDelegate_didAccelerate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getTouchMode", mrb_cocos2d_extension_CCInputDelegate_getTouchMode, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTouchPriority", mrb_cocos2d_extension_CCInputDelegate_getTouchPriority, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isAccelerometerEnabled", mrb_cocos2d_extension_CCInputDelegate_isAccelerometerEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isKeypadEnabled", mrb_cocos2d_extension_CCInputDelegate_isKeypadEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isTouchEnabled", mrb_cocos2d_extension_CCInputDelegate_isTouchEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAccelerometerEnabled", mrb_cocos2d_extension_CCInputDelegate_setAccelerometerEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setKeypadEnabled", mrb_cocos2d_extension_CCInputDelegate_setKeypadEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTouchEnabled", mrb_cocos2d_extension_CCInputDelegate_setTouchEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTouchMode", mrb_cocos2d_extension_CCInputDelegate_setTouchMode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTouchPriority", mrb_cocos2d_extension_CCInputDelegate_setTouchPriority, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCInvocation(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCInvocation");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCInvocation_initialize, MRB_ARGS_REQ(3));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCInvocation_create, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "getControlEvent", mrb_cocos2d_extension_CCInvocation_getControlEvent, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTarget", mrb_cocos2d_extension_CCInvocation_getTarget, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "invoke", mrb_cocos2d_extension_CCInvocation_invoke, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCLabelBMFontLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLabelBMFontLoader");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "loader", mrb_cocos2d_extension_CCLabelBMFontLoader_loader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCLabelBMFontLoader_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCLabelTTFLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLabelTTFLoader");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "loader", mrb_cocos2d_extension_CCLabelTTFLoader_loader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCLabelTTFLoader_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCLayerLoader") == 0) {
    _define_class_cocos2d_extension_CCLayerLoader(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLayerLoader"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCLayerColorLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLayerColorLoader");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "loader", mrb_cocos2d_extension_CCLayerColorLoader_loader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCLayerColorLoader_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCLayerLoader") == 0) {
    _define_class_cocos2d_extension_CCLayerLoader(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLayerLoader"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCLayerGradientLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLayerGradientLoader");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "loader", mrb_cocos2d_extension_CCLayerGradientLoader_loader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCLayerGradientLoader_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCLayerLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLayerLoader");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "loader", mrb_cocos2d_extension_CCLayerLoader_loader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCLayerLoader_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCMenuItemLoader") == 0) {
    _define_class_cocos2d_extension_CCMenuItemLoader(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCMenuItemLoader"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCMenuItemImageLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCMenuItemImageLoader");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "loader", mrb_cocos2d_extension_CCMenuItemImageLoader_loader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCMenuItemImageLoader_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCMenuItemLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCMenuItemLoader");
  assert(cur_rc);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCLayerLoader") == 0) {
    _define_class_cocos2d_extension_CCLayerLoader(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCLayerLoader"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCMenuLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCMenuLoader");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "loader", mrb_cocos2d_extension_CCMenuLoader_loader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCMenuLoader_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCMovementBoneData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCMovementBoneData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCMovementBoneData_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addFrameData", mrb_cocos2d_extension_CCMovementBoneData_addFrameData, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCMovementBoneData_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "delay", mrb_cocos2d_extension_CCMovementBoneData__get_delay, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "delay=", mrb_cocos2d_extension_CCMovementBoneData__set_delay, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "duration", mrb_cocos2d_extension_CCMovementBoneData__get_duration, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "duration=", mrb_cocos2d_extension_CCMovementBoneData__set_duration, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "frameList", mrb_cocos2d_extension_CCMovementBoneData__get_frameList, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "frameList=", mrb_cocos2d_extension_CCMovementBoneData__set_frameList, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getFrameData", mrb_cocos2d_extension_CCMovementBoneData_getFrameData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCMovementBoneData_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "name", mrb_cocos2d_extension_CCMovementBoneData__get_name, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "name=", mrb_cocos2d_extension_CCMovementBoneData__set_name, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "scale", mrb_cocos2d_extension_CCMovementBoneData__get_scale, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "scale=", mrb_cocos2d_extension_CCMovementBoneData__set_scale, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCMovementData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCMovementData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCMovementData_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addMovementBoneData", mrb_cocos2d_extension_CCMovementData_addMovementBoneData, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCMovementData_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "duration", mrb_cocos2d_extension_CCMovementData__get_duration, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "duration=", mrb_cocos2d_extension_CCMovementData__set_duration, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "durationTo", mrb_cocos2d_extension_CCMovementData__get_durationTo, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "durationTo=", mrb_cocos2d_extension_CCMovementData__set_durationTo, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "durationTween", mrb_cocos2d_extension_CCMovementData__get_durationTween, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "durationTween=", mrb_cocos2d_extension_CCMovementData__set_durationTween, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getMovementBoneData", mrb_cocos2d_extension_CCMovementData_getMovementBoneData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "loop", mrb_cocos2d_extension_CCMovementData__get_loop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "loop=", mrb_cocos2d_extension_CCMovementData__set_loop, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "movBoneDataDic", mrb_cocos2d_extension_CCMovementData__get_movBoneDataDic, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "movBoneDataDic=", mrb_cocos2d_extension_CCMovementData__set_movBoneDataDic, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "name", mrb_cocos2d_extension_CCMovementData__get_name, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "name=", mrb_cocos2d_extension_CCMovementData__set_name, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tweenEasing", mrb_cocos2d_extension_CCMovementData__get_tweenEasing, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tweenEasing=", mrb_cocos2d_extension_CCMovementData__set_tweenEasing, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCNodeLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCNodeLoader_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCustomProperties", mrb_cocos2d_extension_CCNodeLoader_getCustomProperties, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "loadCCNode", mrb_cocos2d_extension_CCNodeLoader_loadCCNode, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "loader", mrb_cocos2d_extension_CCNodeLoader_loader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "parseProperties", mrb_cocos2d_extension_CCNodeLoader_parseProperties, MRB_ARGS_REQ(3));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCNodeLoaderLibrary(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoaderLibrary");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCNodeLoaderLibrary_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCCNodeLoader", mrb_cocos2d_extension_CCNodeLoaderLibrary_getCCNodeLoader, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "library", mrb_cocos2d_extension_CCNodeLoaderLibrary_library, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "newDefaultCCNodeLoaderLibrary", mrb_cocos2d_extension_CCNodeLoaderLibrary_newDefaultCCNodeLoaderLibrary, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "purge", mrb_cocos2d_extension_CCNodeLoaderLibrary_purge, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "purgeSharedCCNodeLoaderLibrary", mrb_cocos2d_extension_CCNodeLoaderLibrary_purgeSharedCCNodeLoaderLibrary, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "registerCCNodeLoader", mrb_cocos2d_extension_CCNodeLoaderLibrary_registerCCNodeLoader, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "registerDefaultCCNodeLoaders", mrb_cocos2d_extension_CCNodeLoaderLibrary_registerDefaultCCNodeLoaders, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "sharedCCNodeLoaderLibrary", mrb_cocos2d_extension_CCNodeLoaderLibrary_sharedCCNodeLoaderLibrary, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "unregisterCCNodeLoader", mrb_cocos2d_extension_CCNodeLoaderLibrary_unregisterCCNodeLoader, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_CCNodeLoaderListener(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoaderListener");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "onNodeLoaded", mrb_cocos2d_extension_CCNodeLoaderListener_onNodeLoaded, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCDisplayData") == 0) {
    _define_class_cocos2d_extension_CCDisplayData(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDisplayData"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCParticleDisplayData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCParticleDisplayData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCParticleDisplayData_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copy", mrb_cocos2d_extension_CCParticleDisplayData_copy, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCParticleDisplayData_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "plist", mrb_cocos2d_extension_CCParticleDisplayData__get_plist, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "plist=", mrb_cocos2d_extension_CCParticleDisplayData__set_plist, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setParam", mrb_cocos2d_extension_CCParticleDisplayData_setParam, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCParticleSystemQuadLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCParticleSystemQuadLoader");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "loader", mrb_cocos2d_extension_CCParticleSystemQuadLoader_loader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCParticleSystemQuadLoader_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCProcessBase(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCProcessBase");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCProcessBase_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAnimationInternal", mrb_cocos2d_extension_CCProcessBase_getAnimationInternal, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAnimationScale", mrb_cocos2d_extension_CCProcessBase_getAnimationScale, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCurrentFrameIndex", mrb_cocos2d_extension_CCProcessBase_getCurrentFrameIndex, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCurrentPercent", mrb_cocos2d_extension_CCProcessBase_getCurrentPercent, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getIsComplete", mrb_cocos2d_extension_CCProcessBase_getIsComplete, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getIsPause", mrb_cocos2d_extension_CCProcessBase_getIsPause, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getIsPlaying", mrb_cocos2d_extension_CCProcessBase_getIsPlaying, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getLoopType", mrb_cocos2d_extension_CCProcessBase_getLoopType, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRawDuration", mrb_cocos2d_extension_CCProcessBase_getRawDuration, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTweenEasing", mrb_cocos2d_extension_CCProcessBase_getTweenEasing, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "gotoFrame", mrb_cocos2d_extension_CCProcessBase_gotoFrame, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "pause", mrb_cocos2d_extension_CCProcessBase_pause, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "play", mrb_cocos2d_extension_CCProcessBase_play, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, cur_rc, "resume", mrb_cocos2d_extension_CCProcessBase_resume, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAnimationInternal", mrb_cocos2d_extension_CCProcessBase_setAnimationInternal, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAnimationScale", mrb_cocos2d_extension_CCProcessBase_setAnimationScale, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setCurrentPercent", mrb_cocos2d_extension_CCProcessBase_setCurrentPercent, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setIsComplete", mrb_cocos2d_extension_CCProcessBase_setIsComplete, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setIsPause", mrb_cocos2d_extension_CCProcessBase_setIsPause, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setIsPlaying", mrb_cocos2d_extension_CCProcessBase_setIsPlaying, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setLoopType", mrb_cocos2d_extension_CCProcessBase_setLoopType, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRawDuration", mrb_cocos2d_extension_CCProcessBase_setRawDuration, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTweenEasing", mrb_cocos2d_extension_CCProcessBase_setTweenEasing, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stop", mrb_cocos2d_extension_CCProcessBase_stop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_extension_CCProcessBase_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNodeRGBA") == 0) {
    _define_class_cocos2d_CCNodeRGBA(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCScale9Sprite(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCScale9Sprite");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCScale9Sprite_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCScale9Sprite_create, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "createWithSpriteFrame", mrb_cocos2d_extension_CCScale9Sprite_createWithSpriteFrame, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "createWithSpriteFrameName", mrb_cocos2d_extension_CCScale9Sprite_createWithSpriteFrameName, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getCapInsets", mrb_cocos2d_extension_CCScale9Sprite_getCapInsets, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getColor", mrb_cocos2d_extension_CCScale9Sprite_getColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getInsetBottom", mrb_cocos2d_extension_CCScale9Sprite_getInsetBottom, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getInsetLeft", mrb_cocos2d_extension_CCScale9Sprite_getInsetLeft, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getInsetRight", mrb_cocos2d_extension_CCScale9Sprite_getInsetRight, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getInsetTop", mrb_cocos2d_extension_CCScale9Sprite_getInsetTop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOpacity", mrb_cocos2d_extension_CCScale9Sprite_getOpacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOriginalSize", mrb_cocos2d_extension_CCScale9Sprite_getOriginalSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPreferredSize", mrb_cocos2d_extension_CCScale9Sprite_getPreferredSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCScale9Sprite_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithBatchNode", mrb_cocos2d_extension_CCScale9Sprite_initWithBatchNode, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "initWithFile", mrb_cocos2d_extension_CCScale9Sprite_initWithFile, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "initWithSpriteFrame", mrb_cocos2d_extension_CCScale9Sprite_initWithSpriteFrame, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "initWithSpriteFrameName", mrb_cocos2d_extension_CCScale9Sprite_initWithSpriteFrameName, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_extension_CCScale9Sprite_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "resizableSpriteWithCapInsets", mrb_cocos2d_extension_CCScale9Sprite_resizableSpriteWithCapInsets, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setCapInsets", mrb_cocos2d_extension_CCScale9Sprite_setCapInsets, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setColor", mrb_cocos2d_extension_CCScale9Sprite_setColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setContentSize", mrb_cocos2d_extension_CCScale9Sprite_setContentSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setInsetBottom", mrb_cocos2d_extension_CCScale9Sprite_setInsetBottom, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setInsetLeft", mrb_cocos2d_extension_CCScale9Sprite_setInsetLeft, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setInsetRight", mrb_cocos2d_extension_CCScale9Sprite_setInsetRight, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setInsetTop", mrb_cocos2d_extension_CCScale9Sprite_setInsetTop, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacity", mrb_cocos2d_extension_CCScale9Sprite_setOpacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_extension_CCScale9Sprite_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPreferredSize", mrb_cocos2d_extension_CCScale9Sprite_setPreferredSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSpriteFrame", mrb_cocos2d_extension_CCScale9Sprite_setSpriteFrame, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateWithBatchNode", mrb_cocos2d_extension_CCScale9Sprite_updateWithBatchNode, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "visit", mrb_cocos2d_extension_CCScale9Sprite_visit, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCScale9SpriteLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCScale9SpriteLoader");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "loader", mrb_cocos2d_extension_CCScale9SpriteLoader_loader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCScale9SpriteLoader_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayer") == 0) {
    _define_class_cocos2d_CCLayer(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayer"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCScrollView(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCScrollView");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCScrollView_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addChild", mrb_cocos2d_extension_CCScrollView_addChild, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "ccTouchBegan", mrb_cocos2d_extension_CCScrollView_ccTouchBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchCancelled", mrb_cocos2d_extension_CCScrollView_ccTouchCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchEnded", mrb_cocos2d_extension_CCScrollView_ccTouchEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchMoved", mrb_cocos2d_extension_CCScrollView_ccTouchMoved, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCScrollView_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getContainer", mrb_cocos2d_extension_CCScrollView_getContainer, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getContentOffset", mrb_cocos2d_extension_CCScrollView_getContentOffset, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getContentSize", mrb_cocos2d_extension_CCScrollView_getContentSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDelegate", mrb_cocos2d_extension_CCScrollView_getDelegate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDirection", mrb_cocos2d_extension_CCScrollView_getDirection, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getViewSize", mrb_cocos2d_extension_CCScrollView_getViewSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getZoomScale", mrb_cocos2d_extension_CCScrollView_getZoomScale, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCScrollView_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithViewSize", mrb_cocos2d_extension_CCScrollView_initWithViewSize, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "isBounceable", mrb_cocos2d_extension_CCScrollView_isBounceable, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isClippingToBounds", mrb_cocos2d_extension_CCScrollView_isClippingToBounds, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isDragging", mrb_cocos2d_extension_CCScrollView_isDragging, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isNodeVisible", mrb_cocos2d_extension_CCScrollView_isNodeVisible, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isTouchMoved", mrb_cocos2d_extension_CCScrollView_isTouchMoved, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "maxContainerOffset", mrb_cocos2d_extension_CCScrollView_maxContainerOffset, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "minContainerOffset", mrb_cocos2d_extension_CCScrollView_minContainerOffset, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pause", mrb_cocos2d_extension_CCScrollView_pause, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "registerWithTouchDispatcher", mrb_cocos2d_extension_CCScrollView_registerWithTouchDispatcher, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "resume", mrb_cocos2d_extension_CCScrollView_resume, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBounceable", mrb_cocos2d_extension_CCScrollView_setBounceable, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setClippingToBounds", mrb_cocos2d_extension_CCScrollView_setClippingToBounds, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setContainer", mrb_cocos2d_extension_CCScrollView_setContainer, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setContentOffset", mrb_cocos2d_extension_CCScrollView_setContentOffset, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setContentOffsetInDuration", mrb_cocos2d_extension_CCScrollView_setContentOffsetInDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setContentSize", mrb_cocos2d_extension_CCScrollView_setContentSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDelegate", mrb_cocos2d_extension_CCScrollView_setDelegate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDirection", mrb_cocos2d_extension_CCScrollView_setDirection, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTouchEnabled", mrb_cocos2d_extension_CCScrollView_setTouchEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setViewSize", mrb_cocos2d_extension_CCScrollView_setViewSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setZoomScale", mrb_cocos2d_extension_CCScrollView_setZoomScale, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "setZoomScaleInDuration", mrb_cocos2d_extension_CCScrollView_setZoomScaleInDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "updateInset", mrb_cocos2d_extension_CCScrollView_updateInset, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "visit", mrb_cocos2d_extension_CCScrollView_visit, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_extension_CCScrollViewDelegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCScrollViewDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "scrollViewDidScroll", mrb_cocos2d_extension_CCScrollViewDelegate_scrollViewDidScroll, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "scrollViewDidZoom", mrb_cocos2d_extension_CCScrollViewDelegate_scrollViewDidZoom, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCScrollViewLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCScrollViewLoader");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "loader", mrb_cocos2d_extension_CCScrollViewLoader_loader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCScrollViewLoader_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCDisplayData") == 0) {
    _define_class_cocos2d_extension_CCDisplayData(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDisplayData"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCShaderDisplayData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCShaderDisplayData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCShaderDisplayData_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copy", mrb_cocos2d_extension_CCShaderDisplayData_copy, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCShaderDisplayData_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "frag", mrb_cocos2d_extension_CCShaderDisplayData__get_frag, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "frag=", mrb_cocos2d_extension_CCShaderDisplayData__set_frag, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setParam", mrb_cocos2d_extension_CCShaderDisplayData_setParam, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "vert", mrb_cocos2d_extension_CCShaderDisplayData__get_vert, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "vert=", mrb_cocos2d_extension_CCShaderDisplayData__set_vert, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNodeRGBA") == 0) {
    _define_class_cocos2d_CCNodeRGBA(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCBlendProtocol") == 0) {
    _define_class_cocos2d_CCBlendProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCSkeleton(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCBlendProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCSkeleton");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "boundingBox", mrb_cocos2d_extension_CCSkeleton_boundingBox, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "createWithData", mrb_cocos2d_extension_CCSkeleton_createWithData, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "createWithFile", mrb_cocos2d_extension_CCSkeleton_createWithFile, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "debugBones", mrb_cocos2d_extension_CCSkeleton__get_debugBones, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "debugBones=", mrb_cocos2d_extension_CCSkeleton__set_debugBones, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "debugSlots", mrb_cocos2d_extension_CCSkeleton__get_debugSlots, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "debugSlots=", mrb_cocos2d_extension_CCSkeleton__set_debugSlots, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_extension_CCSkeleton_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "findBone", mrb_cocos2d_extension_CCSkeleton_findBone, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "findSlot", mrb_cocos2d_extension_CCSkeleton_findSlot, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getAttachment", mrb_cocos2d_extension_CCSkeleton_getAttachment, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getBlendFunc", mrb_cocos2d_extension_CCSkeleton_getBlendFunc, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_extension_CCSkeleton_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "premultipliedAlpha", mrb_cocos2d_extension_CCSkeleton__get_premultipliedAlpha, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "premultipliedAlpha=", mrb_cocos2d_extension_CCSkeleton__set_premultipliedAlpha, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "rootBone", mrb_cocos2d_extension_CCSkeleton__get_rootBone, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "rootBone=", mrb_cocos2d_extension_CCSkeleton__set_rootBone, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAttachment", mrb_cocos2d_extension_CCSkeleton_setAttachment, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setBlendFunc", mrb_cocos2d_extension_CCSkeleton_setBlendFunc, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBonesToSetupPose", mrb_cocos2d_extension_CCSkeleton_setBonesToSetupPose, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_extension_CCSkeleton_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSkin", mrb_cocos2d_extension_CCSkeleton_setSkin, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSlotsToSetupPose", mrb_cocos2d_extension_CCSkeleton_setSlotsToSetupPose, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setToSetupPose", mrb_cocos2d_extension_CCSkeleton_setToSetupPose, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "skeleton", mrb_cocos2d_extension_CCSkeleton__get_skeleton, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "skeleton=", mrb_cocos2d_extension_CCSkeleton__set_skeleton, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "timeScale", mrb_cocos2d_extension_CCSkeleton__get_timeScale, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "timeScale=", mrb_cocos2d_extension_CCSkeleton__set_timeScale, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_extension_CCSkeleton_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateWorldTransform", mrb_cocos2d_extension_CCSkeleton_updateWorldTransform, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCSkeleton") == 0) {
    _define_class_cocos2d_extension_CCSkeleton(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCSkeleton"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCSkeletonAnimation(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCSkeletonAnimation");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "addAnimation", mrb_cocos2d_extension_CCSkeletonAnimation_addAnimation, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "addAnimationState", mrb_cocos2d_extension_CCSkeletonAnimation_addAnimationState, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "clearAnimation", mrb_cocos2d_extension_CCSkeletonAnimation_clearAnimation, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithData", mrb_cocos2d_extension_CCSkeletonAnimation_createWithData, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithFile", mrb_cocos2d_extension_CCSkeletonAnimation_createWithFile, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "setAnimation", mrb_cocos2d_extension_CCSkeletonAnimation_setAnimation, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setAnimationStateData", mrb_cocos2d_extension_CCSkeletonAnimation_setAnimationStateData, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setMix", mrb_cocos2d_extension_CCSkeletonAnimation_setMix, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "states", mrb_cocos2d_extension_CCSkeletonAnimation__get_states, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "states=", mrb_cocos2d_extension_CCSkeletonAnimation__set_states, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_extension_CCSkeletonAnimation_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCDisplayData") == 0) {
    _define_class_cocos2d_extension_CCDisplayData(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCDisplayData"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCSpriteDisplayData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCSpriteDisplayData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCSpriteDisplayData_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copy", mrb_cocos2d_extension_CCSpriteDisplayData_copy, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCSpriteDisplayData_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "displayName", mrb_cocos2d_extension_CCSpriteDisplayData__get_displayName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "displayName=", mrb_cocos2d_extension_CCSpriteDisplayData__set_displayName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setParam", mrb_cocos2d_extension_CCSpriteDisplayData_setParam, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCNodeLoader") == 0) {
    _define_class_cocos2d_extension_CCNodeLoader(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCNodeLoader"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCSpriteLoader(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCSpriteLoader");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "loader", mrb_cocos2d_extension_CCSpriteLoader_loader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCSpriteLoader_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCScrollView") == 0) {
    _define_class_cocos2d_extension_CCScrollView(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCScrollViewDelegate") == 0) {
    _define_class_cocos2d_extension_CCScrollViewDelegate(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCScrollView"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCTableView(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCScrollViewDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCTableView");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCTableView_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "_updateContentSize", mrb_cocos2d_extension_CCTableView__updateContentSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "ccTouchBegan", mrb_cocos2d_extension_CCTableView_ccTouchBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchCancelled", mrb_cocos2d_extension_CCTableView_ccTouchCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchEnded", mrb_cocos2d_extension_CCTableView_ccTouchEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchMoved", mrb_cocos2d_extension_CCTableView_ccTouchMoved, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "cellAtIndex", mrb_cocos2d_extension_CCTableView_cellAtIndex, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCTableView_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "dequeueCell", mrb_cocos2d_extension_CCTableView_dequeueCell, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDataSource", mrb_cocos2d_extension_CCTableView_getDataSource, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDelegate", mrb_cocos2d_extension_CCTableView_getDelegate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getVerticalFillOrder", mrb_cocos2d_extension_CCTableView_getVerticalFillOrder, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithViewSize", mrb_cocos2d_extension_CCTableView_initWithViewSize, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "insertCellAtIndex", mrb_cocos2d_extension_CCTableView_insertCellAtIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reloadData", mrb_cocos2d_extension_CCTableView_reloadData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeCellAtIndex", mrb_cocos2d_extension_CCTableView_removeCellAtIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "scrollViewDidScroll", mrb_cocos2d_extension_CCTableView_scrollViewDidScroll, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "scrollViewDidZoom", mrb_cocos2d_extension_CCTableView_scrollViewDidZoom, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDataSource", mrb_cocos2d_extension_CCTableView_setDataSource, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDelegate", mrb_cocos2d_extension_CCTableView_setDelegate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setVerticalFillOrder", mrb_cocos2d_extension_CCTableView_setVerticalFillOrder, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateCellAtIndex", mrb_cocos2d_extension_CCTableView_updateCellAtIndex, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCSortableObject") == 0) {
    _define_class_cocos2d_extension_CCSortableObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCTableViewCell(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCSortableObject");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCTableViewCell");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCTableViewCell_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getIdx", mrb_cocos2d_extension_CCTableViewCell_getIdx, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getObjectID", mrb_cocos2d_extension_CCTableViewCell_getObjectID, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reset", mrb_cocos2d_extension_CCTableViewCell_reset, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setIdx", mrb_cocos2d_extension_CCTableViewCell_setIdx, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setObjectID", mrb_cocos2d_extension_CCTableViewCell_setObjectID, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_CCTableViewDataSource(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCTableViewDataSource");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "cellSizeForTable", mrb_cocos2d_extension_CCTableViewDataSource_cellSizeForTable, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "numberOfCellsInTableView", mrb_cocos2d_extension_CCTableViewDataSource_numberOfCellsInTableView, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tableCellAtIndex", mrb_cocos2d_extension_CCTableViewDataSource_tableCellAtIndex, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "tableCellSizeForIndex", mrb_cocos2d_extension_CCTableViewDataSource_tableCellSizeForIndex, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_extension_CCTableViewDelegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCTableViewDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "tableCellHighlight", mrb_cocos2d_extension_CCTableViewDelegate_tableCellHighlight, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "tableCellTouched", mrb_cocos2d_extension_CCTableViewDelegate_tableCellTouched, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "tableCellUnhighlight", mrb_cocos2d_extension_CCTableViewDelegate_tableCellUnhighlight, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "tableCellWillRecycle", mrb_cocos2d_extension_CCTableViewDelegate_tableCellWillRecycle, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCTextureData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCTextureData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCTextureData_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addContourData", mrb_cocos2d_extension_CCTextureData_addContourData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "contourDataList", mrb_cocos2d_extension_CCTextureData__get_contourDataList, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "contourDataList=", mrb_cocos2d_extension_CCTextureData__set_contourDataList, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCTextureData_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getContourData", mrb_cocos2d_extension_CCTextureData_getContourData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "height", mrb_cocos2d_extension_CCTextureData__get_height, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "height=", mrb_cocos2d_extension_CCTextureData__set_height, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCTextureData_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "name", mrb_cocos2d_extension_CCTextureData__get_name, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "name=", mrb_cocos2d_extension_CCTextureData__set_name, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "pivotX", mrb_cocos2d_extension_CCTextureData__get_pivotX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pivotX=", mrb_cocos2d_extension_CCTextureData__set_pivotX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "pivotY", mrb_cocos2d_extension_CCTextureData__get_pivotY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pivotY=", mrb_cocos2d_extension_CCTextureData__set_pivotY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "width", mrb_cocos2d_extension_CCTextureData__get_width, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "width=", mrb_cocos2d_extension_CCTextureData__set_width, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::Extension::CCProcessBase") == 0) {
    _define_class_cocos2d_extension_CCProcessBase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCProcessBase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCTween(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCTween");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCTween_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "betweenDuration", mrb_cocos2d_extension_CCTween__get_betweenDuration, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "betweenDuration=", mrb_cocos2d_extension_CCTween__set_betweenDuration, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_CCTween_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getAnimation", mrb_cocos2d_extension_CCTween_getAnimation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMovementBoneData", mrb_cocos2d_extension_CCTween_getMovementBoneData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_CCTween_init, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_bIsTweenKeyFrame", mrb_cocos2d_extension_CCTween__get_m_bIsTweenKeyFrame, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bIsTweenKeyFrame=", mrb_cocos2d_extension_CCTween__set_m_bIsTweenKeyFrame, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_eFrameTweenEasing", mrb_cocos2d_extension_CCTween__get_m_eFrameTweenEasing, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_eFrameTweenEasing=", mrb_cocos2d_extension_CCTween__set_m_eFrameTweenEasing, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_iFromIndex", mrb_cocos2d_extension_CCTween__get_m_iFromIndex, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_iFromIndex=", mrb_cocos2d_extension_CCTween__set_m_iFromIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_iToIndex", mrb_cocos2d_extension_CCTween__get_m_iToIndex, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_iToIndex=", mrb_cocos2d_extension_CCTween__set_m_iToIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_iTotalDuration", mrb_cocos2d_extension_CCTween__get_m_iTotalDuration, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_iTotalDuration=", mrb_cocos2d_extension_CCTween__set_m_iTotalDuration, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pAnimation", mrb_cocos2d_extension_CCTween__get_m_pAnimation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pAnimation=", mrb_cocos2d_extension_CCTween__set_m_pAnimation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pBetween", mrb_cocos2d_extension_CCTween__get_m_pBetween, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pBetween=", mrb_cocos2d_extension_CCTween__set_m_pBetween, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pBone", mrb_cocos2d_extension_CCTween__get_m_pBone, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pBone=", mrb_cocos2d_extension_CCTween__set_m_pBone, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pCurrentKeyFrame", mrb_cocos2d_extension_CCTween__get_m_pCurrentKeyFrame, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pCurrentKeyFrame=", mrb_cocos2d_extension_CCTween__set_m_pCurrentKeyFrame, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pFrom", mrb_cocos2d_extension_CCTween__get_m_pFrom, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pFrom=", mrb_cocos2d_extension_CCTween__set_m_pFrom, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pTo", mrb_cocos2d_extension_CCTween__get_m_pTo, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pTo=", mrb_cocos2d_extension_CCTween__set_m_pTo, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pTweenData", mrb_cocos2d_extension_CCTween__get_m_pTweenData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pTweenData=", mrb_cocos2d_extension_CCTween__set_m_pTweenData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "play", mrb_cocos2d_extension_CCTween_play, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, cur_rc, "setAnimation", mrb_cocos2d_extension_CCTween_setAnimation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMovementBoneData", mrb_cocos2d_extension_CCTween_setMovementBoneData, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_CCTweenFunction(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCTweenFunction");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "backEaseIn", mrb_cocos2d_extension_CCTweenFunction_backEaseIn, MRB_ARGS_REQ(5));
  mrb_define_class_method(mrb, cur_rc, "backEaseInOut", mrb_cocos2d_extension_CCTweenFunction_backEaseInOut, MRB_ARGS_REQ(5));
  mrb_define_class_method(mrb, cur_rc, "backEaseOut", mrb_cocos2d_extension_CCTweenFunction_backEaseOut, MRB_ARGS_REQ(5));
  mrb_define_class_method(mrb, cur_rc, "bounceEaseIn", mrb_cocos2d_extension_CCTweenFunction_bounceEaseIn, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "bounceEaseInOut", mrb_cocos2d_extension_CCTweenFunction_bounceEaseInOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "bounceEaseOut", mrb_cocos2d_extension_CCTweenFunction_bounceEaseOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "circEaseIn", mrb_cocos2d_extension_CCTweenFunction_circEaseIn, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "circEaseInOut", mrb_cocos2d_extension_CCTweenFunction_circEaseInOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "circEaseOut", mrb_cocos2d_extension_CCTweenFunction_circEaseOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "cubicEaseIn", mrb_cocos2d_extension_CCTweenFunction_cubicEaseIn, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "cubicEaseInOut", mrb_cocos2d_extension_CCTweenFunction_cubicEaseInOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "cubicEaseOut", mrb_cocos2d_extension_CCTweenFunction_cubicEaseOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "elasticEaseIn", mrb_cocos2d_extension_CCTweenFunction_elasticEaseIn, MRB_ARGS_REQ(6));
  mrb_define_class_method(mrb, cur_rc, "elasticEaseInOut", mrb_cocos2d_extension_CCTweenFunction_elasticEaseInOut, MRB_ARGS_REQ(6));
  mrb_define_class_method(mrb, cur_rc, "elasticEaseOut", mrb_cocos2d_extension_CCTweenFunction_elasticEaseOut, MRB_ARGS_REQ(6));
  mrb_define_class_method(mrb, cur_rc, "expoEaseIn", mrb_cocos2d_extension_CCTweenFunction_expoEaseIn, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "expoEaseInOut", mrb_cocos2d_extension_CCTweenFunction_expoEaseInOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "expoEaseOut", mrb_cocos2d_extension_CCTweenFunction_expoEaseOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "linear", mrb_cocos2d_extension_CCTweenFunction_linear, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "quadEaseIn", mrb_cocos2d_extension_CCTweenFunction_quadEaseIn, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "quadEaseInOut", mrb_cocos2d_extension_CCTweenFunction_quadEaseInOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "quadEaseOut", mrb_cocos2d_extension_CCTweenFunction_quadEaseOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "quartEaseIn", mrb_cocos2d_extension_CCTweenFunction_quartEaseIn, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "quartEaseInOut", mrb_cocos2d_extension_CCTweenFunction_quartEaseInOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "quartEaseOut", mrb_cocos2d_extension_CCTweenFunction_quartEaseOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "quintEaseIn", mrb_cocos2d_extension_CCTweenFunction_quintEaseIn, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "quintEaseInOut", mrb_cocos2d_extension_CCTweenFunction_quintEaseInOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "quintEaseOut", mrb_cocos2d_extension_CCTweenFunction_quintEaseOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "sineEaseIn", mrb_cocos2d_extension_CCTweenFunction_sineEaseIn, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "sineEaseInOut", mrb_cocos2d_extension_CCTweenFunction_sineEaseInOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "sineEaseOut", mrb_cocos2d_extension_CCTweenFunction_sineEaseOut, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, cur_rc, "tweenTo", mrb_cocos2d_extension_CCTweenFunction_tweenTo, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCTweenFunction_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_const(mrb, cur_rc, "COMPLETE", mrb_cocos2d_extension__get_COMPLETE(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CS_DISPLAY_ARMATURE", mrb_cocos2d_extension__get_CS_DISPLAY_ARMATURE(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CS_DISPLAY_MAX", mrb_cocos2d_extension__get_CS_DISPLAY_MAX(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CS_DISPLAY_PARTICLE", mrb_cocos2d_extension__get_CS_DISPLAY_PARTICLE(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CS_DISPLAY_SHADER", mrb_cocos2d_extension__get_CS_DISPLAY_SHADER(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CS_DISPLAY_SPRITE", mrb_cocos2d_extension__get_CS_DISPLAY_SPRITE(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Circ_EaseIn", mrb_cocos2d_extension__get_Circ_EaseIn(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Circ_EaseInOut", mrb_cocos2d_extension__get_Circ_EaseInOut(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Circ_EaseOut", mrb_cocos2d_extension__get_Circ_EaseOut(mrb, mrb_obj_value(cur_rc)));

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_ColliderBody(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::ColliderBody");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_ColliderBody_initialize, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getB2Body", mrb_cocos2d_extension_ColliderBody_getB2Body, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getContourData", mrb_cocos2d_extension_ColliderBody_getContourData, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "ColorTimeline_create", mrb_cocos2d_extension_ColorTimeline_create, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ColorTimeline_setFrame", mrb_cocos2d_extension_ColorTimeline_setFrame, MRB_ARGS_REQ(7));
  mrb_define_const(mrb, cur_rc, "Cubic_EaseIn", mrb_cocos2d_extension__get_Cubic_EaseIn(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Cubic_EaseInOut", mrb_cocos2d_extension__get_Cubic_EaseInOut(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Cubic_EaseOut", mrb_cocos2d_extension__get_Cubic_EaseOut(mrb, mrb_obj_value(cur_rc)));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_CurveTimeline(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CurveTimeline");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "curves", mrb_cocos2d_extension_CurveTimeline__get_curves, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "curves=", mrb_cocos2d_extension_CurveTimeline__set_curves, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "super", mrb_cocos2d_extension_CurveTimeline__get_super, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "super=", mrb_cocos2d_extension_CurveTimeline__set_super, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CurveTimeline_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "CurveTimeline_getCurvePercent", mrb_cocos2d_extension_CurveTimeline_getCurvePercent, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "CurveTimeline_setCurve", mrb_cocos2d_extension_CurveTimeline_setCurve, MRB_ARGS_REQ(6));
  mrb_define_module_function(mrb, cur_rc, "CurveTimeline_setLinear", mrb_cocos2d_extension_CurveTimeline_setLinear, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "CurveTimeline_setStepped", mrb_cocos2d_extension_CurveTimeline_setStepped, MRB_ARGS_REQ(2));
  mrb_define_const(mrb, cur_rc, "Elastic_EaseIn", mrb_cocos2d_extension__get_Elastic_EaseIn(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Elastic_EaseInOut", mrb_cocos2d_extension__get_Elastic_EaseInOut(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Elastic_EaseOut", mrb_cocos2d_extension__get_Elastic_EaseOut(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Expo_EaseIn", mrb_cocos2d_extension__get_Expo_EaseIn(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Expo_EaseInOut", mrb_cocos2d_extension__get_Expo_EaseInOut(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Expo_EaseOut", mrb_cocos2d_extension__get_Expo_EaseOut(mrb, mrb_obj_value(cur_rc)));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_HSV(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::HSV");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "h", mrb_cocos2d_extension_HSV__get_h, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "h=", mrb_cocos2d_extension_HSV__set_h, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "s", mrb_cocos2d_extension_HSV__get_s, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "s=", mrb_cocos2d_extension_HSV__set_s, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "v", mrb_cocos2d_extension_HSV__get_v, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "v=", mrb_cocos2d_extension_HSV__set_v, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_HSV_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_const(mrb, cur_rc, "LOOP_COMPLETE", mrb_cocos2d_extension__get_LOOP_COMPLETE(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Linear", mrb_cocos2d_extension__get_Linear(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Quad_EaseIn", mrb_cocos2d_extension__get_Quad_EaseIn(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Quad_EaseInOut", mrb_cocos2d_extension__get_Quad_EaseInOut(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Quad_EaseOut", mrb_cocos2d_extension__get_Quad_EaseOut(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Quart_EaseIn", mrb_cocos2d_extension__get_Quart_EaseIn(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Quart_EaseInOut", mrb_cocos2d_extension__get_Quart_EaseInOut(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Quart_EaseOut", mrb_cocos2d_extension__get_Quart_EaseOut(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Quint_EaseIn", mrb_cocos2d_extension__get_Quint_EaseIn(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Quint_EaseInOut", mrb_cocos2d_extension__get_Quint_EaseInOut(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Quint_EaseOut", mrb_cocos2d_extension__get_Quint_EaseOut(mrb, mrb_obj_value(cur_rc)));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_RGBA(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::RGBA");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "a", mrb_cocos2d_extension_RGBA__get_a, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "a=", mrb_cocos2d_extension_RGBA__set_a, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "b", mrb_cocos2d_extension_RGBA__get_b, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "b=", mrb_cocos2d_extension_RGBA__set_b, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "g", mrb_cocos2d_extension_RGBA__get_g, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "g=", mrb_cocos2d_extension_RGBA__set_g, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "r", mrb_cocos2d_extension_RGBA__get_r, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "r=", mrb_cocos2d_extension_RGBA__set_r, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_RGBA_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_RegionAttachment(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::RegionAttachment");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "height", mrb_cocos2d_extension_RegionAttachment__get_height, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "height=", mrb_cocos2d_extension_RegionAttachment__set_height, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "offset", mrb_cocos2d_extension_RegionAttachment__get_offset, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "offset=", mrb_cocos2d_extension_RegionAttachment__set_offset, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "regionHeight", mrb_cocos2d_extension_RegionAttachment__get_regionHeight, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "regionHeight=", mrb_cocos2d_extension_RegionAttachment__set_regionHeight, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "regionOffsetX", mrb_cocos2d_extension_RegionAttachment__get_regionOffsetX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "regionOffsetX=", mrb_cocos2d_extension_RegionAttachment__set_regionOffsetX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "regionOffsetY", mrb_cocos2d_extension_RegionAttachment__get_regionOffsetY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "regionOffsetY=", mrb_cocos2d_extension_RegionAttachment__set_regionOffsetY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "regionOriginalHeight", mrb_cocos2d_extension_RegionAttachment__get_regionOriginalHeight, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "regionOriginalHeight=", mrb_cocos2d_extension_RegionAttachment__set_regionOriginalHeight, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "regionOriginalWidth", mrb_cocos2d_extension_RegionAttachment__get_regionOriginalWidth, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "regionOriginalWidth=", mrb_cocos2d_extension_RegionAttachment__set_regionOriginalWidth, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "regionWidth", mrb_cocos2d_extension_RegionAttachment__get_regionWidth, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "regionWidth=", mrb_cocos2d_extension_RegionAttachment__set_regionWidth, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "rotation", mrb_cocos2d_extension_RegionAttachment__get_rotation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "rotation=", mrb_cocos2d_extension_RegionAttachment__set_rotation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "scaleX", mrb_cocos2d_extension_RegionAttachment__get_scaleX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "scaleX=", mrb_cocos2d_extension_RegionAttachment__set_scaleX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "scaleY", mrb_cocos2d_extension_RegionAttachment__get_scaleY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "scaleY=", mrb_cocos2d_extension_RegionAttachment__set_scaleY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "super", mrb_cocos2d_extension_RegionAttachment__get_super, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "super=", mrb_cocos2d_extension_RegionAttachment__set_super, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "uvs", mrb_cocos2d_extension_RegionAttachment__get_uvs, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "uvs=", mrb_cocos2d_extension_RegionAttachment__set_uvs, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "width", mrb_cocos2d_extension_RegionAttachment__get_width, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "width=", mrb_cocos2d_extension_RegionAttachment__set_width, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "x", mrb_cocos2d_extension_RegionAttachment__get_x, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "x=", mrb_cocos2d_extension_RegionAttachment__set_x, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "y", mrb_cocos2d_extension_RegionAttachment__get_y, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "y=", mrb_cocos2d_extension_RegionAttachment__set_y, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_RegionAttachment_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "RegionAttachment_computeVertices", mrb_cocos2d_extension_RegionAttachment_computeVertices, MRB_ARGS_REQ(5));
  mrb_define_module_function(mrb, cur_rc, "RegionAttachment_create", mrb_cocos2d_extension_RegionAttachment_create, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "RegionAttachment_setUVs", mrb_cocos2d_extension_RegionAttachment_setUVs, MRB_ARGS_REQ(6));
  mrb_define_module_function(mrb, cur_rc, "RegionAttachment_updateOffset", mrb_cocos2d_extension_RegionAttachment_updateOffset, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "RegionAttachment_updateQuad", mrb_cocos2d_extension_RegionAttachment_updateQuad, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "RotateTimeline_create", mrb_cocos2d_extension_RotateTimeline_create, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "RotateTimeline_setFrame", mrb_cocos2d_extension_RotateTimeline_setFrame, MRB_ARGS_REQ(4));
  mrb_define_const(mrb, cur_rc, "SINGLE_FRAME", mrb_cocos2d_extension__get_SINGLE_FRAME(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "START", mrb_cocos2d_extension__get_START(mrb, mrb_obj_value(cur_rc)));
  mrb_define_module_function(mrb, cur_rc, "ScaleTimeline_create", mrb_cocos2d_extension_ScaleTimeline_create, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ScaleTimeline_setFrame", mrb_cocos2d_extension_ScaleTimeline_setFrame, MRB_ARGS_REQ(5));
  mrb_define_const(mrb, cur_rc, "Sine_EaseIn", mrb_cocos2d_extension__get_Sine_EaseIn(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Sine_EaseInOut", mrb_cocos2d_extension__get_Sine_EaseInOut(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "Sine_EaseOut", mrb_cocos2d_extension__get_Sine_EaseOut(mrb, mrb_obj_value(cur_rc)));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_Skeleton(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::Skeleton");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "a", mrb_cocos2d_extension_Skeleton__get_a, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "a=", mrb_cocos2d_extension_Skeleton__set_a, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "b", mrb_cocos2d_extension_Skeleton__get_b, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "b=", mrb_cocos2d_extension_Skeleton__set_b, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "boneCount", mrb_cocos2d_extension_Skeleton__get_boneCount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "boneCount=", mrb_cocos2d_extension_Skeleton__set_boneCount, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "bones", mrb_cocos2d_extension_Skeleton__get_bones, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "bones=", mrb_cocos2d_extension_Skeleton__set_bones, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "data", mrb_cocos2d_extension_Skeleton__get_data, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "drawOrder", mrb_cocos2d_extension_Skeleton__get_drawOrder, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "drawOrder=", mrb_cocos2d_extension_Skeleton__set_drawOrder, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "flipX", mrb_cocos2d_extension_Skeleton__get_flipX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "flipX=", mrb_cocos2d_extension_Skeleton__set_flipX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "flipY", mrb_cocos2d_extension_Skeleton__get_flipY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "flipY=", mrb_cocos2d_extension_Skeleton__set_flipY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "g", mrb_cocos2d_extension_Skeleton__get_g, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "g=", mrb_cocos2d_extension_Skeleton__set_g, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "r", mrb_cocos2d_extension_Skeleton__get_r, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "r=", mrb_cocos2d_extension_Skeleton__set_r, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "root", mrb_cocos2d_extension_Skeleton__get_root, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "skin", mrb_cocos2d_extension_Skeleton__get_skin, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "slotCount", mrb_cocos2d_extension_Skeleton__get_slotCount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "slotCount=", mrb_cocos2d_extension_Skeleton__set_slotCount, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "slots", mrb_cocos2d_extension_Skeleton__get_slots, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "slots=", mrb_cocos2d_extension_Skeleton__set_slots, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "time", mrb_cocos2d_extension_Skeleton__get_time, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "time=", mrb_cocos2d_extension_Skeleton__set_time, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "x", mrb_cocos2d_extension_Skeleton__get_x, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "x=", mrb_cocos2d_extension_Skeleton__set_x, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "y", mrb_cocos2d_extension_Skeleton__get_y, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "y=", mrb_cocos2d_extension_Skeleton__set_y, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_Skeleton_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_SkeletonData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::SkeletonData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "animationCount", mrb_cocos2d_extension_SkeletonData__get_animationCount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "animationCount=", mrb_cocos2d_extension_SkeletonData__set_animationCount, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "animations", mrb_cocos2d_extension_SkeletonData__get_animations, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "animations=", mrb_cocos2d_extension_SkeletonData__set_animations, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "boneCount", mrb_cocos2d_extension_SkeletonData__get_boneCount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "boneCount=", mrb_cocos2d_extension_SkeletonData__set_boneCount, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "bones", mrb_cocos2d_extension_SkeletonData__get_bones, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "bones=", mrb_cocos2d_extension_SkeletonData__set_bones, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "defaultSkin", mrb_cocos2d_extension_SkeletonData__get_defaultSkin, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "defaultSkin=", mrb_cocos2d_extension_SkeletonData__set_defaultSkin, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "skinCount", mrb_cocos2d_extension_SkeletonData__get_skinCount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "skinCount=", mrb_cocos2d_extension_SkeletonData__set_skinCount, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "skins", mrb_cocos2d_extension_SkeletonData__get_skins, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "skins=", mrb_cocos2d_extension_SkeletonData__set_skins, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "slotCount", mrb_cocos2d_extension_SkeletonData__get_slotCount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "slotCount=", mrb_cocos2d_extension_SkeletonData__set_slotCount, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "slots", mrb_cocos2d_extension_SkeletonData__get_slots, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "slots=", mrb_cocos2d_extension_SkeletonData__set_slots, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_SkeletonData_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "SkeletonData_create", mrb_cocos2d_extension_SkeletonData_create, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "SkeletonData_dispose", mrb_cocos2d_extension_SkeletonData_dispose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "SkeletonData_findAnimation", mrb_cocos2d_extension_SkeletonData_findAnimation, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "SkeletonData_findBone", mrb_cocos2d_extension_SkeletonData_findBone, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "SkeletonData_findBoneIndex", mrb_cocos2d_extension_SkeletonData_findBoneIndex, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "SkeletonData_findSkin", mrb_cocos2d_extension_SkeletonData_findSkin, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "SkeletonData_findSlot", mrb_cocos2d_extension_SkeletonData_findSlot, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "SkeletonData_findSlotIndex", mrb_cocos2d_extension_SkeletonData_findSlotIndex, MRB_ARGS_REQ(2));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_SkeletonJson(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::SkeletonJson");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "attachmentLoader", mrb_cocos2d_extension_SkeletonJson__get_attachmentLoader, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "attachmentLoader=", mrb_cocos2d_extension_SkeletonJson__set_attachmentLoader, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "error", mrb_cocos2d_extension_SkeletonJson__get_error, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "scale", mrb_cocos2d_extension_SkeletonJson__get_scale, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "scale=", mrb_cocos2d_extension_SkeletonJson__set_scale, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_SkeletonJson_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "SkeletonJson_create", mrb_cocos2d_extension_SkeletonJson_create, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "SkeletonJson_createWithLoader", mrb_cocos2d_extension_SkeletonJson_createWithLoader, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "SkeletonJson_dispose", mrb_cocos2d_extension_SkeletonJson_dispose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "SkeletonJson_readSkeletonData", mrb_cocos2d_extension_SkeletonJson_readSkeletonData, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "SkeletonJson_readSkeletonDataFile", mrb_cocos2d_extension_SkeletonJson_readSkeletonDataFile, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_create", mrb_cocos2d_extension_Skeleton_create, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_dispose", mrb_cocos2d_extension_Skeleton_dispose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_findBone", mrb_cocos2d_extension_Skeleton_findBone, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_findBoneIndex", mrb_cocos2d_extension_Skeleton_findBoneIndex, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_findSlot", mrb_cocos2d_extension_Skeleton_findSlot, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_findSlotIndex", mrb_cocos2d_extension_Skeleton_findSlotIndex, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_getAttachmentForSlotIndex", mrb_cocos2d_extension_Skeleton_getAttachmentForSlotIndex, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_getAttachmentForSlotName", mrb_cocos2d_extension_Skeleton_getAttachmentForSlotName, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_setAttachment", mrb_cocos2d_extension_Skeleton_setAttachment, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_setBonesToSetupPose", mrb_cocos2d_extension_Skeleton_setBonesToSetupPose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_setSkin", mrb_cocos2d_extension_Skeleton_setSkin, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_setSkinByName", mrb_cocos2d_extension_Skeleton_setSkinByName, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_setSlotsToSetupPose", mrb_cocos2d_extension_Skeleton_setSlotsToSetupPose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_setToSetupPose", mrb_cocos2d_extension_Skeleton_setToSetupPose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_update", mrb_cocos2d_extension_Skeleton_update, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "Skeleton_updateWorldTransform", mrb_cocos2d_extension_Skeleton_updateWorldTransform, MRB_ARGS_REQ(1));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_Skin(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::Skin");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "name", mrb_cocos2d_extension_Skin__get_name, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_Skin_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "Skin_addAttachment", mrb_cocos2d_extension_Skin_addAttachment, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "Skin_attachAll", mrb_cocos2d_extension_Skin_attachAll, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "Skin_create", mrb_cocos2d_extension_Skin_create, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Skin_dispose", mrb_cocos2d_extension_Skin_dispose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Skin_getAttachment", mrb_cocos2d_extension_Skin_getAttachment, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "Skin_getAttachmentName", mrb_cocos2d_extension_Skin_getAttachmentName, MRB_ARGS_REQ(3));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_Slot(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::Slot");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "a", mrb_cocos2d_extension_Slot__get_a, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "a=", mrb_cocos2d_extension_Slot__set_a, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "attachment", mrb_cocos2d_extension_Slot__get_attachment, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "b", mrb_cocos2d_extension_Slot__get_b, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "b=", mrb_cocos2d_extension_Slot__set_b, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "bone", mrb_cocos2d_extension_Slot__get_bone, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "data", mrb_cocos2d_extension_Slot__get_data, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "g", mrb_cocos2d_extension_Slot__get_g, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "g=", mrb_cocos2d_extension_Slot__set_g, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "r", mrb_cocos2d_extension_Slot__get_r, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "r=", mrb_cocos2d_extension_Slot__set_r, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "skeleton", mrb_cocos2d_extension_Slot__get_skeleton, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_Slot_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_SlotData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::SlotData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "a", mrb_cocos2d_extension_SlotData__get_a, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "a=", mrb_cocos2d_extension_SlotData__set_a, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "attachmentName", mrb_cocos2d_extension_SlotData__get_attachmentName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "b", mrb_cocos2d_extension_SlotData__get_b, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "b=", mrb_cocos2d_extension_SlotData__set_b, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "boneData", mrb_cocos2d_extension_SlotData__get_boneData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "g", mrb_cocos2d_extension_SlotData__get_g, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "g=", mrb_cocos2d_extension_SlotData__set_g, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "name", mrb_cocos2d_extension_SlotData__get_name, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "r", mrb_cocos2d_extension_SlotData__get_r, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "r=", mrb_cocos2d_extension_SlotData__set_r, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_SlotData_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "SlotData_create", mrb_cocos2d_extension_SlotData_create, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "SlotData_dispose", mrb_cocos2d_extension_SlotData_dispose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "SlotData_setAttachmentName", mrb_cocos2d_extension_SlotData_setAttachmentName, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "Slot_create", mrb_cocos2d_extension_Slot_create, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "Slot_dispose", mrb_cocos2d_extension_Slot_dispose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Slot_getAttachmentTime", mrb_cocos2d_extension_Slot_getAttachmentTime, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "Slot_setAttachment", mrb_cocos2d_extension_Slot_setAttachment, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "Slot_setAttachmentTime", mrb_cocos2d_extension_Slot_setAttachmentTime, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "Slot_setToSetupPose", mrb_cocos2d_extension_Slot_setToSetupPose, MRB_ARGS_REQ(1));
  mrb_define_const(mrb, cur_rc, "TWEEN_EASING_MAX", mrb_cocos2d_extension__get_TWEEN_EASING_MAX(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "TWEEN_EASING_MIN", mrb_cocos2d_extension__get_TWEEN_EASING_MIN(mrb, mrb_obj_value(cur_rc)));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_Timeline(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::Timeline");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_Timeline_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "operator=", mrb_cocos2d_extension_Timeline_assign, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "Timeline_apply", mrb_cocos2d_extension_Timeline_apply, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "Timeline_dispose", mrb_cocos2d_extension_Timeline_dispose, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "TranslateTimeline_create", mrb_cocos2d_extension_TranslateTimeline_create, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "TranslateTimeline_setFrame", mrb_cocos2d_extension_TranslateTimeline_setFrame, MRB_ARGS_REQ(5));
  mrb_define_const(mrb, cur_rc, "VERTEX_X1", mrb_cocos2d_extension__get_VERTEX_X1(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "VERTEX_X2", mrb_cocos2d_extension__get_VERTEX_X2(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "VERTEX_X3", mrb_cocos2d_extension__get_VERTEX_X3(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "VERTEX_X4", mrb_cocos2d_extension__get_VERTEX_X4(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "VERTEX_Y1", mrb_cocos2d_extension__get_VERTEX_Y1(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "VERTEX_Y2", mrb_cocos2d_extension__get_VERTEX_Y2(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "VERTEX_Y3", mrb_cocos2d_extension__get_VERTEX_Y3(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "VERTEX_Y4", mrb_cocos2d_extension__get_VERTEX_Y4(mrb, mrb_obj_value(cur_rc)));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_WebSocket(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::WebSocket");
  assert(cur_rc);

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension_WebSocket_Data(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::WebSocket::Data");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_WebSocket_Data_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "bytes", mrb_cocos2d_extension_WebSocket_Data__get_bytes, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "bytes=", mrb_cocos2d_extension_WebSocket_Data__set_bytes, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isBinary", mrb_cocos2d_extension_WebSocket_Data__get_isBinary, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isBinary=", mrb_cocos2d_extension_WebSocket_Data__set_isBinary, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "len", mrb_cocos2d_extension_WebSocket_Data__get_len, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "len=", mrb_cocos2d_extension_WebSocket_Data__set_len, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::WebSocket");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_extension_WebSocket_Delegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::WebSocket::Delegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "onClose", mrb_cocos2d_extension_WebSocket_Delegate_onClose, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "onError", mrb_cocos2d_extension_WebSocket_Delegate_onError, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "onMessage", mrb_cocos2d_extension_WebSocket_Delegate_onMessage, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "onOpen", mrb_cocos2d_extension_WebSocket_Delegate_onOpen, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::WebSocket");
  assert(cur_rc);
  DONE;
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_WebSocket_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "close", mrb_cocos2d_extension_WebSocket_close, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getReadyState", mrb_cocos2d_extension_WebSocket_getReadyState, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_extension_WebSocket_init, MRB_ARGS_REQ(3));
  mrb_define_class_method(mrb, cur_rc, "kErrorConnectionFailure", mrb_cocos2d_extension_WebSocket__get_kErrorConnectionFailure, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kErrorTimeout", mrb_cocos2d_extension_WebSocket__get_kErrorTimeout, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kErrorUnknown", mrb_cocos2d_extension_WebSocket__get_kErrorUnknown, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kStateClosed", mrb_cocos2d_extension_WebSocket__get_kStateClosed, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kStateClosing", mrb_cocos2d_extension_WebSocket__get_kStateClosing, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kStateConnecting", mrb_cocos2d_extension_WebSocket__get_kStateConnecting, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kStateOpen", mrb_cocos2d_extension_WebSocket__get_kStateOpen, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "send", mrb_cocos2d_extension_WebSocket_send, MRB_ARGS_ANY());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_CCMRubyWebSocketDelegate(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CCMRubyWebSocketDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_CCMRubyWebSocketDelegate_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onClose", mrb_cocos2d_extension_CCMRubyWebSocketDelegate_onClose, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "onError", mrb_cocos2d_extension_CCMRubyWebSocketDelegate_onError, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "onMessage", mrb_cocos2d_extension_CCMRubyWebSocketDelegate_onMessage, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "onOpen", mrb_cocos2d_extension_CCMRubyWebSocketDelegate_onOpen, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension__AnimationState(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CC_AnimationState");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension__AnimationState_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "animation", mrb_cocos2d_extension__AnimationState__get_animation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "data", mrb_cocos2d_extension__AnimationState__get_data, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "loop", mrb_cocos2d_extension__AnimationState__get_loop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "loop=", mrb_cocos2d_extension__AnimationState__set_loop, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "operator=", mrb_cocos2d_extension__AnimationState_assign, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "time", mrb_cocos2d_extension__AnimationState__get_time, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "time=", mrb_cocos2d_extension__AnimationState__set_time, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension__AttachmentTimeline(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CC_AttachmentTimeline");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension__AttachmentTimeline_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "attachmentNames", mrb_cocos2d_extension__AttachmentTimeline__get_attachmentNames, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "frames", mrb_cocos2d_extension__AttachmentTimeline__get_frames, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "framesLength", mrb_cocos2d_extension__AttachmentTimeline__get_framesLength, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "operator=", mrb_cocos2d_extension__AttachmentTimeline_assign, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "slotIndex", mrb_cocos2d_extension__AttachmentTimeline__get_slotIndex, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "slotIndex=", mrb_cocos2d_extension__AttachmentTimeline__set_slotIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "super", mrb_cocos2d_extension__AttachmentTimeline__get_super, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "super=", mrb_cocos2d_extension__AttachmentTimeline__set_super, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_extension__ColorTimeline(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::CC_ColorTimeline");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension__ColorTimeline_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "frames", mrb_cocos2d_extension__ColorTimeline__get_frames, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "framesLength", mrb_cocos2d_extension__ColorTimeline__get_framesLength, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "operator=", mrb_cocos2d_extension__ColorTimeline_assign, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "slotIndex", mrb_cocos2d_extension__ColorTimeline__get_slotIndex, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "slotIndex=", mrb_cocos2d_extension__ColorTimeline__set_slotIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "super", mrb_cocos2d_extension__ColorTimeline__get_super, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "super=", mrb_cocos2d_extension__ColorTimeline__set_super, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_extension_ccColor3BWapper(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension::ccColor3BWapper");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_extension_ccColor3BWapper_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getColor", mrb_cocos2d_extension_ccColor3BWapper_getColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_extension_ccColor3BWapper_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::Extension");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "getAbsolutePosition", mrb_cocos2d_extension_getAbsolutePosition, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "kArrayValue", mrb_cocos2d_extension__get_kArrayValue, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kBoolValue", mrb_cocos2d_extension__get_kBoolValue, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCControlStepperPartMinus", mrb_cocos2d_extension__get_kCCControlStepperPartMinus, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCControlStepperPartNone", mrb_cocos2d_extension__get_kCCControlStepperPartNone, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCControlStepperPartPlus", mrb_cocos2d_extension__get_kCCControlStepperPartPlus, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCScrollViewDirectionBoth", mrb_cocos2d_extension__get_kCCScrollViewDirectionBoth, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCScrollViewDirectionHorizontal", mrb_cocos2d_extension__get_kCCScrollViewDirectionHorizontal, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCScrollViewDirectionNone", mrb_cocos2d_extension__get_kCCScrollViewDirectionNone, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCScrollViewDirectionVertical", mrb_cocos2d_extension__get_kCCScrollViewDirectionVertical, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTableViewFillBottomUp", mrb_cocos2d_extension__get_kCCTableViewFillBottomUp, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTableViewFillTopDown", mrb_cocos2d_extension__get_kCCTableViewFillTopDown, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kEditBoxInputFlagInitialCapsAllCharacters", mrb_cocos2d_extension__get_kEditBoxInputFlagInitialCapsAllCharacters, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kEditBoxInputFlagInitialCapsSentence", mrb_cocos2d_extension__get_kEditBoxInputFlagInitialCapsSentence, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kEditBoxInputFlagInitialCapsWord", mrb_cocos2d_extension__get_kEditBoxInputFlagInitialCapsWord, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kEditBoxInputFlagPassword", mrb_cocos2d_extension__get_kEditBoxInputFlagPassword, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kEditBoxInputFlagSensitive", mrb_cocos2d_extension__get_kEditBoxInputFlagSensitive, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kEditBoxInputModeAny", mrb_cocos2d_extension__get_kEditBoxInputModeAny, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kEditBoxInputModeDecimal", mrb_cocos2d_extension__get_kEditBoxInputModeDecimal, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kEditBoxInputModeEmailAddr", mrb_cocos2d_extension__get_kEditBoxInputModeEmailAddr, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kEditBoxInputModeNumeric", mrb_cocos2d_extension__get_kEditBoxInputModeNumeric, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kEditBoxInputModePhoneNumber", mrb_cocos2d_extension__get_kEditBoxInputModePhoneNumber, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kEditBoxInputModeSingleLine", mrb_cocos2d_extension__get_kEditBoxInputModeSingleLine, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kEditBoxInputModeUrl", mrb_cocos2d_extension__get_kEditBoxInputModeUrl, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kFloatValue", mrb_cocos2d_extension__get_kFloatValue, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kIntValue", mrb_cocos2d_extension__get_kIntValue, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kKeyboardReturnTypeDefault", mrb_cocos2d_extension__get_kKeyboardReturnTypeDefault, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kKeyboardReturnTypeDone", mrb_cocos2d_extension__get_kKeyboardReturnTypeDone, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kKeyboardReturnTypeGo", mrb_cocos2d_extension__get_kKeyboardReturnTypeGo, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kKeyboardReturnTypeSearch", mrb_cocos2d_extension__get_kKeyboardReturnTypeSearch, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kKeyboardReturnTypeSend", mrb_cocos2d_extension__get_kKeyboardReturnTypeSend, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kStringValue", mrb_cocos2d_extension__get_kStringValue, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kUnsignedCharValue", mrb_cocos2d_extension__get_kUnsignedCharValue, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "setRelativeScale", mrb_cocos2d_extension_setRelativeScale, MRB_ARGS_REQ(5));
  DONE;
  DONE;
  DONE;
}
