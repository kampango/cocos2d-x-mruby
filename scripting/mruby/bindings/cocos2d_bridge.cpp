/*
 * mruby binding: Cocos2d
 * Generated automatically by gen_mrb_bridge.rb on 2013-09-03 13:10:37 +0900.
 */

#include <assert.h>
#include <string>
#include <map>
#include "mruby.h"
#include "mruby/array.h"
#include "mruby/class.h"
#include "mruby/data.h"
#include "mruby/gc.h"
#include "mruby/hash.h"
#include "mruby/string.h"
#include "mruby/value.h"
#include "mruby/variable.h"

#include "mruby_helper.h"
#include "CCMRubyCallbackWrapper.h"

#include "cocos2d.h"
#include "cocos2d_bridge.h"

#define DONE mrb_gc_arena_restore(mrb, 0)

typedef cocos2d::CCImage::EImageFormat EImageFormat;
typedef cocos2d::CCImage::ETextAlign ETextAlign;
typedef bool _Bool;
typedef char __va_list_tag;

using namespace cocos2d;

template<typename T>
static inline T _cast_as_func(void *vp)
{
    T func;
    *(reinterpret_cast< void ** >(&func)) = vp;
    return func;
}

static struct RClass *_define_class_UT_hash_bucket(mrb_state *mrb);
static struct RClass *_define_class_UT_hash_handle(mrb_state *mrb);
static struct RClass *_define_class_UT_hash_table(mrb_state *mrb);
static struct RClass *_define_class_cocos2d(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCAccelAmplitude(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCAccelDeccelAmplitude(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCAcceleration(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCAccelerometer(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCAccelerometerDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCAction(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCActionCamera(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCActionEase(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCActionInstant(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCActionInterval(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCActionManager(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCActionTween(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCActionTweenDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCAffineTransform(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCAnimate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCAnimation(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCAnimationCache(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCAnimationFrame(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCApplication(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCApplicationProtocol(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCArray(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCAtlasNode(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCAutoreleasePool(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCBMFontConfiguration(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCBezierBy(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCBezierTo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCBlendProtocol(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCBlink(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCBool(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCCallFunc(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCCallFuncN(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCCallFuncND(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCCallFuncO(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCCamera(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCCardinalSplineBy(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCCardinalSplineTo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCCatmullRomBy(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCCatmullRomTo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCClippingNode(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCComponent(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCComponentContainer(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCConfiguration(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCDeccelAmplitude(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCDelayTime(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCDevice(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCDictElement(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCDictionary(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCDirector(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCDirectorDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCDisplayLinkDirector(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCDouble(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCDrawNode(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEGLView(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEGLViewProtocol(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseBackIn(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseBackInOut(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseBackOut(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseBounce(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseBounceIn(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseBounceInOut(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseBounceOut(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseElastic(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseElasticIn(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseElasticInOut(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseElasticOut(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseExponentialIn(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseExponentialInOut(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseExponentialOut(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseIn(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseInOut(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseOut(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseRateAction(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseSineIn(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseSineInOut(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEaseSineOut(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCEvent(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCFadeIn(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCFadeOut(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCFadeOutBLTiles(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCFadeOutDownTiles(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCFadeOutTRTiles(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCFadeOutUpTiles(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCFadeTo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCFileUtils(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCFiniteTimeAction(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCFlipX(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCFlipX3D(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCFlipY(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCFlipY3D(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCFloat(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCFollow(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCGLProgram(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCGrabber(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCGrid3D(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCGrid3DAction(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCGridAction(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCGridBase(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCHide(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCIMEDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCIMEDispatcher(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCIMEKeyboardNotificationInfo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCImage(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCInteger(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCJumpBy(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCJumpTiles3D(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCJumpTo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCKeypadDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCKeypadDispatcher(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCKeypadHandler(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCLabelAtlas(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCLabelBMFont(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCLabelProtocol(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCLabelTTF(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCLayer(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCLayerColor(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCLayerGradient(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCLayerMultiplex(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCLayerRGBA(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCLens3D(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCLiquid(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCMenu(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCMenuItem(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCMenuItemAtlasFont(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCMenuItemFont(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCMenuItemImage(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCMenuItemLabel(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCMenuItemSprite(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCMenuItemToggle(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCMotionStreak(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCMoveBy(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCMoveTo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCNode(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCNodeRGBA(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCNotificationCenter(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCNotificationObserver(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCObject(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCOrbitCamera(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCPVRMipmap(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCPageTurn3D(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCParallaxNode(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCParticleBatchNode(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCParticleExplosion(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCParticleFire(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCParticleFireworks(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCParticleFlower(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCParticleGalaxy(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCParticleMeteor(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCParticleRain(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCParticleSmoke(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCParticleSnow(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCParticleSpiral(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCParticleSun(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCParticleSystem(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCParticleSystemQuad(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCPlace(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCPoint(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCPointArray(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCPoolManager(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCPrettyPrinter(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCProfiler(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCProfilingTimer(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCProgressFromTo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCProgressTimer(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCProgressTo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCRGBAProtocol(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCRect(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCRemoveSelf(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCRenderTexture(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCRepeat(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCRepeatForever(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCReuseGrid(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCReverseTime(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCRipple3D(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCRotateBy(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCRotateTo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCSAXParser(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCScaleBy(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCScaleTo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCScene(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCScheduler(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCSchedulerScriptHandlerEntry(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCScriptEngineManager(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCScriptEngineProtocol(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCScriptHandlerEntry(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCSequence(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCSet(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCShaderCache(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCShaky3D(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCShakyTiles3D(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCShatteredTiles3D(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCShow(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCShuffleTiles(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCSize(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCSkewBy(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCSkewTo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCSpawn(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCSpeed(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCSplitCols(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCSplitRows(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCSprite(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCSpriteBatchNode(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCSpriteFrame(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCSpriteFrameCache(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCStandardTouchDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCStandardTouchHandler(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCStopGrid(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCString(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCStringCompare(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTMXLayer(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTMXLayerInfo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTMXMapInfo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTMXObjectGroup(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTMXTiledMap(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTMXTilesetInfo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTargetedAction(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTargetedTouchDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTargetedTouchHandler(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTextFieldDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTextFieldTTF(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTexture2D(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTextureAtlas(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTextureCache(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTexturePVR(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTextureProtocol(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCThread(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTileMapAtlas(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTiledGrid3D(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTiledGrid3DAction(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTime(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTimer(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTintBy(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTintTo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCToggleVisibility(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTouch(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTouchDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTouchDispatcher(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTouchHandler(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTouchScriptHandlerEntry(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionCrossFade(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionFade(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionFadeBL(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionFadeDown(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionFadeTR(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionFadeUp(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionFlipAngular(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionFlipX(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionFlipY(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionJumpZoom(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionMoveInB(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionMoveInL(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionMoveInR(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionMoveInT(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionPageTurn(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionProgress(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionProgressHorizontal(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionProgressInOut(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionProgressOutIn(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionProgressRadialCCW(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionProgressRadialCW(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionProgressVertical(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionRotoZoom(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionScene(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionSceneOriented(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionShrinkGrow(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionSlideInB(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionSlideInL(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionSlideInR(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionSlideInT(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionSplitCols(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionSplitRows(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionTurnOffTiles(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionZoomFlipAngular(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionZoomFlipX(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTransitionZoomFlipY(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTurnOffTiles(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCTwirl(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCUserDefault(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCWaves(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCWaves3D(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCWavesTiles3D(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_CCZone(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_EGLTouchDelegate(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__BMFontDef(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__BMFontPadding(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__FontDefHashElement(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__KerningHashElement(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccArray(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccBezierConfig(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccBlendFunc(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccCArray(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccColor3B(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccColor4B(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccColor4F(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccFontDefinition(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccFontShadow(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccFontStroke(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccPVRTexturePixelFormatInfo(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccPointSprite(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccQuad2(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccQuad3(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccT2F_Quad(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccTex2F(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccTexParams(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccV2F_C4B_T2F(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccV2F_C4B_T2F_Quad(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccV2F_C4B_T2F_Triangle(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccV2F_C4F_T2F(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccV2F_C4F_T2F_Quad(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccV3F_C4B_T2F(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccV3F_C4B_T2F_Quad(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccVertex2F(mrb_state *mrb);
static struct RClass *_define_class_cocos2d__ccVertex3F(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_ccAnimationFrameData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_ccTouchHandlerHelperData(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_cc_timeval(mrb_state *mrb);
static struct RClass *_define_class_cocos2d_sCCParticle(mrb_state *mrb);

static void
mrb_free_UT_hash_bucket(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< UT_hash_bucket * >(ptr);
}

struct mrb_data_type mrb_type_UT_hash_bucket = {
  "UT_hash_bucket",
  mrb_free_UT_hash_bucket
};

static void
mrb_no_free_UT_hash_bucket(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_UT_hash_bucket = {
  "UT_hash_bucket",
  mrb_no_free_UT_hash_bucket
};

static struct RClass *
_define_class_UT_hash_bucket(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "UT_hash_bucket") != 0) {
    return cc_mrb_class_get(mrb, "UT_hash_bucket");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *rc = mrb_define_class(mrb, "UT_hash_bucket", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "UT_hash_bucket");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, UT_hash_bucket, rc);
  return rc;
}

static void
mrb_free_UT_hash_handle(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< UT_hash_handle * >(ptr);
}

struct mrb_data_type mrb_type_UT_hash_handle = {
  "UT_hash_handle",
  mrb_free_UT_hash_handle
};

static void
mrb_no_free_UT_hash_handle(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_UT_hash_handle = {
  "UT_hash_handle",
  mrb_no_free_UT_hash_handle
};

static struct RClass *
_define_class_UT_hash_handle(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "UT_hash_handle") != 0) {
    return cc_mrb_class_get(mrb, "UT_hash_handle");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *rc = mrb_define_class(mrb, "UT_hash_handle", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "UT_hash_handle");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, UT_hash_handle, rc);
  return rc;
}

static void
mrb_free_UT_hash_table(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< UT_hash_table * >(ptr);
}

struct mrb_data_type mrb_type_UT_hash_table = {
  "UT_hash_table",
  mrb_free_UT_hash_table
};

static void
mrb_no_free_UT_hash_table(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_UT_hash_table = {
  "UT_hash_table",
  mrb_no_free_UT_hash_table
};

static struct RClass *
_define_class_UT_hash_table(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "UT_hash_table") != 0) {
    return cc_mrb_class_get(mrb, "UT_hash_table");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *rc = mrb_define_class(mrb, "UT_hash_table", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "UT_hash_table");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, UT_hash_table, rc);
  return rc;
}

static struct RClass *
_define_class_cocos2d(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d");
  }

  struct RClass *rc = NULL;
  rc = mrb_define_module(mrb, "Cocos2d");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d");
  return rc;
}

static void
mrb_free_cocos2d_CCAccelAmplitude(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCAccelAmplitude *obj = static_cast< cocos2d::CCAccelAmplitude * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCAccelAmplitude = {
  "cocos2d::CCAccelAmplitude",
  mrb_free_cocos2d_CCAccelAmplitude
};

static void
mrb_no_free_cocos2d_CCAccelAmplitude(mrb_state *mrb, void *ptr)
{
  cocos2d::CCAccelAmplitude *obj = static_cast< cocos2d::CCAccelAmplitude * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCAccelAmplitude = {
  "cocos2d::CCAccelAmplitude",
  mrb_no_free_cocos2d_CCAccelAmplitude
};

static struct RClass *
_define_class_cocos2d_CCAccelAmplitude(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAccelAmplitude") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCAccelAmplitude");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCAccelAmplitude", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCAccelAmplitude");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCAccelAmplitude, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCAccelDeccelAmplitude(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCAccelDeccelAmplitude *obj = static_cast< cocos2d::CCAccelDeccelAmplitude * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCAccelDeccelAmplitude = {
  "cocos2d::CCAccelDeccelAmplitude",
  mrb_free_cocos2d_CCAccelDeccelAmplitude
};

static void
mrb_no_free_cocos2d_CCAccelDeccelAmplitude(mrb_state *mrb, void *ptr)
{
  cocos2d::CCAccelDeccelAmplitude *obj = static_cast< cocos2d::CCAccelDeccelAmplitude * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCAccelDeccelAmplitude = {
  "cocos2d::CCAccelDeccelAmplitude",
  mrb_no_free_cocos2d_CCAccelDeccelAmplitude
};

static struct RClass *
_define_class_cocos2d_CCAccelDeccelAmplitude(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAccelDeccelAmplitude") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCAccelDeccelAmplitude");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCAccelDeccelAmplitude", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCAccelDeccelAmplitude");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCAccelDeccelAmplitude, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCAcceleration(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCAcceleration * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCAcceleration = {
  "cocos2d::CCAcceleration",
  mrb_free_cocos2d_CCAcceleration
};

static void
mrb_no_free_cocos2d_CCAcceleration(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCAcceleration = {
  "cocos2d::CCAcceleration",
  mrb_no_free_cocos2d_CCAcceleration
};

static struct RClass *
_define_class_cocos2d_CCAcceleration(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAcceleration") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCAcceleration");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCAcceleration", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCAcceleration");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCAcceleration, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCAccelerometer(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCAccelerometer * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCAccelerometer = {
  "cocos2d::CCAccelerometer",
  mrb_free_cocos2d_CCAccelerometer
};

static void
mrb_no_free_cocos2d_CCAccelerometer(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCAccelerometer = {
  "cocos2d::CCAccelerometer",
  mrb_no_free_cocos2d_CCAccelerometer
};

static struct RClass *
_define_class_cocos2d_CCAccelerometer(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAccelerometer") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCAccelerometer");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCAccelerometer", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCAccelerometer");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCAccelerometer, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCAccelerometerDelegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_CCAccelerometerDelegate = {
  "cocos2d::CCAccelerometerDelegate",
  mrb_free_cocos2d_CCAccelerometerDelegate
};

static struct RClass *
_define_class_cocos2d_CCAccelerometerDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAccelerometerDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCAccelerometerDelegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCAccelerometerDelegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCAccelerometerDelegate");
  return rc;
}

static void
mrb_free_cocos2d_CCAction(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCAction *obj = static_cast< cocos2d::CCAction * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCAction = {
  "cocos2d::CCAction",
  mrb_free_cocos2d_CCAction
};

static void
mrb_no_free_cocos2d_CCAction(mrb_state *mrb, void *ptr)
{
  cocos2d::CCAction *obj = static_cast< cocos2d::CCAction * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCAction = {
  "cocos2d::CCAction",
  mrb_no_free_cocos2d_CCAction
};

static struct RClass *
_define_class_cocos2d_CCAction(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAction") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCAction");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCAction", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCAction");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCAction, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCActionCamera(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCActionCamera *obj = static_cast< cocos2d::CCActionCamera * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCActionCamera = {
  "cocos2d::CCActionCamera",
  mrb_free_cocos2d_CCActionCamera
};

static void
mrb_no_free_cocos2d_CCActionCamera(mrb_state *mrb, void *ptr)
{
  cocos2d::CCActionCamera *obj = static_cast< cocos2d::CCActionCamera * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCActionCamera = {
  "cocos2d::CCActionCamera",
  mrb_no_free_cocos2d_CCActionCamera
};

static struct RClass *
_define_class_cocos2d_CCActionCamera(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionCamera") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCActionCamera");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCActionCamera", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCActionCamera");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCActionCamera, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCActionEase(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCActionEase *obj = static_cast< cocos2d::CCActionEase * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCActionEase = {
  "cocos2d::CCActionEase",
  mrb_free_cocos2d_CCActionEase
};

static void
mrb_no_free_cocos2d_CCActionEase(mrb_state *mrb, void *ptr)
{
  cocos2d::CCActionEase *obj = static_cast< cocos2d::CCActionEase * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCActionEase = {
  "cocos2d::CCActionEase",
  mrb_no_free_cocos2d_CCActionEase
};

static struct RClass *
_define_class_cocos2d_CCActionEase(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCActionEase");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCActionEase", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCActionEase");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCActionEase, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCActionInstant(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCActionInstant *obj = static_cast< cocos2d::CCActionInstant * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCActionInstant = {
  "cocos2d::CCActionInstant",
  mrb_free_cocos2d_CCActionInstant
};

static void
mrb_no_free_cocos2d_CCActionInstant(mrb_state *mrb, void *ptr)
{
  cocos2d::CCActionInstant *obj = static_cast< cocos2d::CCActionInstant * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCActionInstant = {
  "cocos2d::CCActionInstant",
  mrb_no_free_cocos2d_CCActionInstant
};

static struct RClass *
_define_class_cocos2d_CCActionInstant(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFiniteTimeAction") == 0) {
    _define_class_cocos2d_CCFiniteTimeAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFiniteTimeAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCActionInstant", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCActionInstant");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCActionInstant, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCActionInterval(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCActionInterval *obj = static_cast< cocos2d::CCActionInterval * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCActionInterval = {
  "cocos2d::CCActionInterval",
  mrb_free_cocos2d_CCActionInterval
};

static void
mrb_no_free_cocos2d_CCActionInterval(mrb_state *mrb, void *ptr)
{
  cocos2d::CCActionInterval *obj = static_cast< cocos2d::CCActionInterval * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCActionInterval = {
  "cocos2d::CCActionInterval",
  mrb_no_free_cocos2d_CCActionInterval
};

static struct RClass *
_define_class_cocos2d_CCActionInterval(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFiniteTimeAction") == 0) {
    _define_class_cocos2d_CCFiniteTimeAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFiniteTimeAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCActionInterval", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCActionInterval");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCActionInterval, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCActionManager(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCActionManager *obj = static_cast< cocos2d::CCActionManager * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCActionManager = {
  "cocos2d::CCActionManager",
  mrb_free_cocos2d_CCActionManager
};

static void
mrb_no_free_cocos2d_CCActionManager(mrb_state *mrb, void *ptr)
{
  cocos2d::CCActionManager *obj = static_cast< cocos2d::CCActionManager * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCActionManager = {
  "cocos2d::CCActionManager",
  mrb_no_free_cocos2d_CCActionManager
};

static struct RClass *
_define_class_cocos2d_CCActionManager(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionManager") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCActionManager");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCActionManager", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCActionManager");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCActionManager, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCActionTween(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCActionTween *obj = static_cast< cocos2d::CCActionTween * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCActionTween = {
  "cocos2d::CCActionTween",
  mrb_free_cocos2d_CCActionTween
};

static void
mrb_no_free_cocos2d_CCActionTween(mrb_state *mrb, void *ptr)
{
  cocos2d::CCActionTween *obj = static_cast< cocos2d::CCActionTween * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCActionTween = {
  "cocos2d::CCActionTween",
  mrb_no_free_cocos2d_CCActionTween
};

static struct RClass *
_define_class_cocos2d_CCActionTween(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionTween") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCActionTween");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCActionTween", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCActionTween");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCActionTween, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCActionTweenDelegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_CCActionTweenDelegate = {
  "cocos2d::CCActionTweenDelegate",
  mrb_free_cocos2d_CCActionTweenDelegate
};

static struct RClass *
_define_class_cocos2d_CCActionTweenDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionTweenDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCActionTweenDelegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCActionTweenDelegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCActionTweenDelegate");
  return rc;
}

static void
mrb_free_cocos2d_CCAffineTransform(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCAffineTransform * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCAffineTransform = {
  "cocos2d::CCAffineTransform",
  mrb_free_cocos2d_CCAffineTransform
};

static void
mrb_no_free_cocos2d_CCAffineTransform(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCAffineTransform = {
  "cocos2d::CCAffineTransform",
  mrb_no_free_cocos2d_CCAffineTransform
};

static struct RClass *
_define_class_cocos2d_CCAffineTransform(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAffineTransform") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCAffineTransform", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCAffineTransform");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCAffineTransform, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCAnimate(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCAnimate *obj = static_cast< cocos2d::CCAnimate * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCAnimate = {
  "cocos2d::CCAnimate",
  mrb_free_cocos2d_CCAnimate
};

static void
mrb_no_free_cocos2d_CCAnimate(mrb_state *mrb, void *ptr)
{
  cocos2d::CCAnimate *obj = static_cast< cocos2d::CCAnimate * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCAnimate = {
  "cocos2d::CCAnimate",
  mrb_no_free_cocos2d_CCAnimate
};

static struct RClass *
_define_class_cocos2d_CCAnimate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAnimate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCAnimate");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCAnimate", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCAnimate");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCAnimate, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCAnimation(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCAnimation *obj = static_cast< cocos2d::CCAnimation * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCAnimation = {
  "cocos2d::CCAnimation",
  mrb_free_cocos2d_CCAnimation
};

static void
mrb_no_free_cocos2d_CCAnimation(mrb_state *mrb, void *ptr)
{
  cocos2d::CCAnimation *obj = static_cast< cocos2d::CCAnimation * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCAnimation = {
  "cocos2d::CCAnimation",
  mrb_no_free_cocos2d_CCAnimation
};

static struct RClass *
_define_class_cocos2d_CCAnimation(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAnimation") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCAnimation");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCAnimation", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCAnimation");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCAnimation, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCAnimationCache(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCAnimationCache *obj = static_cast< cocos2d::CCAnimationCache * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCAnimationCache = {
  "cocos2d::CCAnimationCache",
  mrb_free_cocos2d_CCAnimationCache
};

static void
mrb_no_free_cocos2d_CCAnimationCache(mrb_state *mrb, void *ptr)
{
  cocos2d::CCAnimationCache *obj = static_cast< cocos2d::CCAnimationCache * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCAnimationCache = {
  "cocos2d::CCAnimationCache",
  mrb_no_free_cocos2d_CCAnimationCache
};

static struct RClass *
_define_class_cocos2d_CCAnimationCache(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAnimationCache") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCAnimationCache");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCAnimationCache", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCAnimationCache");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCAnimationCache, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCAnimationFrame(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCAnimationFrame *obj = static_cast< cocos2d::CCAnimationFrame * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCAnimationFrame = {
  "cocos2d::CCAnimationFrame",
  mrb_free_cocos2d_CCAnimationFrame
};

static void
mrb_no_free_cocos2d_CCAnimationFrame(mrb_state *mrb, void *ptr)
{
  cocos2d::CCAnimationFrame *obj = static_cast< cocos2d::CCAnimationFrame * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCAnimationFrame = {
  "cocos2d::CCAnimationFrame",
  mrb_no_free_cocos2d_CCAnimationFrame
};

static struct RClass *
_define_class_cocos2d_CCAnimationFrame(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAnimationFrame") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCAnimationFrame");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCAnimationFrame", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCAnimationFrame");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCAnimationFrame, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCApplication(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCApplication *obj = static_cast< cocos2d::CCApplication * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCApplication = {
  "cocos2d::CCApplication",
  mrb_free_cocos2d_CCApplication
};

static void
mrb_no_free_cocos2d_CCApplication(mrb_state *mrb, void *ptr)
{
  cocos2d::CCApplication *obj = static_cast< cocos2d::CCApplication * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCApplication = {
  "cocos2d::CCApplication",
  mrb_no_free_cocos2d_CCApplication
};

static struct RClass *
_define_class_cocos2d_CCApplication(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCApplication") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCApplication");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCApplicationProtocol") == 0) {
    _define_class_cocos2d_CCApplicationProtocol(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCApplication", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCApplicationProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCApplication");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCApplication, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCApplicationProtocol(mrb_state *mrb, void *ptr)
{
  //delete static_cast< cocos2d::CCApplicationProtocol * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCApplicationProtocol = {
  "cocos2d::CCApplicationProtocol",
  mrb_free_cocos2d_CCApplicationProtocol
};

static struct RClass *
_define_class_cocos2d_CCApplicationProtocol(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCApplicationProtocol") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCApplicationProtocol");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCApplicationProtocol");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCApplicationProtocol");
  return rc;
}

static void
mrb_free_cocos2d_CCArray(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCArray *obj = static_cast< cocos2d::CCArray * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCArray = {
  "cocos2d::CCArray",
  mrb_free_cocos2d_CCArray
};

static void
mrb_no_free_cocos2d_CCArray(mrb_state *mrb, void *ptr)
{
  cocos2d::CCArray *obj = static_cast< cocos2d::CCArray * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCArray = {
  "cocos2d::CCArray",
  mrb_no_free_cocos2d_CCArray
};

static struct RClass *
_define_class_cocos2d_CCArray(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCArray") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCArray");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCArray", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCArray");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCArray, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCAtlasNode(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCAtlasNode *obj = static_cast< cocos2d::CCAtlasNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCAtlasNode = {
  "cocos2d::CCAtlasNode",
  mrb_free_cocos2d_CCAtlasNode
};

static void
mrb_no_free_cocos2d_CCAtlasNode(mrb_state *mrb, void *ptr)
{
  cocos2d::CCAtlasNode *obj = static_cast< cocos2d::CCAtlasNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCAtlasNode = {
  "cocos2d::CCAtlasNode",
  mrb_no_free_cocos2d_CCAtlasNode
};

static struct RClass *
_define_class_cocos2d_CCAtlasNode(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAtlasNode") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCAtlasNode");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNodeRGBA") == 0) {
    _define_class_cocos2d_CCNodeRGBA(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextureProtocol") == 0) {
    _define_class_cocos2d_CCTextureProtocol(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCAtlasNode", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextureProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCAtlasNode");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCAtlasNode, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCAutoreleasePool(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCAutoreleasePool *obj = static_cast< cocos2d::CCAutoreleasePool * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCAutoreleasePool = {
  "cocos2d::CCAutoreleasePool",
  mrb_free_cocos2d_CCAutoreleasePool
};

static void
mrb_no_free_cocos2d_CCAutoreleasePool(mrb_state *mrb, void *ptr)
{
  cocos2d::CCAutoreleasePool *obj = static_cast< cocos2d::CCAutoreleasePool * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCAutoreleasePool = {
  "cocos2d::CCAutoreleasePool",
  mrb_no_free_cocos2d_CCAutoreleasePool
};

static struct RClass *
_define_class_cocos2d_CCAutoreleasePool(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAutoreleasePool") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCAutoreleasePool");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCAutoreleasePool", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCAutoreleasePool");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCAutoreleasePool, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCBMFontConfiguration(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCBMFontConfiguration *obj = static_cast< cocos2d::CCBMFontConfiguration * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCBMFontConfiguration = {
  "cocos2d::CCBMFontConfiguration",
  mrb_free_cocos2d_CCBMFontConfiguration
};

static void
mrb_no_free_cocos2d_CCBMFontConfiguration(mrb_state *mrb, void *ptr)
{
  cocos2d::CCBMFontConfiguration *obj = static_cast< cocos2d::CCBMFontConfiguration * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCBMFontConfiguration = {
  "cocos2d::CCBMFontConfiguration",
  mrb_no_free_cocos2d_CCBMFontConfiguration
};

static struct RClass *
_define_class_cocos2d_CCBMFontConfiguration(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCBMFontConfiguration") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCBMFontConfiguration");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBMFontConfiguration", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCBMFontConfiguration");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCBMFontConfiguration, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCBezierBy(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCBezierBy *obj = static_cast< cocos2d::CCBezierBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCBezierBy = {
  "cocos2d::CCBezierBy",
  mrb_free_cocos2d_CCBezierBy
};

static void
mrb_no_free_cocos2d_CCBezierBy(mrb_state *mrb, void *ptr)
{
  cocos2d::CCBezierBy *obj = static_cast< cocos2d::CCBezierBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCBezierBy = {
  "cocos2d::CCBezierBy",
  mrb_no_free_cocos2d_CCBezierBy
};

static struct RClass *
_define_class_cocos2d_CCBezierBy(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCBezierBy") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCBezierBy");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBezierBy", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCBezierBy");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCBezierBy, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCBezierTo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCBezierTo *obj = static_cast< cocos2d::CCBezierTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCBezierTo = {
  "cocos2d::CCBezierTo",
  mrb_free_cocos2d_CCBezierTo
};

static void
mrb_no_free_cocos2d_CCBezierTo(mrb_state *mrb, void *ptr)
{
  cocos2d::CCBezierTo *obj = static_cast< cocos2d::CCBezierTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCBezierTo = {
  "cocos2d::CCBezierTo",
  mrb_no_free_cocos2d_CCBezierTo
};

static struct RClass *
_define_class_cocos2d_CCBezierTo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCBezierTo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCBezierTo");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCBezierBy") == 0) {
    _define_class_cocos2d_CCBezierBy(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCBezierBy");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBezierTo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCBezierTo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCBezierTo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCBlendProtocol(mrb_state *mrb, void *ptr)
{
  //delete static_cast< cocos2d::CCBlendProtocol * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCBlendProtocol = {
  "cocos2d::CCBlendProtocol",
  mrb_free_cocos2d_CCBlendProtocol
};

static struct RClass *
_define_class_cocos2d_CCBlendProtocol(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCBlendProtocol") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCBlendProtocol");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCBlendProtocol");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCBlendProtocol");
  return rc;
}

static void
mrb_free_cocos2d_CCBlink(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCBlink *obj = static_cast< cocos2d::CCBlink * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCBlink = {
  "cocos2d::CCBlink",
  mrb_free_cocos2d_CCBlink
};

static void
mrb_no_free_cocos2d_CCBlink(mrb_state *mrb, void *ptr)
{
  cocos2d::CCBlink *obj = static_cast< cocos2d::CCBlink * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCBlink = {
  "cocos2d::CCBlink",
  mrb_no_free_cocos2d_CCBlink
};

static struct RClass *
_define_class_cocos2d_CCBlink(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCBlink") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCBlink");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBlink", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCBlink");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCBlink, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCBool(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCBool *obj = static_cast< cocos2d::CCBool * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCBool = {
  "cocos2d::CCBool",
  mrb_free_cocos2d_CCBool
};

static void
mrb_no_free_cocos2d_CCBool(mrb_state *mrb, void *ptr)
{
  cocos2d::CCBool *obj = static_cast< cocos2d::CCBool * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCBool = {
  "cocos2d::CCBool",
  mrb_no_free_cocos2d_CCBool
};

static struct RClass *
_define_class_cocos2d_CCBool(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCBool") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCBool");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCBool", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCBool");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCBool, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCCallFunc(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCCallFunc *obj = static_cast< cocos2d::CCCallFunc * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCCallFunc = {
  "cocos2d::CCCallFunc",
  mrb_free_cocos2d_CCCallFunc
};

static void
mrb_no_free_cocos2d_CCCallFunc(mrb_state *mrb, void *ptr)
{
  cocos2d::CCCallFunc *obj = static_cast< cocos2d::CCCallFunc * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCCallFunc = {
  "cocos2d::CCCallFunc",
  mrb_no_free_cocos2d_CCCallFunc
};

static struct RClass *
_define_class_cocos2d_CCCallFunc(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCallFunc") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCCallFunc");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCCallFunc", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCCallFunc");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCCallFunc, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCCallFuncN(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCCallFuncN *obj = static_cast< cocos2d::CCCallFuncN * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCCallFuncN = {
  "cocos2d::CCCallFuncN",
  mrb_free_cocos2d_CCCallFuncN
};

static void
mrb_no_free_cocos2d_CCCallFuncN(mrb_state *mrb, void *ptr)
{
  cocos2d::CCCallFuncN *obj = static_cast< cocos2d::CCCallFuncN * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCCallFuncN = {
  "cocos2d::CCCallFuncN",
  mrb_no_free_cocos2d_CCCallFuncN
};

static struct RClass *
_define_class_cocos2d_CCCallFuncN(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCallFuncN") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCCallFuncN");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCallFunc") == 0) {
    _define_class_cocos2d_CCCallFunc(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCallFunc");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCCallFuncN", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCCallFuncN");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCCallFuncN, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCCallFuncND(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCCallFuncND *obj = static_cast< cocos2d::CCCallFuncND * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCCallFuncND = {
  "cocos2d::CCCallFuncND",
  mrb_free_cocos2d_CCCallFuncND
};

static void
mrb_no_free_cocos2d_CCCallFuncND(mrb_state *mrb, void *ptr)
{
  cocos2d::CCCallFuncND *obj = static_cast< cocos2d::CCCallFuncND * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCCallFuncND = {
  "cocos2d::CCCallFuncND",
  mrb_no_free_cocos2d_CCCallFuncND
};

static struct RClass *
_define_class_cocos2d_CCCallFuncND(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCallFuncND") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCCallFuncND");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCallFuncN") == 0) {
    _define_class_cocos2d_CCCallFuncN(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCallFuncN");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCCallFuncND", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCCallFuncND");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCCallFuncND, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCCallFuncO(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCCallFuncO *obj = static_cast< cocos2d::CCCallFuncO * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCCallFuncO = {
  "cocos2d::CCCallFuncO",
  mrb_free_cocos2d_CCCallFuncO
};

static void
mrb_no_free_cocos2d_CCCallFuncO(mrb_state *mrb, void *ptr)
{
  cocos2d::CCCallFuncO *obj = static_cast< cocos2d::CCCallFuncO * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCCallFuncO = {
  "cocos2d::CCCallFuncO",
  mrb_no_free_cocos2d_CCCallFuncO
};

static struct RClass *
_define_class_cocos2d_CCCallFuncO(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCallFuncO") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCCallFuncO");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCallFunc") == 0) {
    _define_class_cocos2d_CCCallFunc(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCallFunc");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCCallFuncO", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCCallFuncO");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCCallFuncO, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCCamera(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCCamera *obj = static_cast< cocos2d::CCCamera * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCCamera = {
  "cocos2d::CCCamera",
  mrb_free_cocos2d_CCCamera
};

static void
mrb_no_free_cocos2d_CCCamera(mrb_state *mrb, void *ptr)
{
  cocos2d::CCCamera *obj = static_cast< cocos2d::CCCamera * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCCamera = {
  "cocos2d::CCCamera",
  mrb_no_free_cocos2d_CCCamera
};

static struct RClass *
_define_class_cocos2d_CCCamera(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCamera") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCCamera");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCCamera", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCCamera");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCCamera, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCCardinalSplineBy(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCCardinalSplineBy *obj = static_cast< cocos2d::CCCardinalSplineBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCCardinalSplineBy = {
  "cocos2d::CCCardinalSplineBy",
  mrb_free_cocos2d_CCCardinalSplineBy
};

static void
mrb_no_free_cocos2d_CCCardinalSplineBy(mrb_state *mrb, void *ptr)
{
  cocos2d::CCCardinalSplineBy *obj = static_cast< cocos2d::CCCardinalSplineBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCCardinalSplineBy = {
  "cocos2d::CCCardinalSplineBy",
  mrb_no_free_cocos2d_CCCardinalSplineBy
};

static struct RClass *
_define_class_cocos2d_CCCardinalSplineBy(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCardinalSplineBy") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCCardinalSplineBy");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCardinalSplineTo") == 0) {
    _define_class_cocos2d_CCCardinalSplineTo(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCardinalSplineTo");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCCardinalSplineBy", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCCardinalSplineBy");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCCardinalSplineBy, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCCardinalSplineTo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCCardinalSplineTo *obj = static_cast< cocos2d::CCCardinalSplineTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCCardinalSplineTo = {
  "cocos2d::CCCardinalSplineTo",
  mrb_free_cocos2d_CCCardinalSplineTo
};

static void
mrb_no_free_cocos2d_CCCardinalSplineTo(mrb_state *mrb, void *ptr)
{
  cocos2d::CCCardinalSplineTo *obj = static_cast< cocos2d::CCCardinalSplineTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCCardinalSplineTo = {
  "cocos2d::CCCardinalSplineTo",
  mrb_no_free_cocos2d_CCCardinalSplineTo
};

static struct RClass *
_define_class_cocos2d_CCCardinalSplineTo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCardinalSplineTo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCCardinalSplineTo");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCCardinalSplineTo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCCardinalSplineTo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCCardinalSplineTo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCCatmullRomBy(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCCatmullRomBy *obj = static_cast< cocos2d::CCCatmullRomBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCCatmullRomBy = {
  "cocos2d::CCCatmullRomBy",
  mrb_free_cocos2d_CCCatmullRomBy
};

static void
mrb_no_free_cocos2d_CCCatmullRomBy(mrb_state *mrb, void *ptr)
{
  cocos2d::CCCatmullRomBy *obj = static_cast< cocos2d::CCCatmullRomBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCCatmullRomBy = {
  "cocos2d::CCCatmullRomBy",
  mrb_no_free_cocos2d_CCCatmullRomBy
};

static struct RClass *
_define_class_cocos2d_CCCatmullRomBy(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCatmullRomBy") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCCatmullRomBy");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCardinalSplineBy") == 0) {
    _define_class_cocos2d_CCCardinalSplineBy(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCardinalSplineBy");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCCatmullRomBy", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCCatmullRomBy");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCCatmullRomBy, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCCatmullRomTo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCCatmullRomTo *obj = static_cast< cocos2d::CCCatmullRomTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCCatmullRomTo = {
  "cocos2d::CCCatmullRomTo",
  mrb_free_cocos2d_CCCatmullRomTo
};

static void
mrb_no_free_cocos2d_CCCatmullRomTo(mrb_state *mrb, void *ptr)
{
  cocos2d::CCCatmullRomTo *obj = static_cast< cocos2d::CCCatmullRomTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCCatmullRomTo = {
  "cocos2d::CCCatmullRomTo",
  mrb_no_free_cocos2d_CCCatmullRomTo
};

static struct RClass *
_define_class_cocos2d_CCCatmullRomTo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCatmullRomTo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCCatmullRomTo");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCardinalSplineTo") == 0) {
    _define_class_cocos2d_CCCardinalSplineTo(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCardinalSplineTo");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCCatmullRomTo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCCatmullRomTo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCCatmullRomTo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCClippingNode(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCClippingNode *obj = static_cast< cocos2d::CCClippingNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCClippingNode = {
  "cocos2d::CCClippingNode",
  mrb_free_cocos2d_CCClippingNode
};

static void
mrb_no_free_cocos2d_CCClippingNode(mrb_state *mrb, void *ptr)
{
  cocos2d::CCClippingNode *obj = static_cast< cocos2d::CCClippingNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCClippingNode = {
  "cocos2d::CCClippingNode",
  mrb_no_free_cocos2d_CCClippingNode
};

static struct RClass *
_define_class_cocos2d_CCClippingNode(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCClippingNode") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCClippingNode");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCClippingNode", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCClippingNode");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCClippingNode, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCComponent(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCComponent *obj = static_cast< cocos2d::CCComponent * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCComponent = {
  "cocos2d::CCComponent",
  mrb_free_cocos2d_CCComponent
};

static void
mrb_no_free_cocos2d_CCComponent(mrb_state *mrb, void *ptr)
{
  cocos2d::CCComponent *obj = static_cast< cocos2d::CCComponent * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCComponent = {
  "cocos2d::CCComponent",
  mrb_no_free_cocos2d_CCComponent
};

static struct RClass *
_define_class_cocos2d_CCComponent(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCComponent") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCComponent");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCComponent", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCComponent");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCComponent, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCComponentContainer(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCComponentContainer * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCComponentContainer = {
  "cocos2d::CCComponentContainer",
  mrb_free_cocos2d_CCComponentContainer
};

static void
mrb_no_free_cocos2d_CCComponentContainer(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCComponentContainer = {
  "cocos2d::CCComponentContainer",
  mrb_no_free_cocos2d_CCComponentContainer
};

static struct RClass *
_define_class_cocos2d_CCComponentContainer(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCComponentContainer") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCComponentContainer");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCComponentContainer", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCComponentContainer");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCComponentContainer, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCConfiguration(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCConfiguration *obj = static_cast< cocos2d::CCConfiguration * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCConfiguration = {
  "cocos2d::CCConfiguration",
  mrb_free_cocos2d_CCConfiguration
};

static void
mrb_no_free_cocos2d_CCConfiguration(mrb_state *mrb, void *ptr)
{
  cocos2d::CCConfiguration *obj = static_cast< cocos2d::CCConfiguration * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCConfiguration = {
  "cocos2d::CCConfiguration",
  mrb_no_free_cocos2d_CCConfiguration
};

static struct RClass *
_define_class_cocos2d_CCConfiguration(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCConfiguration") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCConfiguration");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCConfiguration", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCConfiguration");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCConfiguration, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCDeccelAmplitude(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCDeccelAmplitude *obj = static_cast< cocos2d::CCDeccelAmplitude * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCDeccelAmplitude = {
  "cocos2d::CCDeccelAmplitude",
  mrb_free_cocos2d_CCDeccelAmplitude
};

static void
mrb_no_free_cocos2d_CCDeccelAmplitude(mrb_state *mrb, void *ptr)
{
  cocos2d::CCDeccelAmplitude *obj = static_cast< cocos2d::CCDeccelAmplitude * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCDeccelAmplitude = {
  "cocos2d::CCDeccelAmplitude",
  mrb_no_free_cocos2d_CCDeccelAmplitude
};

static struct RClass *
_define_class_cocos2d_CCDeccelAmplitude(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCDeccelAmplitude") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCDeccelAmplitude");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCDeccelAmplitude", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCDeccelAmplitude");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCDeccelAmplitude, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCDelayTime(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCDelayTime *obj = static_cast< cocos2d::CCDelayTime * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCDelayTime = {
  "cocos2d::CCDelayTime",
  mrb_free_cocos2d_CCDelayTime
};

static void
mrb_no_free_cocos2d_CCDelayTime(mrb_state *mrb, void *ptr)
{
  cocos2d::CCDelayTime *obj = static_cast< cocos2d::CCDelayTime * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCDelayTime = {
  "cocos2d::CCDelayTime",
  mrb_no_free_cocos2d_CCDelayTime
};

static struct RClass *
_define_class_cocos2d_CCDelayTime(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCDelayTime") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCDelayTime");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCDelayTime", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCDelayTime");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCDelayTime, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCDevice(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCDevice * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCDevice = {
  "cocos2d::CCDevice",
  mrb_free_cocos2d_CCDevice
};

static void
mrb_no_free_cocos2d_CCDevice(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCDevice = {
  "cocos2d::CCDevice",
  mrb_no_free_cocos2d_CCDevice
};

static struct RClass *
_define_class_cocos2d_CCDevice(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCDevice") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCDevice");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCDevice", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCDevice");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCDevice, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCDictElement(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCDictElement * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCDictElement = {
  "cocos2d::CCDictElement",
  mrb_free_cocos2d_CCDictElement
};

static void
mrb_no_free_cocos2d_CCDictElement(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCDictElement = {
  "cocos2d::CCDictElement",
  mrb_no_free_cocos2d_CCDictElement
};

static struct RClass *
_define_class_cocos2d_CCDictElement(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCDictElement") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCDictElement");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCDictElement", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCDictElement");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCDictElement, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCDictionary(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCDictionary *obj = static_cast< cocos2d::CCDictionary * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCDictionary = {
  "cocos2d::CCDictionary",
  mrb_free_cocos2d_CCDictionary
};

static void
mrb_no_free_cocos2d_CCDictionary(mrb_state *mrb, void *ptr)
{
  cocos2d::CCDictionary *obj = static_cast< cocos2d::CCDictionary * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCDictionary = {
  "cocos2d::CCDictionary",
  mrb_no_free_cocos2d_CCDictionary
};

static struct RClass *
_define_class_cocos2d_CCDictionary(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCDictionary") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCDictionary");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCDictionary", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCDictionary");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCDictionary, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCDirector(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCDirector *obj = static_cast< cocos2d::CCDirector * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCDirector = {
  "cocos2d::CCDirector",
  mrb_free_cocos2d_CCDirector
};

static void
mrb_no_free_cocos2d_CCDirector(mrb_state *mrb, void *ptr)
{
  cocos2d::CCDirector *obj = static_cast< cocos2d::CCDirector * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCDirector = {
  "cocos2d::CCDirector",
  mrb_no_free_cocos2d_CCDirector
};

static struct RClass *
_define_class_cocos2d_CCDirector(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCDirector") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCDirector");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCDirector", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCDirector");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCDirector, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCDirectorDelegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_CCDirectorDelegate = {
  "cocos2d::CCDirectorDelegate",
  mrb_free_cocos2d_CCDirectorDelegate
};

static struct RClass *
_define_class_cocos2d_CCDirectorDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCDirectorDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCDirectorDelegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCDirectorDelegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCDirectorDelegate");
  return rc;
}

static void
mrb_free_cocos2d_CCDisplayLinkDirector(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCDisplayLinkDirector *obj = static_cast< cocos2d::CCDisplayLinkDirector * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCDisplayLinkDirector = {
  "cocos2d::CCDisplayLinkDirector",
  mrb_free_cocos2d_CCDisplayLinkDirector
};

static void
mrb_no_free_cocos2d_CCDisplayLinkDirector(mrb_state *mrb, void *ptr)
{
  cocos2d::CCDisplayLinkDirector *obj = static_cast< cocos2d::CCDisplayLinkDirector * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCDisplayLinkDirector = {
  "cocos2d::CCDisplayLinkDirector",
  mrb_no_free_cocos2d_CCDisplayLinkDirector
};

static struct RClass *
_define_class_cocos2d_CCDisplayLinkDirector(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCDisplayLinkDirector") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCDisplayLinkDirector");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCDirector") == 0) {
    _define_class_cocos2d_CCDirector(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCDirector");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCDisplayLinkDirector", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCDisplayLinkDirector");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCDisplayLinkDirector, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCDouble(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCDouble *obj = static_cast< cocos2d::CCDouble * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCDouble = {
  "cocos2d::CCDouble",
  mrb_free_cocos2d_CCDouble
};

static void
mrb_no_free_cocos2d_CCDouble(mrb_state *mrb, void *ptr)
{
  cocos2d::CCDouble *obj = static_cast< cocos2d::CCDouble * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCDouble = {
  "cocos2d::CCDouble",
  mrb_no_free_cocos2d_CCDouble
};

static struct RClass *
_define_class_cocos2d_CCDouble(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCDouble") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCDouble");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCDouble", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCDouble");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCDouble, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCDrawNode(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCDrawNode *obj = static_cast< cocos2d::CCDrawNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCDrawNode = {
  "cocos2d::CCDrawNode",
  mrb_free_cocos2d_CCDrawNode
};

static void
mrb_no_free_cocos2d_CCDrawNode(mrb_state *mrb, void *ptr)
{
  cocos2d::CCDrawNode *obj = static_cast< cocos2d::CCDrawNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCDrawNode = {
  "cocos2d::CCDrawNode",
  mrb_no_free_cocos2d_CCDrawNode
};

static struct RClass *
_define_class_cocos2d_CCDrawNode(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCDrawNode") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCDrawNode");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCDrawNode", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCDrawNode");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCDrawNode, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEGLView(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCEGLView * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCEGLView = {
  "cocos2d::CCEGLView",
  mrb_free_cocos2d_CCEGLView
};

static void
mrb_no_free_cocos2d_CCEGLView(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEGLView = {
  "cocos2d::CCEGLView",
  mrb_no_free_cocos2d_CCEGLView
};

static struct RClass *
_define_class_cocos2d_CCEGLView(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEGLView") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEGLView");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEGLViewProtocol") == 0) {
    _define_class_cocos2d_CCEGLViewProtocol(mrb);
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEGLView", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEGLViewProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEGLView");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEGLView, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEGLViewProtocol(mrb_state *mrb, void *ptr)
{
  //delete static_cast< cocos2d::CCEGLViewProtocol * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCEGLViewProtocol = {
  "cocos2d::CCEGLViewProtocol",
  mrb_free_cocos2d_CCEGLViewProtocol
};

static struct RClass *
_define_class_cocos2d_CCEGLViewProtocol(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEGLViewProtocol") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEGLViewProtocol");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCEGLViewProtocol");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEGLViewProtocol");
  return rc;
}

static void
mrb_free_cocos2d_CCEaseBackIn(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseBackIn *obj = static_cast< cocos2d::CCEaseBackIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseBackIn = {
  "cocos2d::CCEaseBackIn",
  mrb_free_cocos2d_CCEaseBackIn
};

static void
mrb_no_free_cocos2d_CCEaseBackIn(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseBackIn *obj = static_cast< cocos2d::CCEaseBackIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseBackIn = {
  "cocos2d::CCEaseBackIn",
  mrb_no_free_cocos2d_CCEaseBackIn
};

static struct RClass *
_define_class_cocos2d_CCEaseBackIn(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseBackIn") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseBackIn");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseBackIn", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseBackIn");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseBackIn, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseBackInOut(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseBackInOut *obj = static_cast< cocos2d::CCEaseBackInOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseBackInOut = {
  "cocos2d::CCEaseBackInOut",
  mrb_free_cocos2d_CCEaseBackInOut
};

static void
mrb_no_free_cocos2d_CCEaseBackInOut(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseBackInOut *obj = static_cast< cocos2d::CCEaseBackInOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseBackInOut = {
  "cocos2d::CCEaseBackInOut",
  mrb_no_free_cocos2d_CCEaseBackInOut
};

static struct RClass *
_define_class_cocos2d_CCEaseBackInOut(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseBackInOut") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseBackInOut");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseBackInOut", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseBackInOut");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseBackInOut, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseBackOut(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseBackOut *obj = static_cast< cocos2d::CCEaseBackOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseBackOut = {
  "cocos2d::CCEaseBackOut",
  mrb_free_cocos2d_CCEaseBackOut
};

static void
mrb_no_free_cocos2d_CCEaseBackOut(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseBackOut *obj = static_cast< cocos2d::CCEaseBackOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseBackOut = {
  "cocos2d::CCEaseBackOut",
  mrb_no_free_cocos2d_CCEaseBackOut
};

static struct RClass *
_define_class_cocos2d_CCEaseBackOut(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseBackOut") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseBackOut");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseBackOut", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseBackOut");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseBackOut, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseBounce(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseBounce *obj = static_cast< cocos2d::CCEaseBounce * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseBounce = {
  "cocos2d::CCEaseBounce",
  mrb_free_cocos2d_CCEaseBounce
};

static void
mrb_no_free_cocos2d_CCEaseBounce(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseBounce *obj = static_cast< cocos2d::CCEaseBounce * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseBounce = {
  "cocos2d::CCEaseBounce",
  mrb_no_free_cocos2d_CCEaseBounce
};

static struct RClass *
_define_class_cocos2d_CCEaseBounce(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseBounce") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseBounce");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseBounce", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseBounce");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseBounce, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseBounceIn(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseBounceIn *obj = static_cast< cocos2d::CCEaseBounceIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseBounceIn = {
  "cocos2d::CCEaseBounceIn",
  mrb_free_cocos2d_CCEaseBounceIn
};

static void
mrb_no_free_cocos2d_CCEaseBounceIn(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseBounceIn *obj = static_cast< cocos2d::CCEaseBounceIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseBounceIn = {
  "cocos2d::CCEaseBounceIn",
  mrb_no_free_cocos2d_CCEaseBounceIn
};

static struct RClass *
_define_class_cocos2d_CCEaseBounceIn(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseBounceIn") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseBounceIn");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseBounce") == 0) {
    _define_class_cocos2d_CCEaseBounce(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseBounce");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseBounceIn", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseBounceIn");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseBounceIn, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseBounceInOut(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseBounceInOut *obj = static_cast< cocos2d::CCEaseBounceInOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseBounceInOut = {
  "cocos2d::CCEaseBounceInOut",
  mrb_free_cocos2d_CCEaseBounceInOut
};

static void
mrb_no_free_cocos2d_CCEaseBounceInOut(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseBounceInOut *obj = static_cast< cocos2d::CCEaseBounceInOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseBounceInOut = {
  "cocos2d::CCEaseBounceInOut",
  mrb_no_free_cocos2d_CCEaseBounceInOut
};

static struct RClass *
_define_class_cocos2d_CCEaseBounceInOut(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseBounceInOut") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseBounceInOut");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseBounce") == 0) {
    _define_class_cocos2d_CCEaseBounce(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseBounce");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseBounceInOut", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseBounceInOut");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseBounceInOut, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseBounceOut(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseBounceOut *obj = static_cast< cocos2d::CCEaseBounceOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseBounceOut = {
  "cocos2d::CCEaseBounceOut",
  mrb_free_cocos2d_CCEaseBounceOut
};

static void
mrb_no_free_cocos2d_CCEaseBounceOut(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseBounceOut *obj = static_cast< cocos2d::CCEaseBounceOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseBounceOut = {
  "cocos2d::CCEaseBounceOut",
  mrb_no_free_cocos2d_CCEaseBounceOut
};

static struct RClass *
_define_class_cocos2d_CCEaseBounceOut(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseBounceOut") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseBounceOut");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseBounce") == 0) {
    _define_class_cocos2d_CCEaseBounce(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseBounce");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseBounceOut", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseBounceOut");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseBounceOut, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseElastic(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseElastic *obj = static_cast< cocos2d::CCEaseElastic * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseElastic = {
  "cocos2d::CCEaseElastic",
  mrb_free_cocos2d_CCEaseElastic
};

static void
mrb_no_free_cocos2d_CCEaseElastic(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseElastic *obj = static_cast< cocos2d::CCEaseElastic * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseElastic = {
  "cocos2d::CCEaseElastic",
  mrb_no_free_cocos2d_CCEaseElastic
};

static struct RClass *
_define_class_cocos2d_CCEaseElastic(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseElastic") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseElastic");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseElastic", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseElastic");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseElastic, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseElasticIn(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseElasticIn *obj = static_cast< cocos2d::CCEaseElasticIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseElasticIn = {
  "cocos2d::CCEaseElasticIn",
  mrb_free_cocos2d_CCEaseElasticIn
};

static void
mrb_no_free_cocos2d_CCEaseElasticIn(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseElasticIn *obj = static_cast< cocos2d::CCEaseElasticIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseElasticIn = {
  "cocos2d::CCEaseElasticIn",
  mrb_no_free_cocos2d_CCEaseElasticIn
};

static struct RClass *
_define_class_cocos2d_CCEaseElasticIn(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseElasticIn") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseElasticIn");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseElastic") == 0) {
    _define_class_cocos2d_CCEaseElastic(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseElastic");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseElasticIn", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseElasticIn");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseElasticIn, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseElasticInOut(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseElasticInOut *obj = static_cast< cocos2d::CCEaseElasticInOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseElasticInOut = {
  "cocos2d::CCEaseElasticInOut",
  mrb_free_cocos2d_CCEaseElasticInOut
};

static void
mrb_no_free_cocos2d_CCEaseElasticInOut(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseElasticInOut *obj = static_cast< cocos2d::CCEaseElasticInOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseElasticInOut = {
  "cocos2d::CCEaseElasticInOut",
  mrb_no_free_cocos2d_CCEaseElasticInOut
};

static struct RClass *
_define_class_cocos2d_CCEaseElasticInOut(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseElasticInOut") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseElasticInOut");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseElastic") == 0) {
    _define_class_cocos2d_CCEaseElastic(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseElastic");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseElasticInOut", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseElasticInOut");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseElasticInOut, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseElasticOut(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseElasticOut *obj = static_cast< cocos2d::CCEaseElasticOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseElasticOut = {
  "cocos2d::CCEaseElasticOut",
  mrb_free_cocos2d_CCEaseElasticOut
};

static void
mrb_no_free_cocos2d_CCEaseElasticOut(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseElasticOut *obj = static_cast< cocos2d::CCEaseElasticOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseElasticOut = {
  "cocos2d::CCEaseElasticOut",
  mrb_no_free_cocos2d_CCEaseElasticOut
};

static struct RClass *
_define_class_cocos2d_CCEaseElasticOut(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseElasticOut") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseElasticOut");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseElastic") == 0) {
    _define_class_cocos2d_CCEaseElastic(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseElastic");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseElasticOut", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseElasticOut");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseElasticOut, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseExponentialIn(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseExponentialIn *obj = static_cast< cocos2d::CCEaseExponentialIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseExponentialIn = {
  "cocos2d::CCEaseExponentialIn",
  mrb_free_cocos2d_CCEaseExponentialIn
};

static void
mrb_no_free_cocos2d_CCEaseExponentialIn(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseExponentialIn *obj = static_cast< cocos2d::CCEaseExponentialIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseExponentialIn = {
  "cocos2d::CCEaseExponentialIn",
  mrb_no_free_cocos2d_CCEaseExponentialIn
};

static struct RClass *
_define_class_cocos2d_CCEaseExponentialIn(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseExponentialIn") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseExponentialIn");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseExponentialIn", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseExponentialIn");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseExponentialIn, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseExponentialInOut(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseExponentialInOut *obj = static_cast< cocos2d::CCEaseExponentialInOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseExponentialInOut = {
  "cocos2d::CCEaseExponentialInOut",
  mrb_free_cocos2d_CCEaseExponentialInOut
};

static void
mrb_no_free_cocos2d_CCEaseExponentialInOut(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseExponentialInOut *obj = static_cast< cocos2d::CCEaseExponentialInOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseExponentialInOut = {
  "cocos2d::CCEaseExponentialInOut",
  mrb_no_free_cocos2d_CCEaseExponentialInOut
};

static struct RClass *
_define_class_cocos2d_CCEaseExponentialInOut(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseExponentialInOut") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseExponentialInOut");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseExponentialInOut", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseExponentialInOut");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseExponentialInOut, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseExponentialOut(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseExponentialOut *obj = static_cast< cocos2d::CCEaseExponentialOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseExponentialOut = {
  "cocos2d::CCEaseExponentialOut",
  mrb_free_cocos2d_CCEaseExponentialOut
};

static void
mrb_no_free_cocos2d_CCEaseExponentialOut(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseExponentialOut *obj = static_cast< cocos2d::CCEaseExponentialOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseExponentialOut = {
  "cocos2d::CCEaseExponentialOut",
  mrb_no_free_cocos2d_CCEaseExponentialOut
};

static struct RClass *
_define_class_cocos2d_CCEaseExponentialOut(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseExponentialOut") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseExponentialOut");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseExponentialOut", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseExponentialOut");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseExponentialOut, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseIn(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseIn *obj = static_cast< cocos2d::CCEaseIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseIn = {
  "cocos2d::CCEaseIn",
  mrb_free_cocos2d_CCEaseIn
};

static void
mrb_no_free_cocos2d_CCEaseIn(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseIn *obj = static_cast< cocos2d::CCEaseIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseIn = {
  "cocos2d::CCEaseIn",
  mrb_no_free_cocos2d_CCEaseIn
};

static struct RClass *
_define_class_cocos2d_CCEaseIn(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseIn") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseIn");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseRateAction") == 0) {
    _define_class_cocos2d_CCEaseRateAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseRateAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseIn", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseIn");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseIn, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseInOut(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseInOut *obj = static_cast< cocos2d::CCEaseInOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseInOut = {
  "cocos2d::CCEaseInOut",
  mrb_free_cocos2d_CCEaseInOut
};

static void
mrb_no_free_cocos2d_CCEaseInOut(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseInOut *obj = static_cast< cocos2d::CCEaseInOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseInOut = {
  "cocos2d::CCEaseInOut",
  mrb_no_free_cocos2d_CCEaseInOut
};

static struct RClass *
_define_class_cocos2d_CCEaseInOut(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseInOut") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseInOut");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseRateAction") == 0) {
    _define_class_cocos2d_CCEaseRateAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseRateAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseInOut", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseInOut");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseInOut, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseOut(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseOut *obj = static_cast< cocos2d::CCEaseOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseOut = {
  "cocos2d::CCEaseOut",
  mrb_free_cocos2d_CCEaseOut
};

static void
mrb_no_free_cocos2d_CCEaseOut(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseOut *obj = static_cast< cocos2d::CCEaseOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseOut = {
  "cocos2d::CCEaseOut",
  mrb_no_free_cocos2d_CCEaseOut
};

static struct RClass *
_define_class_cocos2d_CCEaseOut(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseOut") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseOut");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseRateAction") == 0) {
    _define_class_cocos2d_CCEaseRateAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseRateAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseOut", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseOut");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseOut, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseRateAction(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseRateAction *obj = static_cast< cocos2d::CCEaseRateAction * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseRateAction = {
  "cocos2d::CCEaseRateAction",
  mrb_free_cocos2d_CCEaseRateAction
};

static void
mrb_no_free_cocos2d_CCEaseRateAction(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseRateAction *obj = static_cast< cocos2d::CCEaseRateAction * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseRateAction = {
  "cocos2d::CCEaseRateAction",
  mrb_no_free_cocos2d_CCEaseRateAction
};

static struct RClass *
_define_class_cocos2d_CCEaseRateAction(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseRateAction") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseRateAction");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseRateAction", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseRateAction");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseRateAction, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseSineIn(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseSineIn *obj = static_cast< cocos2d::CCEaseSineIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseSineIn = {
  "cocos2d::CCEaseSineIn",
  mrb_free_cocos2d_CCEaseSineIn
};

static void
mrb_no_free_cocos2d_CCEaseSineIn(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseSineIn *obj = static_cast< cocos2d::CCEaseSineIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseSineIn = {
  "cocos2d::CCEaseSineIn",
  mrb_no_free_cocos2d_CCEaseSineIn
};

static struct RClass *
_define_class_cocos2d_CCEaseSineIn(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseSineIn") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseSineIn");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseSineIn", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseSineIn");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseSineIn, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseSineInOut(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseSineInOut *obj = static_cast< cocos2d::CCEaseSineInOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseSineInOut = {
  "cocos2d::CCEaseSineInOut",
  mrb_free_cocos2d_CCEaseSineInOut
};

static void
mrb_no_free_cocos2d_CCEaseSineInOut(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseSineInOut *obj = static_cast< cocos2d::CCEaseSineInOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseSineInOut = {
  "cocos2d::CCEaseSineInOut",
  mrb_no_free_cocos2d_CCEaseSineInOut
};

static struct RClass *
_define_class_cocos2d_CCEaseSineInOut(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseSineInOut") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseSineInOut");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseSineInOut", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseSineInOut");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseSineInOut, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEaseSineOut(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEaseSineOut *obj = static_cast< cocos2d::CCEaseSineOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEaseSineOut = {
  "cocos2d::CCEaseSineOut",
  mrb_free_cocos2d_CCEaseSineOut
};

static void
mrb_no_free_cocos2d_CCEaseSineOut(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEaseSineOut *obj = static_cast< cocos2d::CCEaseSineOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEaseSineOut = {
  "cocos2d::CCEaseSineOut",
  mrb_no_free_cocos2d_CCEaseSineOut
};

static struct RClass *
_define_class_cocos2d_CCEaseSineOut(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseSineOut") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEaseSineOut");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEaseSineOut", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEaseSineOut");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEaseSineOut, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCEvent(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCEvent *obj = static_cast< cocos2d::CCEvent * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCEvent = {
  "cocos2d::CCEvent",
  mrb_free_cocos2d_CCEvent
};

static void
mrb_no_free_cocos2d_CCEvent(mrb_state *mrb, void *ptr)
{
  cocos2d::CCEvent *obj = static_cast< cocos2d::CCEvent * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCEvent = {
  "cocos2d::CCEvent",
  mrb_no_free_cocos2d_CCEvent
};

static struct RClass *
_define_class_cocos2d_CCEvent(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEvent") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCEvent");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCEvent", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCEvent");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCEvent, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCFadeIn(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCFadeIn *obj = static_cast< cocos2d::CCFadeIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCFadeIn = {
  "cocos2d::CCFadeIn",
  mrb_free_cocos2d_CCFadeIn
};

static void
mrb_no_free_cocos2d_CCFadeIn(mrb_state *mrb, void *ptr)
{
  cocos2d::CCFadeIn *obj = static_cast< cocos2d::CCFadeIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCFadeIn = {
  "cocos2d::CCFadeIn",
  mrb_no_free_cocos2d_CCFadeIn
};

static struct RClass *
_define_class_cocos2d_CCFadeIn(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFadeIn") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCFadeIn");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFadeIn", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCFadeIn");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCFadeIn, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCFadeOut(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCFadeOut *obj = static_cast< cocos2d::CCFadeOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCFadeOut = {
  "cocos2d::CCFadeOut",
  mrb_free_cocos2d_CCFadeOut
};

static void
mrb_no_free_cocos2d_CCFadeOut(mrb_state *mrb, void *ptr)
{
  cocos2d::CCFadeOut *obj = static_cast< cocos2d::CCFadeOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCFadeOut = {
  "cocos2d::CCFadeOut",
  mrb_no_free_cocos2d_CCFadeOut
};

static struct RClass *
_define_class_cocos2d_CCFadeOut(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFadeOut") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCFadeOut");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFadeOut", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCFadeOut");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCFadeOut, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCFadeOutBLTiles(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCFadeOutBLTiles *obj = static_cast< cocos2d::CCFadeOutBLTiles * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCFadeOutBLTiles = {
  "cocos2d::CCFadeOutBLTiles",
  mrb_free_cocos2d_CCFadeOutBLTiles
};

static void
mrb_no_free_cocos2d_CCFadeOutBLTiles(mrb_state *mrb, void *ptr)
{
  cocos2d::CCFadeOutBLTiles *obj = static_cast< cocos2d::CCFadeOutBLTiles * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCFadeOutBLTiles = {
  "cocos2d::CCFadeOutBLTiles",
  mrb_no_free_cocos2d_CCFadeOutBLTiles
};

static struct RClass *
_define_class_cocos2d_CCFadeOutBLTiles(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFadeOutBLTiles") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCFadeOutBLTiles");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFadeOutTRTiles") == 0) {
    _define_class_cocos2d_CCFadeOutTRTiles(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFadeOutTRTiles");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFadeOutBLTiles", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCFadeOutBLTiles");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCFadeOutBLTiles, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCFadeOutDownTiles(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCFadeOutDownTiles *obj = static_cast< cocos2d::CCFadeOutDownTiles * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCFadeOutDownTiles = {
  "cocos2d::CCFadeOutDownTiles",
  mrb_free_cocos2d_CCFadeOutDownTiles
};

static void
mrb_no_free_cocos2d_CCFadeOutDownTiles(mrb_state *mrb, void *ptr)
{
  cocos2d::CCFadeOutDownTiles *obj = static_cast< cocos2d::CCFadeOutDownTiles * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCFadeOutDownTiles = {
  "cocos2d::CCFadeOutDownTiles",
  mrb_no_free_cocos2d_CCFadeOutDownTiles
};

static struct RClass *
_define_class_cocos2d_CCFadeOutDownTiles(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFadeOutDownTiles") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCFadeOutDownTiles");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFadeOutUpTiles") == 0) {
    _define_class_cocos2d_CCFadeOutUpTiles(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFadeOutUpTiles");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFadeOutDownTiles", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCFadeOutDownTiles");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCFadeOutDownTiles, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCFadeOutTRTiles(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCFadeOutTRTiles *obj = static_cast< cocos2d::CCFadeOutTRTiles * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCFadeOutTRTiles = {
  "cocos2d::CCFadeOutTRTiles",
  mrb_free_cocos2d_CCFadeOutTRTiles
};

static void
mrb_no_free_cocos2d_CCFadeOutTRTiles(mrb_state *mrb, void *ptr)
{
  cocos2d::CCFadeOutTRTiles *obj = static_cast< cocos2d::CCFadeOutTRTiles * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCFadeOutTRTiles = {
  "cocos2d::CCFadeOutTRTiles",
  mrb_no_free_cocos2d_CCFadeOutTRTiles
};

static struct RClass *
_define_class_cocos2d_CCFadeOutTRTiles(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFadeOutTRTiles") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCFadeOutTRTiles");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFadeOutTRTiles", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCFadeOutTRTiles");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCFadeOutTRTiles, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCFadeOutUpTiles(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCFadeOutUpTiles *obj = static_cast< cocos2d::CCFadeOutUpTiles * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCFadeOutUpTiles = {
  "cocos2d::CCFadeOutUpTiles",
  mrb_free_cocos2d_CCFadeOutUpTiles
};

static void
mrb_no_free_cocos2d_CCFadeOutUpTiles(mrb_state *mrb, void *ptr)
{
  cocos2d::CCFadeOutUpTiles *obj = static_cast< cocos2d::CCFadeOutUpTiles * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCFadeOutUpTiles = {
  "cocos2d::CCFadeOutUpTiles",
  mrb_no_free_cocos2d_CCFadeOutUpTiles
};

static struct RClass *
_define_class_cocos2d_CCFadeOutUpTiles(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFadeOutUpTiles") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCFadeOutUpTiles");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFadeOutTRTiles") == 0) {
    _define_class_cocos2d_CCFadeOutTRTiles(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFadeOutTRTiles");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFadeOutUpTiles", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCFadeOutUpTiles");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCFadeOutUpTiles, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCFadeTo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCFadeTo *obj = static_cast< cocos2d::CCFadeTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCFadeTo = {
  "cocos2d::CCFadeTo",
  mrb_free_cocos2d_CCFadeTo
};

static void
mrb_no_free_cocos2d_CCFadeTo(mrb_state *mrb, void *ptr)
{
  cocos2d::CCFadeTo *obj = static_cast< cocos2d::CCFadeTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCFadeTo = {
  "cocos2d::CCFadeTo",
  mrb_no_free_cocos2d_CCFadeTo
};

static struct RClass *
_define_class_cocos2d_CCFadeTo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFadeTo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCFadeTo");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFadeTo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCFadeTo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCFadeTo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCFileUtils(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCFileUtils * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCFileUtils = {
  "cocos2d::CCFileUtils",
  mrb_free_cocos2d_CCFileUtils
};

static void
mrb_no_free_cocos2d_CCFileUtils(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCFileUtils = {
  "cocos2d::CCFileUtils",
  mrb_no_free_cocos2d_CCFileUtils
};

static struct RClass *
_define_class_cocos2d_CCFileUtils(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFileUtils") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCFileUtils");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFileUtils", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCFileUtils");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCFileUtils, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCFiniteTimeAction(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCFiniteTimeAction *obj = static_cast< cocos2d::CCFiniteTimeAction * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCFiniteTimeAction = {
  "cocos2d::CCFiniteTimeAction",
  mrb_free_cocos2d_CCFiniteTimeAction
};

static void
mrb_no_free_cocos2d_CCFiniteTimeAction(mrb_state *mrb, void *ptr)
{
  cocos2d::CCFiniteTimeAction *obj = static_cast< cocos2d::CCFiniteTimeAction * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCFiniteTimeAction = {
  "cocos2d::CCFiniteTimeAction",
  mrb_no_free_cocos2d_CCFiniteTimeAction
};

static struct RClass *
_define_class_cocos2d_CCFiniteTimeAction(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFiniteTimeAction") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCFiniteTimeAction");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAction") == 0) {
    _define_class_cocos2d_CCAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFiniteTimeAction", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCFiniteTimeAction");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCFiniteTimeAction, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCFlipX(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCFlipX *obj = static_cast< cocos2d::CCFlipX * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCFlipX = {
  "cocos2d::CCFlipX",
  mrb_free_cocos2d_CCFlipX
};

static void
mrb_no_free_cocos2d_CCFlipX(mrb_state *mrb, void *ptr)
{
  cocos2d::CCFlipX *obj = static_cast< cocos2d::CCFlipX * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCFlipX = {
  "cocos2d::CCFlipX",
  mrb_no_free_cocos2d_CCFlipX
};

static struct RClass *
_define_class_cocos2d_CCFlipX(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFlipX") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCFlipX");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFlipX", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCFlipX");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCFlipX, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCFlipX3D(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCFlipX3D *obj = static_cast< cocos2d::CCFlipX3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCFlipX3D = {
  "cocos2d::CCFlipX3D",
  mrb_free_cocos2d_CCFlipX3D
};

static void
mrb_no_free_cocos2d_CCFlipX3D(mrb_state *mrb, void *ptr)
{
  cocos2d::CCFlipX3D *obj = static_cast< cocos2d::CCFlipX3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCFlipX3D = {
  "cocos2d::CCFlipX3D",
  mrb_no_free_cocos2d_CCFlipX3D
};

static struct RClass *
_define_class_cocos2d_CCFlipX3D(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFlipX3D") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCFlipX3D");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFlipX3D", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCFlipX3D");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCFlipX3D, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCFlipY(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCFlipY *obj = static_cast< cocos2d::CCFlipY * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCFlipY = {
  "cocos2d::CCFlipY",
  mrb_free_cocos2d_CCFlipY
};

static void
mrb_no_free_cocos2d_CCFlipY(mrb_state *mrb, void *ptr)
{
  cocos2d::CCFlipY *obj = static_cast< cocos2d::CCFlipY * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCFlipY = {
  "cocos2d::CCFlipY",
  mrb_no_free_cocos2d_CCFlipY
};

static struct RClass *
_define_class_cocos2d_CCFlipY(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFlipY") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCFlipY");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFlipY", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCFlipY");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCFlipY, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCFlipY3D(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCFlipY3D *obj = static_cast< cocos2d::CCFlipY3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCFlipY3D = {
  "cocos2d::CCFlipY3D",
  mrb_free_cocos2d_CCFlipY3D
};

static void
mrb_no_free_cocos2d_CCFlipY3D(mrb_state *mrb, void *ptr)
{
  cocos2d::CCFlipY3D *obj = static_cast< cocos2d::CCFlipY3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCFlipY3D = {
  "cocos2d::CCFlipY3D",
  mrb_no_free_cocos2d_CCFlipY3D
};

static struct RClass *
_define_class_cocos2d_CCFlipY3D(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFlipY3D") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCFlipY3D");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFlipX3D") == 0) {
    _define_class_cocos2d_CCFlipX3D(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFlipX3D");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFlipY3D", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCFlipY3D");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCFlipY3D, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCFloat(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCFloat *obj = static_cast< cocos2d::CCFloat * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCFloat = {
  "cocos2d::CCFloat",
  mrb_free_cocos2d_CCFloat
};

static void
mrb_no_free_cocos2d_CCFloat(mrb_state *mrb, void *ptr)
{
  cocos2d::CCFloat *obj = static_cast< cocos2d::CCFloat * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCFloat = {
  "cocos2d::CCFloat",
  mrb_no_free_cocos2d_CCFloat
};

static struct RClass *
_define_class_cocos2d_CCFloat(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFloat") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCFloat");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFloat", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCFloat");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCFloat, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCFollow(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCFollow *obj = static_cast< cocos2d::CCFollow * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCFollow = {
  "cocos2d::CCFollow",
  mrb_free_cocos2d_CCFollow
};

static void
mrb_no_free_cocos2d_CCFollow(mrb_state *mrb, void *ptr)
{
  cocos2d::CCFollow *obj = static_cast< cocos2d::CCFollow * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCFollow = {
  "cocos2d::CCFollow",
  mrb_no_free_cocos2d_CCFollow
};

static struct RClass *
_define_class_cocos2d_CCFollow(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFollow") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCFollow");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAction") == 0) {
    _define_class_cocos2d_CCAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCFollow", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCFollow");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCFollow, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCGLProgram(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCGLProgram *obj = static_cast< cocos2d::CCGLProgram * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCGLProgram = {
  "cocos2d::CCGLProgram",
  mrb_free_cocos2d_CCGLProgram
};

static void
mrb_no_free_cocos2d_CCGLProgram(mrb_state *mrb, void *ptr)
{
  cocos2d::CCGLProgram *obj = static_cast< cocos2d::CCGLProgram * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCGLProgram = {
  "cocos2d::CCGLProgram",
  mrb_no_free_cocos2d_CCGLProgram
};

static struct RClass *
_define_class_cocos2d_CCGLProgram(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGLProgram") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCGLProgram");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCGLProgram", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCGLProgram");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCGLProgram, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCGrabber(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCGrabber *obj = static_cast< cocos2d::CCGrabber * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCGrabber = {
  "cocos2d::CCGrabber",
  mrb_free_cocos2d_CCGrabber
};

static void
mrb_no_free_cocos2d_CCGrabber(mrb_state *mrb, void *ptr)
{
  cocos2d::CCGrabber *obj = static_cast< cocos2d::CCGrabber * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCGrabber = {
  "cocos2d::CCGrabber",
  mrb_no_free_cocos2d_CCGrabber
};

static struct RClass *
_define_class_cocos2d_CCGrabber(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrabber") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCGrabber");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCGrabber", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCGrabber");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCGrabber, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCGrid3D(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCGrid3D *obj = static_cast< cocos2d::CCGrid3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCGrid3D = {
  "cocos2d::CCGrid3D",
  mrb_free_cocos2d_CCGrid3D
};

static void
mrb_no_free_cocos2d_CCGrid3D(mrb_state *mrb, void *ptr)
{
  cocos2d::CCGrid3D *obj = static_cast< cocos2d::CCGrid3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCGrid3D = {
  "cocos2d::CCGrid3D",
  mrb_no_free_cocos2d_CCGrid3D
};

static struct RClass *
_define_class_cocos2d_CCGrid3D(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3D") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCGrid3D");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGridBase") == 0) {
    _define_class_cocos2d_CCGridBase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGridBase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCGrid3D", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCGrid3D");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCGrid3D, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCGrid3DAction(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCGrid3DAction *obj = static_cast< cocos2d::CCGrid3DAction * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCGrid3DAction = {
  "cocos2d::CCGrid3DAction",
  mrb_free_cocos2d_CCGrid3DAction
};

static void
mrb_no_free_cocos2d_CCGrid3DAction(mrb_state *mrb, void *ptr)
{
  cocos2d::CCGrid3DAction *obj = static_cast< cocos2d::CCGrid3DAction * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCGrid3DAction = {
  "cocos2d::CCGrid3DAction",
  mrb_no_free_cocos2d_CCGrid3DAction
};

static struct RClass *
_define_class_cocos2d_CCGrid3DAction(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGridAction") == 0) {
    _define_class_cocos2d_CCGridAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGridAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCGrid3DAction", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCGrid3DAction");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCGrid3DAction, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCGridAction(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCGridAction *obj = static_cast< cocos2d::CCGridAction * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCGridAction = {
  "cocos2d::CCGridAction",
  mrb_free_cocos2d_CCGridAction
};

static void
mrb_no_free_cocos2d_CCGridAction(mrb_state *mrb, void *ptr)
{
  cocos2d::CCGridAction *obj = static_cast< cocos2d::CCGridAction * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCGridAction = {
  "cocos2d::CCGridAction",
  mrb_no_free_cocos2d_CCGridAction
};

static struct RClass *
_define_class_cocos2d_CCGridAction(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGridAction") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCGridAction");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCGridAction", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCGridAction");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCGridAction, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCGridBase(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCGridBase *obj = static_cast< cocos2d::CCGridBase * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCGridBase = {
  "cocos2d::CCGridBase",
  mrb_free_cocos2d_CCGridBase
};

static void
mrb_no_free_cocos2d_CCGridBase(mrb_state *mrb, void *ptr)
{
  cocos2d::CCGridBase *obj = static_cast< cocos2d::CCGridBase * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCGridBase = {
  "cocos2d::CCGridBase",
  mrb_no_free_cocos2d_CCGridBase
};

static struct RClass *
_define_class_cocos2d_CCGridBase(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGridBase") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCGridBase");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCGridBase", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCGridBase");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCGridBase, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCHide(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCHide *obj = static_cast< cocos2d::CCHide * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCHide = {
  "cocos2d::CCHide",
  mrb_free_cocos2d_CCHide
};

static void
mrb_no_free_cocos2d_CCHide(mrb_state *mrb, void *ptr)
{
  cocos2d::CCHide *obj = static_cast< cocos2d::CCHide * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCHide = {
  "cocos2d::CCHide",
  mrb_no_free_cocos2d_CCHide
};

static struct RClass *
_define_class_cocos2d_CCHide(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCHide") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCHide");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCHide", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCHide");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCHide, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCIMEDelegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_CCIMEDelegate = {
  "cocos2d::CCIMEDelegate",
  mrb_free_cocos2d_CCIMEDelegate
};

static struct RClass *
_define_class_cocos2d_CCIMEDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCIMEDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCIMEDelegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCIMEDelegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCIMEDelegate");
  return rc;
}

static void
mrb_free_cocos2d_CCIMEDispatcher(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCIMEDispatcher * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCIMEDispatcher = {
  "cocos2d::CCIMEDispatcher",
  mrb_free_cocos2d_CCIMEDispatcher
};

static void
mrb_no_free_cocos2d_CCIMEDispatcher(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCIMEDispatcher = {
  "cocos2d::CCIMEDispatcher",
  mrb_no_free_cocos2d_CCIMEDispatcher
};

static struct RClass *
_define_class_cocos2d_CCIMEDispatcher(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCIMEDispatcher") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCIMEDispatcher");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCIMEDispatcher", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCIMEDispatcher");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCIMEDispatcher, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCIMEKeyboardNotificationInfo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCIMEKeyboardNotificationInfo * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCIMEKeyboardNotificationInfo = {
  "cocos2d::CCIMEKeyboardNotificationInfo",
  mrb_free_cocos2d_CCIMEKeyboardNotificationInfo
};

static void
mrb_no_free_cocos2d_CCIMEKeyboardNotificationInfo(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCIMEKeyboardNotificationInfo = {
  "cocos2d::CCIMEKeyboardNotificationInfo",
  mrb_no_free_cocos2d_CCIMEKeyboardNotificationInfo
};

static struct RClass *
_define_class_cocos2d_CCIMEKeyboardNotificationInfo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCIMEKeyboardNotificationInfo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCIMEKeyboardNotificationInfo");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCIMEKeyboardNotificationInfo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCIMEKeyboardNotificationInfo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCIMEKeyboardNotificationInfo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCImage(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCImage *obj = static_cast< cocos2d::CCImage * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCImage = {
  "cocos2d::CCImage",
  mrb_free_cocos2d_CCImage
};

static void
mrb_no_free_cocos2d_CCImage(mrb_state *mrb, void *ptr)
{
  cocos2d::CCImage *obj = static_cast< cocos2d::CCImage * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCImage = {
  "cocos2d::CCImage",
  mrb_no_free_cocos2d_CCImage
};

static struct RClass *
_define_class_cocos2d_CCImage(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCImage") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCImage");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCImage", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCImage");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCImage, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCInteger(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCInteger *obj = static_cast< cocos2d::CCInteger * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCInteger = {
  "cocos2d::CCInteger",
  mrb_free_cocos2d_CCInteger
};

static void
mrb_no_free_cocos2d_CCInteger(mrb_state *mrb, void *ptr)
{
  cocos2d::CCInteger *obj = static_cast< cocos2d::CCInteger * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCInteger = {
  "cocos2d::CCInteger",
  mrb_no_free_cocos2d_CCInteger
};

static struct RClass *
_define_class_cocos2d_CCInteger(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCInteger") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCInteger");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCInteger", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCInteger");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCInteger, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCJumpBy(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCJumpBy *obj = static_cast< cocos2d::CCJumpBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCJumpBy = {
  "cocos2d::CCJumpBy",
  mrb_free_cocos2d_CCJumpBy
};

static void
mrb_no_free_cocos2d_CCJumpBy(mrb_state *mrb, void *ptr)
{
  cocos2d::CCJumpBy *obj = static_cast< cocos2d::CCJumpBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCJumpBy = {
  "cocos2d::CCJumpBy",
  mrb_no_free_cocos2d_CCJumpBy
};

static struct RClass *
_define_class_cocos2d_CCJumpBy(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCJumpBy") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCJumpBy");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCJumpBy", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCJumpBy");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCJumpBy, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCJumpTiles3D(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCJumpTiles3D *obj = static_cast< cocos2d::CCJumpTiles3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCJumpTiles3D = {
  "cocos2d::CCJumpTiles3D",
  mrb_free_cocos2d_CCJumpTiles3D
};

static void
mrb_no_free_cocos2d_CCJumpTiles3D(mrb_state *mrb, void *ptr)
{
  cocos2d::CCJumpTiles3D *obj = static_cast< cocos2d::CCJumpTiles3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCJumpTiles3D = {
  "cocos2d::CCJumpTiles3D",
  mrb_no_free_cocos2d_CCJumpTiles3D
};

static struct RClass *
_define_class_cocos2d_CCJumpTiles3D(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCJumpTiles3D") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCJumpTiles3D");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCJumpTiles3D", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCJumpTiles3D");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCJumpTiles3D, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCJumpTo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCJumpTo *obj = static_cast< cocos2d::CCJumpTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCJumpTo = {
  "cocos2d::CCJumpTo",
  mrb_free_cocos2d_CCJumpTo
};

static void
mrb_no_free_cocos2d_CCJumpTo(mrb_state *mrb, void *ptr)
{
  cocos2d::CCJumpTo *obj = static_cast< cocos2d::CCJumpTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCJumpTo = {
  "cocos2d::CCJumpTo",
  mrb_no_free_cocos2d_CCJumpTo
};

static struct RClass *
_define_class_cocos2d_CCJumpTo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCJumpTo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCJumpTo");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCJumpBy") == 0) {
    _define_class_cocos2d_CCJumpBy(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCJumpBy");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCJumpTo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCJumpTo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCJumpTo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCKeypadDelegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_CCKeypadDelegate = {
  "cocos2d::CCKeypadDelegate",
  mrb_free_cocos2d_CCKeypadDelegate
};

static struct RClass *
_define_class_cocos2d_CCKeypadDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCKeypadDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCKeypadDelegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCKeypadDelegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCKeypadDelegate");
  return rc;
}

static void
mrb_free_cocos2d_CCKeypadDispatcher(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCKeypadDispatcher *obj = static_cast< cocos2d::CCKeypadDispatcher * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCKeypadDispatcher = {
  "cocos2d::CCKeypadDispatcher",
  mrb_free_cocos2d_CCKeypadDispatcher
};

static void
mrb_no_free_cocos2d_CCKeypadDispatcher(mrb_state *mrb, void *ptr)
{
  cocos2d::CCKeypadDispatcher *obj = static_cast< cocos2d::CCKeypadDispatcher * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCKeypadDispatcher = {
  "cocos2d::CCKeypadDispatcher",
  mrb_no_free_cocos2d_CCKeypadDispatcher
};

static struct RClass *
_define_class_cocos2d_CCKeypadDispatcher(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCKeypadDispatcher") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCKeypadDispatcher");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCKeypadDispatcher", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCKeypadDispatcher");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCKeypadDispatcher, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCKeypadHandler(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCKeypadHandler *obj = static_cast< cocos2d::CCKeypadHandler * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCKeypadHandler = {
  "cocos2d::CCKeypadHandler",
  mrb_free_cocos2d_CCKeypadHandler
};

static void
mrb_no_free_cocos2d_CCKeypadHandler(mrb_state *mrb, void *ptr)
{
  cocos2d::CCKeypadHandler *obj = static_cast< cocos2d::CCKeypadHandler * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCKeypadHandler = {
  "cocos2d::CCKeypadHandler",
  mrb_no_free_cocos2d_CCKeypadHandler
};

static struct RClass *
_define_class_cocos2d_CCKeypadHandler(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCKeypadHandler") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCKeypadHandler");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCKeypadHandler", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCKeypadHandler");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCKeypadHandler, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCLabelAtlas(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCLabelAtlas *obj = static_cast< cocos2d::CCLabelAtlas * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCLabelAtlas = {
  "cocos2d::CCLabelAtlas",
  mrb_free_cocos2d_CCLabelAtlas
};

static void
mrb_no_free_cocos2d_CCLabelAtlas(mrb_state *mrb, void *ptr)
{
  cocos2d::CCLabelAtlas *obj = static_cast< cocos2d::CCLabelAtlas * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCLabelAtlas = {
  "cocos2d::CCLabelAtlas",
  mrb_no_free_cocos2d_CCLabelAtlas
};

static struct RClass *
_define_class_cocos2d_CCLabelAtlas(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLabelAtlas") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCLabelAtlas");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAtlasNode") == 0) {
    _define_class_cocos2d_CCAtlasNode(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLabelProtocol") == 0) {
    _define_class_cocos2d_CCLabelProtocol(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAtlasNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCLabelAtlas", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLabelProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCLabelAtlas");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCLabelAtlas, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCLabelBMFont(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCLabelBMFont *obj = static_cast< cocos2d::CCLabelBMFont * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCLabelBMFont = {
  "cocos2d::CCLabelBMFont",
  mrb_free_cocos2d_CCLabelBMFont
};

static void
mrb_no_free_cocos2d_CCLabelBMFont(mrb_state *mrb, void *ptr)
{
  cocos2d::CCLabelBMFont *obj = static_cast< cocos2d::CCLabelBMFont * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCLabelBMFont = {
  "cocos2d::CCLabelBMFont",
  mrb_no_free_cocos2d_CCLabelBMFont
};

static struct RClass *
_define_class_cocos2d_CCLabelBMFont(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLabelBMFont") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCLabelBMFont");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSpriteBatchNode") == 0) {
    _define_class_cocos2d_CCSpriteBatchNode(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLabelProtocol") == 0) {
    _define_class_cocos2d_CCLabelProtocol(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCRGBAProtocol") == 0) {
    _define_class_cocos2d_CCRGBAProtocol(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSpriteBatchNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCLabelBMFont", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLabelProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCRGBAProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCLabelBMFont");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCLabelBMFont, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCLabelProtocol(mrb_state *mrb, void *ptr)
{
  //delete static_cast< cocos2d::CCLabelProtocol * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCLabelProtocol = {
  "cocos2d::CCLabelProtocol",
  mrb_free_cocos2d_CCLabelProtocol
};

static struct RClass *
_define_class_cocos2d_CCLabelProtocol(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLabelProtocol") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCLabelProtocol");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCLabelProtocol");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCLabelProtocol");
  return rc;
}

static void
mrb_free_cocos2d_CCLabelTTF(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCLabelTTF *obj = static_cast< cocos2d::CCLabelTTF * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCLabelTTF = {
  "cocos2d::CCLabelTTF",
  mrb_free_cocos2d_CCLabelTTF
};

static void
mrb_no_free_cocos2d_CCLabelTTF(mrb_state *mrb, void *ptr)
{
  cocos2d::CCLabelTTF *obj = static_cast< cocos2d::CCLabelTTF * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCLabelTTF = {
  "cocos2d::CCLabelTTF",
  mrb_no_free_cocos2d_CCLabelTTF
};

static struct RClass *
_define_class_cocos2d_CCLabelTTF(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLabelTTF") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCLabelTTF");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSprite") == 0) {
    _define_class_cocos2d_CCSprite(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLabelProtocol") == 0) {
    _define_class_cocos2d_CCLabelProtocol(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSprite");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCLabelTTF", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLabelProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCLabelTTF");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCLabelTTF, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCLayer(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCLayer *obj = static_cast< cocos2d::CCLayer * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCLayer = {
  "cocos2d::CCLayer",
  mrb_free_cocos2d_CCLayer
};

static void
mrb_no_free_cocos2d_CCLayer(mrb_state *mrb, void *ptr)
{
  cocos2d::CCLayer *obj = static_cast< cocos2d::CCLayer * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCLayer = {
  "cocos2d::CCLayer",
  mrb_no_free_cocos2d_CCLayer
};

static struct RClass *
_define_class_cocos2d_CCLayer(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayer") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCLayer");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTouchDelegate") == 0) {
    _define_class_cocos2d_CCTouchDelegate(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAccelerometerDelegate") == 0) {
    _define_class_cocos2d_CCAccelerometerDelegate(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCKeypadDelegate") == 0) {
    _define_class_cocos2d_CCKeypadDelegate(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCLayer", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTouchDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAccelerometerDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCKeypadDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCLayer");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCLayer, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCLayerColor(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCLayerColor *obj = static_cast< cocos2d::CCLayerColor * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCLayerColor = {
  "cocos2d::CCLayerColor",
  mrb_free_cocos2d_CCLayerColor
};

static void
mrb_no_free_cocos2d_CCLayerColor(mrb_state *mrb, void *ptr)
{
  cocos2d::CCLayerColor *obj = static_cast< cocos2d::CCLayerColor * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCLayerColor = {
  "cocos2d::CCLayerColor",
  mrb_no_free_cocos2d_CCLayerColor
};

static struct RClass *
_define_class_cocos2d_CCLayerColor(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayerColor") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCLayerColor");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayerRGBA") == 0) {
    _define_class_cocos2d_CCLayerRGBA(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCBlendProtocol") == 0) {
    _define_class_cocos2d_CCBlendProtocol(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayerRGBA");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCLayerColor", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCBlendProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCLayerColor");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCLayerColor, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCLayerGradient(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCLayerGradient *obj = static_cast< cocos2d::CCLayerGradient * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCLayerGradient = {
  "cocos2d::CCLayerGradient",
  mrb_free_cocos2d_CCLayerGradient
};

static void
mrb_no_free_cocos2d_CCLayerGradient(mrb_state *mrb, void *ptr)
{
  cocos2d::CCLayerGradient *obj = static_cast< cocos2d::CCLayerGradient * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCLayerGradient = {
  "cocos2d::CCLayerGradient",
  mrb_no_free_cocos2d_CCLayerGradient
};

static struct RClass *
_define_class_cocos2d_CCLayerGradient(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayerGradient") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCLayerGradient");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayerColor") == 0) {
    _define_class_cocos2d_CCLayerColor(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayerColor");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCLayerGradient", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCLayerGradient");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCLayerGradient, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCLayerMultiplex(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCLayerMultiplex *obj = static_cast< cocos2d::CCLayerMultiplex * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCLayerMultiplex = {
  "cocos2d::CCLayerMultiplex",
  mrb_free_cocos2d_CCLayerMultiplex
};

static void
mrb_no_free_cocos2d_CCLayerMultiplex(mrb_state *mrb, void *ptr)
{
  cocos2d::CCLayerMultiplex *obj = static_cast< cocos2d::CCLayerMultiplex * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCLayerMultiplex = {
  "cocos2d::CCLayerMultiplex",
  mrb_no_free_cocos2d_CCLayerMultiplex
};

static struct RClass *
_define_class_cocos2d_CCLayerMultiplex(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayerMultiplex") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCLayerMultiplex");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayer") == 0) {
    _define_class_cocos2d_CCLayer(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayer");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCLayerMultiplex", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCLayerMultiplex");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCLayerMultiplex, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCLayerRGBA(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCLayerRGBA *obj = static_cast< cocos2d::CCLayerRGBA * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCLayerRGBA = {
  "cocos2d::CCLayerRGBA",
  mrb_free_cocos2d_CCLayerRGBA
};

static void
mrb_no_free_cocos2d_CCLayerRGBA(mrb_state *mrb, void *ptr)
{
  cocos2d::CCLayerRGBA *obj = static_cast< cocos2d::CCLayerRGBA * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCLayerRGBA = {
  "cocos2d::CCLayerRGBA",
  mrb_no_free_cocos2d_CCLayerRGBA
};

static struct RClass *
_define_class_cocos2d_CCLayerRGBA(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayerRGBA") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCLayerRGBA");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayer") == 0) {
    _define_class_cocos2d_CCLayer(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCRGBAProtocol") == 0) {
    _define_class_cocos2d_CCRGBAProtocol(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayer");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCLayerRGBA", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCRGBAProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCLayerRGBA");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCLayerRGBA, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCLens3D(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCLens3D *obj = static_cast< cocos2d::CCLens3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCLens3D = {
  "cocos2d::CCLens3D",
  mrb_free_cocos2d_CCLens3D
};

static void
mrb_no_free_cocos2d_CCLens3D(mrb_state *mrb, void *ptr)
{
  cocos2d::CCLens3D *obj = static_cast< cocos2d::CCLens3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCLens3D = {
  "cocos2d::CCLens3D",
  mrb_no_free_cocos2d_CCLens3D
};

static struct RClass *
_define_class_cocos2d_CCLens3D(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLens3D") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCLens3D");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCLens3D", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCLens3D");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCLens3D, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCLiquid(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCLiquid *obj = static_cast< cocos2d::CCLiquid * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCLiquid = {
  "cocos2d::CCLiquid",
  mrb_free_cocos2d_CCLiquid
};

static void
mrb_no_free_cocos2d_CCLiquid(mrb_state *mrb, void *ptr)
{
  cocos2d::CCLiquid *obj = static_cast< cocos2d::CCLiquid * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCLiquid = {
  "cocos2d::CCLiquid",
  mrb_no_free_cocos2d_CCLiquid
};

static struct RClass *
_define_class_cocos2d_CCLiquid(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLiquid") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCLiquid");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCLiquid", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCLiquid");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCLiquid, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCMenu(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCMenu *obj = static_cast< cocos2d::CCMenu * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCMenu = {
  "cocos2d::CCMenu",
  mrb_free_cocos2d_CCMenu
};

static void
mrb_no_free_cocos2d_CCMenu(mrb_state *mrb, void *ptr)
{
  cocos2d::CCMenu *obj = static_cast< cocos2d::CCMenu * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCMenu = {
  "cocos2d::CCMenu",
  mrb_no_free_cocos2d_CCMenu
};

static struct RClass *
_define_class_cocos2d_CCMenu(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenu") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCMenu");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayerRGBA") == 0) {
    _define_class_cocos2d_CCLayerRGBA(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayerRGBA");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMenu", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCMenu");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCMenu, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCMenuItem(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCMenuItem *obj = static_cast< cocos2d::CCMenuItem * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCMenuItem = {
  "cocos2d::CCMenuItem",
  mrb_free_cocos2d_CCMenuItem
};

static void
mrb_no_free_cocos2d_CCMenuItem(mrb_state *mrb, void *ptr)
{
  cocos2d::CCMenuItem *obj = static_cast< cocos2d::CCMenuItem * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCMenuItem = {
  "cocos2d::CCMenuItem",
  mrb_no_free_cocos2d_CCMenuItem
};

static struct RClass *
_define_class_cocos2d_CCMenuItem(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItem") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCMenuItem");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNodeRGBA") == 0) {
    _define_class_cocos2d_CCNodeRGBA(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMenuItem", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCMenuItem");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCMenuItem, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCMenuItemAtlasFont(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCMenuItemAtlasFont *obj = static_cast< cocos2d::CCMenuItemAtlasFont * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCMenuItemAtlasFont = {
  "cocos2d::CCMenuItemAtlasFont",
  mrb_free_cocos2d_CCMenuItemAtlasFont
};

static void
mrb_no_free_cocos2d_CCMenuItemAtlasFont(mrb_state *mrb, void *ptr)
{
  cocos2d::CCMenuItemAtlasFont *obj = static_cast< cocos2d::CCMenuItemAtlasFont * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCMenuItemAtlasFont = {
  "cocos2d::CCMenuItemAtlasFont",
  mrb_no_free_cocos2d_CCMenuItemAtlasFont
};

static struct RClass *
_define_class_cocos2d_CCMenuItemAtlasFont(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItemAtlasFont") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemAtlasFont");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItemLabel") == 0) {
    _define_class_cocos2d_CCMenuItemLabel(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemLabel");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMenuItemAtlasFont", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCMenuItemAtlasFont");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCMenuItemAtlasFont, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCMenuItemFont(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCMenuItemFont *obj = static_cast< cocos2d::CCMenuItemFont * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCMenuItemFont = {
  "cocos2d::CCMenuItemFont",
  mrb_free_cocos2d_CCMenuItemFont
};

static void
mrb_no_free_cocos2d_CCMenuItemFont(mrb_state *mrb, void *ptr)
{
  cocos2d::CCMenuItemFont *obj = static_cast< cocos2d::CCMenuItemFont * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCMenuItemFont = {
  "cocos2d::CCMenuItemFont",
  mrb_no_free_cocos2d_CCMenuItemFont
};

static struct RClass *
_define_class_cocos2d_CCMenuItemFont(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItemFont") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemFont");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItemLabel") == 0) {
    _define_class_cocos2d_CCMenuItemLabel(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemLabel");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMenuItemFont", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCMenuItemFont");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCMenuItemFont, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCMenuItemImage(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCMenuItemImage *obj = static_cast< cocos2d::CCMenuItemImage * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCMenuItemImage = {
  "cocos2d::CCMenuItemImage",
  mrb_free_cocos2d_CCMenuItemImage
};

static void
mrb_no_free_cocos2d_CCMenuItemImage(mrb_state *mrb, void *ptr)
{
  cocos2d::CCMenuItemImage *obj = static_cast< cocos2d::CCMenuItemImage * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCMenuItemImage = {
  "cocos2d::CCMenuItemImage",
  mrb_no_free_cocos2d_CCMenuItemImage
};

static struct RClass *
_define_class_cocos2d_CCMenuItemImage(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItemImage") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemImage");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItemSprite") == 0) {
    _define_class_cocos2d_CCMenuItemSprite(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemSprite");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMenuItemImage", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCMenuItemImage");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCMenuItemImage, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCMenuItemLabel(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCMenuItemLabel *obj = static_cast< cocos2d::CCMenuItemLabel * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCMenuItemLabel = {
  "cocos2d::CCMenuItemLabel",
  mrb_free_cocos2d_CCMenuItemLabel
};

static void
mrb_no_free_cocos2d_CCMenuItemLabel(mrb_state *mrb, void *ptr)
{
  cocos2d::CCMenuItemLabel *obj = static_cast< cocos2d::CCMenuItemLabel * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCMenuItemLabel = {
  "cocos2d::CCMenuItemLabel",
  mrb_no_free_cocos2d_CCMenuItemLabel
};

static struct RClass *
_define_class_cocos2d_CCMenuItemLabel(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItemLabel") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemLabel");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItem") == 0) {
    _define_class_cocos2d_CCMenuItem(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItem");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMenuItemLabel", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCMenuItemLabel");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCMenuItemLabel, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCMenuItemSprite(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCMenuItemSprite *obj = static_cast< cocos2d::CCMenuItemSprite * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCMenuItemSprite = {
  "cocos2d::CCMenuItemSprite",
  mrb_free_cocos2d_CCMenuItemSprite
};

static void
mrb_no_free_cocos2d_CCMenuItemSprite(mrb_state *mrb, void *ptr)
{
  cocos2d::CCMenuItemSprite *obj = static_cast< cocos2d::CCMenuItemSprite * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCMenuItemSprite = {
  "cocos2d::CCMenuItemSprite",
  mrb_no_free_cocos2d_CCMenuItemSprite
};

static struct RClass *
_define_class_cocos2d_CCMenuItemSprite(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItemSprite") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemSprite");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItem") == 0) {
    _define_class_cocos2d_CCMenuItem(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItem");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMenuItemSprite", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCMenuItemSprite");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCMenuItemSprite, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCMenuItemToggle(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCMenuItemToggle *obj = static_cast< cocos2d::CCMenuItemToggle * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCMenuItemToggle = {
  "cocos2d::CCMenuItemToggle",
  mrb_free_cocos2d_CCMenuItemToggle
};

static void
mrb_no_free_cocos2d_CCMenuItemToggle(mrb_state *mrb, void *ptr)
{
  cocos2d::CCMenuItemToggle *obj = static_cast< cocos2d::CCMenuItemToggle * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCMenuItemToggle = {
  "cocos2d::CCMenuItemToggle",
  mrb_no_free_cocos2d_CCMenuItemToggle
};

static struct RClass *
_define_class_cocos2d_CCMenuItemToggle(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItemToggle") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemToggle");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItem") == 0) {
    _define_class_cocos2d_CCMenuItem(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItem");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMenuItemToggle", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCMenuItemToggle");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCMenuItemToggle, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCMotionStreak(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCMotionStreak *obj = static_cast< cocos2d::CCMotionStreak * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCMotionStreak = {
  "cocos2d::CCMotionStreak",
  mrb_free_cocos2d_CCMotionStreak
};

static void
mrb_no_free_cocos2d_CCMotionStreak(mrb_state *mrb, void *ptr)
{
  cocos2d::CCMotionStreak *obj = static_cast< cocos2d::CCMotionStreak * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCMotionStreak = {
  "cocos2d::CCMotionStreak",
  mrb_no_free_cocos2d_CCMotionStreak
};

static struct RClass *
_define_class_cocos2d_CCMotionStreak(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMotionStreak") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCMotionStreak");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNodeRGBA") == 0) {
    _define_class_cocos2d_CCNodeRGBA(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextureProtocol") == 0) {
    _define_class_cocos2d_CCTextureProtocol(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMotionStreak", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextureProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCMotionStreak");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCMotionStreak, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCMoveBy(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCMoveBy *obj = static_cast< cocos2d::CCMoveBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCMoveBy = {
  "cocos2d::CCMoveBy",
  mrb_free_cocos2d_CCMoveBy
};

static void
mrb_no_free_cocos2d_CCMoveBy(mrb_state *mrb, void *ptr)
{
  cocos2d::CCMoveBy *obj = static_cast< cocos2d::CCMoveBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCMoveBy = {
  "cocos2d::CCMoveBy",
  mrb_no_free_cocos2d_CCMoveBy
};

static struct RClass *
_define_class_cocos2d_CCMoveBy(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMoveBy") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCMoveBy");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMoveBy", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCMoveBy");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCMoveBy, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCMoveTo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCMoveTo *obj = static_cast< cocos2d::CCMoveTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCMoveTo = {
  "cocos2d::CCMoveTo",
  mrb_free_cocos2d_CCMoveTo
};

static void
mrb_no_free_cocos2d_CCMoveTo(mrb_state *mrb, void *ptr)
{
  cocos2d::CCMoveTo *obj = static_cast< cocos2d::CCMoveTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCMoveTo = {
  "cocos2d::CCMoveTo",
  mrb_no_free_cocos2d_CCMoveTo
};

static struct RClass *
_define_class_cocos2d_CCMoveTo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMoveTo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCMoveTo");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMoveBy") == 0) {
    _define_class_cocos2d_CCMoveBy(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMoveBy");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCMoveTo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCMoveTo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCMoveTo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCNode(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCNode *obj = static_cast< cocos2d::CCNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCNode = {
  "cocos2d::CCNode",
  mrb_free_cocos2d_CCNode
};

static void
mrb_no_free_cocos2d_CCNode(mrb_state *mrb, void *ptr)
{
  cocos2d::CCNode *obj = static_cast< cocos2d::CCNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCNode = {
  "cocos2d::CCNode",
  mrb_no_free_cocos2d_CCNode
};

static struct RClass *
_define_class_cocos2d_CCNode(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCNode", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCNode");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCNode, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCNodeRGBA(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCNodeRGBA *obj = static_cast< cocos2d::CCNodeRGBA * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCNodeRGBA = {
  "cocos2d::CCNodeRGBA",
  mrb_free_cocos2d_CCNodeRGBA
};

static void
mrb_no_free_cocos2d_CCNodeRGBA(mrb_state *mrb, void *ptr)
{
  cocos2d::CCNodeRGBA *obj = static_cast< cocos2d::CCNodeRGBA * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCNodeRGBA = {
  "cocos2d::CCNodeRGBA",
  mrb_no_free_cocos2d_CCNodeRGBA
};

static struct RClass *
_define_class_cocos2d_CCNodeRGBA(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNodeRGBA") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCRGBAProtocol") == 0) {
    _define_class_cocos2d_CCRGBAProtocol(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCNodeRGBA", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCRGBAProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCNodeRGBA");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCNodeRGBA, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCNotificationCenter(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCNotificationCenter *obj = static_cast< cocos2d::CCNotificationCenter * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCNotificationCenter = {
  "cocos2d::CCNotificationCenter",
  mrb_free_cocos2d_CCNotificationCenter
};

static void
mrb_no_free_cocos2d_CCNotificationCenter(mrb_state *mrb, void *ptr)
{
  cocos2d::CCNotificationCenter *obj = static_cast< cocos2d::CCNotificationCenter * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCNotificationCenter = {
  "cocos2d::CCNotificationCenter",
  mrb_no_free_cocos2d_CCNotificationCenter
};

static struct RClass *
_define_class_cocos2d_CCNotificationCenter(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNotificationCenter") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCNotificationCenter");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCNotificationCenter", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCNotificationCenter");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCNotificationCenter, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCNotificationObserver(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCNotificationObserver *obj = static_cast< cocos2d::CCNotificationObserver * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCNotificationObserver = {
  "cocos2d::CCNotificationObserver",
  mrb_free_cocos2d_CCNotificationObserver
};

static void
mrb_no_free_cocos2d_CCNotificationObserver(mrb_state *mrb, void *ptr)
{
  cocos2d::CCNotificationObserver *obj = static_cast< cocos2d::CCNotificationObserver * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCNotificationObserver = {
  "cocos2d::CCNotificationObserver",
  mrb_no_free_cocos2d_CCNotificationObserver
};

static struct RClass *
_define_class_cocos2d_CCNotificationObserver(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNotificationObserver") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCNotificationObserver");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCNotificationObserver", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCNotificationObserver");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCNotificationObserver, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCObject(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCObject *obj = static_cast< cocos2d::CCObject * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCObject = {
  "cocos2d::CCObject",
  mrb_free_cocos2d_CCObject
};

static void
mrb_no_free_cocos2d_CCObject(mrb_state *mrb, void *ptr)
{
  cocos2d::CCObject *obj = static_cast< cocos2d::CCObject * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCObject = {
  "cocos2d::CCObject",
  mrb_no_free_cocos2d_CCObject
};

static struct RClass *
_define_class_cocos2d_CCObject(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCObject", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCObject");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCObject, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCOrbitCamera(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCOrbitCamera *obj = static_cast< cocos2d::CCOrbitCamera * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCOrbitCamera = {
  "cocos2d::CCOrbitCamera",
  mrb_free_cocos2d_CCOrbitCamera
};

static void
mrb_no_free_cocos2d_CCOrbitCamera(mrb_state *mrb, void *ptr)
{
  cocos2d::CCOrbitCamera *obj = static_cast< cocos2d::CCOrbitCamera * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCOrbitCamera = {
  "cocos2d::CCOrbitCamera",
  mrb_no_free_cocos2d_CCOrbitCamera
};

static struct RClass *
_define_class_cocos2d_CCOrbitCamera(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCOrbitCamera") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCOrbitCamera");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionCamera") == 0) {
    _define_class_cocos2d_CCActionCamera(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionCamera");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCOrbitCamera", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCOrbitCamera");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCOrbitCamera, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCPVRMipmap(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCPVRMipmap * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCPVRMipmap = {
  "cocos2d::CCPVRMipmap",
  mrb_free_cocos2d_CCPVRMipmap
};

static void
mrb_no_free_cocos2d_CCPVRMipmap(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCPVRMipmap = {
  "cocos2d::CCPVRMipmap",
  mrb_no_free_cocos2d_CCPVRMipmap
};

static struct RClass *
_define_class_cocos2d_CCPVRMipmap(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCPVRMipmap") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCPVRMipmap");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCPVRMipmap", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCPVRMipmap");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCPVRMipmap, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCPageTurn3D(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCPageTurn3D *obj = static_cast< cocos2d::CCPageTurn3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCPageTurn3D = {
  "cocos2d::CCPageTurn3D",
  mrb_free_cocos2d_CCPageTurn3D
};

static void
mrb_no_free_cocos2d_CCPageTurn3D(mrb_state *mrb, void *ptr)
{
  cocos2d::CCPageTurn3D *obj = static_cast< cocos2d::CCPageTurn3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCPageTurn3D = {
  "cocos2d::CCPageTurn3D",
  mrb_no_free_cocos2d_CCPageTurn3D
};

static struct RClass *
_define_class_cocos2d_CCPageTurn3D(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCPageTurn3D") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCPageTurn3D");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCPageTurn3D", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCPageTurn3D");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCPageTurn3D, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCParallaxNode(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCParallaxNode *obj = static_cast< cocos2d::CCParallaxNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCParallaxNode = {
  "cocos2d::CCParallaxNode",
  mrb_free_cocos2d_CCParallaxNode
};

static void
mrb_no_free_cocos2d_CCParallaxNode(mrb_state *mrb, void *ptr)
{
  cocos2d::CCParallaxNode *obj = static_cast< cocos2d::CCParallaxNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCParallaxNode = {
  "cocos2d::CCParallaxNode",
  mrb_no_free_cocos2d_CCParallaxNode
};

static struct RClass *
_define_class_cocos2d_CCParallaxNode(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParallaxNode") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCParallaxNode");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParallaxNode", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCParallaxNode");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCParallaxNode, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCParticleBatchNode(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCParticleBatchNode *obj = static_cast< cocos2d::CCParticleBatchNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCParticleBatchNode = {
  "cocos2d::CCParticleBatchNode",
  mrb_free_cocos2d_CCParticleBatchNode
};

static void
mrb_no_free_cocos2d_CCParticleBatchNode(mrb_state *mrb, void *ptr)
{
  cocos2d::CCParticleBatchNode *obj = static_cast< cocos2d::CCParticleBatchNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCParticleBatchNode = {
  "cocos2d::CCParticleBatchNode",
  mrb_no_free_cocos2d_CCParticleBatchNode
};

static struct RClass *
_define_class_cocos2d_CCParticleBatchNode(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleBatchNode") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCParticleBatchNode");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextureProtocol") == 0) {
    _define_class_cocos2d_CCTextureProtocol(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleBatchNode", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextureProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCParticleBatchNode");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCParticleBatchNode, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCParticleExplosion(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCParticleExplosion *obj = static_cast< cocos2d::CCParticleExplosion * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCParticleExplosion = {
  "cocos2d::CCParticleExplosion",
  mrb_free_cocos2d_CCParticleExplosion
};

static void
mrb_no_free_cocos2d_CCParticleExplosion(mrb_state *mrb, void *ptr)
{
  cocos2d::CCParticleExplosion *obj = static_cast< cocos2d::CCParticleExplosion * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCParticleExplosion = {
  "cocos2d::CCParticleExplosion",
  mrb_no_free_cocos2d_CCParticleExplosion
};

static struct RClass *
_define_class_cocos2d_CCParticleExplosion(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleExplosion") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCParticleExplosion");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleExplosion", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCParticleExplosion");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCParticleExplosion, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCParticleFire(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCParticleFire *obj = static_cast< cocos2d::CCParticleFire * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCParticleFire = {
  "cocos2d::CCParticleFire",
  mrb_free_cocos2d_CCParticleFire
};

static void
mrb_no_free_cocos2d_CCParticleFire(mrb_state *mrb, void *ptr)
{
  cocos2d::CCParticleFire *obj = static_cast< cocos2d::CCParticleFire * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCParticleFire = {
  "cocos2d::CCParticleFire",
  mrb_no_free_cocos2d_CCParticleFire
};

static struct RClass *
_define_class_cocos2d_CCParticleFire(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleFire") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCParticleFire");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleFire", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCParticleFire");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCParticleFire, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCParticleFireworks(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCParticleFireworks *obj = static_cast< cocos2d::CCParticleFireworks * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCParticleFireworks = {
  "cocos2d::CCParticleFireworks",
  mrb_free_cocos2d_CCParticleFireworks
};

static void
mrb_no_free_cocos2d_CCParticleFireworks(mrb_state *mrb, void *ptr)
{
  cocos2d::CCParticleFireworks *obj = static_cast< cocos2d::CCParticleFireworks * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCParticleFireworks = {
  "cocos2d::CCParticleFireworks",
  mrb_no_free_cocos2d_CCParticleFireworks
};

static struct RClass *
_define_class_cocos2d_CCParticleFireworks(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleFireworks") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCParticleFireworks");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleFireworks", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCParticleFireworks");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCParticleFireworks, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCParticleFlower(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCParticleFlower *obj = static_cast< cocos2d::CCParticleFlower * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCParticleFlower = {
  "cocos2d::CCParticleFlower",
  mrb_free_cocos2d_CCParticleFlower
};

static void
mrb_no_free_cocos2d_CCParticleFlower(mrb_state *mrb, void *ptr)
{
  cocos2d::CCParticleFlower *obj = static_cast< cocos2d::CCParticleFlower * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCParticleFlower = {
  "cocos2d::CCParticleFlower",
  mrb_no_free_cocos2d_CCParticleFlower
};

static struct RClass *
_define_class_cocos2d_CCParticleFlower(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleFlower") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCParticleFlower");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleFlower", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCParticleFlower");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCParticleFlower, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCParticleGalaxy(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCParticleGalaxy *obj = static_cast< cocos2d::CCParticleGalaxy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCParticleGalaxy = {
  "cocos2d::CCParticleGalaxy",
  mrb_free_cocos2d_CCParticleGalaxy
};

static void
mrb_no_free_cocos2d_CCParticleGalaxy(mrb_state *mrb, void *ptr)
{
  cocos2d::CCParticleGalaxy *obj = static_cast< cocos2d::CCParticleGalaxy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCParticleGalaxy = {
  "cocos2d::CCParticleGalaxy",
  mrb_no_free_cocos2d_CCParticleGalaxy
};

static struct RClass *
_define_class_cocos2d_CCParticleGalaxy(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleGalaxy") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCParticleGalaxy");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleGalaxy", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCParticleGalaxy");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCParticleGalaxy, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCParticleMeteor(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCParticleMeteor *obj = static_cast< cocos2d::CCParticleMeteor * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCParticleMeteor = {
  "cocos2d::CCParticleMeteor",
  mrb_free_cocos2d_CCParticleMeteor
};

static void
mrb_no_free_cocos2d_CCParticleMeteor(mrb_state *mrb, void *ptr)
{
  cocos2d::CCParticleMeteor *obj = static_cast< cocos2d::CCParticleMeteor * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCParticleMeteor = {
  "cocos2d::CCParticleMeteor",
  mrb_no_free_cocos2d_CCParticleMeteor
};

static struct RClass *
_define_class_cocos2d_CCParticleMeteor(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleMeteor") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCParticleMeteor");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleMeteor", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCParticleMeteor");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCParticleMeteor, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCParticleRain(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCParticleRain *obj = static_cast< cocos2d::CCParticleRain * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCParticleRain = {
  "cocos2d::CCParticleRain",
  mrb_free_cocos2d_CCParticleRain
};

static void
mrb_no_free_cocos2d_CCParticleRain(mrb_state *mrb, void *ptr)
{
  cocos2d::CCParticleRain *obj = static_cast< cocos2d::CCParticleRain * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCParticleRain = {
  "cocos2d::CCParticleRain",
  mrb_no_free_cocos2d_CCParticleRain
};

static struct RClass *
_define_class_cocos2d_CCParticleRain(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleRain") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCParticleRain");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleRain", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCParticleRain");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCParticleRain, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCParticleSmoke(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCParticleSmoke *obj = static_cast< cocos2d::CCParticleSmoke * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCParticleSmoke = {
  "cocos2d::CCParticleSmoke",
  mrb_free_cocos2d_CCParticleSmoke
};

static void
mrb_no_free_cocos2d_CCParticleSmoke(mrb_state *mrb, void *ptr)
{
  cocos2d::CCParticleSmoke *obj = static_cast< cocos2d::CCParticleSmoke * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCParticleSmoke = {
  "cocos2d::CCParticleSmoke",
  mrb_no_free_cocos2d_CCParticleSmoke
};

static struct RClass *
_define_class_cocos2d_CCParticleSmoke(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSmoke") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCParticleSmoke");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleSmoke", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCParticleSmoke");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCParticleSmoke, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCParticleSnow(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCParticleSnow *obj = static_cast< cocos2d::CCParticleSnow * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCParticleSnow = {
  "cocos2d::CCParticleSnow",
  mrb_free_cocos2d_CCParticleSnow
};

static void
mrb_no_free_cocos2d_CCParticleSnow(mrb_state *mrb, void *ptr)
{
  cocos2d::CCParticleSnow *obj = static_cast< cocos2d::CCParticleSnow * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCParticleSnow = {
  "cocos2d::CCParticleSnow",
  mrb_no_free_cocos2d_CCParticleSnow
};

static struct RClass *
_define_class_cocos2d_CCParticleSnow(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSnow") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCParticleSnow");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleSnow", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCParticleSnow");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCParticleSnow, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCParticleSpiral(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCParticleSpiral *obj = static_cast< cocos2d::CCParticleSpiral * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCParticleSpiral = {
  "cocos2d::CCParticleSpiral",
  mrb_free_cocos2d_CCParticleSpiral
};

static void
mrb_no_free_cocos2d_CCParticleSpiral(mrb_state *mrb, void *ptr)
{
  cocos2d::CCParticleSpiral *obj = static_cast< cocos2d::CCParticleSpiral * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCParticleSpiral = {
  "cocos2d::CCParticleSpiral",
  mrb_no_free_cocos2d_CCParticleSpiral
};

static struct RClass *
_define_class_cocos2d_CCParticleSpiral(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSpiral") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCParticleSpiral");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleSpiral", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCParticleSpiral");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCParticleSpiral, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCParticleSun(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCParticleSun *obj = static_cast< cocos2d::CCParticleSun * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCParticleSun = {
  "cocos2d::CCParticleSun",
  mrb_free_cocos2d_CCParticleSun
};

static void
mrb_no_free_cocos2d_CCParticleSun(mrb_state *mrb, void *ptr)
{
  cocos2d::CCParticleSun *obj = static_cast< cocos2d::CCParticleSun * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCParticleSun = {
  "cocos2d::CCParticleSun",
  mrb_no_free_cocos2d_CCParticleSun
};

static struct RClass *
_define_class_cocos2d_CCParticleSun(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSun") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCParticleSun");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleSun", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCParticleSun");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCParticleSun, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCParticleSystem(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCParticleSystem *obj = static_cast< cocos2d::CCParticleSystem * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCParticleSystem = {
  "cocos2d::CCParticleSystem",
  mrb_free_cocos2d_CCParticleSystem
};

static void
mrb_no_free_cocos2d_CCParticleSystem(mrb_state *mrb, void *ptr)
{
  cocos2d::CCParticleSystem *obj = static_cast< cocos2d::CCParticleSystem * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCParticleSystem = {
  "cocos2d::CCParticleSystem",
  mrb_no_free_cocos2d_CCParticleSystem
};

static struct RClass *
_define_class_cocos2d_CCParticleSystem(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystem") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystem");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextureProtocol") == 0) {
    _define_class_cocos2d_CCTextureProtocol(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleSystem", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextureProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCParticleSystem");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCParticleSystem, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCParticleSystemQuad(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCParticleSystemQuad *obj = static_cast< cocos2d::CCParticleSystemQuad * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCParticleSystemQuad = {
  "cocos2d::CCParticleSystemQuad",
  mrb_free_cocos2d_CCParticleSystemQuad
};

static void
mrb_no_free_cocos2d_CCParticleSystemQuad(mrb_state *mrb, void *ptr)
{
  cocos2d::CCParticleSystemQuad *obj = static_cast< cocos2d::CCParticleSystemQuad * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCParticleSystemQuad = {
  "cocos2d::CCParticleSystemQuad",
  mrb_no_free_cocos2d_CCParticleSystemQuad
};

static struct RClass *
_define_class_cocos2d_CCParticleSystemQuad(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystem") == 0) {
    _define_class_cocos2d_CCParticleSystem(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystem");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCParticleSystemQuad", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCParticleSystemQuad");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCParticleSystemQuad, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCPlace(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCPlace *obj = static_cast< cocos2d::CCPlace * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCPlace = {
  "cocos2d::CCPlace",
  mrb_free_cocos2d_CCPlace
};

static void
mrb_no_free_cocos2d_CCPlace(mrb_state *mrb, void *ptr)
{
  cocos2d::CCPlace *obj = static_cast< cocos2d::CCPlace * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCPlace = {
  "cocos2d::CCPlace",
  mrb_no_free_cocos2d_CCPlace
};

static struct RClass *
_define_class_cocos2d_CCPlace(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCPlace") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCPlace");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCPlace", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCPlace");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCPlace, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCPoint(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCPoint * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCPoint = {
  "cocos2d::CCPoint",
  mrb_free_cocos2d_CCPoint
};

static void
mrb_no_free_cocos2d_CCPoint(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCPoint = {
  "cocos2d::CCPoint",
  mrb_no_free_cocos2d_CCPoint
};

static struct RClass *
_define_class_cocos2d_CCPoint(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCPoint") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCPoint");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCPoint", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCPoint");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCPoint, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCPointArray(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCPointArray *obj = static_cast< cocos2d::CCPointArray * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCPointArray = {
  "cocos2d::CCPointArray",
  mrb_free_cocos2d_CCPointArray
};

static void
mrb_no_free_cocos2d_CCPointArray(mrb_state *mrb, void *ptr)
{
  cocos2d::CCPointArray *obj = static_cast< cocos2d::CCPointArray * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCPointArray = {
  "cocos2d::CCPointArray",
  mrb_no_free_cocos2d_CCPointArray
};

static struct RClass *
_define_class_cocos2d_CCPointArray(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCPointArray") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCPointArray");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCPointArray", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCPointArray");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCPointArray, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCPoolManager(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCPoolManager * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCPoolManager = {
  "cocos2d::CCPoolManager",
  mrb_free_cocos2d_CCPoolManager
};

static void
mrb_no_free_cocos2d_CCPoolManager(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCPoolManager = {
  "cocos2d::CCPoolManager",
  mrb_no_free_cocos2d_CCPoolManager
};

static struct RClass *
_define_class_cocos2d_CCPoolManager(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCPoolManager") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCPoolManager");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCPoolManager", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCPoolManager");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCPoolManager, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCPrettyPrinter(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCPrettyPrinter * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCPrettyPrinter = {
  "cocos2d::CCPrettyPrinter",
  mrb_free_cocos2d_CCPrettyPrinter
};

static void
mrb_no_free_cocos2d_CCPrettyPrinter(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCPrettyPrinter = {
  "cocos2d::CCPrettyPrinter",
  mrb_no_free_cocos2d_CCPrettyPrinter
};

static struct RClass *
_define_class_cocos2d_CCPrettyPrinter(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCPrettyPrinter") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCPrettyPrinter");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCPrettyPrinter", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCPrettyPrinter");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCPrettyPrinter, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCProfiler(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCProfiler *obj = static_cast< cocos2d::CCProfiler * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCProfiler = {
  "cocos2d::CCProfiler",
  mrb_free_cocos2d_CCProfiler
};

static void
mrb_no_free_cocos2d_CCProfiler(mrb_state *mrb, void *ptr)
{
  cocos2d::CCProfiler *obj = static_cast< cocos2d::CCProfiler * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCProfiler = {
  "cocos2d::CCProfiler",
  mrb_no_free_cocos2d_CCProfiler
};

static struct RClass *
_define_class_cocos2d_CCProfiler(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCProfiler") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCProfiler");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCProfiler", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCProfiler");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCProfiler, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCProfilingTimer(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCProfilingTimer *obj = static_cast< cocos2d::CCProfilingTimer * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCProfilingTimer = {
  "cocos2d::CCProfilingTimer",
  mrb_free_cocos2d_CCProfilingTimer
};

static void
mrb_no_free_cocos2d_CCProfilingTimer(mrb_state *mrb, void *ptr)
{
  cocos2d::CCProfilingTimer *obj = static_cast< cocos2d::CCProfilingTimer * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCProfilingTimer = {
  "cocos2d::CCProfilingTimer",
  mrb_no_free_cocos2d_CCProfilingTimer
};

static struct RClass *
_define_class_cocos2d_CCProfilingTimer(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCProfilingTimer") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCProfilingTimer");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCProfilingTimer", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCProfilingTimer");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCProfilingTimer, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCProgressFromTo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCProgressFromTo *obj = static_cast< cocos2d::CCProgressFromTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCProgressFromTo = {
  "cocos2d::CCProgressFromTo",
  mrb_free_cocos2d_CCProgressFromTo
};

static void
mrb_no_free_cocos2d_CCProgressFromTo(mrb_state *mrb, void *ptr)
{
  cocos2d::CCProgressFromTo *obj = static_cast< cocos2d::CCProgressFromTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCProgressFromTo = {
  "cocos2d::CCProgressFromTo",
  mrb_no_free_cocos2d_CCProgressFromTo
};

static struct RClass *
_define_class_cocos2d_CCProgressFromTo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCProgressFromTo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCProgressFromTo");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCProgressFromTo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCProgressFromTo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCProgressFromTo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCProgressTimer(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCProgressTimer *obj = static_cast< cocos2d::CCProgressTimer * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCProgressTimer = {
  "cocos2d::CCProgressTimer",
  mrb_free_cocos2d_CCProgressTimer
};

static void
mrb_no_free_cocos2d_CCProgressTimer(mrb_state *mrb, void *ptr)
{
  cocos2d::CCProgressTimer *obj = static_cast< cocos2d::CCProgressTimer * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCProgressTimer = {
  "cocos2d::CCProgressTimer",
  mrb_no_free_cocos2d_CCProgressTimer
};

static struct RClass *
_define_class_cocos2d_CCProgressTimer(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCProgressTimer") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCProgressTimer");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNodeRGBA") == 0) {
    _define_class_cocos2d_CCNodeRGBA(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCProgressTimer", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCProgressTimer");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCProgressTimer, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCProgressTo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCProgressTo *obj = static_cast< cocos2d::CCProgressTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCProgressTo = {
  "cocos2d::CCProgressTo",
  mrb_free_cocos2d_CCProgressTo
};

static void
mrb_no_free_cocos2d_CCProgressTo(mrb_state *mrb, void *ptr)
{
  cocos2d::CCProgressTo *obj = static_cast< cocos2d::CCProgressTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCProgressTo = {
  "cocos2d::CCProgressTo",
  mrb_no_free_cocos2d_CCProgressTo
};

static struct RClass *
_define_class_cocos2d_CCProgressTo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCProgressTo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCProgressTo");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCProgressTo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCProgressTo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCProgressTo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCRGBAProtocol(mrb_state *mrb, void *ptr)
{
  //delete static_cast< cocos2d::CCRGBAProtocol * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCRGBAProtocol = {
  "cocos2d::CCRGBAProtocol",
  mrb_free_cocos2d_CCRGBAProtocol
};

static struct RClass *
_define_class_cocos2d_CCRGBAProtocol(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCRGBAProtocol") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCRGBAProtocol");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCRGBAProtocol");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCRGBAProtocol");
  return rc;
}

static void
mrb_free_cocos2d_CCRect(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCRect * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCRect = {
  "cocos2d::CCRect",
  mrb_free_cocos2d_CCRect
};

static void
mrb_no_free_cocos2d_CCRect(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCRect = {
  "cocos2d::CCRect",
  mrb_no_free_cocos2d_CCRect
};

static struct RClass *
_define_class_cocos2d_CCRect(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCRect") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCRect");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCRect", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCRect");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCRect, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCRemoveSelf(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCRemoveSelf *obj = static_cast< cocos2d::CCRemoveSelf * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCRemoveSelf = {
  "cocos2d::CCRemoveSelf",
  mrb_free_cocos2d_CCRemoveSelf
};

static void
mrb_no_free_cocos2d_CCRemoveSelf(mrb_state *mrb, void *ptr)
{
  cocos2d::CCRemoveSelf *obj = static_cast< cocos2d::CCRemoveSelf * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCRemoveSelf = {
  "cocos2d::CCRemoveSelf",
  mrb_no_free_cocos2d_CCRemoveSelf
};

static struct RClass *
_define_class_cocos2d_CCRemoveSelf(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCRemoveSelf") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCRemoveSelf");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCRemoveSelf", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCRemoveSelf");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCRemoveSelf, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCRenderTexture(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCRenderTexture *obj = static_cast< cocos2d::CCRenderTexture * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCRenderTexture = {
  "cocos2d::CCRenderTexture",
  mrb_free_cocos2d_CCRenderTexture
};

static void
mrb_no_free_cocos2d_CCRenderTexture(mrb_state *mrb, void *ptr)
{
  cocos2d::CCRenderTexture *obj = static_cast< cocos2d::CCRenderTexture * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCRenderTexture = {
  "cocos2d::CCRenderTexture",
  mrb_no_free_cocos2d_CCRenderTexture
};

static struct RClass *
_define_class_cocos2d_CCRenderTexture(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCRenderTexture") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCRenderTexture");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCRenderTexture", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCRenderTexture");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCRenderTexture, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCRepeat(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCRepeat *obj = static_cast< cocos2d::CCRepeat * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCRepeat = {
  "cocos2d::CCRepeat",
  mrb_free_cocos2d_CCRepeat
};

static void
mrb_no_free_cocos2d_CCRepeat(mrb_state *mrb, void *ptr)
{
  cocos2d::CCRepeat *obj = static_cast< cocos2d::CCRepeat * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCRepeat = {
  "cocos2d::CCRepeat",
  mrb_no_free_cocos2d_CCRepeat
};

static struct RClass *
_define_class_cocos2d_CCRepeat(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCRepeat") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCRepeat");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCRepeat", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCRepeat");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCRepeat, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCRepeatForever(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCRepeatForever *obj = static_cast< cocos2d::CCRepeatForever * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCRepeatForever = {
  "cocos2d::CCRepeatForever",
  mrb_free_cocos2d_CCRepeatForever
};

static void
mrb_no_free_cocos2d_CCRepeatForever(mrb_state *mrb, void *ptr)
{
  cocos2d::CCRepeatForever *obj = static_cast< cocos2d::CCRepeatForever * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCRepeatForever = {
  "cocos2d::CCRepeatForever",
  mrb_no_free_cocos2d_CCRepeatForever
};

static struct RClass *
_define_class_cocos2d_CCRepeatForever(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCRepeatForever") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCRepeatForever");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCRepeatForever", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCRepeatForever");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCRepeatForever, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCReuseGrid(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCReuseGrid *obj = static_cast< cocos2d::CCReuseGrid * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCReuseGrid = {
  "cocos2d::CCReuseGrid",
  mrb_free_cocos2d_CCReuseGrid
};

static void
mrb_no_free_cocos2d_CCReuseGrid(mrb_state *mrb, void *ptr)
{
  cocos2d::CCReuseGrid *obj = static_cast< cocos2d::CCReuseGrid * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCReuseGrid = {
  "cocos2d::CCReuseGrid",
  mrb_no_free_cocos2d_CCReuseGrid
};

static struct RClass *
_define_class_cocos2d_CCReuseGrid(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCReuseGrid") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCReuseGrid");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCReuseGrid", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCReuseGrid");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCReuseGrid, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCReverseTime(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCReverseTime *obj = static_cast< cocos2d::CCReverseTime * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCReverseTime = {
  "cocos2d::CCReverseTime",
  mrb_free_cocos2d_CCReverseTime
};

static void
mrb_no_free_cocos2d_CCReverseTime(mrb_state *mrb, void *ptr)
{
  cocos2d::CCReverseTime *obj = static_cast< cocos2d::CCReverseTime * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCReverseTime = {
  "cocos2d::CCReverseTime",
  mrb_no_free_cocos2d_CCReverseTime
};

static struct RClass *
_define_class_cocos2d_CCReverseTime(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCReverseTime") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCReverseTime");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCReverseTime", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCReverseTime");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCReverseTime, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCRipple3D(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCRipple3D *obj = static_cast< cocos2d::CCRipple3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCRipple3D = {
  "cocos2d::CCRipple3D",
  mrb_free_cocos2d_CCRipple3D
};

static void
mrb_no_free_cocos2d_CCRipple3D(mrb_state *mrb, void *ptr)
{
  cocos2d::CCRipple3D *obj = static_cast< cocos2d::CCRipple3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCRipple3D = {
  "cocos2d::CCRipple3D",
  mrb_no_free_cocos2d_CCRipple3D
};

static struct RClass *
_define_class_cocos2d_CCRipple3D(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCRipple3D") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCRipple3D");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCRipple3D", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCRipple3D");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCRipple3D, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCRotateBy(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCRotateBy *obj = static_cast< cocos2d::CCRotateBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCRotateBy = {
  "cocos2d::CCRotateBy",
  mrb_free_cocos2d_CCRotateBy
};

static void
mrb_no_free_cocos2d_CCRotateBy(mrb_state *mrb, void *ptr)
{
  cocos2d::CCRotateBy *obj = static_cast< cocos2d::CCRotateBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCRotateBy = {
  "cocos2d::CCRotateBy",
  mrb_no_free_cocos2d_CCRotateBy
};

static struct RClass *
_define_class_cocos2d_CCRotateBy(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCRotateBy") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCRotateBy");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCRotateBy", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCRotateBy");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCRotateBy, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCRotateTo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCRotateTo *obj = static_cast< cocos2d::CCRotateTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCRotateTo = {
  "cocos2d::CCRotateTo",
  mrb_free_cocos2d_CCRotateTo
};

static void
mrb_no_free_cocos2d_CCRotateTo(mrb_state *mrb, void *ptr)
{
  cocos2d::CCRotateTo *obj = static_cast< cocos2d::CCRotateTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCRotateTo = {
  "cocos2d::CCRotateTo",
  mrb_no_free_cocos2d_CCRotateTo
};

static struct RClass *
_define_class_cocos2d_CCRotateTo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCRotateTo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCRotateTo");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCRotateTo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCRotateTo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCRotateTo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCSAXParser(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCSAXParser * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCSAXParser = {
  "cocos2d::CCSAXParser",
  mrb_free_cocos2d_CCSAXParser
};

static void
mrb_no_free_cocos2d_CCSAXParser(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCSAXParser = {
  "cocos2d::CCSAXParser",
  mrb_no_free_cocos2d_CCSAXParser
};

static struct RClass *
_define_class_cocos2d_CCSAXParser(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSAXParser") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCSAXParser");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSAXParser", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCSAXParser");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCSAXParser, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCScaleBy(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCScaleBy *obj = static_cast< cocos2d::CCScaleBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCScaleBy = {
  "cocos2d::CCScaleBy",
  mrb_free_cocos2d_CCScaleBy
};

static void
mrb_no_free_cocos2d_CCScaleBy(mrb_state *mrb, void *ptr)
{
  cocos2d::CCScaleBy *obj = static_cast< cocos2d::CCScaleBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCScaleBy = {
  "cocos2d::CCScaleBy",
  mrb_no_free_cocos2d_CCScaleBy
};

static struct RClass *
_define_class_cocos2d_CCScaleBy(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCScaleBy") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCScaleBy");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCScaleTo") == 0) {
    _define_class_cocos2d_CCScaleTo(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCScaleTo");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCScaleBy", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCScaleBy");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCScaleBy, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCScaleTo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCScaleTo *obj = static_cast< cocos2d::CCScaleTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCScaleTo = {
  "cocos2d::CCScaleTo",
  mrb_free_cocos2d_CCScaleTo
};

static void
mrb_no_free_cocos2d_CCScaleTo(mrb_state *mrb, void *ptr)
{
  cocos2d::CCScaleTo *obj = static_cast< cocos2d::CCScaleTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCScaleTo = {
  "cocos2d::CCScaleTo",
  mrb_no_free_cocos2d_CCScaleTo
};

static struct RClass *
_define_class_cocos2d_CCScaleTo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCScaleTo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCScaleTo");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCScaleTo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCScaleTo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCScaleTo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCScene(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCScene *obj = static_cast< cocos2d::CCScene * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCScene = {
  "cocos2d::CCScene",
  mrb_free_cocos2d_CCScene
};

static void
mrb_no_free_cocos2d_CCScene(mrb_state *mrb, void *ptr)
{
  cocos2d::CCScene *obj = static_cast< cocos2d::CCScene * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCScene = {
  "cocos2d::CCScene",
  mrb_no_free_cocos2d_CCScene
};

static struct RClass *
_define_class_cocos2d_CCScene(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCScene") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCScene");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCScene", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCScene");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCScene, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCScheduler(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCScheduler *obj = static_cast< cocos2d::CCScheduler * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCScheduler = {
  "cocos2d::CCScheduler",
  mrb_free_cocos2d_CCScheduler
};

static void
mrb_no_free_cocos2d_CCScheduler(mrb_state *mrb, void *ptr)
{
  cocos2d::CCScheduler *obj = static_cast< cocos2d::CCScheduler * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCScheduler = {
  "cocos2d::CCScheduler",
  mrb_no_free_cocos2d_CCScheduler
};

static struct RClass *
_define_class_cocos2d_CCScheduler(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCScheduler") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCScheduler");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCScheduler", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCScheduler");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCScheduler, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCSchedulerScriptHandlerEntry(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCSchedulerScriptHandlerEntry *obj = static_cast< cocos2d::CCSchedulerScriptHandlerEntry * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCSchedulerScriptHandlerEntry = {
  "cocos2d::CCSchedulerScriptHandlerEntry",
  mrb_free_cocos2d_CCSchedulerScriptHandlerEntry
};

static void
mrb_no_free_cocos2d_CCSchedulerScriptHandlerEntry(mrb_state *mrb, void *ptr)
{
  cocos2d::CCSchedulerScriptHandlerEntry *obj = static_cast< cocos2d::CCSchedulerScriptHandlerEntry * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCSchedulerScriptHandlerEntry = {
  "cocos2d::CCSchedulerScriptHandlerEntry",
  mrb_no_free_cocos2d_CCSchedulerScriptHandlerEntry
};

static struct RClass *
_define_class_cocos2d_CCSchedulerScriptHandlerEntry(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSchedulerScriptHandlerEntry") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCSchedulerScriptHandlerEntry");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCScriptHandlerEntry") == 0) {
    _define_class_cocos2d_CCScriptHandlerEntry(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCScriptHandlerEntry");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSchedulerScriptHandlerEntry", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCSchedulerScriptHandlerEntry");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCSchedulerScriptHandlerEntry, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCScriptEngineManager(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCScriptEngineManager * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCScriptEngineManager = {
  "cocos2d::CCScriptEngineManager",
  mrb_free_cocos2d_CCScriptEngineManager
};

static void
mrb_no_free_cocos2d_CCScriptEngineManager(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCScriptEngineManager = {
  "cocos2d::CCScriptEngineManager",
  mrb_no_free_cocos2d_CCScriptEngineManager
};

static struct RClass *
_define_class_cocos2d_CCScriptEngineManager(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCScriptEngineManager") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCScriptEngineManager");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCScriptEngineManager", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCScriptEngineManager");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCScriptEngineManager, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCScriptEngineProtocol(mrb_state *mrb, void *ptr)
{
  //delete static_cast< cocos2d::CCScriptEngineProtocol * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCScriptEngineProtocol = {
  "cocos2d::CCScriptEngineProtocol",
  mrb_free_cocos2d_CCScriptEngineProtocol
};

static struct RClass *
_define_class_cocos2d_CCScriptEngineProtocol(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCScriptEngineProtocol") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCScriptEngineProtocol");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCScriptEngineProtocol");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCScriptEngineProtocol");
  return rc;
}

static void
mrb_free_cocos2d_CCScriptHandlerEntry(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCScriptHandlerEntry *obj = static_cast< cocos2d::CCScriptHandlerEntry * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCScriptHandlerEntry = {
  "cocos2d::CCScriptHandlerEntry",
  mrb_free_cocos2d_CCScriptHandlerEntry
};

static void
mrb_no_free_cocos2d_CCScriptHandlerEntry(mrb_state *mrb, void *ptr)
{
  cocos2d::CCScriptHandlerEntry *obj = static_cast< cocos2d::CCScriptHandlerEntry * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCScriptHandlerEntry = {
  "cocos2d::CCScriptHandlerEntry",
  mrb_no_free_cocos2d_CCScriptHandlerEntry
};

static struct RClass *
_define_class_cocos2d_CCScriptHandlerEntry(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCScriptHandlerEntry") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCScriptHandlerEntry");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCScriptHandlerEntry", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCScriptHandlerEntry");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCScriptHandlerEntry, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCSequence(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCSequence *obj = static_cast< cocos2d::CCSequence * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCSequence = {
  "cocos2d::CCSequence",
  mrb_free_cocos2d_CCSequence
};

static void
mrb_no_free_cocos2d_CCSequence(mrb_state *mrb, void *ptr)
{
  cocos2d::CCSequence *obj = static_cast< cocos2d::CCSequence * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCSequence = {
  "cocos2d::CCSequence",
  mrb_no_free_cocos2d_CCSequence
};

static struct RClass *
_define_class_cocos2d_CCSequence(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSequence") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCSequence");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSequence", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCSequence");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCSequence, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCSet(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCSet *obj = static_cast< cocos2d::CCSet * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCSet = {
  "cocos2d::CCSet",
  mrb_free_cocos2d_CCSet
};

static void
mrb_no_free_cocos2d_CCSet(mrb_state *mrb, void *ptr)
{
  cocos2d::CCSet *obj = static_cast< cocos2d::CCSet * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCSet = {
  "cocos2d::CCSet",
  mrb_no_free_cocos2d_CCSet
};

static struct RClass *
_define_class_cocos2d_CCSet(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSet") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCSet");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSet", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCSet");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCSet, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCShaderCache(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCShaderCache *obj = static_cast< cocos2d::CCShaderCache * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCShaderCache = {
  "cocos2d::CCShaderCache",
  mrb_free_cocos2d_CCShaderCache
};

static void
mrb_no_free_cocos2d_CCShaderCache(mrb_state *mrb, void *ptr)
{
  cocos2d::CCShaderCache *obj = static_cast< cocos2d::CCShaderCache * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCShaderCache = {
  "cocos2d::CCShaderCache",
  mrb_no_free_cocos2d_CCShaderCache
};

static struct RClass *
_define_class_cocos2d_CCShaderCache(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCShaderCache") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCShaderCache");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCShaderCache", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCShaderCache");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCShaderCache, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCShaky3D(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCShaky3D *obj = static_cast< cocos2d::CCShaky3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCShaky3D = {
  "cocos2d::CCShaky3D",
  mrb_free_cocos2d_CCShaky3D
};

static void
mrb_no_free_cocos2d_CCShaky3D(mrb_state *mrb, void *ptr)
{
  cocos2d::CCShaky3D *obj = static_cast< cocos2d::CCShaky3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCShaky3D = {
  "cocos2d::CCShaky3D",
  mrb_no_free_cocos2d_CCShaky3D
};

static struct RClass *
_define_class_cocos2d_CCShaky3D(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCShaky3D") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCShaky3D");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCShaky3D", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCShaky3D");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCShaky3D, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCShakyTiles3D(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCShakyTiles3D *obj = static_cast< cocos2d::CCShakyTiles3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCShakyTiles3D = {
  "cocos2d::CCShakyTiles3D",
  mrb_free_cocos2d_CCShakyTiles3D
};

static void
mrb_no_free_cocos2d_CCShakyTiles3D(mrb_state *mrb, void *ptr)
{
  cocos2d::CCShakyTiles3D *obj = static_cast< cocos2d::CCShakyTiles3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCShakyTiles3D = {
  "cocos2d::CCShakyTiles3D",
  mrb_no_free_cocos2d_CCShakyTiles3D
};

static struct RClass *
_define_class_cocos2d_CCShakyTiles3D(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCShakyTiles3D") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCShakyTiles3D");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCShakyTiles3D", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCShakyTiles3D");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCShakyTiles3D, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCShatteredTiles3D(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCShatteredTiles3D *obj = static_cast< cocos2d::CCShatteredTiles3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCShatteredTiles3D = {
  "cocos2d::CCShatteredTiles3D",
  mrb_free_cocos2d_CCShatteredTiles3D
};

static void
mrb_no_free_cocos2d_CCShatteredTiles3D(mrb_state *mrb, void *ptr)
{
  cocos2d::CCShatteredTiles3D *obj = static_cast< cocos2d::CCShatteredTiles3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCShatteredTiles3D = {
  "cocos2d::CCShatteredTiles3D",
  mrb_no_free_cocos2d_CCShatteredTiles3D
};

static struct RClass *
_define_class_cocos2d_CCShatteredTiles3D(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCShatteredTiles3D") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCShatteredTiles3D");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCShatteredTiles3D", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCShatteredTiles3D");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCShatteredTiles3D, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCShow(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCShow *obj = static_cast< cocos2d::CCShow * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCShow = {
  "cocos2d::CCShow",
  mrb_free_cocos2d_CCShow
};

static void
mrb_no_free_cocos2d_CCShow(mrb_state *mrb, void *ptr)
{
  cocos2d::CCShow *obj = static_cast< cocos2d::CCShow * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCShow = {
  "cocos2d::CCShow",
  mrb_no_free_cocos2d_CCShow
};

static struct RClass *
_define_class_cocos2d_CCShow(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCShow") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCShow");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCShow", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCShow");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCShow, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCShuffleTiles(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCShuffleTiles *obj = static_cast< cocos2d::CCShuffleTiles * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCShuffleTiles = {
  "cocos2d::CCShuffleTiles",
  mrb_free_cocos2d_CCShuffleTiles
};

static void
mrb_no_free_cocos2d_CCShuffleTiles(mrb_state *mrb, void *ptr)
{
  cocos2d::CCShuffleTiles *obj = static_cast< cocos2d::CCShuffleTiles * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCShuffleTiles = {
  "cocos2d::CCShuffleTiles",
  mrb_no_free_cocos2d_CCShuffleTiles
};

static struct RClass *
_define_class_cocos2d_CCShuffleTiles(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCShuffleTiles") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCShuffleTiles");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCShuffleTiles", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCShuffleTiles");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCShuffleTiles, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCSize(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCSize * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCSize = {
  "cocos2d::CCSize",
  mrb_free_cocos2d_CCSize
};

static void
mrb_no_free_cocos2d_CCSize(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCSize = {
  "cocos2d::CCSize",
  mrb_no_free_cocos2d_CCSize
};

static struct RClass *
_define_class_cocos2d_CCSize(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSize") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCSize");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSize", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCSize");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCSize, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCSkewBy(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCSkewBy *obj = static_cast< cocos2d::CCSkewBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCSkewBy = {
  "cocos2d::CCSkewBy",
  mrb_free_cocos2d_CCSkewBy
};

static void
mrb_no_free_cocos2d_CCSkewBy(mrb_state *mrb, void *ptr)
{
  cocos2d::CCSkewBy *obj = static_cast< cocos2d::CCSkewBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCSkewBy = {
  "cocos2d::CCSkewBy",
  mrb_no_free_cocos2d_CCSkewBy
};

static struct RClass *
_define_class_cocos2d_CCSkewBy(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSkewBy") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCSkewBy");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSkewTo") == 0) {
    _define_class_cocos2d_CCSkewTo(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSkewTo");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSkewBy", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCSkewBy");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCSkewBy, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCSkewTo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCSkewTo *obj = static_cast< cocos2d::CCSkewTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCSkewTo = {
  "cocos2d::CCSkewTo",
  mrb_free_cocos2d_CCSkewTo
};

static void
mrb_no_free_cocos2d_CCSkewTo(mrb_state *mrb, void *ptr)
{
  cocos2d::CCSkewTo *obj = static_cast< cocos2d::CCSkewTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCSkewTo = {
  "cocos2d::CCSkewTo",
  mrb_no_free_cocos2d_CCSkewTo
};

static struct RClass *
_define_class_cocos2d_CCSkewTo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSkewTo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCSkewTo");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSkewTo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCSkewTo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCSkewTo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCSpawn(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCSpawn *obj = static_cast< cocos2d::CCSpawn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCSpawn = {
  "cocos2d::CCSpawn",
  mrb_free_cocos2d_CCSpawn
};

static void
mrb_no_free_cocos2d_CCSpawn(mrb_state *mrb, void *ptr)
{
  cocos2d::CCSpawn *obj = static_cast< cocos2d::CCSpawn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCSpawn = {
  "cocos2d::CCSpawn",
  mrb_no_free_cocos2d_CCSpawn
};

static struct RClass *
_define_class_cocos2d_CCSpawn(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSpawn") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCSpawn");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSpawn", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCSpawn");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCSpawn, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCSpeed(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCSpeed *obj = static_cast< cocos2d::CCSpeed * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCSpeed = {
  "cocos2d::CCSpeed",
  mrb_free_cocos2d_CCSpeed
};

static void
mrb_no_free_cocos2d_CCSpeed(mrb_state *mrb, void *ptr)
{
  cocos2d::CCSpeed *obj = static_cast< cocos2d::CCSpeed * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCSpeed = {
  "cocos2d::CCSpeed",
  mrb_no_free_cocos2d_CCSpeed
};

static struct RClass *
_define_class_cocos2d_CCSpeed(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSpeed") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCSpeed");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAction") == 0) {
    _define_class_cocos2d_CCAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSpeed", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCSpeed");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCSpeed, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCSplitCols(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCSplitCols *obj = static_cast< cocos2d::CCSplitCols * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCSplitCols = {
  "cocos2d::CCSplitCols",
  mrb_free_cocos2d_CCSplitCols
};

static void
mrb_no_free_cocos2d_CCSplitCols(mrb_state *mrb, void *ptr)
{
  cocos2d::CCSplitCols *obj = static_cast< cocos2d::CCSplitCols * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCSplitCols = {
  "cocos2d::CCSplitCols",
  mrb_no_free_cocos2d_CCSplitCols
};

static struct RClass *
_define_class_cocos2d_CCSplitCols(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSplitCols") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCSplitCols");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSplitCols", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCSplitCols");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCSplitCols, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCSplitRows(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCSplitRows *obj = static_cast< cocos2d::CCSplitRows * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCSplitRows = {
  "cocos2d::CCSplitRows",
  mrb_free_cocos2d_CCSplitRows
};

static void
mrb_no_free_cocos2d_CCSplitRows(mrb_state *mrb, void *ptr)
{
  cocos2d::CCSplitRows *obj = static_cast< cocos2d::CCSplitRows * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCSplitRows = {
  "cocos2d::CCSplitRows",
  mrb_no_free_cocos2d_CCSplitRows
};

static struct RClass *
_define_class_cocos2d_CCSplitRows(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSplitRows") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCSplitRows");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSplitRows", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCSplitRows");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCSplitRows, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCSprite(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCSprite *obj = static_cast< cocos2d::CCSprite * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCSprite = {
  "cocos2d::CCSprite",
  mrb_free_cocos2d_CCSprite
};

static void
mrb_no_free_cocos2d_CCSprite(mrb_state *mrb, void *ptr)
{
  cocos2d::CCSprite *obj = static_cast< cocos2d::CCSprite * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCSprite = {
  "cocos2d::CCSprite",
  mrb_no_free_cocos2d_CCSprite
};

static struct RClass *
_define_class_cocos2d_CCSprite(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSprite") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCSprite");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNodeRGBA") == 0) {
    _define_class_cocos2d_CCNodeRGBA(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextureProtocol") == 0) {
    _define_class_cocos2d_CCTextureProtocol(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSprite", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextureProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCSprite");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCSprite, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCSpriteBatchNode(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCSpriteBatchNode *obj = static_cast< cocos2d::CCSpriteBatchNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCSpriteBatchNode = {
  "cocos2d::CCSpriteBatchNode",
  mrb_free_cocos2d_CCSpriteBatchNode
};

static void
mrb_no_free_cocos2d_CCSpriteBatchNode(mrb_state *mrb, void *ptr)
{
  cocos2d::CCSpriteBatchNode *obj = static_cast< cocos2d::CCSpriteBatchNode * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCSpriteBatchNode = {
  "cocos2d::CCSpriteBatchNode",
  mrb_no_free_cocos2d_CCSpriteBatchNode
};

static struct RClass *
_define_class_cocos2d_CCSpriteBatchNode(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSpriteBatchNode") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCSpriteBatchNode");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextureProtocol") == 0) {
    _define_class_cocos2d_CCTextureProtocol(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSpriteBatchNode", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextureProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCSpriteBatchNode");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCSpriteBatchNode, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCSpriteFrame(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCSpriteFrame *obj = static_cast< cocos2d::CCSpriteFrame * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCSpriteFrame = {
  "cocos2d::CCSpriteFrame",
  mrb_free_cocos2d_CCSpriteFrame
};

static void
mrb_no_free_cocos2d_CCSpriteFrame(mrb_state *mrb, void *ptr)
{
  cocos2d::CCSpriteFrame *obj = static_cast< cocos2d::CCSpriteFrame * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCSpriteFrame = {
  "cocos2d::CCSpriteFrame",
  mrb_no_free_cocos2d_CCSpriteFrame
};

static struct RClass *
_define_class_cocos2d_CCSpriteFrame(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSpriteFrame") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCSpriteFrame");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSpriteFrame", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCSpriteFrame");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCSpriteFrame, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCSpriteFrameCache(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCSpriteFrameCache *obj = static_cast< cocos2d::CCSpriteFrameCache * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCSpriteFrameCache = {
  "cocos2d::CCSpriteFrameCache",
  mrb_free_cocos2d_CCSpriteFrameCache
};

static void
mrb_no_free_cocos2d_CCSpriteFrameCache(mrb_state *mrb, void *ptr)
{
  cocos2d::CCSpriteFrameCache *obj = static_cast< cocos2d::CCSpriteFrameCache * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCSpriteFrameCache = {
  "cocos2d::CCSpriteFrameCache",
  mrb_no_free_cocos2d_CCSpriteFrameCache
};

static struct RClass *
_define_class_cocos2d_CCSpriteFrameCache(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSpriteFrameCache") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCSpriteFrameCache");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCSpriteFrameCache", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCSpriteFrameCache");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCSpriteFrameCache, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCStandardTouchDelegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_CCStandardTouchDelegate = {
  "cocos2d::CCStandardTouchDelegate",
  mrb_free_cocos2d_CCStandardTouchDelegate
};

static struct RClass *
_define_class_cocos2d_CCStandardTouchDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCStandardTouchDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCStandardTouchDelegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCStandardTouchDelegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCStandardTouchDelegate");
  return rc;
}

static void
mrb_free_cocos2d_CCStandardTouchHandler(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCStandardTouchHandler *obj = static_cast< cocos2d::CCStandardTouchHandler * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCStandardTouchHandler = {
  "cocos2d::CCStandardTouchHandler",
  mrb_free_cocos2d_CCStandardTouchHandler
};

static void
mrb_no_free_cocos2d_CCStandardTouchHandler(mrb_state *mrb, void *ptr)
{
  cocos2d::CCStandardTouchHandler *obj = static_cast< cocos2d::CCStandardTouchHandler * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCStandardTouchHandler = {
  "cocos2d::CCStandardTouchHandler",
  mrb_no_free_cocos2d_CCStandardTouchHandler
};

static struct RClass *
_define_class_cocos2d_CCStandardTouchHandler(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCStandardTouchHandler") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCStandardTouchHandler");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTouchHandler") == 0) {
    _define_class_cocos2d_CCTouchHandler(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTouchHandler");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCStandardTouchHandler", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCStandardTouchHandler");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCStandardTouchHandler, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCStopGrid(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCStopGrid *obj = static_cast< cocos2d::CCStopGrid * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCStopGrid = {
  "cocos2d::CCStopGrid",
  mrb_free_cocos2d_CCStopGrid
};

static void
mrb_no_free_cocos2d_CCStopGrid(mrb_state *mrb, void *ptr)
{
  cocos2d::CCStopGrid *obj = static_cast< cocos2d::CCStopGrid * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCStopGrid = {
  "cocos2d::CCStopGrid",
  mrb_no_free_cocos2d_CCStopGrid
};

static struct RClass *
_define_class_cocos2d_CCStopGrid(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCStopGrid") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCStopGrid");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCStopGrid", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCStopGrid");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCStopGrid, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCString(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCString *obj = static_cast< cocos2d::CCString * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCString = {
  "cocos2d::CCString",
  mrb_free_cocos2d_CCString
};

static void
mrb_no_free_cocos2d_CCString(mrb_state *mrb, void *ptr)
{
  cocos2d::CCString *obj = static_cast< cocos2d::CCString * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCString = {
  "cocos2d::CCString",
  mrb_no_free_cocos2d_CCString
};

static struct RClass *
_define_class_cocos2d_CCString(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCString") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCString");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCString", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCString");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCString, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCStringCompare(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCStringCompare * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCStringCompare = {
  "cocos2d::CCStringCompare",
  mrb_free_cocos2d_CCStringCompare
};

static void
mrb_no_free_cocos2d_CCStringCompare(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCStringCompare = {
  "cocos2d::CCStringCompare",
  mrb_no_free_cocos2d_CCStringCompare
};

static struct RClass *
_define_class_cocos2d_CCStringCompare(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCStringCompare") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCStringCompare");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCStringCompare", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCStringCompare");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCStringCompare, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTMXLayer(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTMXLayer *obj = static_cast< cocos2d::CCTMXLayer * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTMXLayer = {
  "cocos2d::CCTMXLayer",
  mrb_free_cocos2d_CCTMXLayer
};

static void
mrb_no_free_cocos2d_CCTMXLayer(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTMXLayer *obj = static_cast< cocos2d::CCTMXLayer * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTMXLayer = {
  "cocos2d::CCTMXLayer",
  mrb_no_free_cocos2d_CCTMXLayer
};

static struct RClass *
_define_class_cocos2d_CCTMXLayer(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTMXLayer") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTMXLayer");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSpriteBatchNode") == 0) {
    _define_class_cocos2d_CCSpriteBatchNode(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSpriteBatchNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTMXLayer", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTMXLayer");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTMXLayer, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTMXLayerInfo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTMXLayerInfo *obj = static_cast< cocos2d::CCTMXLayerInfo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTMXLayerInfo = {
  "cocos2d::CCTMXLayerInfo",
  mrb_free_cocos2d_CCTMXLayerInfo
};

static void
mrb_no_free_cocos2d_CCTMXLayerInfo(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTMXLayerInfo *obj = static_cast< cocos2d::CCTMXLayerInfo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTMXLayerInfo = {
  "cocos2d::CCTMXLayerInfo",
  mrb_no_free_cocos2d_CCTMXLayerInfo
};

static struct RClass *
_define_class_cocos2d_CCTMXLayerInfo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTMXLayerInfo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTMXLayerInfo");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTMXLayerInfo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTMXLayerInfo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTMXLayerInfo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTMXMapInfo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTMXMapInfo *obj = static_cast< cocos2d::CCTMXMapInfo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTMXMapInfo = {
  "cocos2d::CCTMXMapInfo",
  mrb_free_cocos2d_CCTMXMapInfo
};

static void
mrb_no_free_cocos2d_CCTMXMapInfo(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTMXMapInfo *obj = static_cast< cocos2d::CCTMXMapInfo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTMXMapInfo = {
  "cocos2d::CCTMXMapInfo",
  mrb_no_free_cocos2d_CCTMXMapInfo
};

static struct RClass *
_define_class_cocos2d_CCTMXMapInfo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTMXMapInfo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTMXMapInfo");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTMXMapInfo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTMXMapInfo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTMXMapInfo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTMXObjectGroup(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTMXObjectGroup *obj = static_cast< cocos2d::CCTMXObjectGroup * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTMXObjectGroup = {
  "cocos2d::CCTMXObjectGroup",
  mrb_free_cocos2d_CCTMXObjectGroup
};

static void
mrb_no_free_cocos2d_CCTMXObjectGroup(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTMXObjectGroup *obj = static_cast< cocos2d::CCTMXObjectGroup * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTMXObjectGroup = {
  "cocos2d::CCTMXObjectGroup",
  mrb_no_free_cocos2d_CCTMXObjectGroup
};

static struct RClass *
_define_class_cocos2d_CCTMXObjectGroup(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTMXObjectGroup") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTMXObjectGroup");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTMXObjectGroup", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTMXObjectGroup");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTMXObjectGroup, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTMXTiledMap(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTMXTiledMap *obj = static_cast< cocos2d::CCTMXTiledMap * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTMXTiledMap = {
  "cocos2d::CCTMXTiledMap",
  mrb_free_cocos2d_CCTMXTiledMap
};

static void
mrb_no_free_cocos2d_CCTMXTiledMap(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTMXTiledMap *obj = static_cast< cocos2d::CCTMXTiledMap * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTMXTiledMap = {
  "cocos2d::CCTMXTiledMap",
  mrb_no_free_cocos2d_CCTMXTiledMap
};

static struct RClass *
_define_class_cocos2d_CCTMXTiledMap(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTMXTiledMap") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTMXTiledMap");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTMXTiledMap", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTMXTiledMap");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTMXTiledMap, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTMXTilesetInfo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTMXTilesetInfo *obj = static_cast< cocos2d::CCTMXTilesetInfo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTMXTilesetInfo = {
  "cocos2d::CCTMXTilesetInfo",
  mrb_free_cocos2d_CCTMXTilesetInfo
};

static void
mrb_no_free_cocos2d_CCTMXTilesetInfo(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTMXTilesetInfo *obj = static_cast< cocos2d::CCTMXTilesetInfo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTMXTilesetInfo = {
  "cocos2d::CCTMXTilesetInfo",
  mrb_no_free_cocos2d_CCTMXTilesetInfo
};

static struct RClass *
_define_class_cocos2d_CCTMXTilesetInfo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTMXTilesetInfo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTMXTilesetInfo");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTMXTilesetInfo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTMXTilesetInfo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTMXTilesetInfo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTargetedAction(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTargetedAction *obj = static_cast< cocos2d::CCTargetedAction * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTargetedAction = {
  "cocos2d::CCTargetedAction",
  mrb_free_cocos2d_CCTargetedAction
};

static void
mrb_no_free_cocos2d_CCTargetedAction(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTargetedAction *obj = static_cast< cocos2d::CCTargetedAction * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTargetedAction = {
  "cocos2d::CCTargetedAction",
  mrb_no_free_cocos2d_CCTargetedAction
};

static struct RClass *
_define_class_cocos2d_CCTargetedAction(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTargetedAction") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTargetedAction");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTargetedAction", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTargetedAction");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTargetedAction, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTargetedTouchDelegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTargetedTouchDelegate = {
  "cocos2d::CCTargetedTouchDelegate",
  mrb_free_cocos2d_CCTargetedTouchDelegate
};

static struct RClass *
_define_class_cocos2d_CCTargetedTouchDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTargetedTouchDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTargetedTouchDelegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCTargetedTouchDelegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTargetedTouchDelegate");
  return rc;
}

static void
mrb_free_cocos2d_CCTargetedTouchHandler(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTargetedTouchHandler *obj = static_cast< cocos2d::CCTargetedTouchHandler * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTargetedTouchHandler = {
  "cocos2d::CCTargetedTouchHandler",
  mrb_free_cocos2d_CCTargetedTouchHandler
};

static void
mrb_no_free_cocos2d_CCTargetedTouchHandler(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTargetedTouchHandler *obj = static_cast< cocos2d::CCTargetedTouchHandler * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTargetedTouchHandler = {
  "cocos2d::CCTargetedTouchHandler",
  mrb_no_free_cocos2d_CCTargetedTouchHandler
};

static struct RClass *
_define_class_cocos2d_CCTargetedTouchHandler(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTargetedTouchHandler") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTargetedTouchHandler");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTouchHandler") == 0) {
    _define_class_cocos2d_CCTouchHandler(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTouchHandler");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTargetedTouchHandler", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTargetedTouchHandler");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTargetedTouchHandler, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTextFieldDelegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTextFieldDelegate = {
  "cocos2d::CCTextFieldDelegate",
  mrb_free_cocos2d_CCTextFieldDelegate
};

static struct RClass *
_define_class_cocos2d_CCTextFieldDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextFieldDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTextFieldDelegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCTextFieldDelegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTextFieldDelegate");
  return rc;
}

static void
mrb_free_cocos2d_CCTextFieldTTF(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTextFieldTTF *obj = static_cast< cocos2d::CCTextFieldTTF * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTextFieldTTF = {
  "cocos2d::CCTextFieldTTF",
  mrb_free_cocos2d_CCTextFieldTTF
};

static void
mrb_no_free_cocos2d_CCTextFieldTTF(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTextFieldTTF *obj = static_cast< cocos2d::CCTextFieldTTF * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTextFieldTTF = {
  "cocos2d::CCTextFieldTTF",
  mrb_no_free_cocos2d_CCTextFieldTTF
};

static struct RClass *
_define_class_cocos2d_CCTextFieldTTF(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextFieldTTF") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTextFieldTTF");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLabelTTF") == 0) {
    _define_class_cocos2d_CCLabelTTF(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCIMEDelegate") == 0) {
    _define_class_cocos2d_CCIMEDelegate(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLabelTTF");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTextFieldTTF", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCIMEDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTextFieldTTF");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTextFieldTTF, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTexture2D(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTexture2D *obj = static_cast< cocos2d::CCTexture2D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTexture2D = {
  "cocos2d::CCTexture2D",
  mrb_free_cocos2d_CCTexture2D
};

static void
mrb_no_free_cocos2d_CCTexture2D(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTexture2D *obj = static_cast< cocos2d::CCTexture2D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTexture2D = {
  "cocos2d::CCTexture2D",
  mrb_no_free_cocos2d_CCTexture2D
};

static struct RClass *
_define_class_cocos2d_CCTexture2D(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTexture2D") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTexture2D");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTexture2D", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTexture2D");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTexture2D, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTextureAtlas(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTextureAtlas *obj = static_cast< cocos2d::CCTextureAtlas * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTextureAtlas = {
  "cocos2d::CCTextureAtlas",
  mrb_free_cocos2d_CCTextureAtlas
};

static void
mrb_no_free_cocos2d_CCTextureAtlas(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTextureAtlas *obj = static_cast< cocos2d::CCTextureAtlas * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTextureAtlas = {
  "cocos2d::CCTextureAtlas",
  mrb_no_free_cocos2d_CCTextureAtlas
};

static struct RClass *
_define_class_cocos2d_CCTextureAtlas(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextureAtlas") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTextureAtlas");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTextureAtlas", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTextureAtlas");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTextureAtlas, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTextureCache(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTextureCache *obj = static_cast< cocos2d::CCTextureCache * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTextureCache = {
  "cocos2d::CCTextureCache",
  mrb_free_cocos2d_CCTextureCache
};

static void
mrb_no_free_cocos2d_CCTextureCache(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTextureCache *obj = static_cast< cocos2d::CCTextureCache * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTextureCache = {
  "cocos2d::CCTextureCache",
  mrb_no_free_cocos2d_CCTextureCache
};

static struct RClass *
_define_class_cocos2d_CCTextureCache(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextureCache") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTextureCache");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTextureCache", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTextureCache");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTextureCache, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTexturePVR(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTexturePVR *obj = static_cast< cocos2d::CCTexturePVR * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTexturePVR = {
  "cocos2d::CCTexturePVR",
  mrb_free_cocos2d_CCTexturePVR
};

static void
mrb_no_free_cocos2d_CCTexturePVR(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTexturePVR *obj = static_cast< cocos2d::CCTexturePVR * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTexturePVR = {
  "cocos2d::CCTexturePVR",
  mrb_no_free_cocos2d_CCTexturePVR
};

static struct RClass *
_define_class_cocos2d_CCTexturePVR(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTexturePVR") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTexturePVR");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTexturePVR", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTexturePVR");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTexturePVR, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTextureProtocol(mrb_state *mrb, void *ptr)
{
  //delete static_cast< cocos2d::CCTextureProtocol * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCTextureProtocol = {
  "cocos2d::CCTextureProtocol",
  mrb_free_cocos2d_CCTextureProtocol
};

static struct RClass *
_define_class_cocos2d_CCTextureProtocol(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextureProtocol") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTextureProtocol");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCTextureProtocol");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTextureProtocol");
  return rc;
}

static void
mrb_free_cocos2d_CCThread(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCThread * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCThread = {
  "cocos2d::CCThread",
  mrb_free_cocos2d_CCThread
};

static void
mrb_no_free_cocos2d_CCThread(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCThread = {
  "cocos2d::CCThread",
  mrb_no_free_cocos2d_CCThread
};

static struct RClass *
_define_class_cocos2d_CCThread(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCThread") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCThread");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCThread", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCThread");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCThread, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTileMapAtlas(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTileMapAtlas *obj = static_cast< cocos2d::CCTileMapAtlas * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTileMapAtlas = {
  "cocos2d::CCTileMapAtlas",
  mrb_free_cocos2d_CCTileMapAtlas
};

static void
mrb_no_free_cocos2d_CCTileMapAtlas(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTileMapAtlas *obj = static_cast< cocos2d::CCTileMapAtlas * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTileMapAtlas = {
  "cocos2d::CCTileMapAtlas",
  mrb_no_free_cocos2d_CCTileMapAtlas
};

static struct RClass *
_define_class_cocos2d_CCTileMapAtlas(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTileMapAtlas") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTileMapAtlas");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAtlasNode") == 0) {
    _define_class_cocos2d_CCAtlasNode(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAtlasNode");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTileMapAtlas", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTileMapAtlas");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTileMapAtlas, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTiledGrid3D(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTiledGrid3D *obj = static_cast< cocos2d::CCTiledGrid3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTiledGrid3D = {
  "cocos2d::CCTiledGrid3D",
  mrb_free_cocos2d_CCTiledGrid3D
};

static void
mrb_no_free_cocos2d_CCTiledGrid3D(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTiledGrid3D *obj = static_cast< cocos2d::CCTiledGrid3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTiledGrid3D = {
  "cocos2d::CCTiledGrid3D",
  mrb_no_free_cocos2d_CCTiledGrid3D
};

static struct RClass *
_define_class_cocos2d_CCTiledGrid3D(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3D") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3D");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGridBase") == 0) {
    _define_class_cocos2d_CCGridBase(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGridBase");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTiledGrid3D", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTiledGrid3D");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTiledGrid3D, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTiledGrid3DAction(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTiledGrid3DAction *obj = static_cast< cocos2d::CCTiledGrid3DAction * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTiledGrid3DAction = {
  "cocos2d::CCTiledGrid3DAction",
  mrb_free_cocos2d_CCTiledGrid3DAction
};

static void
mrb_no_free_cocos2d_CCTiledGrid3DAction(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTiledGrid3DAction *obj = static_cast< cocos2d::CCTiledGrid3DAction * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTiledGrid3DAction = {
  "cocos2d::CCTiledGrid3DAction",
  mrb_no_free_cocos2d_CCTiledGrid3DAction
};

static struct RClass *
_define_class_cocos2d_CCTiledGrid3DAction(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGridAction") == 0) {
    _define_class_cocos2d_CCGridAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGridAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTiledGrid3DAction", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTiledGrid3DAction");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTiledGrid3DAction, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTime(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCTime * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCTime = {
  "cocos2d::CCTime",
  mrb_free_cocos2d_CCTime
};

static void
mrb_no_free_cocos2d_CCTime(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTime = {
  "cocos2d::CCTime",
  mrb_no_free_cocos2d_CCTime
};

static struct RClass *
_define_class_cocos2d_CCTime(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTime") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTime");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTime", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTime");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTime, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTimer(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTimer *obj = static_cast< cocos2d::CCTimer * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTimer = {
  "cocos2d::CCTimer",
  mrb_free_cocos2d_CCTimer
};

static void
mrb_no_free_cocos2d_CCTimer(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTimer *obj = static_cast< cocos2d::CCTimer * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTimer = {
  "cocos2d::CCTimer",
  mrb_no_free_cocos2d_CCTimer
};

static struct RClass *
_define_class_cocos2d_CCTimer(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTimer") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTimer");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTimer", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTimer");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTimer, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTintBy(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTintBy *obj = static_cast< cocos2d::CCTintBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTintBy = {
  "cocos2d::CCTintBy",
  mrb_free_cocos2d_CCTintBy
};

static void
mrb_no_free_cocos2d_CCTintBy(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTintBy *obj = static_cast< cocos2d::CCTintBy * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTintBy = {
  "cocos2d::CCTintBy",
  mrb_no_free_cocos2d_CCTintBy
};

static struct RClass *
_define_class_cocos2d_CCTintBy(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTintBy") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTintBy");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTintBy", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTintBy");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTintBy, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTintTo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTintTo *obj = static_cast< cocos2d::CCTintTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTintTo = {
  "cocos2d::CCTintTo",
  mrb_free_cocos2d_CCTintTo
};

static void
mrb_no_free_cocos2d_CCTintTo(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTintTo *obj = static_cast< cocos2d::CCTintTo * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTintTo = {
  "cocos2d::CCTintTo",
  mrb_no_free_cocos2d_CCTintTo
};

static struct RClass *
_define_class_cocos2d_CCTintTo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTintTo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTintTo");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTintTo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTintTo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTintTo, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCToggleVisibility(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCToggleVisibility *obj = static_cast< cocos2d::CCToggleVisibility * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCToggleVisibility = {
  "cocos2d::CCToggleVisibility",
  mrb_free_cocos2d_CCToggleVisibility
};

static void
mrb_no_free_cocos2d_CCToggleVisibility(mrb_state *mrb, void *ptr)
{
  cocos2d::CCToggleVisibility *obj = static_cast< cocos2d::CCToggleVisibility * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCToggleVisibility = {
  "cocos2d::CCToggleVisibility",
  mrb_no_free_cocos2d_CCToggleVisibility
};

static struct RClass *
_define_class_cocos2d_CCToggleVisibility(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCToggleVisibility") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCToggleVisibility");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCToggleVisibility", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCToggleVisibility");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCToggleVisibility, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTouch(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTouch *obj = static_cast< cocos2d::CCTouch * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTouch = {
  "cocos2d::CCTouch",
  mrb_free_cocos2d_CCTouch
};

static void
mrb_no_free_cocos2d_CCTouch(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTouch *obj = static_cast< cocos2d::CCTouch * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTouch = {
  "cocos2d::CCTouch",
  mrb_no_free_cocos2d_CCTouch
};

static struct RClass *
_define_class_cocos2d_CCTouch(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTouch") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTouch");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTouch", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTouch");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTouch, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTouchDelegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTouchDelegate = {
  "cocos2d::CCTouchDelegate",
  mrb_free_cocos2d_CCTouchDelegate
};

static struct RClass *
_define_class_cocos2d_CCTouchDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTouchDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTouchDelegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "CCTouchDelegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTouchDelegate");
  return rc;
}

static void
mrb_free_cocos2d_CCTouchDispatcher(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTouchDispatcher *obj = static_cast< cocos2d::CCTouchDispatcher * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTouchDispatcher = {
  "cocos2d::CCTouchDispatcher",
  mrb_free_cocos2d_CCTouchDispatcher
};

static void
mrb_no_free_cocos2d_CCTouchDispatcher(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTouchDispatcher *obj = static_cast< cocos2d::CCTouchDispatcher * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTouchDispatcher = {
  "cocos2d::CCTouchDispatcher",
  mrb_no_free_cocos2d_CCTouchDispatcher
};

static struct RClass *
_define_class_cocos2d_CCTouchDispatcher(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTouchDispatcher") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTouchDispatcher");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::EGLTouchDelegate") == 0) {
    _define_class_cocos2d_EGLTouchDelegate(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTouchDispatcher", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::EGLTouchDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTouchDispatcher");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTouchDispatcher, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTouchHandler(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTouchHandler *obj = static_cast< cocos2d::CCTouchHandler * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTouchHandler = {
  "cocos2d::CCTouchHandler",
  mrb_free_cocos2d_CCTouchHandler
};

static void
mrb_no_free_cocos2d_CCTouchHandler(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTouchHandler *obj = static_cast< cocos2d::CCTouchHandler * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTouchHandler = {
  "cocos2d::CCTouchHandler",
  mrb_no_free_cocos2d_CCTouchHandler
};

static struct RClass *
_define_class_cocos2d_CCTouchHandler(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTouchHandler") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTouchHandler");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTouchHandler", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTouchHandler");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTouchHandler, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTouchScriptHandlerEntry(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTouchScriptHandlerEntry *obj = static_cast< cocos2d::CCTouchScriptHandlerEntry * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTouchScriptHandlerEntry = {
  "cocos2d::CCTouchScriptHandlerEntry",
  mrb_free_cocos2d_CCTouchScriptHandlerEntry
};

static void
mrb_no_free_cocos2d_CCTouchScriptHandlerEntry(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTouchScriptHandlerEntry *obj = static_cast< cocos2d::CCTouchScriptHandlerEntry * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTouchScriptHandlerEntry = {
  "cocos2d::CCTouchScriptHandlerEntry",
  mrb_no_free_cocos2d_CCTouchScriptHandlerEntry
};

static struct RClass *
_define_class_cocos2d_CCTouchScriptHandlerEntry(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTouchScriptHandlerEntry") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTouchScriptHandlerEntry");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCScriptHandlerEntry") == 0) {
    _define_class_cocos2d_CCScriptHandlerEntry(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCScriptHandlerEntry");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTouchScriptHandlerEntry", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTouchScriptHandlerEntry");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTouchScriptHandlerEntry, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionCrossFade(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionCrossFade *obj = static_cast< cocos2d::CCTransitionCrossFade * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionCrossFade = {
  "cocos2d::CCTransitionCrossFade",
  mrb_free_cocos2d_CCTransitionCrossFade
};

static void
mrb_no_free_cocos2d_CCTransitionCrossFade(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionCrossFade *obj = static_cast< cocos2d::CCTransitionCrossFade * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionCrossFade = {
  "cocos2d::CCTransitionCrossFade",
  mrb_no_free_cocos2d_CCTransitionCrossFade
};

static struct RClass *
_define_class_cocos2d_CCTransitionCrossFade(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionCrossFade") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionCrossFade");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionCrossFade", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionCrossFade");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionCrossFade, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionFade(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionFade *obj = static_cast< cocos2d::CCTransitionFade * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionFade = {
  "cocos2d::CCTransitionFade",
  mrb_free_cocos2d_CCTransitionFade
};

static void
mrb_no_free_cocos2d_CCTransitionFade(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionFade *obj = static_cast< cocos2d::CCTransitionFade * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionFade = {
  "cocos2d::CCTransitionFade",
  mrb_no_free_cocos2d_CCTransitionFade
};

static struct RClass *
_define_class_cocos2d_CCTransitionFade(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionFade") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFade");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionFade", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionFade");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionFade, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionFadeBL(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionFadeBL *obj = static_cast< cocos2d::CCTransitionFadeBL * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionFadeBL = {
  "cocos2d::CCTransitionFadeBL",
  mrb_free_cocos2d_CCTransitionFadeBL
};

static void
mrb_no_free_cocos2d_CCTransitionFadeBL(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionFadeBL *obj = static_cast< cocos2d::CCTransitionFadeBL * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionFadeBL = {
  "cocos2d::CCTransitionFadeBL",
  mrb_no_free_cocos2d_CCTransitionFadeBL
};

static struct RClass *
_define_class_cocos2d_CCTransitionFadeBL(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionFadeBL") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFadeBL");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionFadeTR") == 0) {
    _define_class_cocos2d_CCTransitionFadeTR(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFadeTR");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionFadeBL", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionFadeBL");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionFadeBL, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionFadeDown(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionFadeDown *obj = static_cast< cocos2d::CCTransitionFadeDown * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionFadeDown = {
  "cocos2d::CCTransitionFadeDown",
  mrb_free_cocos2d_CCTransitionFadeDown
};

static void
mrb_no_free_cocos2d_CCTransitionFadeDown(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionFadeDown *obj = static_cast< cocos2d::CCTransitionFadeDown * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionFadeDown = {
  "cocos2d::CCTransitionFadeDown",
  mrb_no_free_cocos2d_CCTransitionFadeDown
};

static struct RClass *
_define_class_cocos2d_CCTransitionFadeDown(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionFadeDown") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFadeDown");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionFadeTR") == 0) {
    _define_class_cocos2d_CCTransitionFadeTR(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFadeTR");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionFadeDown", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionFadeDown");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionFadeDown, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionFadeTR(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionFadeTR *obj = static_cast< cocos2d::CCTransitionFadeTR * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionFadeTR = {
  "cocos2d::CCTransitionFadeTR",
  mrb_free_cocos2d_CCTransitionFadeTR
};

static void
mrb_no_free_cocos2d_CCTransitionFadeTR(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionFadeTR *obj = static_cast< cocos2d::CCTransitionFadeTR * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionFadeTR = {
  "cocos2d::CCTransitionFadeTR",
  mrb_no_free_cocos2d_CCTransitionFadeTR
};

static struct RClass *
_define_class_cocos2d_CCTransitionFadeTR(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionFadeTR") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFadeTR");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionFadeTR", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionFadeTR");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionFadeTR, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionFadeUp(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionFadeUp *obj = static_cast< cocos2d::CCTransitionFadeUp * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionFadeUp = {
  "cocos2d::CCTransitionFadeUp",
  mrb_free_cocos2d_CCTransitionFadeUp
};

static void
mrb_no_free_cocos2d_CCTransitionFadeUp(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionFadeUp *obj = static_cast< cocos2d::CCTransitionFadeUp * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionFadeUp = {
  "cocos2d::CCTransitionFadeUp",
  mrb_no_free_cocos2d_CCTransitionFadeUp
};

static struct RClass *
_define_class_cocos2d_CCTransitionFadeUp(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionFadeUp") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFadeUp");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionFadeTR") == 0) {
    _define_class_cocos2d_CCTransitionFadeTR(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFadeTR");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionFadeUp", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionFadeUp");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionFadeUp, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionFlipAngular(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionFlipAngular *obj = static_cast< cocos2d::CCTransitionFlipAngular * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionFlipAngular = {
  "cocos2d::CCTransitionFlipAngular",
  mrb_free_cocos2d_CCTransitionFlipAngular
};

static void
mrb_no_free_cocos2d_CCTransitionFlipAngular(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionFlipAngular *obj = static_cast< cocos2d::CCTransitionFlipAngular * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionFlipAngular = {
  "cocos2d::CCTransitionFlipAngular",
  mrb_no_free_cocos2d_CCTransitionFlipAngular
};

static struct RClass *
_define_class_cocos2d_CCTransitionFlipAngular(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionFlipAngular") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFlipAngular");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSceneOriented") == 0) {
    _define_class_cocos2d_CCTransitionSceneOriented(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSceneOriented");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionFlipAngular", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionFlipAngular");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionFlipAngular, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionFlipX(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionFlipX *obj = static_cast< cocos2d::CCTransitionFlipX * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionFlipX = {
  "cocos2d::CCTransitionFlipX",
  mrb_free_cocos2d_CCTransitionFlipX
};

static void
mrb_no_free_cocos2d_CCTransitionFlipX(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionFlipX *obj = static_cast< cocos2d::CCTransitionFlipX * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionFlipX = {
  "cocos2d::CCTransitionFlipX",
  mrb_no_free_cocos2d_CCTransitionFlipX
};

static struct RClass *
_define_class_cocos2d_CCTransitionFlipX(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionFlipX") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFlipX");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSceneOriented") == 0) {
    _define_class_cocos2d_CCTransitionSceneOriented(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSceneOriented");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionFlipX", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionFlipX");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionFlipX, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionFlipY(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionFlipY *obj = static_cast< cocos2d::CCTransitionFlipY * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionFlipY = {
  "cocos2d::CCTransitionFlipY",
  mrb_free_cocos2d_CCTransitionFlipY
};

static void
mrb_no_free_cocos2d_CCTransitionFlipY(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionFlipY *obj = static_cast< cocos2d::CCTransitionFlipY * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionFlipY = {
  "cocos2d::CCTransitionFlipY",
  mrb_no_free_cocos2d_CCTransitionFlipY
};

static struct RClass *
_define_class_cocos2d_CCTransitionFlipY(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionFlipY") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFlipY");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSceneOriented") == 0) {
    _define_class_cocos2d_CCTransitionSceneOriented(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSceneOriented");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionFlipY", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionFlipY");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionFlipY, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionJumpZoom(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionJumpZoom *obj = static_cast< cocos2d::CCTransitionJumpZoom * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionJumpZoom = {
  "cocos2d::CCTransitionJumpZoom",
  mrb_free_cocos2d_CCTransitionJumpZoom
};

static void
mrb_no_free_cocos2d_CCTransitionJumpZoom(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionJumpZoom *obj = static_cast< cocos2d::CCTransitionJumpZoom * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionJumpZoom = {
  "cocos2d::CCTransitionJumpZoom",
  mrb_no_free_cocos2d_CCTransitionJumpZoom
};

static struct RClass *
_define_class_cocos2d_CCTransitionJumpZoom(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionJumpZoom") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionJumpZoom");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionJumpZoom", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionJumpZoom");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionJumpZoom, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionMoveInB(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionMoveInB *obj = static_cast< cocos2d::CCTransitionMoveInB * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionMoveInB = {
  "cocos2d::CCTransitionMoveInB",
  mrb_free_cocos2d_CCTransitionMoveInB
};

static void
mrb_no_free_cocos2d_CCTransitionMoveInB(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionMoveInB *obj = static_cast< cocos2d::CCTransitionMoveInB * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionMoveInB = {
  "cocos2d::CCTransitionMoveInB",
  mrb_no_free_cocos2d_CCTransitionMoveInB
};

static struct RClass *
_define_class_cocos2d_CCTransitionMoveInB(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionMoveInB") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionMoveInB");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionMoveInL") == 0) {
    _define_class_cocos2d_CCTransitionMoveInL(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionMoveInL");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionMoveInB", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionMoveInB");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionMoveInB, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionMoveInL(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionMoveInL *obj = static_cast< cocos2d::CCTransitionMoveInL * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionMoveInL = {
  "cocos2d::CCTransitionMoveInL",
  mrb_free_cocos2d_CCTransitionMoveInL
};

static void
mrb_no_free_cocos2d_CCTransitionMoveInL(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionMoveInL *obj = static_cast< cocos2d::CCTransitionMoveInL * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionMoveInL = {
  "cocos2d::CCTransitionMoveInL",
  mrb_no_free_cocos2d_CCTransitionMoveInL
};

static struct RClass *
_define_class_cocos2d_CCTransitionMoveInL(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionMoveInL") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionMoveInL");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionMoveInL", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionMoveInL");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionMoveInL, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionMoveInR(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionMoveInR *obj = static_cast< cocos2d::CCTransitionMoveInR * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionMoveInR = {
  "cocos2d::CCTransitionMoveInR",
  mrb_free_cocos2d_CCTransitionMoveInR
};

static void
mrb_no_free_cocos2d_CCTransitionMoveInR(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionMoveInR *obj = static_cast< cocos2d::CCTransitionMoveInR * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionMoveInR = {
  "cocos2d::CCTransitionMoveInR",
  mrb_no_free_cocos2d_CCTransitionMoveInR
};

static struct RClass *
_define_class_cocos2d_CCTransitionMoveInR(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionMoveInR") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionMoveInR");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionMoveInL") == 0) {
    _define_class_cocos2d_CCTransitionMoveInL(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionMoveInL");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionMoveInR", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionMoveInR");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionMoveInR, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionMoveInT(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionMoveInT *obj = static_cast< cocos2d::CCTransitionMoveInT * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionMoveInT = {
  "cocos2d::CCTransitionMoveInT",
  mrb_free_cocos2d_CCTransitionMoveInT
};

static void
mrb_no_free_cocos2d_CCTransitionMoveInT(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionMoveInT *obj = static_cast< cocos2d::CCTransitionMoveInT * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionMoveInT = {
  "cocos2d::CCTransitionMoveInT",
  mrb_no_free_cocos2d_CCTransitionMoveInT
};

static struct RClass *
_define_class_cocos2d_CCTransitionMoveInT(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionMoveInT") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionMoveInT");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionMoveInL") == 0) {
    _define_class_cocos2d_CCTransitionMoveInL(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionMoveInL");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionMoveInT", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionMoveInT");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionMoveInT, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionPageTurn(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionPageTurn *obj = static_cast< cocos2d::CCTransitionPageTurn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionPageTurn = {
  "cocos2d::CCTransitionPageTurn",
  mrb_free_cocos2d_CCTransitionPageTurn
};

static void
mrb_no_free_cocos2d_CCTransitionPageTurn(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionPageTurn *obj = static_cast< cocos2d::CCTransitionPageTurn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionPageTurn = {
  "cocos2d::CCTransitionPageTurn",
  mrb_no_free_cocos2d_CCTransitionPageTurn
};

static struct RClass *
_define_class_cocos2d_CCTransitionPageTurn(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionPageTurn") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionPageTurn");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionPageTurn", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionPageTurn");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionPageTurn, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionProgress(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionProgress *obj = static_cast< cocos2d::CCTransitionProgress * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionProgress = {
  "cocos2d::CCTransitionProgress",
  mrb_free_cocos2d_CCTransitionProgress
};

static void
mrb_no_free_cocos2d_CCTransitionProgress(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionProgress *obj = static_cast< cocos2d::CCTransitionProgress * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionProgress = {
  "cocos2d::CCTransitionProgress",
  mrb_no_free_cocos2d_CCTransitionProgress
};

static struct RClass *
_define_class_cocos2d_CCTransitionProgress(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgress") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgress");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionProgress", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionProgress");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionProgress, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionProgressHorizontal(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionProgressHorizontal *obj = static_cast< cocos2d::CCTransitionProgressHorizontal * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionProgressHorizontal = {
  "cocos2d::CCTransitionProgressHorizontal",
  mrb_free_cocos2d_CCTransitionProgressHorizontal
};

static void
mrb_no_free_cocos2d_CCTransitionProgressHorizontal(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionProgressHorizontal *obj = static_cast< cocos2d::CCTransitionProgressHorizontal * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionProgressHorizontal = {
  "cocos2d::CCTransitionProgressHorizontal",
  mrb_no_free_cocos2d_CCTransitionProgressHorizontal
};

static struct RClass *
_define_class_cocos2d_CCTransitionProgressHorizontal(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgressHorizontal") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgressHorizontal");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgress") == 0) {
    _define_class_cocos2d_CCTransitionProgress(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgress");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionProgressHorizontal", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionProgressHorizontal");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionProgressHorizontal, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionProgressInOut(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionProgressInOut *obj = static_cast< cocos2d::CCTransitionProgressInOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionProgressInOut = {
  "cocos2d::CCTransitionProgressInOut",
  mrb_free_cocos2d_CCTransitionProgressInOut
};

static void
mrb_no_free_cocos2d_CCTransitionProgressInOut(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionProgressInOut *obj = static_cast< cocos2d::CCTransitionProgressInOut * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionProgressInOut = {
  "cocos2d::CCTransitionProgressInOut",
  mrb_no_free_cocos2d_CCTransitionProgressInOut
};

static struct RClass *
_define_class_cocos2d_CCTransitionProgressInOut(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgressInOut") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgressInOut");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgress") == 0) {
    _define_class_cocos2d_CCTransitionProgress(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgress");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionProgressInOut", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionProgressInOut");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionProgressInOut, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionProgressOutIn(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionProgressOutIn *obj = static_cast< cocos2d::CCTransitionProgressOutIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionProgressOutIn = {
  "cocos2d::CCTransitionProgressOutIn",
  mrb_free_cocos2d_CCTransitionProgressOutIn
};

static void
mrb_no_free_cocos2d_CCTransitionProgressOutIn(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionProgressOutIn *obj = static_cast< cocos2d::CCTransitionProgressOutIn * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionProgressOutIn = {
  "cocos2d::CCTransitionProgressOutIn",
  mrb_no_free_cocos2d_CCTransitionProgressOutIn
};

static struct RClass *
_define_class_cocos2d_CCTransitionProgressOutIn(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgressOutIn") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgressOutIn");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgress") == 0) {
    _define_class_cocos2d_CCTransitionProgress(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgress");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionProgressOutIn", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionProgressOutIn");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionProgressOutIn, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionProgressRadialCCW(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionProgressRadialCCW *obj = static_cast< cocos2d::CCTransitionProgressRadialCCW * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionProgressRadialCCW = {
  "cocos2d::CCTransitionProgressRadialCCW",
  mrb_free_cocos2d_CCTransitionProgressRadialCCW
};

static void
mrb_no_free_cocos2d_CCTransitionProgressRadialCCW(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionProgressRadialCCW *obj = static_cast< cocos2d::CCTransitionProgressRadialCCW * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionProgressRadialCCW = {
  "cocos2d::CCTransitionProgressRadialCCW",
  mrb_no_free_cocos2d_CCTransitionProgressRadialCCW
};

static struct RClass *
_define_class_cocos2d_CCTransitionProgressRadialCCW(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgressRadialCCW") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgressRadialCCW");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgress") == 0) {
    _define_class_cocos2d_CCTransitionProgress(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgress");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionProgressRadialCCW", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionProgressRadialCCW");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionProgressRadialCCW, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionProgressRadialCW(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionProgressRadialCW *obj = static_cast< cocos2d::CCTransitionProgressRadialCW * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionProgressRadialCW = {
  "cocos2d::CCTransitionProgressRadialCW",
  mrb_free_cocos2d_CCTransitionProgressRadialCW
};

static void
mrb_no_free_cocos2d_CCTransitionProgressRadialCW(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionProgressRadialCW *obj = static_cast< cocos2d::CCTransitionProgressRadialCW * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionProgressRadialCW = {
  "cocos2d::CCTransitionProgressRadialCW",
  mrb_no_free_cocos2d_CCTransitionProgressRadialCW
};

static struct RClass *
_define_class_cocos2d_CCTransitionProgressRadialCW(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgressRadialCW") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgressRadialCW");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgress") == 0) {
    _define_class_cocos2d_CCTransitionProgress(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgress");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionProgressRadialCW", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionProgressRadialCW");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionProgressRadialCW, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionProgressVertical(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionProgressVertical *obj = static_cast< cocos2d::CCTransitionProgressVertical * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionProgressVertical = {
  "cocos2d::CCTransitionProgressVertical",
  mrb_free_cocos2d_CCTransitionProgressVertical
};

static void
mrb_no_free_cocos2d_CCTransitionProgressVertical(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionProgressVertical *obj = static_cast< cocos2d::CCTransitionProgressVertical * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionProgressVertical = {
  "cocos2d::CCTransitionProgressVertical",
  mrb_no_free_cocos2d_CCTransitionProgressVertical
};

static struct RClass *
_define_class_cocos2d_CCTransitionProgressVertical(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgressVertical") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgressVertical");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgress") == 0) {
    _define_class_cocos2d_CCTransitionProgress(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgress");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionProgressVertical", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionProgressVertical");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionProgressVertical, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionRotoZoom(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionRotoZoom *obj = static_cast< cocos2d::CCTransitionRotoZoom * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionRotoZoom = {
  "cocos2d::CCTransitionRotoZoom",
  mrb_free_cocos2d_CCTransitionRotoZoom
};

static void
mrb_no_free_cocos2d_CCTransitionRotoZoom(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionRotoZoom *obj = static_cast< cocos2d::CCTransitionRotoZoom * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionRotoZoom = {
  "cocos2d::CCTransitionRotoZoom",
  mrb_no_free_cocos2d_CCTransitionRotoZoom
};

static struct RClass *
_define_class_cocos2d_CCTransitionRotoZoom(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionRotoZoom") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionRotoZoom");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionRotoZoom", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionRotoZoom");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionRotoZoom, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionScene(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionScene *obj = static_cast< cocos2d::CCTransitionScene * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionScene = {
  "cocos2d::CCTransitionScene",
  mrb_free_cocos2d_CCTransitionScene
};

static void
mrb_no_free_cocos2d_CCTransitionScene(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionScene *obj = static_cast< cocos2d::CCTransitionScene * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionScene = {
  "cocos2d::CCTransitionScene",
  mrb_no_free_cocos2d_CCTransitionScene
};

static struct RClass *
_define_class_cocos2d_CCTransitionScene(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCScene") == 0) {
    _define_class_cocos2d_CCScene(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCScene");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionScene", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionScene");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionScene, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionSceneOriented(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionSceneOriented *obj = static_cast< cocos2d::CCTransitionSceneOriented * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionSceneOriented = {
  "cocos2d::CCTransitionSceneOriented",
  mrb_free_cocos2d_CCTransitionSceneOriented
};

static void
mrb_no_free_cocos2d_CCTransitionSceneOriented(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionSceneOriented *obj = static_cast< cocos2d::CCTransitionSceneOriented * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionSceneOriented = {
  "cocos2d::CCTransitionSceneOriented",
  mrb_no_free_cocos2d_CCTransitionSceneOriented
};

static struct RClass *
_define_class_cocos2d_CCTransitionSceneOriented(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSceneOriented") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSceneOriented");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionSceneOriented", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionSceneOriented");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionSceneOriented, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionShrinkGrow(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionShrinkGrow *obj = static_cast< cocos2d::CCTransitionShrinkGrow * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionShrinkGrow = {
  "cocos2d::CCTransitionShrinkGrow",
  mrb_free_cocos2d_CCTransitionShrinkGrow
};

static void
mrb_no_free_cocos2d_CCTransitionShrinkGrow(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionShrinkGrow *obj = static_cast< cocos2d::CCTransitionShrinkGrow * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionShrinkGrow = {
  "cocos2d::CCTransitionShrinkGrow",
  mrb_no_free_cocos2d_CCTransitionShrinkGrow
};

static struct RClass *
_define_class_cocos2d_CCTransitionShrinkGrow(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionShrinkGrow") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionShrinkGrow");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionShrinkGrow", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionShrinkGrow");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionShrinkGrow, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionSlideInB(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionSlideInB *obj = static_cast< cocos2d::CCTransitionSlideInB * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionSlideInB = {
  "cocos2d::CCTransitionSlideInB",
  mrb_free_cocos2d_CCTransitionSlideInB
};

static void
mrb_no_free_cocos2d_CCTransitionSlideInB(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionSlideInB *obj = static_cast< cocos2d::CCTransitionSlideInB * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionSlideInB = {
  "cocos2d::CCTransitionSlideInB",
  mrb_no_free_cocos2d_CCTransitionSlideInB
};

static struct RClass *
_define_class_cocos2d_CCTransitionSlideInB(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSlideInB") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSlideInB");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSlideInL") == 0) {
    _define_class_cocos2d_CCTransitionSlideInL(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSlideInL");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionSlideInB", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionSlideInB");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionSlideInB, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionSlideInL(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionSlideInL *obj = static_cast< cocos2d::CCTransitionSlideInL * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionSlideInL = {
  "cocos2d::CCTransitionSlideInL",
  mrb_free_cocos2d_CCTransitionSlideInL
};

static void
mrb_no_free_cocos2d_CCTransitionSlideInL(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionSlideInL *obj = static_cast< cocos2d::CCTransitionSlideInL * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionSlideInL = {
  "cocos2d::CCTransitionSlideInL",
  mrb_no_free_cocos2d_CCTransitionSlideInL
};

static struct RClass *
_define_class_cocos2d_CCTransitionSlideInL(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSlideInL") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSlideInL");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionSlideInL", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionSlideInL");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionSlideInL, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionSlideInR(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionSlideInR *obj = static_cast< cocos2d::CCTransitionSlideInR * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionSlideInR = {
  "cocos2d::CCTransitionSlideInR",
  mrb_free_cocos2d_CCTransitionSlideInR
};

static void
mrb_no_free_cocos2d_CCTransitionSlideInR(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionSlideInR *obj = static_cast< cocos2d::CCTransitionSlideInR * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionSlideInR = {
  "cocos2d::CCTransitionSlideInR",
  mrb_no_free_cocos2d_CCTransitionSlideInR
};

static struct RClass *
_define_class_cocos2d_CCTransitionSlideInR(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSlideInR") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSlideInR");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSlideInL") == 0) {
    _define_class_cocos2d_CCTransitionSlideInL(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSlideInL");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionSlideInR", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionSlideInR");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionSlideInR, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionSlideInT(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionSlideInT *obj = static_cast< cocos2d::CCTransitionSlideInT * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionSlideInT = {
  "cocos2d::CCTransitionSlideInT",
  mrb_free_cocos2d_CCTransitionSlideInT
};

static void
mrb_no_free_cocos2d_CCTransitionSlideInT(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionSlideInT *obj = static_cast< cocos2d::CCTransitionSlideInT * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionSlideInT = {
  "cocos2d::CCTransitionSlideInT",
  mrb_no_free_cocos2d_CCTransitionSlideInT
};

static struct RClass *
_define_class_cocos2d_CCTransitionSlideInT(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSlideInT") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSlideInT");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSlideInL") == 0) {
    _define_class_cocos2d_CCTransitionSlideInL(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSlideInL");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionSlideInT", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionSlideInT");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionSlideInT, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionSplitCols(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionSplitCols *obj = static_cast< cocos2d::CCTransitionSplitCols * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionSplitCols = {
  "cocos2d::CCTransitionSplitCols",
  mrb_free_cocos2d_CCTransitionSplitCols
};

static void
mrb_no_free_cocos2d_CCTransitionSplitCols(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionSplitCols *obj = static_cast< cocos2d::CCTransitionSplitCols * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionSplitCols = {
  "cocos2d::CCTransitionSplitCols",
  mrb_no_free_cocos2d_CCTransitionSplitCols
};

static struct RClass *
_define_class_cocos2d_CCTransitionSplitCols(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSplitCols") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSplitCols");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionSplitCols", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionSplitCols");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionSplitCols, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionSplitRows(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionSplitRows *obj = static_cast< cocos2d::CCTransitionSplitRows * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionSplitRows = {
  "cocos2d::CCTransitionSplitRows",
  mrb_free_cocos2d_CCTransitionSplitRows
};

static void
mrb_no_free_cocos2d_CCTransitionSplitRows(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionSplitRows *obj = static_cast< cocos2d::CCTransitionSplitRows * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionSplitRows = {
  "cocos2d::CCTransitionSplitRows",
  mrb_no_free_cocos2d_CCTransitionSplitRows
};

static struct RClass *
_define_class_cocos2d_CCTransitionSplitRows(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSplitRows") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSplitRows");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSplitCols") == 0) {
    _define_class_cocos2d_CCTransitionSplitCols(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSplitCols");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionSplitRows", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionSplitRows");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionSplitRows, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionTurnOffTiles(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionTurnOffTiles *obj = static_cast< cocos2d::CCTransitionTurnOffTiles * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionTurnOffTiles = {
  "cocos2d::CCTransitionTurnOffTiles",
  mrb_free_cocos2d_CCTransitionTurnOffTiles
};

static void
mrb_no_free_cocos2d_CCTransitionTurnOffTiles(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionTurnOffTiles *obj = static_cast< cocos2d::CCTransitionTurnOffTiles * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionTurnOffTiles = {
  "cocos2d::CCTransitionTurnOffTiles",
  mrb_no_free_cocos2d_CCTransitionTurnOffTiles
};

static struct RClass *
_define_class_cocos2d_CCTransitionTurnOffTiles(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionTurnOffTiles") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionTurnOffTiles");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionTurnOffTiles", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionTurnOffTiles");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionTurnOffTiles, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionZoomFlipAngular(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionZoomFlipAngular *obj = static_cast< cocos2d::CCTransitionZoomFlipAngular * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionZoomFlipAngular = {
  "cocos2d::CCTransitionZoomFlipAngular",
  mrb_free_cocos2d_CCTransitionZoomFlipAngular
};

static void
mrb_no_free_cocos2d_CCTransitionZoomFlipAngular(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionZoomFlipAngular *obj = static_cast< cocos2d::CCTransitionZoomFlipAngular * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionZoomFlipAngular = {
  "cocos2d::CCTransitionZoomFlipAngular",
  mrb_no_free_cocos2d_CCTransitionZoomFlipAngular
};

static struct RClass *
_define_class_cocos2d_CCTransitionZoomFlipAngular(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionZoomFlipAngular") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionZoomFlipAngular");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSceneOriented") == 0) {
    _define_class_cocos2d_CCTransitionSceneOriented(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSceneOriented");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionZoomFlipAngular", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionZoomFlipAngular");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionZoomFlipAngular, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionZoomFlipX(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionZoomFlipX *obj = static_cast< cocos2d::CCTransitionZoomFlipX * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionZoomFlipX = {
  "cocos2d::CCTransitionZoomFlipX",
  mrb_free_cocos2d_CCTransitionZoomFlipX
};

static void
mrb_no_free_cocos2d_CCTransitionZoomFlipX(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionZoomFlipX *obj = static_cast< cocos2d::CCTransitionZoomFlipX * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionZoomFlipX = {
  "cocos2d::CCTransitionZoomFlipX",
  mrb_no_free_cocos2d_CCTransitionZoomFlipX
};

static struct RClass *
_define_class_cocos2d_CCTransitionZoomFlipX(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionZoomFlipX") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionZoomFlipX");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSceneOriented") == 0) {
    _define_class_cocos2d_CCTransitionSceneOriented(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSceneOriented");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionZoomFlipX", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionZoomFlipX");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionZoomFlipX, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTransitionZoomFlipY(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTransitionZoomFlipY *obj = static_cast< cocos2d::CCTransitionZoomFlipY * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTransitionZoomFlipY = {
  "cocos2d::CCTransitionZoomFlipY",
  mrb_free_cocos2d_CCTransitionZoomFlipY
};

static void
mrb_no_free_cocos2d_CCTransitionZoomFlipY(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTransitionZoomFlipY *obj = static_cast< cocos2d::CCTransitionZoomFlipY * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTransitionZoomFlipY = {
  "cocos2d::CCTransitionZoomFlipY",
  mrb_no_free_cocos2d_CCTransitionZoomFlipY
};

static struct RClass *
_define_class_cocos2d_CCTransitionZoomFlipY(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionZoomFlipY") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTransitionZoomFlipY");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSceneOriented") == 0) {
    _define_class_cocos2d_CCTransitionSceneOriented(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSceneOriented");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTransitionZoomFlipY", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTransitionZoomFlipY");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTransitionZoomFlipY, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTurnOffTiles(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTurnOffTiles *obj = static_cast< cocos2d::CCTurnOffTiles * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTurnOffTiles = {
  "cocos2d::CCTurnOffTiles",
  mrb_free_cocos2d_CCTurnOffTiles
};

static void
mrb_no_free_cocos2d_CCTurnOffTiles(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTurnOffTiles *obj = static_cast< cocos2d::CCTurnOffTiles * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTurnOffTiles = {
  "cocos2d::CCTurnOffTiles",
  mrb_no_free_cocos2d_CCTurnOffTiles
};

static struct RClass *
_define_class_cocos2d_CCTurnOffTiles(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTurnOffTiles") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTurnOffTiles");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTurnOffTiles", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTurnOffTiles");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTurnOffTiles, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCTwirl(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCTwirl *obj = static_cast< cocos2d::CCTwirl * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCTwirl = {
  "cocos2d::CCTwirl",
  mrb_free_cocos2d_CCTwirl
};

static void
mrb_no_free_cocos2d_CCTwirl(mrb_state *mrb, void *ptr)
{
  cocos2d::CCTwirl *obj = static_cast< cocos2d::CCTwirl * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCTwirl = {
  "cocos2d::CCTwirl",
  mrb_no_free_cocos2d_CCTwirl
};

static struct RClass *
_define_class_cocos2d_CCTwirl(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTwirl") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCTwirl");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCTwirl", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCTwirl");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCTwirl, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCUserDefault(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCUserDefault * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCUserDefault = {
  "cocos2d::CCUserDefault",
  mrb_free_cocos2d_CCUserDefault
};

static void
mrb_no_free_cocos2d_CCUserDefault(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCUserDefault = {
  "cocos2d::CCUserDefault",
  mrb_no_free_cocos2d_CCUserDefault
};

static struct RClass *
_define_class_cocos2d_CCUserDefault(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCUserDefault") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCUserDefault");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCUserDefault", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCUserDefault");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCUserDefault, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCWaves(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCWaves *obj = static_cast< cocos2d::CCWaves * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCWaves = {
  "cocos2d::CCWaves",
  mrb_free_cocos2d_CCWaves
};

static void
mrb_no_free_cocos2d_CCWaves(mrb_state *mrb, void *ptr)
{
  cocos2d::CCWaves *obj = static_cast< cocos2d::CCWaves * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCWaves = {
  "cocos2d::CCWaves",
  mrb_no_free_cocos2d_CCWaves
};

static struct RClass *
_define_class_cocos2d_CCWaves(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCWaves") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCWaves");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCWaves", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCWaves");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCWaves, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCWaves3D(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCWaves3D *obj = static_cast< cocos2d::CCWaves3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCWaves3D = {
  "cocos2d::CCWaves3D",
  mrb_free_cocos2d_CCWaves3D
};

static void
mrb_no_free_cocos2d_CCWaves3D(mrb_state *mrb, void *ptr)
{
  cocos2d::CCWaves3D *obj = static_cast< cocos2d::CCWaves3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCWaves3D = {
  "cocos2d::CCWaves3D",
  mrb_no_free_cocos2d_CCWaves3D
};

static struct RClass *
_define_class_cocos2d_CCWaves3D(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCWaves3D") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCWaves3D");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCWaves3D", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCWaves3D");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCWaves3D, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCWavesTiles3D(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  cocos2d::CCWavesTiles3D *obj = static_cast< cocos2d::CCWavesTiles3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
  obj->release();
}

struct mrb_data_type mrb_type_cocos2d_CCWavesTiles3D = {
  "cocos2d::CCWavesTiles3D",
  mrb_free_cocos2d_CCWavesTiles3D
};

static void
mrb_no_free_cocos2d_CCWavesTiles3D(mrb_state *mrb, void *ptr)
{
  cocos2d::CCWavesTiles3D *obj = static_cast< cocos2d::CCWavesTiles3D * >(ptr);
  cc_mrb_live_value_remove(mrb, obj);
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCWavesTiles3D = {
  "cocos2d::CCWavesTiles3D",
  mrb_no_free_cocos2d_CCWavesTiles3D
};

static struct RClass *
_define_class_cocos2d_CCWavesTiles3D(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCWavesTiles3D") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCWavesTiles3D");
  }
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
  struct RClass *base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction");
  assert(base_rc);
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCWavesTiles3D", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCWavesTiles3D");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCWavesTiles3D, rc);
  return rc;
}

static void
mrb_free_cocos2d_CCZone(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::CCZone * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_CCZone = {
  "cocos2d::CCZone",
  mrb_free_cocos2d_CCZone
};

static void
mrb_no_free_cocos2d_CCZone(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_CCZone = {
  "cocos2d::CCZone",
  mrb_no_free_cocos2d_CCZone
};

static struct RClass *
_define_class_cocos2d_CCZone(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCZone") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CCZone");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CCZone", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CCZone");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::CCZone, rc);
  return rc;
}

static void
mrb_free_cocos2d_EGLTouchDelegate(mrb_state *mrb, void *ptr)
{
  static_cast< cocos2d::CCObject * >(ptr)->release();
}

struct mrb_data_type mrb_type_cocos2d_EGLTouchDelegate = {
  "cocos2d::EGLTouchDelegate",
  mrb_free_cocos2d_EGLTouchDelegate
};

static struct RClass *
_define_class_cocos2d_EGLTouchDelegate(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::EGLTouchDelegate") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::EGLTouchDelegate");
  }

  struct RClass *rc = NULL;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  rc = mrb_define_module_under(mrb, outer, "EGLTouchDelegate");
  assert(rc);
  cc_mrb_class_register(mrb, rc, "Cocos2d::EGLTouchDelegate");
  return rc;
}

static void
mrb_free_cocos2d__BMFontDef(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_BMFontDef * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__BMFontDef = {
  "cocos2d::_BMFontDef",
  mrb_free_cocos2d__BMFontDef
};

static void
mrb_no_free_cocos2d__BMFontDef(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__BMFontDef = {
  "cocos2d::_BMFontDef",
  mrb_no_free_cocos2d__BMFontDef
};

static struct RClass *
_define_class_cocos2d__BMFontDef(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_BMFontDef") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_BMFontDef");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_BMFontDef -> CC_BMFontDef\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_BMFontDef", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_BMFontDef");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_BMFontDef, rc);
  return rc;
}

static void
mrb_free_cocos2d__BMFontPadding(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_BMFontPadding * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__BMFontPadding = {
  "cocos2d::_BMFontPadding",
  mrb_free_cocos2d__BMFontPadding
};

static void
mrb_no_free_cocos2d__BMFontPadding(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__BMFontPadding = {
  "cocos2d::_BMFontPadding",
  mrb_no_free_cocos2d__BMFontPadding
};

static struct RClass *
_define_class_cocos2d__BMFontPadding(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_BMFontPadding") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_BMFontPadding");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_BMFontPadding -> CC_BMFontPadding\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_BMFontPadding", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_BMFontPadding");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_BMFontPadding, rc);
  return rc;
}

static void
mrb_free_cocos2d__FontDefHashElement(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_FontDefHashElement * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__FontDefHashElement = {
  "cocos2d::_FontDefHashElement",
  mrb_free_cocos2d__FontDefHashElement
};

static void
mrb_no_free_cocos2d__FontDefHashElement(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__FontDefHashElement = {
  "cocos2d::_FontDefHashElement",
  mrb_no_free_cocos2d__FontDefHashElement
};

static struct RClass *
_define_class_cocos2d__FontDefHashElement(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_FontDefHashElement") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_FontDefHashElement");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_FontDefHashElement -> CC_FontDefHashElement\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_FontDefHashElement", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_FontDefHashElement");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_FontDefHashElement, rc);
  return rc;
}

static void
mrb_free_cocos2d__KerningHashElement(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_KerningHashElement * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__KerningHashElement = {
  "cocos2d::_KerningHashElement",
  mrb_free_cocos2d__KerningHashElement
};

static void
mrb_no_free_cocos2d__KerningHashElement(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__KerningHashElement = {
  "cocos2d::_KerningHashElement",
  mrb_no_free_cocos2d__KerningHashElement
};

static struct RClass *
_define_class_cocos2d__KerningHashElement(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_KerningHashElement") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_KerningHashElement");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_KerningHashElement -> CC_KerningHashElement\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_KerningHashElement", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_KerningHashElement");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_KerningHashElement, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccArray(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccArray * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccArray = {
  "cocos2d::_ccArray",
  mrb_free_cocos2d__ccArray
};

static void
mrb_no_free_cocos2d__ccArray(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccArray = {
  "cocos2d::_ccArray",
  mrb_no_free_cocos2d__ccArray
};

static struct RClass *
_define_class_cocos2d__ccArray(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccArray") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccArray");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccArray -> CC_ccArray\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccArray", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccArray");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccArray, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccBezierConfig(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccBezierConfig * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccBezierConfig = {
  "cocos2d::_ccBezierConfig",
  mrb_free_cocos2d__ccBezierConfig
};

static void
mrb_no_free_cocos2d__ccBezierConfig(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccBezierConfig = {
  "cocos2d::_ccBezierConfig",
  mrb_no_free_cocos2d__ccBezierConfig
};

static struct RClass *
_define_class_cocos2d__ccBezierConfig(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccBezierConfig") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccBezierConfig");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccBezierConfig -> CC_ccBezierConfig\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccBezierConfig", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccBezierConfig");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccBezierConfig, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccBlendFunc(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccBlendFunc * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccBlendFunc = {
  "cocos2d::_ccBlendFunc",
  mrb_free_cocos2d__ccBlendFunc
};

static void
mrb_no_free_cocos2d__ccBlendFunc(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccBlendFunc = {
  "cocos2d::_ccBlendFunc",
  mrb_no_free_cocos2d__ccBlendFunc
};

static struct RClass *
_define_class_cocos2d__ccBlendFunc(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccBlendFunc") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccBlendFunc");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccBlendFunc -> CC_ccBlendFunc\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccBlendFunc", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccBlendFunc");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccBlendFunc, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccCArray(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccCArray * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccCArray = {
  "cocos2d::_ccCArray",
  mrb_free_cocos2d__ccCArray
};

static void
mrb_no_free_cocos2d__ccCArray(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccCArray = {
  "cocos2d::_ccCArray",
  mrb_no_free_cocos2d__ccCArray
};

static struct RClass *
_define_class_cocos2d__ccCArray(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccCArray") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccCArray");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccCArray -> CC_ccCArray\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccCArray", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccCArray");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccCArray, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccColor3B(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccColor3B * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccColor3B = {
  "cocos2d::_ccColor3B",
  mrb_free_cocos2d__ccColor3B
};

static void
mrb_no_free_cocos2d__ccColor3B(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccColor3B = {
  "cocos2d::_ccColor3B",
  mrb_no_free_cocos2d__ccColor3B
};

static struct RClass *
_define_class_cocos2d__ccColor3B(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccColor3B") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccColor3B -> CC_ccColor3B\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccColor3B", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccColor3B");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccColor3B, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccColor4B(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccColor4B * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccColor4B = {
  "cocos2d::_ccColor4B",
  mrb_free_cocos2d__ccColor4B
};

static void
mrb_no_free_cocos2d__ccColor4B(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccColor4B = {
  "cocos2d::_ccColor4B",
  mrb_no_free_cocos2d__ccColor4B
};

static struct RClass *
_define_class_cocos2d__ccColor4B(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccColor4B") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4B");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccColor4B -> CC_ccColor4B\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccColor4B", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccColor4B");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccColor4B, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccColor4F(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccColor4F * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccColor4F = {
  "cocos2d::_ccColor4F",
  mrb_free_cocos2d__ccColor4F
};

static void
mrb_no_free_cocos2d__ccColor4F(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccColor4F = {
  "cocos2d::_ccColor4F",
  mrb_no_free_cocos2d__ccColor4F
};

static struct RClass *
_define_class_cocos2d__ccColor4F(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccColor4F") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4F");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccColor4F -> CC_ccColor4F\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccColor4F", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccColor4F");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccColor4F, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccFontDefinition(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccFontDefinition * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccFontDefinition = {
  "cocos2d::_ccFontDefinition",
  mrb_free_cocos2d__ccFontDefinition
};

static void
mrb_no_free_cocos2d__ccFontDefinition(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccFontDefinition = {
  "cocos2d::_ccFontDefinition",
  mrb_no_free_cocos2d__ccFontDefinition
};

static struct RClass *
_define_class_cocos2d__ccFontDefinition(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccFontDefinition") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccFontDefinition");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccFontDefinition -> CC_ccFontDefinition\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccFontDefinition", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccFontDefinition");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccFontDefinition, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccFontShadow(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccFontShadow * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccFontShadow = {
  "cocos2d::_ccFontShadow",
  mrb_free_cocos2d__ccFontShadow
};

static void
mrb_no_free_cocos2d__ccFontShadow(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccFontShadow = {
  "cocos2d::_ccFontShadow",
  mrb_no_free_cocos2d__ccFontShadow
};

static struct RClass *
_define_class_cocos2d__ccFontShadow(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccFontShadow") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccFontShadow");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccFontShadow -> CC_ccFontShadow\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccFontShadow", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccFontShadow");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccFontShadow, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccFontStroke(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccFontStroke * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccFontStroke = {
  "cocos2d::_ccFontStroke",
  mrb_free_cocos2d__ccFontStroke
};

static void
mrb_no_free_cocos2d__ccFontStroke(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccFontStroke = {
  "cocos2d::_ccFontStroke",
  mrb_no_free_cocos2d__ccFontStroke
};

static struct RClass *
_define_class_cocos2d__ccFontStroke(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccFontStroke") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccFontStroke");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccFontStroke -> CC_ccFontStroke\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccFontStroke", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccFontStroke");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccFontStroke, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccPVRTexturePixelFormatInfo(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccPVRTexturePixelFormatInfo * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccPVRTexturePixelFormatInfo = {
  "cocos2d::_ccPVRTexturePixelFormatInfo",
  mrb_free_cocos2d__ccPVRTexturePixelFormatInfo
};

static void
mrb_no_free_cocos2d__ccPVRTexturePixelFormatInfo(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccPVRTexturePixelFormatInfo = {
  "cocos2d::_ccPVRTexturePixelFormatInfo",
  mrb_no_free_cocos2d__ccPVRTexturePixelFormatInfo
};

static struct RClass *
_define_class_cocos2d__ccPVRTexturePixelFormatInfo(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccPVRTexturePixelFormatInfo") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccPVRTexturePixelFormatInfo");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccPVRTexturePixelFormatInfo -> CC_ccPVRTexturePixelFormatInfo\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccPVRTexturePixelFormatInfo", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccPVRTexturePixelFormatInfo");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccPVRTexturePixelFormatInfo, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccPointSprite(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccPointSprite * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccPointSprite = {
  "cocos2d::_ccPointSprite",
  mrb_free_cocos2d__ccPointSprite
};

static void
mrb_no_free_cocos2d__ccPointSprite(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccPointSprite = {
  "cocos2d::_ccPointSprite",
  mrb_no_free_cocos2d__ccPointSprite
};

static struct RClass *
_define_class_cocos2d__ccPointSprite(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccPointSprite") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccPointSprite");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccPointSprite -> CC_ccPointSprite\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccPointSprite", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccPointSprite");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccPointSprite, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccQuad2(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccQuad2 * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccQuad2 = {
  "cocos2d::_ccQuad2",
  mrb_free_cocos2d__ccQuad2
};

static void
mrb_no_free_cocos2d__ccQuad2(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccQuad2 = {
  "cocos2d::_ccQuad2",
  mrb_no_free_cocos2d__ccQuad2
};

static struct RClass *
_define_class_cocos2d__ccQuad2(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccQuad2") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccQuad2");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccQuad2 -> CC_ccQuad2\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccQuad2", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccQuad2");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccQuad2, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccQuad3(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccQuad3 * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccQuad3 = {
  "cocos2d::_ccQuad3",
  mrb_free_cocos2d__ccQuad3
};

static void
mrb_no_free_cocos2d__ccQuad3(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccQuad3 = {
  "cocos2d::_ccQuad3",
  mrb_no_free_cocos2d__ccQuad3
};

static struct RClass *
_define_class_cocos2d__ccQuad3(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccQuad3") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccQuad3");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccQuad3 -> CC_ccQuad3\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccQuad3", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccQuad3");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccQuad3, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccT2F_Quad(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccT2F_Quad * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccT2F_Quad = {
  "cocos2d::_ccT2F_Quad",
  mrb_free_cocos2d__ccT2F_Quad
};

static void
mrb_no_free_cocos2d__ccT2F_Quad(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccT2F_Quad = {
  "cocos2d::_ccT2F_Quad",
  mrb_no_free_cocos2d__ccT2F_Quad
};

static struct RClass *
_define_class_cocos2d__ccT2F_Quad(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccT2F_Quad") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccT2F_Quad");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccT2F_Quad -> CC_ccT2F_Quad\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccT2F_Quad", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccT2F_Quad");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccT2F_Quad, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccTex2F(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccTex2F * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccTex2F = {
  "cocos2d::_ccTex2F",
  mrb_free_cocos2d__ccTex2F
};

static void
mrb_no_free_cocos2d__ccTex2F(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccTex2F = {
  "cocos2d::_ccTex2F",
  mrb_no_free_cocos2d__ccTex2F
};

static struct RClass *
_define_class_cocos2d__ccTex2F(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccTex2F") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccTex2F");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccTex2F -> CC_ccTex2F\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccTex2F", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccTex2F");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccTex2F, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccTexParams(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccTexParams * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccTexParams = {
  "cocos2d::_ccTexParams",
  mrb_free_cocos2d__ccTexParams
};

static void
mrb_no_free_cocos2d__ccTexParams(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccTexParams = {
  "cocos2d::_ccTexParams",
  mrb_no_free_cocos2d__ccTexParams
};

static struct RClass *
_define_class_cocos2d__ccTexParams(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccTexParams") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccTexParams");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccTexParams -> CC_ccTexParams\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccTexParams", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccTexParams");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccTexParams, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccV2F_C4B_T2F(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccV2F_C4B_T2F * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccV2F_C4B_T2F = {
  "cocos2d::_ccV2F_C4B_T2F",
  mrb_free_cocos2d__ccV2F_C4B_T2F
};

static void
mrb_no_free_cocos2d__ccV2F_C4B_T2F(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccV2F_C4B_T2F = {
  "cocos2d::_ccV2F_C4B_T2F",
  mrb_no_free_cocos2d__ccV2F_C4B_T2F
};

static struct RClass *
_define_class_cocos2d__ccV2F_C4B_T2F(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccV2F_C4B_T2F") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4B_T2F");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccV2F_C4B_T2F -> CC_ccV2F_C4B_T2F\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccV2F_C4B_T2F", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccV2F_C4B_T2F");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccV2F_C4B_T2F, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccV2F_C4B_T2F_Quad(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccV2F_C4B_T2F_Quad * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccV2F_C4B_T2F_Quad = {
  "cocos2d::_ccV2F_C4B_T2F_Quad",
  mrb_free_cocos2d__ccV2F_C4B_T2F_Quad
};

static void
mrb_no_free_cocos2d__ccV2F_C4B_T2F_Quad(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccV2F_C4B_T2F_Quad = {
  "cocos2d::_ccV2F_C4B_T2F_Quad",
  mrb_no_free_cocos2d__ccV2F_C4B_T2F_Quad
};

static struct RClass *
_define_class_cocos2d__ccV2F_C4B_T2F_Quad(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccV2F_C4B_T2F_Quad") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4B_T2F_Quad");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccV2F_C4B_T2F_Quad -> CC_ccV2F_C4B_T2F_Quad\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccV2F_C4B_T2F_Quad", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccV2F_C4B_T2F_Quad");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccV2F_C4B_T2F_Quad, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccV2F_C4B_T2F_Triangle(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccV2F_C4B_T2F_Triangle * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccV2F_C4B_T2F_Triangle = {
  "cocos2d::_ccV2F_C4B_T2F_Triangle",
  mrb_free_cocos2d__ccV2F_C4B_T2F_Triangle
};

static void
mrb_no_free_cocos2d__ccV2F_C4B_T2F_Triangle(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccV2F_C4B_T2F_Triangle = {
  "cocos2d::_ccV2F_C4B_T2F_Triangle",
  mrb_no_free_cocos2d__ccV2F_C4B_T2F_Triangle
};

static struct RClass *
_define_class_cocos2d__ccV2F_C4B_T2F_Triangle(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccV2F_C4B_T2F_Triangle") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4B_T2F_Triangle");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccV2F_C4B_T2F_Triangle -> CC_ccV2F_C4B_T2F_Triangle\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccV2F_C4B_T2F_Triangle", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccV2F_C4B_T2F_Triangle");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccV2F_C4B_T2F_Triangle, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccV2F_C4F_T2F(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccV2F_C4F_T2F * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccV2F_C4F_T2F = {
  "cocos2d::_ccV2F_C4F_T2F",
  mrb_free_cocos2d__ccV2F_C4F_T2F
};

static void
mrb_no_free_cocos2d__ccV2F_C4F_T2F(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccV2F_C4F_T2F = {
  "cocos2d::_ccV2F_C4F_T2F",
  mrb_no_free_cocos2d__ccV2F_C4F_T2F
};

static struct RClass *
_define_class_cocos2d__ccV2F_C4F_T2F(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccV2F_C4F_T2F") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4F_T2F");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccV2F_C4F_T2F -> CC_ccV2F_C4F_T2F\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccV2F_C4F_T2F", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccV2F_C4F_T2F");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccV2F_C4F_T2F, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccV2F_C4F_T2F_Quad(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccV2F_C4F_T2F_Quad * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccV2F_C4F_T2F_Quad = {
  "cocos2d::_ccV2F_C4F_T2F_Quad",
  mrb_free_cocos2d__ccV2F_C4F_T2F_Quad
};

static void
mrb_no_free_cocos2d__ccV2F_C4F_T2F_Quad(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccV2F_C4F_T2F_Quad = {
  "cocos2d::_ccV2F_C4F_T2F_Quad",
  mrb_no_free_cocos2d__ccV2F_C4F_T2F_Quad
};

static struct RClass *
_define_class_cocos2d__ccV2F_C4F_T2F_Quad(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccV2F_C4F_T2F_Quad") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4F_T2F_Quad");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccV2F_C4F_T2F_Quad -> CC_ccV2F_C4F_T2F_Quad\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccV2F_C4F_T2F_Quad", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccV2F_C4F_T2F_Quad");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccV2F_C4F_T2F_Quad, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccV3F_C4B_T2F(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccV3F_C4B_T2F * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccV3F_C4B_T2F = {
  "cocos2d::_ccV3F_C4B_T2F",
  mrb_free_cocos2d__ccV3F_C4B_T2F
};

static void
mrb_no_free_cocos2d__ccV3F_C4B_T2F(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccV3F_C4B_T2F = {
  "cocos2d::_ccV3F_C4B_T2F",
  mrb_no_free_cocos2d__ccV3F_C4B_T2F
};

static struct RClass *
_define_class_cocos2d__ccV3F_C4B_T2F(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccV3F_C4B_T2F") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccV3F_C4B_T2F");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccV3F_C4B_T2F -> CC_ccV3F_C4B_T2F\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccV3F_C4B_T2F", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccV3F_C4B_T2F");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccV3F_C4B_T2F, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccV3F_C4B_T2F_Quad(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccV3F_C4B_T2F_Quad * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccV3F_C4B_T2F_Quad = {
  "cocos2d::_ccV3F_C4B_T2F_Quad",
  mrb_free_cocos2d__ccV3F_C4B_T2F_Quad
};

static void
mrb_no_free_cocos2d__ccV3F_C4B_T2F_Quad(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccV3F_C4B_T2F_Quad = {
  "cocos2d::_ccV3F_C4B_T2F_Quad",
  mrb_no_free_cocos2d__ccV3F_C4B_T2F_Quad
};

static struct RClass *
_define_class_cocos2d__ccV3F_C4B_T2F_Quad(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccV3F_C4B_T2F_Quad") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccV3F_C4B_T2F_Quad");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccV3F_C4B_T2F_Quad -> CC_ccV3F_C4B_T2F_Quad\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccV3F_C4B_T2F_Quad", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccV3F_C4B_T2F_Quad");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccV3F_C4B_T2F_Quad, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccVertex2F(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccVertex2F * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccVertex2F = {
  "cocos2d::_ccVertex2F",
  mrb_free_cocos2d__ccVertex2F
};

static void
mrb_no_free_cocos2d__ccVertex2F(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccVertex2F = {
  "cocos2d::_ccVertex2F",
  mrb_no_free_cocos2d__ccVertex2F
};

static struct RClass *
_define_class_cocos2d__ccVertex2F(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccVertex2F") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex2F");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccVertex2F -> CC_ccVertex2F\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccVertex2F", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccVertex2F");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccVertex2F, rc);
  return rc;
}

static void
mrb_free_cocos2d__ccVertex3F(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::_ccVertex3F * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d__ccVertex3F = {
  "cocos2d::_ccVertex3F",
  mrb_free_cocos2d__ccVertex3F
};

static void
mrb_no_free_cocos2d__ccVertex3F(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d__ccVertex3F = {
  "cocos2d::_ccVertex3F",
  mrb_no_free_cocos2d__ccVertex3F
};

static struct RClass *
_define_class_cocos2d__ccVertex3F(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::CC_ccVertex3F") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex3F");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("_ccVertex3F -> CC_ccVertex3F\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "CC_ccVertex3F", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::CC_ccVertex3F");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::_ccVertex3F, rc);
  return rc;
}

static void
mrb_free_cocos2d_ccAnimationFrameData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::ccAnimationFrameData * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_ccAnimationFrameData = {
  "cocos2d::ccAnimationFrameData",
  mrb_free_cocos2d_ccAnimationFrameData
};

static void
mrb_no_free_cocos2d_ccAnimationFrameData(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_ccAnimationFrameData = {
  "cocos2d::ccAnimationFrameData",
  mrb_no_free_cocos2d_ccAnimationFrameData
};

static struct RClass *
_define_class_cocos2d_ccAnimationFrameData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::ccAnimationFrameData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::ccAnimationFrameData");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "ccAnimationFrameData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::ccAnimationFrameData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::ccAnimationFrameData, rc);
  return rc;
}

static void
mrb_free_cocos2d_ccTouchHandlerHelperData(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::ccTouchHandlerHelperData * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_ccTouchHandlerHelperData = {
  "cocos2d::ccTouchHandlerHelperData",
  mrb_free_cocos2d_ccTouchHandlerHelperData
};

static void
mrb_no_free_cocos2d_ccTouchHandlerHelperData(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_ccTouchHandlerHelperData = {
  "cocos2d::ccTouchHandlerHelperData",
  mrb_no_free_cocos2d_ccTouchHandlerHelperData
};

static struct RClass *
_define_class_cocos2d_ccTouchHandlerHelperData(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::ccTouchHandlerHelperData") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::ccTouchHandlerHelperData");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "ccTouchHandlerHelperData", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::ccTouchHandlerHelperData");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::ccTouchHandlerHelperData, rc);
  return rc;
}

static void
mrb_free_cocos2d_cc_timeval(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::cc_timeval * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_cc_timeval = {
  "cocos2d::cc_timeval",
  mrb_free_cocos2d_cc_timeval
};

static void
mrb_no_free_cocos2d_cc_timeval(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_cc_timeval = {
  "cocos2d::cc_timeval",
  mrb_no_free_cocos2d_cc_timeval
};

static struct RClass *
_define_class_cocos2d_cc_timeval(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::cc_timeval") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::cc_timeval");
  }
  struct RClass *base_rc = mrb->object_class;
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "cc_timeval", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::cc_timeval");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::cc_timeval, rc);
  return rc;
}

static void
mrb_free_cocos2d_sCCParticle(mrb_state *mrb, void *ptr)
{
  if (!ptr) {
    CCLog("%s:NULL!", __FUNCTION__);
    return;
  }
  delete static_cast< cocos2d::sCCParticle * >(ptr);
}

struct mrb_data_type mrb_type_cocos2d_sCCParticle = {
  "cocos2d::sCCParticle",
  mrb_free_cocos2d_sCCParticle
};

static void
mrb_no_free_cocos2d_sCCParticle(mrb_state *mrb, void *ptr)
{
  /* do not free! */
}

struct mrb_data_type mrb_no_free_type_cocos2d_sCCParticle = {
  "cocos2d::sCCParticle",
  mrb_no_free_cocos2d_sCCParticle
};

static struct RClass *
_define_class_cocos2d_sCCParticle(mrb_state *mrb)
{
  if (cc_mrb_class_defined(mrb, "Cocos2d::SCCParticle") != 0) {
    return cc_mrb_class_get(mrb, "Cocos2d::SCCParticle");
  }
  struct RClass *base_rc = mrb->object_class;
  /* XXX: First letter should be uppercase in class names. */
  printf("sCCParticle -> SCCParticle\n");
  struct RClass *outer = cc_mrb_class_get(mrb, "Cocos2d");
  assert(outer);
  struct RClass *rc = mrb_define_class_under(mrb, outer, "SCCParticle", base_rc);
  assert(rc);
  MRB_SET_INSTANCE_TT(rc, MRB_TT_DATA);
  cc_mrb_class_register(mrb, rc, "Cocos2d::SCCParticle");
  CC_MRB_CXX_CLASS_MRB_CLASS_MAP_REGISTER(mrb, cocos2d::sCCParticle, rc);
  return rc;
}

static mrb_value
mrb_UT_hash_bucket__get_count(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_bucket *obj_self = static_cast< UT_hash_bucket * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->count;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_UT_hash_bucket__set_count(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int count;
  if (1 == mrb_get_args(mrb, "i", &count)) {
    UT_hash_bucket *obj_self = static_cast< UT_hash_bucket * >(DATA_PTR(mrb_self));
    
    obj_self->count = count;
    return mrb_fixnum_value(count);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_bucket#count");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_bucket__get_expand_mult(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_bucket *obj_self = static_cast< UT_hash_bucket * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->expand_mult;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_UT_hash_bucket__set_expand_mult(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int expand_mult;
  if (1 == mrb_get_args(mrb, "i", &expand_mult)) {
    UT_hash_bucket *obj_self = static_cast< UT_hash_bucket * >(DATA_PTR(mrb_self));
    
    obj_self->expand_mult = expand_mult;
    return mrb_fixnum_value(expand_mult);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_bucket#expand_mult");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_bucket__get_hh_head(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_bucket *obj_self = static_cast< UT_hash_bucket * >(DATA_PTR(mrb_self));
  struct UT_hash_handle * res = obj_self->hh_head;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "UT_hash_handle"),
                       &mrb_no_free_type_UT_hash_handle,
                       res));
}

static mrb_value
mrb_UT_hash_bucket__set_hh_head(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value hh_head;
  if (1 == mrb_get_args(mrb, "o", &hh_head)) {
    UT_hash_bucket *obj_self = static_cast< UT_hash_bucket * >(DATA_PTR(mrb_self));
    
    obj_self->hh_head = static_cast< struct UT_hash_handle * >(cc_mrb_data_get_ptr(mrb, hh_head, &mrb_type_UT_hash_handle, &mrb_no_free_type_UT_hash_handle));
    return hh_head;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_bucket#hh_head");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_bucket_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_UT_hash_bucket;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      UT_hash_bucket * res = new UT_hash_bucket();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_bucket#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_handle__get_hashv(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->hashv;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_UT_hash_handle__set_hashv(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int hashv;
  if (1 == mrb_get_args(mrb, "i", &hashv)) {
    UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
    
    obj_self->hashv = hashv;
    return mrb_fixnum_value(hashv);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_handle#hashv");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_handle__get_hh_next(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
  struct UT_hash_handle * res = obj_self->hh_next;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "UT_hash_handle"),
                       &mrb_no_free_type_UT_hash_handle,
                       res));
}

static mrb_value
mrb_UT_hash_handle__set_hh_next(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value hh_next;
  if (1 == mrb_get_args(mrb, "o", &hh_next)) {
    UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
    
    obj_self->hh_next = static_cast< struct UT_hash_handle * >(cc_mrb_data_get_ptr(mrb, hh_next, &mrb_type_UT_hash_handle, &mrb_no_free_type_UT_hash_handle));
    return hh_next;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_handle#hh_next");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_handle__get_hh_prev(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
  struct UT_hash_handle * res = obj_self->hh_prev;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "UT_hash_handle"),
                       &mrb_no_free_type_UT_hash_handle,
                       res));
}

static mrb_value
mrb_UT_hash_handle__set_hh_prev(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value hh_prev;
  if (1 == mrb_get_args(mrb, "o", &hh_prev)) {
    UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
    
    obj_self->hh_prev = static_cast< struct UT_hash_handle * >(cc_mrb_data_get_ptr(mrb, hh_prev, &mrb_type_UT_hash_handle, &mrb_no_free_type_UT_hash_handle));
    return hh_prev;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_handle#hh_prev");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_handle__get_key(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
  void * res = obj_self->key;
  return mrb_obj_value(res) /* XXX: */ ;
}

static mrb_value
mrb_UT_hash_handle__set_key(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value key;
  if (1 == mrb_get_args(mrb, "o", &key)) {
    UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
    
    obj_self->key = static_cast< void * >(DATA_PTR(key));
    return key;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_handle#key");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_handle__get_keylen(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->keylen;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_UT_hash_handle__set_keylen(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int keylen;
  if (1 == mrb_get_args(mrb, "i", &keylen)) {
    UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
    
    obj_self->keylen = keylen;
    return mrb_fixnum_value(keylen);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_handle#keylen");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_handle__get_next(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
  void * res = obj_self->next;
  return mrb_obj_value(res) /* XXX: */ ;
}

static mrb_value
mrb_UT_hash_handle__set_next(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value next;
  if (1 == mrb_get_args(mrb, "o", &next)) {
    UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
    
    obj_self->next = static_cast< void * >(DATA_PTR(next));
    return next;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_handle#next");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_handle__get_prev(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
  void * res = obj_self->prev;
  return mrb_obj_value(res) /* XXX: */ ;
}

static mrb_value
mrb_UT_hash_handle__set_prev(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value prev;
  if (1 == mrb_get_args(mrb, "o", &prev)) {
    UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
    
    obj_self->prev = static_cast< void * >(DATA_PTR(prev));
    return prev;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_handle#prev");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_handle__get_tbl(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
  struct UT_hash_table * res = obj_self->tbl;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "UT_hash_table"),
                       &mrb_no_free_type_UT_hash_table,
                       res));
}

static mrb_value
mrb_UT_hash_handle__set_tbl(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value tbl;
  if (1 == mrb_get_args(mrb, "o", &tbl)) {
    UT_hash_handle *obj_self = static_cast< UT_hash_handle * >(DATA_PTR(mrb_self));
    
    obj_self->tbl = static_cast< struct UT_hash_table * >(cc_mrb_data_get_ptr(mrb, tbl, &mrb_type_UT_hash_table, &mrb_no_free_type_UT_hash_table));
    return tbl;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_handle#tbl");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_handle_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_UT_hash_handle;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      UT_hash_handle * res = new UT_hash_handle();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_handle#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_table__get_buckets(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
  struct UT_hash_bucket * res = obj_self->buckets;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "UT_hash_bucket"),
                       &mrb_no_free_type_UT_hash_bucket,
                       res));
}

static mrb_value
mrb_UT_hash_table__set_buckets(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value buckets;
  if (1 == mrb_get_args(mrb, "o", &buckets)) {
    UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
    
    obj_self->buckets = static_cast< struct UT_hash_bucket * >(cc_mrb_data_get_ptr(mrb, buckets, &mrb_type_UT_hash_bucket, &mrb_no_free_type_UT_hash_bucket));
    return buckets;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_table#buckets");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_table__get_hho(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
  ptrdiff_t res = obj_self->hho;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_UT_hash_table__set_hho(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int hho;
  if (1 == mrb_get_args(mrb, "i", &hho)) {
    UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
    
    obj_self->hho = hho;
    return mrb_fixnum_value(hho);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_table#hho");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_table__get_ideal_chain_maxlen(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->ideal_chain_maxlen;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_UT_hash_table__set_ideal_chain_maxlen(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int ideal_chain_maxlen;
  if (1 == mrb_get_args(mrb, "i", &ideal_chain_maxlen)) {
    UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
    
    obj_self->ideal_chain_maxlen = ideal_chain_maxlen;
    return mrb_fixnum_value(ideal_chain_maxlen);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_table#ideal_chain_maxlen");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_table__get_ineff_expands(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->ineff_expands;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_UT_hash_table__set_ineff_expands(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int ineff_expands;
  if (1 == mrb_get_args(mrb, "i", &ineff_expands)) {
    UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
    
    obj_self->ineff_expands = ineff_expands;
    return mrb_fixnum_value(ineff_expands);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_table#ineff_expands");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_table__get_log2_num_buckets(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->log2_num_buckets;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_UT_hash_table__set_log2_num_buckets(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int log2_num_buckets;
  if (1 == mrb_get_args(mrb, "i", &log2_num_buckets)) {
    UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
    
    obj_self->log2_num_buckets = log2_num_buckets;
    return mrb_fixnum_value(log2_num_buckets);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_table#log2_num_buckets");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_table__get_noexpand(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->noexpand;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_UT_hash_table__set_noexpand(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int noexpand;
  if (1 == mrb_get_args(mrb, "i", &noexpand)) {
    UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
    
    obj_self->noexpand = noexpand;
    return mrb_fixnum_value(noexpand);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_table#noexpand");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_table__get_nonideal_items(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->nonideal_items;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_UT_hash_table__set_nonideal_items(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int nonideal_items;
  if (1 == mrb_get_args(mrb, "i", &nonideal_items)) {
    UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
    
    obj_self->nonideal_items = nonideal_items;
    return mrb_fixnum_value(nonideal_items);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_table#nonideal_items");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_table__get_num_buckets(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->num_buckets;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_UT_hash_table__set_num_buckets(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int num_buckets;
  if (1 == mrb_get_args(mrb, "i", &num_buckets)) {
    UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
    
    obj_self->num_buckets = num_buckets;
    return mrb_fixnum_value(num_buckets);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_table#num_buckets");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_table__get_num_items(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->num_items;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_UT_hash_table__set_num_items(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int num_items;
  if (1 == mrb_get_args(mrb, "i", &num_items)) {
    UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
    
    obj_self->num_items = num_items;
    return mrb_fixnum_value(num_items);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_table#num_items");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_table__get_signature(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
  uint32_t res = obj_self->signature;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_UT_hash_table__set_signature(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int signature;
  if (1 == mrb_get_args(mrb, "i", &signature)) {
    UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
    
    obj_self->signature = signature;
    return mrb_fixnum_value(signature);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_table#signature");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_table__get_tail(mrb_state *mrb, mrb_value mrb_self)
{
  UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
  struct UT_hash_handle * res = obj_self->tail;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "UT_hash_handle"),
                       &mrb_no_free_type_UT_hash_handle,
                       res));
}

static mrb_value
mrb_UT_hash_table__set_tail(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value tail;
  if (1 == mrb_get_args(mrb, "o", &tail)) {
    UT_hash_table *obj_self = static_cast< UT_hash_table * >(DATA_PTR(mrb_self));
    
    obj_self->tail = static_cast< struct UT_hash_handle * >(cc_mrb_data_get_ptr(mrb, tail, &mrb_type_UT_hash_handle, &mrb_no_free_type_UT_hash_handle));
    return tail;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_table#tail");
  return mrb_nil_value();
}

static mrb_value
mrb_UT_hash_table_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_UT_hash_table;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      UT_hash_table * res = new UT_hash_table();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "UT_hash_table#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelAmplitude_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAccelAmplitude *obj_self = static_cast< cocos2d::CCAccelAmplitude * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelAmplitude#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelAmplitude_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float duration;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &duration)) {
      class cocos2d::CCAccelAmplitude * res = cocos2d::CCAccelAmplitude::create(static_cast< cocos2d::CCAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCAction, NULL)), duration);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCAccelAmplitude,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelAmplitude::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelAmplitude_getRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAccelAmplitude *obj_self = static_cast< cocos2d::CCAccelAmplitude * >(DATA_PTR(mrb_self));
      float res = obj_self->getRate();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelAmplitude#getRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelAmplitude_initWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float duration;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &duration)) {
      cocos2d::CCAccelAmplitude *obj_self = static_cast< cocos2d::CCAccelAmplitude * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithAction(static_cast< cocos2d::CCAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCAction, NULL)), duration);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelAmplitude#initWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelAmplitude_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAccelAmplitude *obj_self = static_cast< cocos2d::CCAccelAmplitude * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelAmplitude#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelAmplitude_setRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fRate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fRate)) {
      cocos2d::CCAccelAmplitude *obj_self = static_cast< cocos2d::CCAccelAmplitude * >(DATA_PTR(mrb_self));
      obj_self->setRate(fRate);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelAmplitude#setRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelAmplitude_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCAccelAmplitude *obj_self = static_cast< cocos2d::CCAccelAmplitude * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelAmplitude#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelAmplitude_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCAccelAmplitude *obj_self = static_cast< cocos2d::CCAccelAmplitude * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelAmplitude#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelAmplitude_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCAccelAmplitude;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCAccelAmplitude * res = new cocos2d::CCAccelAmplitude();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelAmplitude#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelDeccelAmplitude_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAccelDeccelAmplitude *obj_self = static_cast< cocos2d::CCAccelDeccelAmplitude * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelDeccelAmplitude#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelDeccelAmplitude_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float duration;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &duration)) {
      class cocos2d::CCAccelDeccelAmplitude * res = cocos2d::CCAccelDeccelAmplitude::create(static_cast< cocos2d::CCAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCAction, NULL)), duration);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCAccelDeccelAmplitude,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelDeccelAmplitude::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelDeccelAmplitude_getRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAccelDeccelAmplitude *obj_self = static_cast< cocos2d::CCAccelDeccelAmplitude * >(DATA_PTR(mrb_self));
      float res = obj_self->getRate();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelDeccelAmplitude#getRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelDeccelAmplitude_initWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float duration;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &duration)) {
      cocos2d::CCAccelDeccelAmplitude *obj_self = static_cast< cocos2d::CCAccelDeccelAmplitude * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithAction(static_cast< cocos2d::CCAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCAction, NULL)), duration);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelDeccelAmplitude#initWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelDeccelAmplitude_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAccelDeccelAmplitude *obj_self = static_cast< cocos2d::CCAccelDeccelAmplitude * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelDeccelAmplitude#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelDeccelAmplitude_setRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fRate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fRate)) {
      cocos2d::CCAccelDeccelAmplitude *obj_self = static_cast< cocos2d::CCAccelDeccelAmplitude * >(DATA_PTR(mrb_self));
      obj_self->setRate(fRate);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelDeccelAmplitude#setRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelDeccelAmplitude_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCAccelDeccelAmplitude *obj_self = static_cast< cocos2d::CCAccelDeccelAmplitude * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelDeccelAmplitude#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelDeccelAmplitude_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCAccelDeccelAmplitude *obj_self = static_cast< cocos2d::CCAccelDeccelAmplitude * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelDeccelAmplitude#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelDeccelAmplitude_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCAccelDeccelAmplitude;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCAccelDeccelAmplitude * res = new cocos2d::CCAccelDeccelAmplitude();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelDeccelAmplitude#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAcceleration__get_timestamp(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCAcceleration *obj_self = static_cast< cocos2d::CCAcceleration * >(DATA_PTR(mrb_self));
  double res = obj_self->timestamp;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCAcceleration__set_timestamp(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float timestamp;
  if (1 == mrb_get_args(mrb, "f", &timestamp)) {
    cocos2d::CCAcceleration *obj_self = static_cast< cocos2d::CCAcceleration * >(DATA_PTR(mrb_self));
    
    obj_self->timestamp = timestamp;
    return mrb_float_value(mrb, timestamp);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAcceleration#timestamp");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAcceleration__get_x(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCAcceleration *obj_self = static_cast< cocos2d::CCAcceleration * >(DATA_PTR(mrb_self));
  double res = obj_self->x;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCAcceleration__set_x(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float x;
  if (1 == mrb_get_args(mrb, "f", &x)) {
    cocos2d::CCAcceleration *obj_self = static_cast< cocos2d::CCAcceleration * >(DATA_PTR(mrb_self));
    
    obj_self->x = x;
    return mrb_float_value(mrb, x);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAcceleration#x");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAcceleration__get_y(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCAcceleration *obj_self = static_cast< cocos2d::CCAcceleration * >(DATA_PTR(mrb_self));
  double res = obj_self->y;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCAcceleration__set_y(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float y;
  if (1 == mrb_get_args(mrb, "f", &y)) {
    cocos2d::CCAcceleration *obj_self = static_cast< cocos2d::CCAcceleration * >(DATA_PTR(mrb_self));
    
    obj_self->y = y;
    return mrb_float_value(mrb, y);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAcceleration#y");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAcceleration__get_z(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCAcceleration *obj_self = static_cast< cocos2d::CCAcceleration * >(DATA_PTR(mrb_self));
  double res = obj_self->z;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCAcceleration__set_z(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float z;
  if (1 == mrb_get_args(mrb, "f", &z)) {
    cocos2d::CCAcceleration *obj_self = static_cast< cocos2d::CCAcceleration * >(DATA_PTR(mrb_self));
    
    obj_self->z = z;
    return mrb_float_value(mrb, z);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAcceleration#z");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAcceleration_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCAcceleration;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCAcceleration * res = new cocos2d::CCAcceleration();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAcceleration#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelerometer_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCAccelerometer;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCAccelerometer * res = new cocos2d::CCAccelerometer();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelerometer#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelerometer_setAccelerometerInterval(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float interval;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &interval)) {
      cocos2d::CCAccelerometer *obj_self = static_cast< cocos2d::CCAccelerometer * >(DATA_PTR(mrb_self));
      obj_self->setAccelerometerInterval(interval);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelerometer#setAccelerometerInterval");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelerometer_setDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      cocos2d::CCAccelerometer *obj_self = static_cast< cocos2d::CCAccelerometer * >(DATA_PTR(mrb_self));
      obj_self->setDelegate(static_cast< cocos2d::CCAccelerometerDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCAccelerometerDelegate, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelerometer#setDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAccelerometerDelegate_didAccelerate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAccelerationValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAccelerationValue)) {
      cocos2d::CCAccelerometerDelegate *obj_self = static_cast< cocos2d::CCAccelerometerDelegate * >(DATA_PTR(mrb_self));
      obj_self->didAccelerate(static_cast< cocos2d::CCAcceleration * >(cc_mrb_data_get_ptr(mrb, pAccelerationValue, &mrb_type_cocos2d_CCAcceleration, &mrb_no_free_type_cocos2d_CCAcceleration)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAccelerometerDelegate#didAccelerate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCAction;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCAction * res = new cocos2d::CCAction();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAction *obj_self = static_cast< cocos2d::CCAction * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCAction *obj_self = static_cast< cocos2d::CCAction * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCAction * res = cocos2d::CCAction::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_description(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAction *obj_self = static_cast< cocos2d::CCAction * >(DATA_PTR(mrb_self));
      std::string res = obj_self->description();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction#description");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_getOriginalTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAction *obj_self = static_cast< cocos2d::CCAction * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getOriginalTarget();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction#getOriginalTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_getTag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAction *obj_self = static_cast< cocos2d::CCAction * >(DATA_PTR(mrb_self));
      int res = obj_self->getTag();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction#getTag");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_getTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAction *obj_self = static_cast< cocos2d::CCAction * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getTarget();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction#getTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_isDone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAction *obj_self = static_cast< cocos2d::CCAction * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isDone();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction#isDone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_setOriginalTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pOriginalTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pOriginalTarget)) {
      cocos2d::CCAction *obj_self = static_cast< cocos2d::CCAction * >(DATA_PTR(mrb_self));
      obj_self->setOriginalTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pOriginalTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction#setOriginalTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_setTag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nTag;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nTag)) {
      cocos2d::CCAction *obj_self = static_cast< cocos2d::CCAction * >(DATA_PTR(mrb_self));
      obj_self->setTag(nTag);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction#setTag");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_setTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCAction *obj_self = static_cast< cocos2d::CCAction * >(DATA_PTR(mrb_self));
      obj_self->setTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction#setTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCAction *obj_self = static_cast< cocos2d::CCAction * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_step(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::CCAction *obj_self = static_cast< cocos2d::CCAction * >(DATA_PTR(mrb_self));
      obj_self->step(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction#step");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_stop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAction *obj_self = static_cast< cocos2d::CCAction * >(DATA_PTR(mrb_self));
      obj_self->stop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction#stop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAction_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCAction *obj_self = static_cast< cocos2d::CCAction * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAction#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionCamera_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCActionCamera;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCActionCamera * res = new cocos2d::CCActionCamera();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionCamera#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionCamera_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCActionCamera *obj_self = static_cast< cocos2d::CCActionCamera * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionCamera#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionCamera_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCActionCamera *obj_self = static_cast< cocos2d::CCActionCamera * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionCamera#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionEase_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCActionEase *obj_self = static_cast< cocos2d::CCActionEase * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionEase#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionEase_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCActionEase *obj_self = static_cast< cocos2d::CCActionEase * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionEase#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionEase_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCActionEase * res = cocos2d::CCActionEase::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCActionEase,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionEase::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionEase_getInnerAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCActionEase *obj_self = static_cast< cocos2d::CCActionEase * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->getInnerAction();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionEase#getInnerAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionEase_initWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      cocos2d::CCActionEase *obj_self = static_cast< cocos2d::CCActionEase * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithAction(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionEase#initWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionEase_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCActionEase *obj_self = static_cast< cocos2d::CCActionEase * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionEase#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionEase_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCActionEase *obj_self = static_cast< cocos2d::CCActionEase * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionEase#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionEase_stop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCActionEase *obj_self = static_cast< cocos2d::CCActionEase * >(DATA_PTR(mrb_self));
      obj_self->stop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionEase#stop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionEase_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCActionEase *obj_self = static_cast< cocos2d::CCActionEase * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionEase#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionEase_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCActionEase;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCActionEase * res = new cocos2d::CCActionEase();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionEase#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInstant_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCActionInstant;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCActionInstant * res = new cocos2d::CCActionInstant();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInstant#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInstant_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCActionInstant *obj_self = static_cast< cocos2d::CCActionInstant * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInstant#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInstant_isDone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCActionInstant *obj_self = static_cast< cocos2d::CCActionInstant * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isDone();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInstant#isDone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInstant_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCActionInstant *obj_self = static_cast< cocos2d::CCActionInstant * >(DATA_PTR(mrb_self));
      class cocos2d::CCFiniteTimeAction * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCFiniteTimeAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInstant#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInstant_step(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::CCActionInstant *obj_self = static_cast< cocos2d::CCActionInstant * >(DATA_PTR(mrb_self));
      obj_self->step(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInstant#step");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInstant_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCActionInstant *obj_self = static_cast< cocos2d::CCActionInstant * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInstant#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInterval_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCActionInterval *obj_self = static_cast< cocos2d::CCActionInterval * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInterval#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInterval_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float d;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &d)) {
      class cocos2d::CCActionInterval * res = cocos2d::CCActionInterval::create(d);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInterval::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInterval_getAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCActionInterval *obj_self = static_cast< cocos2d::CCActionInterval * >(DATA_PTR(mrb_self));
      float res = obj_self->getAmplitudeRate();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInterval#getAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInterval_getElapsed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCActionInterval *obj_self = static_cast< cocos2d::CCActionInterval * >(DATA_PTR(mrb_self));
      float res = obj_self->getElapsed();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInterval#getElapsed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInterval_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float d;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &d)) {
      cocos2d::CCActionInterval *obj_self = static_cast< cocos2d::CCActionInterval * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(d);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInterval#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInterval_isDone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCActionInterval *obj_self = static_cast< cocos2d::CCActionInterval * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isDone();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInterval#isDone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInterval_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCActionInterval *obj_self = static_cast< cocos2d::CCActionInterval * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInterval#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInterval_setAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float amp;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &amp)) {
      cocos2d::CCActionInterval *obj_self = static_cast< cocos2d::CCActionInterval * >(DATA_PTR(mrb_self));
      obj_self->setAmplitudeRate(amp);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInterval#setAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInterval_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCActionInterval *obj_self = static_cast< cocos2d::CCActionInterval * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInterval#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInterval_step(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::CCActionInterval *obj_self = static_cast< cocos2d::CCActionInterval * >(DATA_PTR(mrb_self));
      obj_self->step(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInterval#step");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionInterval_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCActionInterval;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCActionInterval * res = new cocos2d::CCActionInterval();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionInterval#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionManager_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCActionManager;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCActionManager * res = new cocos2d::CCActionManager();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionManager#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionManager_addAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_value pTarget;
    mrb_bool paused;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oob", &pAction, &pTarget, &paused)) {
      cocos2d::CCActionManager *obj_self = static_cast< cocos2d::CCActionManager * >(DATA_PTR(mrb_self));
      obj_self->addAction(static_cast< cocos2d::CCAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCAction, NULL)), static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)), paused);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionManager#addAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionManager_getActionByTag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int tag;
    mrb_value pTarget;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "io", &tag, &pTarget)) {
      cocos2d::CCActionManager *obj_self = static_cast< cocos2d::CCActionManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCAction * res = obj_self->getActionByTag(tag, static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCObject, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionManager#getActionByTag");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionManager_numberOfRunningActionsInTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCActionManager *obj_self = static_cast< cocos2d::CCActionManager * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->numberOfRunningActionsInTarget(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionManager#numberOfRunningActionsInTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionManager_pauseAllRunningActions(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCActionManager *obj_self = static_cast< cocos2d::CCActionManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCSet * res = obj_self->pauseAllRunningActions();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSet,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionManager#pauseAllRunningActions");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionManager_pauseTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCActionManager *obj_self = static_cast< cocos2d::CCActionManager * >(DATA_PTR(mrb_self));
      obj_self->pauseTarget(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionManager#pauseTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionManager_removeAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      cocos2d::CCActionManager *obj_self = static_cast< cocos2d::CCActionManager * >(DATA_PTR(mrb_self));
      obj_self->removeAction(static_cast< cocos2d::CCAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCAction, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionManager#removeAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionManager_removeActionByTag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int tag;
    mrb_value pTarget;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "io", &tag, &pTarget)) {
      cocos2d::CCActionManager *obj_self = static_cast< cocos2d::CCActionManager * >(DATA_PTR(mrb_self));
      obj_self->removeActionByTag(tag, static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionManager#removeActionByTag");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionManager_removeAllActions(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCActionManager *obj_self = static_cast< cocos2d::CCActionManager * >(DATA_PTR(mrb_self));
      obj_self->removeAllActions();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionManager#removeAllActions");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionManager_removeAllActionsFromTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCActionManager *obj_self = static_cast< cocos2d::CCActionManager * >(DATA_PTR(mrb_self));
      obj_self->removeAllActionsFromTarget(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionManager#removeAllActionsFromTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionManager_resumeTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCActionManager *obj_self = static_cast< cocos2d::CCActionManager * >(DATA_PTR(mrb_self));
      obj_self->resumeTarget(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionManager#resumeTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionManager_resumeTargets(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value targetsToResume;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &targetsToResume)) {
      cocos2d::CCActionManager *obj_self = static_cast< cocos2d::CCActionManager * >(DATA_PTR(mrb_self));
      obj_self->resumeTargets(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, targetsToResume, &mrb_type_cocos2d_CCSet, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionManager#resumeTargets");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionTween_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float aDuration;
    mrb_value key;
    mrb_float from;
    mrb_float to;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "fSff", &aDuration, &key, &from, &to)) {
      class cocos2d::CCActionTween * res = cocos2d::CCActionTween::create(aDuration, RSTRING_PTR(key), from, to);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCActionTween,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionTween::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionTween_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float aDuration;
    mrb_value key;
    mrb_float from;
    mrb_float to;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "fSff", &aDuration, &key, &from, &to)) {
      cocos2d::CCActionTween *obj_self = static_cast< cocos2d::CCActionTween * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(aDuration, RSTRING_PTR(key), from, to);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionTween#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionTween__get_m_fDelta(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCActionTween *obj_self = static_cast< cocos2d::CCActionTween * >(DATA_PTR(mrb_self));
  float res = obj_self->m_fDelta;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCActionTween__set_m_fDelta(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float m_fDelta;
  if (1 == mrb_get_args(mrb, "f", &m_fDelta)) {
    cocos2d::CCActionTween *obj_self = static_cast< cocos2d::CCActionTween * >(DATA_PTR(mrb_self));
    
    obj_self->m_fDelta = m_fDelta;
    return mrb_float_value(mrb, m_fDelta);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionTween#m_fDelta");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionTween__get_m_fFrom(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCActionTween *obj_self = static_cast< cocos2d::CCActionTween * >(DATA_PTR(mrb_self));
  float res = obj_self->m_fFrom;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCActionTween__set_m_fFrom(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float m_fFrom;
  if (1 == mrb_get_args(mrb, "f", &m_fFrom)) {
    cocos2d::CCActionTween *obj_self = static_cast< cocos2d::CCActionTween * >(DATA_PTR(mrb_self));
    
    obj_self->m_fFrom = m_fFrom;
    return mrb_float_value(mrb, m_fFrom);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionTween#m_fFrom");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionTween__get_m_fTo(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCActionTween *obj_self = static_cast< cocos2d::CCActionTween * >(DATA_PTR(mrb_self));
  float res = obj_self->m_fTo;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCActionTween__set_m_fTo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float m_fTo;
  if (1 == mrb_get_args(mrb, "f", &m_fTo)) {
    cocos2d::CCActionTween *obj_self = static_cast< cocos2d::CCActionTween * >(DATA_PTR(mrb_self));
    
    obj_self->m_fTo = m_fTo;
    return mrb_float_value(mrb, m_fTo);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionTween#m_fTo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionTween__get_m_strKey(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCActionTween *obj_self = static_cast< cocos2d::CCActionTween * >(DATA_PTR(mrb_self));
  std::string res = obj_self->m_strKey;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_CCActionTween__set_m_strKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_strKey;
  if (1 == mrb_get_args(mrb, "S", &m_strKey)) {
    cocos2d::CCActionTween *obj_self = static_cast< cocos2d::CCActionTween * >(DATA_PTR(mrb_self));
    
    obj_self->m_strKey = RSTRING_PTR(m_strKey);
    return m_strKey;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionTween#m_strKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionTween_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCActionTween *obj_self = static_cast< cocos2d::CCActionTween * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionTween#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionTween_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCActionTween *obj_self = static_cast< cocos2d::CCActionTween * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionTween#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionTween_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::CCActionTween *obj_self = static_cast< cocos2d::CCActionTween * >(DATA_PTR(mrb_self));
      obj_self->update(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionTween#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionTween_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCActionTween;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCActionTween * res = new cocos2d::CCActionTween();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionTween#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCActionTweenDelegate_updateTweenAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float value;
    mrb_value key;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fS", &value, &key)) {
      cocos2d::CCActionTweenDelegate *obj_self = static_cast< cocos2d::CCActionTweenDelegate * >(DATA_PTR(mrb_self));
      obj_self->updateTweenAction(value, RSTRING_PTR(key));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCActionTweenDelegate#updateTweenAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAffineTransform__get_a(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCAffineTransform *obj_self = static_cast< cocos2d::CCAffineTransform * >(DATA_PTR(mrb_self));
  float res = obj_self->a;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCAffineTransform__set_a(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float a;
  if (1 == mrb_get_args(mrb, "f", &a)) {
    cocos2d::CCAffineTransform *obj_self = static_cast< cocos2d::CCAffineTransform * >(DATA_PTR(mrb_self));
    
    obj_self->a = a;
    return mrb_float_value(mrb, a);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAffineTransform#a");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAffineTransform__get_b(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCAffineTransform *obj_self = static_cast< cocos2d::CCAffineTransform * >(DATA_PTR(mrb_self));
  float res = obj_self->b;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCAffineTransform__set_b(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float b;
  if (1 == mrb_get_args(mrb, "f", &b)) {
    cocos2d::CCAffineTransform *obj_self = static_cast< cocos2d::CCAffineTransform * >(DATA_PTR(mrb_self));
    
    obj_self->b = b;
    return mrb_float_value(mrb, b);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAffineTransform#b");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAffineTransform__get_c(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCAffineTransform *obj_self = static_cast< cocos2d::CCAffineTransform * >(DATA_PTR(mrb_self));
  float res = obj_self->c;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCAffineTransform__set_c(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float c;
  if (1 == mrb_get_args(mrb, "f", &c)) {
    cocos2d::CCAffineTransform *obj_self = static_cast< cocos2d::CCAffineTransform * >(DATA_PTR(mrb_self));
    
    obj_self->c = c;
    return mrb_float_value(mrb, c);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAffineTransform#c");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAffineTransform__get_d(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCAffineTransform *obj_self = static_cast< cocos2d::CCAffineTransform * >(DATA_PTR(mrb_self));
  float res = obj_self->d;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCAffineTransform__set_d(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float d;
  if (1 == mrb_get_args(mrb, "f", &d)) {
    cocos2d::CCAffineTransform *obj_self = static_cast< cocos2d::CCAffineTransform * >(DATA_PTR(mrb_self));
    
    obj_self->d = d;
    return mrb_float_value(mrb, d);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAffineTransform#d");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAffineTransform__get_tx(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCAffineTransform *obj_self = static_cast< cocos2d::CCAffineTransform * >(DATA_PTR(mrb_self));
  float res = obj_self->tx;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCAffineTransform__set_tx(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float tx;
  if (1 == mrb_get_args(mrb, "f", &tx)) {
    cocos2d::CCAffineTransform *obj_self = static_cast< cocos2d::CCAffineTransform * >(DATA_PTR(mrb_self));
    
    obj_self->tx = tx;
    return mrb_float_value(mrb, tx);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAffineTransform#tx");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAffineTransform__get_ty(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCAffineTransform *obj_self = static_cast< cocos2d::CCAffineTransform * >(DATA_PTR(mrb_self));
  float res = obj_self->ty;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCAffineTransform__set_ty(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float ty;
  if (1 == mrb_get_args(mrb, "f", &ty)) {
    cocos2d::CCAffineTransform *obj_self = static_cast< cocos2d::CCAffineTransform * >(DATA_PTR(mrb_self));
    
    obj_self->ty = ty;
    return mrb_float_value(mrb, ty);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAffineTransform#ty");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAffineTransform_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCAffineTransform;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCAffineTransform * res = new cocos2d::CCAffineTransform();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAffineTransform#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAffineTransformConcat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value t1;
    mrb_value t2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &t1, &t2)) {
      struct cocos2d::CCAffineTransform *res = new struct cocos2d::CCAffineTransform(); *res = cocos2d::CCAffineTransformConcat(*(static_cast< const struct cocos2d::CCAffineTransform * >(cc_mrb_data_get_ptr(mrb, t1, &mrb_type_cocos2d_CCAffineTransform, &mrb_no_free_type_cocos2d_CCAffineTransform))), *(static_cast< const struct cocos2d::CCAffineTransform * >(cc_mrb_data_get_ptr(mrb, t2, &mrb_type_cocos2d_CCAffineTransform, &mrb_no_free_type_cocos2d_CCAffineTransform))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform"),
                       &mrb_type_cocos2d_CCAffineTransform,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAffineTransformConcat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAffineTransformEqualToTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value t1;
    mrb_value t2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &t1, &t2)) {
      _Bool res = cocos2d::CCAffineTransformEqualToTransform(*(static_cast< const struct cocos2d::CCAffineTransform * >(cc_mrb_data_get_ptr(mrb, t1, &mrb_type_cocos2d_CCAffineTransform, &mrb_no_free_type_cocos2d_CCAffineTransform))), *(static_cast< const struct cocos2d::CCAffineTransform * >(cc_mrb_data_get_ptr(mrb, t2, &mrb_type_cocos2d_CCAffineTransform, &mrb_no_free_type_cocos2d_CCAffineTransform))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAffineTransformEqualToTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_CCAffineTransformIdentity(mrb_state *mrb, mrb_value mrb_self)
{
  const struct cocos2d::CCAffineTransform *res = &cocos2d::CCAffineTransformIdentity;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform"),
                       &mrb_no_free_type_cocos2d_CCAffineTransform,
                       const_cast< struct cocos2d::CCAffineTransform * >(res)));
}

static mrb_value
mrb_cocos2d_CCAffineTransformInvert(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value t;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &t)) {
      struct cocos2d::CCAffineTransform *res = new struct cocos2d::CCAffineTransform(); *res = cocos2d::CCAffineTransformInvert(*(static_cast< const struct cocos2d::CCAffineTransform * >(cc_mrb_data_get_ptr(mrb, t, &mrb_type_cocos2d_CCAffineTransform, &mrb_no_free_type_cocos2d_CCAffineTransform))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform"),
                       &mrb_type_cocos2d_CCAffineTransform,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAffineTransformInvert");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAffineTransformMakeIdentity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      struct cocos2d::CCAffineTransform *res = new struct cocos2d::CCAffineTransform(); *res = cocos2d::CCAffineTransformMakeIdentity();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform"),
                       &mrb_type_cocos2d_CCAffineTransform,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAffineTransformMakeIdentity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAffineTransformRotate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value aTransform;
    mrb_float anAngle;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &aTransform, &anAngle)) {
      struct cocos2d::CCAffineTransform *res = new struct cocos2d::CCAffineTransform(); *res = cocos2d::CCAffineTransformRotate(*(static_cast< const struct cocos2d::CCAffineTransform * >(cc_mrb_data_get_ptr(mrb, aTransform, &mrb_type_cocos2d_CCAffineTransform, &mrb_no_free_type_cocos2d_CCAffineTransform))), anAngle);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform"),
                       &mrb_type_cocos2d_CCAffineTransform,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAffineTransformRotate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAffineTransformScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value t;
    mrb_float sx;
    mrb_float sy;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "off", &t, &sx, &sy)) {
      struct cocos2d::CCAffineTransform *res = new struct cocos2d::CCAffineTransform(); *res = cocos2d::CCAffineTransformScale(*(static_cast< const struct cocos2d::CCAffineTransform * >(cc_mrb_data_get_ptr(mrb, t, &mrb_type_cocos2d_CCAffineTransform, &mrb_no_free_type_cocos2d_CCAffineTransform))), sx, sy);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform"),
                       &mrb_type_cocos2d_CCAffineTransform,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAffineTransformScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAffineTransformTranslate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value t;
    mrb_float tx;
    mrb_float ty;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "off", &t, &tx, &ty)) {
      struct cocos2d::CCAffineTransform *res = new struct cocos2d::CCAffineTransform(); *res = cocos2d::CCAffineTransformTranslate(*(static_cast< const struct cocos2d::CCAffineTransform * >(cc_mrb_data_get_ptr(mrb, t, &mrb_type_cocos2d_CCAffineTransform, &mrb_no_free_type_cocos2d_CCAffineTransform))), tx, ty);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform"),
                       &mrb_type_cocos2d_CCAffineTransform,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAffineTransformTranslate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimate_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCAnimate;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCAnimate * res = new cocos2d::CCAnimate();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimate#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimate_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCAnimate *obj_self = static_cast< cocos2d::CCAnimate * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimate#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimate_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAnimation;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAnimation)) {
      class cocos2d::CCAnimate * res = cocos2d::CCAnimate::create(static_cast< cocos2d::CCAnimation * >(cc_mrb_data_get_ptr(mrb, pAnimation, &mrb_type_cocos2d_CCAnimation, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCAnimate,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimate::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimate_getAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAnimate *obj_self = static_cast< cocos2d::CCAnimate * >(DATA_PTR(mrb_self));
      class cocos2d::CCAnimation * res = obj_self->getAnimation();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCAnimation,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimate#getAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimate_initWithAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAnimation;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAnimation)) {
      cocos2d::CCAnimate *obj_self = static_cast< cocos2d::CCAnimate * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithAnimation(static_cast< cocos2d::CCAnimation * >(cc_mrb_data_get_ptr(mrb, pAnimation, &mrb_type_cocos2d_CCAnimation, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimate#initWithAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimate_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAnimate *obj_self = static_cast< cocos2d::CCAnimate * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimate#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimate_setAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCAnimate *obj_self = static_cast< cocos2d::CCAnimate * >(DATA_PTR(mrb_self));
      obj_self->setAnimation(static_cast< cocos2d::CCAnimation * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCAnimation, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimate#setAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimate_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCAnimate *obj_self = static_cast< cocos2d::CCAnimate * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimate#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimate_stop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAnimate *obj_self = static_cast< cocos2d::CCAnimate * >(DATA_PTR(mrb_self));
      obj_self->stop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimate#stop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimate_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &t)) {
      cocos2d::CCAnimate *obj_self = static_cast< cocos2d::CCAnimate * >(DATA_PTR(mrb_self));
      obj_self->update(t);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimate#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCAnimation;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCAnimation * res = new cocos2d::CCAnimation();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_addSpriteFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pFrame;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pFrame)) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      obj_self->addSpriteFrame(static_cast< cocos2d::CCSpriteFrame * >(cc_mrb_data_get_ptr(mrb, pFrame, &mrb_type_cocos2d_CCSpriteFrame, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#addSpriteFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_addSpriteFrameWithFileName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszFileName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszFileName)) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      obj_self->addSpriteFrameWithFileName(RSTRING_PTR(pszFileName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#addSpriteFrameWithFileName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_addSpriteFrameWithTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pobTexture;
    mrb_value rect;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pobTexture, &rect)) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      obj_self->addSpriteFrameWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pobTexture, &mrb_type_cocos2d_CCTexture2D, NULL)), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#addSpriteFrameWithTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCAnimation * res = cocos2d::CCAnimation::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCAnimation,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value arrayOfAnimationFrameNames;
    mrb_float delayPerUnit;
    mrb_int loops;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ofi", &arrayOfAnimationFrameNames, &delayPerUnit, &loops)) {
      class cocos2d::CCAnimation * res = cocos2d::CCAnimation::create(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, arrayOfAnimationFrameNames, &mrb_type_cocos2d_CCArray, NULL)), delayPerUnit, loops);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCAnimation,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value arrayOfAnimationFrameNames;
    mrb_float delayPerUnit;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &arrayOfAnimationFrameNames, &delayPerUnit)) {
      class cocos2d::CCAnimation * res = cocos2d::CCAnimation::create(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, arrayOfAnimationFrameNames, &mrb_type_cocos2d_CCArray, NULL)), delayPerUnit);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCAnimation,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_createWithSpriteFrames(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arrayOfSpriteFrameNames;
    mrb_float delay;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &arrayOfSpriteFrameNames, &delay)) {
      class cocos2d::CCAnimation * res = cocos2d::CCAnimation::createWithSpriteFrames(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, arrayOfSpriteFrameNames, &mrb_type_cocos2d_CCArray, NULL)), delay);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCAnimation,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation::createWithSpriteFrames");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_getDelayPerUnit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      float res = obj_self->getDelayPerUnit();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#getDelayPerUnit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_getDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      float res = obj_self->getDuration();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#getDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_getFrames(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getFrames();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#getFrames");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_getLoops(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getLoops();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#getLoops");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_getRestoreOriginalFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getRestoreOriginalFrame();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#getRestoreOriginalFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_getTotalDelayUnits(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      float res = obj_self->getTotalDelayUnits();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#getTotalDelayUnits");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_initWithAnimationFrames(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arrayOfAnimationFrames;
    mrb_float delayPerUnit;
    mrb_int loops;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ofi", &arrayOfAnimationFrames, &delayPerUnit, &loops)) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithAnimationFrames(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, arrayOfAnimationFrames, &mrb_type_cocos2d_CCArray, NULL)), delayPerUnit, loops);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#initWithAnimationFrames");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_initWithSpriteFrames(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pFrames;
    mrb_float delay;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pFrames, &delay)) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSpriteFrames(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, pFrames, &mrb_type_cocos2d_CCArray, NULL)), delay);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#initWithSpriteFrames");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_setDelayPerUnit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      obj_self->setDelayPerUnit(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#setDelayPerUnit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_setFrames(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      obj_self->setFrames(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#setFrames");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_setLoops(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      obj_self->setLoops(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#setLoops");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimation_setRestoreOriginalFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &var)) {
      cocos2d::CCAnimation *obj_self = static_cast< cocos2d::CCAnimation * >(DATA_PTR(mrb_self));
      obj_self->setRestoreOriginalFrame(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimation#setRestoreOriginalFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationCache_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCAnimationCache;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCAnimationCache * res = new cocos2d::CCAnimationCache();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationCache#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationCache_addAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value animation;
    mrb_value name;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &animation, &name)) {
      cocos2d::CCAnimationCache *obj_self = static_cast< cocos2d::CCAnimationCache * >(DATA_PTR(mrb_self));
      obj_self->addAnimation(static_cast< cocos2d::CCAnimation * >(cc_mrb_data_get_ptr(mrb, animation, &mrb_type_cocos2d_CCAnimation, NULL)), RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationCache#addAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationCache_addAnimationsWithDictionary(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value dictionary;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &dictionary)) {
      cocos2d::CCAnimationCache *obj_self = static_cast< cocos2d::CCAnimationCache * >(DATA_PTR(mrb_self));
      obj_self->addAnimationsWithDictionary(static_cast< cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, dictionary, &mrb_type_cocos2d_CCDictionary, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationCache#addAnimationsWithDictionary");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationCache_addAnimationsWithFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value plist;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &plist)) {
      cocos2d::CCAnimationCache *obj_self = static_cast< cocos2d::CCAnimationCache * >(DATA_PTR(mrb_self));
      obj_self->addAnimationsWithFile(RSTRING_PTR(plist));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationCache#addAnimationsWithFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationCache_animationByName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::CCAnimationCache *obj_self = static_cast< cocos2d::CCAnimationCache * >(DATA_PTR(mrb_self));
      class cocos2d::CCAnimation * res = obj_self->animationByName(RSTRING_PTR(name));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCAnimation,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationCache#animationByName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationCache_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAnimationCache *obj_self = static_cast< cocos2d::CCAnimationCache * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationCache#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationCache_purgeSharedAnimationCache(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAnimationCache::purgeSharedAnimationCache();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationCache::purgeSharedAnimationCache");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationCache_removeAnimationByName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::CCAnimationCache *obj_self = static_cast< cocos2d::CCAnimationCache * >(DATA_PTR(mrb_self));
      obj_self->removeAnimationByName(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationCache#removeAnimationByName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationCache_sharedAnimationCache(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCAnimationCache * res = cocos2d::CCAnimationCache::sharedAnimationCache();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCAnimationCache,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationCache::sharedAnimationCache");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationFrame_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCAnimationFrame;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCAnimationFrame * res = new cocos2d::CCAnimationFrame();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationFrame#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationFrame_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCAnimationFrame *obj_self = static_cast< cocos2d::CCAnimationFrame * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationFrame#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationFrame_getDelayUnits(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAnimationFrame *obj_self = static_cast< cocos2d::CCAnimationFrame * >(DATA_PTR(mrb_self));
      float res = obj_self->getDelayUnits();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationFrame#getDelayUnits");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationFrame_getSpriteFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAnimationFrame *obj_self = static_cast< cocos2d::CCAnimationFrame * >(DATA_PTR(mrb_self));
      class cocos2d::CCSpriteFrame * res = obj_self->getSpriteFrame();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSpriteFrame,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationFrame#getSpriteFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationFrame_getUserInfo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAnimationFrame *obj_self = static_cast< cocos2d::CCAnimationFrame * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getUserInfo();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationFrame#getUserInfo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationFrame_initWithSpriteFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value spriteFrame;
    mrb_float delayUnits;
    mrb_value userInfo;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ofo", &spriteFrame, &delayUnits, &userInfo)) {
      cocos2d::CCAnimationFrame *obj_self = static_cast< cocos2d::CCAnimationFrame * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSpriteFrame(static_cast< cocos2d::CCSpriteFrame * >(cc_mrb_data_get_ptr(mrb, spriteFrame, &mrb_type_cocos2d_CCSpriteFrame, NULL)), delayUnits, static_cast< cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, userInfo, &mrb_type_cocos2d_CCDictionary, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationFrame#initWithSpriteFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationFrame_setDelayUnits(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCAnimationFrame *obj_self = static_cast< cocos2d::CCAnimationFrame * >(DATA_PTR(mrb_self));
      obj_self->setDelayUnits(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationFrame#setDelayUnits");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationFrame_setSpriteFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCAnimationFrame *obj_self = static_cast< cocos2d::CCAnimationFrame * >(DATA_PTR(mrb_self));
      obj_self->setSpriteFrame(static_cast< cocos2d::CCSpriteFrame * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCSpriteFrame, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationFrame#setSpriteFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAnimationFrame_setUserInfo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCAnimationFrame *obj_self = static_cast< cocos2d::CCAnimationFrame * >(DATA_PTR(mrb_self));
      obj_self->setUserInfo(static_cast< cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCDictionary, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAnimationFrame#setUserInfo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCApplication_getCurrentLanguage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCApplication *obj_self = static_cast< cocos2d::CCApplication * >(DATA_PTR(mrb_self));
      ccLanguageType res = obj_self->getCurrentLanguage();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCApplication#getCurrentLanguage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCApplication_getTargetPlatform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCApplication *obj_self = static_cast< cocos2d::CCApplication * >(DATA_PTR(mrb_self));
      enum cocos2d::TargetPlatform res = obj_self->getTargetPlatform();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCApplication#getTargetPlatform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCApplication_run(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCApplication *obj_self = static_cast< cocos2d::CCApplication * >(DATA_PTR(mrb_self));
      int res = obj_self->run();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCApplication#run");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCApplication_setAnimationInterval(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float interval;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &interval)) {
      cocos2d::CCApplication *obj_self = static_cast< cocos2d::CCApplication * >(DATA_PTR(mrb_self));
      obj_self->setAnimationInterval(interval);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCApplication#setAnimationInterval");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCApplication_sharedApplication(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCApplication * res = cocos2d::CCApplication::sharedApplication();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCApplication,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCApplication::sharedApplication");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCApplicationProtocol_applicationDidEnterBackground(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCApplicationProtocol *obj_self = static_cast< cocos2d::CCApplicationProtocol * >(DATA_PTR(mrb_self));
      obj_self->applicationDidEnterBackground();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCApplicationProtocol#applicationDidEnterBackground");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCApplicationProtocol_applicationDidFinishLaunching(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCApplicationProtocol *obj_self = static_cast< cocos2d::CCApplicationProtocol * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->applicationDidFinishLaunching();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCApplicationProtocol#applicationDidFinishLaunching");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCApplicationProtocol_applicationWillEnterForeground(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCApplicationProtocol *obj_self = static_cast< cocos2d::CCApplicationProtocol * >(DATA_PTR(mrb_self));
      obj_self->applicationWillEnterForeground();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCApplicationProtocol#applicationWillEnterForeground");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCApplicationProtocol_getCurrentLanguage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCApplicationProtocol *obj_self = static_cast< cocos2d::CCApplicationProtocol * >(DATA_PTR(mrb_self));
      ccLanguageType res = obj_self->getCurrentLanguage();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCApplicationProtocol#getCurrentLanguage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCApplicationProtocol_getTargetPlatform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCApplicationProtocol *obj_self = static_cast< cocos2d::CCApplicationProtocol * >(DATA_PTR(mrb_self));
      enum cocos2d::TargetPlatform res = obj_self->getTargetPlatform();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCApplicationProtocol#getTargetPlatform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCApplicationProtocol_setAnimationInterval(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float interval;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &interval)) {
      cocos2d::CCApplicationProtocol *obj_self = static_cast< cocos2d::CCApplicationProtocol * >(DATA_PTR(mrb_self));
      obj_self->setAnimationInterval(interval);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCApplicationProtocol#setAnimationInterval");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCArray;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCArray * res = new cocos2d::CCArray();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  {
    mrb_int capacity;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCArray;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &capacity)) {
      cocos2d::CCArray * res = new cocos2d::CCArray(capacity);
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_acceptVisitor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value visitor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &visitor)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->acceptVisitor(*(static_cast< cocos2d::CCDataVisitor * >(DATA_PTR(visitor))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#acceptVisitor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_addObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value object;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &object)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->addObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#addObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_addObjectsFromArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value otherArray;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &otherArray)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->addObjectsFromArray(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, otherArray, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#addObjectsFromArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_capacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->capacity();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#capacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_containsObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value object;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &object)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->containsObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#containsObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_count(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->count();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#count");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCArray * res = cocos2d::CCArray::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pObject;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObject)) {
      class cocos2d::CCArray * res = cocos2d::CCArray::create(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_createWithArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value otherArray;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &otherArray)) {
      class cocos2d::CCArray * res = cocos2d::CCArray::createWithArray(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, otherArray, &mrb_type_cocos2d_CCArray, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray::createWithArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_createWithCapacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int capacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &capacity)) {
      class cocos2d::CCArray * res = cocos2d::CCArray::createWithCapacity(capacity);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray::createWithCapacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_createWithContentsOfFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pFileName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pFileName)) {
      class cocos2d::CCArray * res = cocos2d::CCArray::createWithContentsOfFile(RSTRING_PTR(pFileName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray::createWithContentsOfFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_createWithContentsOfFileThreadSafe(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pFileName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pFileName)) {
      class cocos2d::CCArray * res = cocos2d::CCArray::createWithContentsOfFileThreadSafe(RSTRING_PTR(pFileName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray::createWithContentsOfFileThreadSafe");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_createWithObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObject;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObject)) {
      class cocos2d::CCArray * res = cocos2d::CCArray::createWithObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray::createWithObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray__get_data(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccArray * res = obj_self->data;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccArray"),
                       &mrb_no_free_type_cocos2d__ccArray,
                       res));
}

static mrb_value
mrb_cocos2d_CCArray__set_data(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value data;
  if (1 == mrb_get_args(mrb, "o", &data)) {
    cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
    
    obj_self->data = static_cast< struct cocos2d::_ccArray * >(cc_mrb_data_get_ptr(mrb, data, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray));
    return data;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#data");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_exchangeObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value object1;
    mrb_value object2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &object1, &object2)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->exchangeObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object1, &mrb_type_cocos2d_CCObject, NULL)), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object2, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#exchangeObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_exchangeObjectAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index1;
    mrb_int index2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ii", &index1, &index2)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->exchangeObjectAtIndex(index1, index2);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#exchangeObjectAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_fastRemoveObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value object;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &object)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->fastRemoveObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#fastRemoveObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_fastRemoveObjectAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &index)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->fastRemoveObjectAtIndex(index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#fastRemoveObjectAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_indexOfObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value object;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &object)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->indexOfObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#indexOfObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_initWithArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value otherArray;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &otherArray)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithArray(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, otherArray, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#initWithArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_initWithCapacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int capacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &capacity)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithCapacity(capacity);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#initWithCapacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_initWithObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObject;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObject)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#initWithObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_initWithObjects(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObject;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObject)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithObjects(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#initWithObjects");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_insertObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value object;
    mrb_int index;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &object, &index)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->insertObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object, &mrb_type_cocos2d_CCObject, NULL)), index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#insertObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_isEqualToArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pOtherArray;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pOtherArray)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isEqualToArray(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, pOtherArray, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#isEqualToArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_lastObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->lastObject();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#lastObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_objectAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &index)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->objectAtIndex(index);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#objectAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_randomObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->randomObject();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#randomObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_reduceMemoryFootprint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->reduceMemoryFootprint();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#reduceMemoryFootprint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_removeAllObjects(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->removeAllObjects();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#removeAllObjects");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_removeLastObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bReleaseObj;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bReleaseObj)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->removeLastObject(bReleaseObj);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#removeLastObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_removeObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value object;
    mrb_bool bReleaseObj;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ob", &object, &bReleaseObj)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->removeObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object, &mrb_type_cocos2d_CCObject, NULL)), bReleaseObj);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#removeObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_removeObjectAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    mrb_bool bReleaseObj;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ib", &index, &bReleaseObj)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->removeObjectAtIndex(index, bReleaseObj);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#removeObjectAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_removeObjectsInArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value otherArray;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &otherArray)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->removeObjectsInArray(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, otherArray, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#removeObjectsInArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_replaceObjectAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int uIndex;
    mrb_value pObject;
    mrb_bool bReleaseObject;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "iob", &uIndex, &pObject, &bReleaseObject)) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->replaceObjectAtIndex(uIndex, static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)), bReleaseObject);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#replaceObjectAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCArray_reverseObjects(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCArray *obj_self = static_cast< cocos2d::CCArray * >(DATA_PTR(mrb_self));
      obj_self->reverseObjects();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCArray#reverseObjects");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCAtlasNode;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCAtlasNode * res = new cocos2d::CCAtlasNode();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tile;
    mrb_int tileWidth;
    mrb_int tileHeight;
    mrb_int itemsToRender;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "Siii", &tile, &tileWidth, &tileHeight, &itemsToRender)) {
      class cocos2d::CCAtlasNode * res = cocos2d::CCAtlasNode::create(RSTRING_PTR(tile), tileWidth, tileHeight, itemsToRender);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCAtlasNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_getBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      ccBlendFunc *res = new ccBlendFunc(); *res = obj_self->getBlendFunc();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccBlendFunc"),
                       &mrb_type_cocos2d__ccBlendFunc,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#getBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_getColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       const_cast< ccColor3B * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#getColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_getQuadsToDraw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getQuadsToDraw();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#getQuadsToDraw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_getTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCTexture2D * res = obj_self->getTexture();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTexture2D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#getTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_getTextureAtlas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCTextureAtlas * res = obj_self->getTextureAtlas();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTextureAtlas,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#getTextureAtlas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_initWithTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value texture;
    mrb_int tileWidth;
    mrb_int tileHeight;
    mrb_int itemsToRender;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oiii", &texture, &tileWidth, &tileHeight, &itemsToRender)) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)), tileWidth, tileHeight, itemsToRender);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#initWithTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_initWithTileFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tile;
    mrb_int tileWidth;
    mrb_int tileHeight;
    mrb_int itemsToRender;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "Siii", &tile, &tileWidth, &tileHeight, &itemsToRender)) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTileFile(RSTRING_PTR(tile), tileWidth, tileHeight, itemsToRender);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#initWithTileFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode__get_m_bIgnoreContentScaleFactor(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bIgnoreContentScaleFactor;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_CCAtlasNode__set_m_bIgnoreContentScaleFactor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bIgnoreContentScaleFactor;
  if (1 == mrb_get_args(mrb, "b", &m_bIgnoreContentScaleFactor)) {
    cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
    
    obj_self->m_bIgnoreContentScaleFactor = m_bIgnoreContentScaleFactor;
    return mrb_bool_value(m_bIgnoreContentScaleFactor);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#m_bIgnoreContentScaleFactor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode__get_m_bIsOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bIsOpacityModifyRGB;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_CCAtlasNode__set_m_bIsOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bIsOpacityModifyRGB;
  if (1 == mrb_get_args(mrb, "b", &m_bIsOpacityModifyRGB)) {
    cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
    
    obj_self->m_bIsOpacityModifyRGB = m_bIsOpacityModifyRGB;
    return mrb_bool_value(m_bIsOpacityModifyRGB);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#m_bIsOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode__get_m_nUniformColor(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
  GLint res = obj_self->m_nUniformColor;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCAtlasNode__set_m_nUniformColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_nUniformColor;
  if (1 == mrb_get_args(mrb, "i", &m_nUniformColor)) {
    cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
    
    obj_self->m_nUniformColor = m_nUniformColor;
    return mrb_fixnum_value(m_nUniformColor);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#m_nUniformColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_setBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      obj_self->setBlendFunc(*(static_cast< ccBlendFunc * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d__ccBlendFunc, &mrb_no_free_type_cocos2d__ccBlendFunc))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#setBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_setColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value color;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &color)) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      obj_self->setColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#setColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_setOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int opacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &opacity)) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      obj_self->setOpacity(opacity);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#setOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool isOpacityModifyRGB;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &isOpacityModifyRGB)) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(isOpacityModifyRGB);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_setQuadsToDraw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      obj_self->setQuadsToDraw(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#setQuadsToDraw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_setTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value texture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &texture)) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      obj_self->setTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#setTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_setTextureAtlas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      obj_self->setTextureAtlas(static_cast< cocos2d::CCTextureAtlas * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCTextureAtlas, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#setTextureAtlas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAtlasNode_updateAtlasValues(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAtlasNode *obj_self = static_cast< cocos2d::CCAtlasNode * >(DATA_PTR(mrb_self));
      obj_self->updateAtlasValues();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAtlasNode#updateAtlasValues");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAutoreleasePool_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCAutoreleasePool;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCAutoreleasePool * res = new cocos2d::CCAutoreleasePool();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAutoreleasePool#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAutoreleasePool_addObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObject;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObject)) {
      cocos2d::CCAutoreleasePool *obj_self = static_cast< cocos2d::CCAutoreleasePool * >(DATA_PTR(mrb_self));
      obj_self->addObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAutoreleasePool#addObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAutoreleasePool_clear(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCAutoreleasePool *obj_self = static_cast< cocos2d::CCAutoreleasePool * >(DATA_PTR(mrb_self));
      obj_self->clear();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAutoreleasePool#clear");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCAutoreleasePool_removeObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObject;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObject)) {
      cocos2d::CCAutoreleasePool *obj_self = static_cast< cocos2d::CCAutoreleasePool * >(DATA_PTR(mrb_self));
      obj_self->removeObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCAutoreleasePool#removeObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCBMFontConfiguration;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCBMFontConfiguration * res = new cocos2d::CCBMFontConfiguration();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBMFontConfiguration#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value FNTfile;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &FNTfile)) {
      class cocos2d::CCBMFontConfiguration * res = cocos2d::CCBMFontConfiguration::create(RSTRING_PTR(FNTfile));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCBMFontConfiguration,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBMFontConfiguration::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration_description(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
      std::string res = obj_self->description();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBMFontConfiguration#description");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration_getAtlasName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getAtlasName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBMFontConfiguration#getAtlasName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration_getCharacterSet(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
      std::set<unsigned int> * res = obj_self->getCharacterSet();
      mrb_value mrb_res = cc_mrb_ary_conv_from(mrb, mrb_ary_new(mrb), res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBMFontConfiguration#getCharacterSet");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration_initWithFNTfile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value FNTfile;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &FNTfile)) {
      cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFNTfile(RSTRING_PTR(FNTfile));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBMFontConfiguration#initWithFNTfile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration__get_m_nCommonHeight(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
  int res = obj_self->m_nCommonHeight;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration__set_m_nCommonHeight(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_nCommonHeight;
  if (1 == mrb_get_args(mrb, "i", &m_nCommonHeight)) {
    cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
    
    obj_self->m_nCommonHeight = m_nCommonHeight;
    return mrb_fixnum_value(m_nCommonHeight);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBMFontConfiguration#m_nCommonHeight");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration__get_m_pCharacterSet(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
  std::set<unsigned int> * res = obj_self->m_pCharacterSet;
  return cc_mrb_ary_conv_from(mrb, mrb_ary_new(mrb), res);
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration__set_m_pCharacterSet(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pCharacterSet;
  if (1 == mrb_get_args(mrb, "A", &m_pCharacterSet)) {
    cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
    
    cc_mrb_ary_conv_to(mrb, m_pCharacterSet, obj_self->m_pCharacterSet);
    return m_pCharacterSet;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBMFontConfiguration#m_pCharacterSet");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration__get_m_pFontDefDictionary(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
  struct cocos2d::_FontDefHashElement * res = obj_self->m_pFontDefDictionary;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_FontDefHashElement"),
                       &mrb_no_free_type_cocos2d__FontDefHashElement,
                       res));
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration__set_m_pFontDefDictionary(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pFontDefDictionary;
  if (1 == mrb_get_args(mrb, "o", &m_pFontDefDictionary)) {
    cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
    
    obj_self->m_pFontDefDictionary = static_cast< struct cocos2d::_FontDefHashElement * >(cc_mrb_data_get_ptr(mrb, m_pFontDefDictionary, &mrb_type_cocos2d__FontDefHashElement, &mrb_no_free_type_cocos2d__FontDefHashElement));
    return m_pFontDefDictionary;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBMFontConfiguration#m_pFontDefDictionary");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration__get_m_pKerningDictionary(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
  struct cocos2d::_KerningHashElement * res = obj_self->m_pKerningDictionary;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_KerningHashElement"),
                       &mrb_no_free_type_cocos2d__KerningHashElement,
                       res));
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration__set_m_pKerningDictionary(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pKerningDictionary;
  if (1 == mrb_get_args(mrb, "o", &m_pKerningDictionary)) {
    cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
    
    obj_self->m_pKerningDictionary = static_cast< struct cocos2d::_KerningHashElement * >(cc_mrb_data_get_ptr(mrb, m_pKerningDictionary, &mrb_type_cocos2d__KerningHashElement, &mrb_no_free_type_cocos2d__KerningHashElement));
    return m_pKerningDictionary;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBMFontConfiguration#m_pKerningDictionary");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration__get_m_sAtlasName(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
  std::string res = obj_self->m_sAtlasName;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration__set_m_sAtlasName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_sAtlasName;
  if (1 == mrb_get_args(mrb, "S", &m_sAtlasName)) {
    cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
    
    obj_self->m_sAtlasName = RSTRING_PTR(m_sAtlasName);
    return m_sAtlasName;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBMFontConfiguration#m_sAtlasName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration__get_m_tPadding(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
  struct cocos2d::_BMFontPadding *res = &obj_self->m_tPadding;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_BMFontPadding"),
                       &mrb_no_free_type_cocos2d__BMFontPadding,
                       res));
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration__set_m_tPadding(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_tPadding;
  if (1 == mrb_get_args(mrb, "o", &m_tPadding)) {
    cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
    
    obj_self->m_tPadding = *(static_cast< struct cocos2d::_BMFontPadding * >(cc_mrb_data_get_ptr(mrb, m_tPadding, &mrb_type_cocos2d__BMFontPadding, &mrb_no_free_type_cocos2d__BMFontPadding)));
    return m_tPadding;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBMFontConfiguration#m_tPadding");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBMFontConfiguration_setAtlasName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value atlasName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &atlasName)) {
      cocos2d::CCBMFontConfiguration *obj_self = static_cast< cocos2d::CCBMFontConfiguration * >(DATA_PTR(mrb_self));
      obj_self->setAtlasName(RSTRING_PTR(atlasName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBMFontConfiguration#setAtlasName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBezierBy_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCBezierBy *obj_self = static_cast< cocos2d::CCBezierBy * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBezierBy#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBezierBy_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value c;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &c)) {
      class cocos2d::CCBezierBy * res = cocos2d::CCBezierBy::create(t, *(static_cast< const ccBezierConfig * >(cc_mrb_data_get_ptr(mrb, c, &mrb_type_cocos2d__ccBezierConfig, &mrb_no_free_type_cocos2d__ccBezierConfig))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCBezierBy,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBezierBy::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBezierBy_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value c;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &c)) {
      cocos2d::CCBezierBy *obj_self = static_cast< cocos2d::CCBezierBy * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(t, *(static_cast< const ccBezierConfig * >(cc_mrb_data_get_ptr(mrb, c, &mrb_type_cocos2d__ccBezierConfig, &mrb_no_free_type_cocos2d__ccBezierConfig))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBezierBy#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBezierBy_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCBezierBy *obj_self = static_cast< cocos2d::CCBezierBy * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBezierBy#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBezierBy_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCBezierBy *obj_self = static_cast< cocos2d::CCBezierBy * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBezierBy#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBezierBy_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCBezierBy *obj_self = static_cast< cocos2d::CCBezierBy * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBezierBy#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBezierBy_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCBezierBy;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCBezierBy * res = new cocos2d::CCBezierBy();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBezierBy#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBezierTo_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCBezierTo *obj_self = static_cast< cocos2d::CCBezierTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBezierTo#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBezierTo_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value c;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &c)) {
      class cocos2d::CCBezierTo * res = cocos2d::CCBezierTo::create(t, *(static_cast< const ccBezierConfig * >(cc_mrb_data_get_ptr(mrb, c, &mrb_type_cocos2d__ccBezierConfig, &mrb_no_free_type_cocos2d__ccBezierConfig))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCBezierTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBezierTo::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBezierTo_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value c;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &c)) {
      cocos2d::CCBezierTo *obj_self = static_cast< cocos2d::CCBezierTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(t, *(static_cast< const ccBezierConfig * >(cc_mrb_data_get_ptr(mrb, c, &mrb_type_cocos2d__ccBezierConfig, &mrb_no_free_type_cocos2d__ccBezierConfig))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBezierTo#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBezierTo_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCBezierTo *obj_self = static_cast< cocos2d::CCBezierTo * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBezierTo#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBezierTo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCBezierTo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCBezierTo * res = new cocos2d::CCBezierTo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBezierTo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBlendProtocol_getBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCBlendProtocol *obj_self = static_cast< cocos2d::CCBlendProtocol * >(DATA_PTR(mrb_self));
      ccBlendFunc *res = new ccBlendFunc(); *res = obj_self->getBlendFunc();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccBlendFunc"),
                       &mrb_type_cocos2d__ccBlendFunc,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBlendProtocol#getBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBlendProtocol_setBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value blendFunc;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &blendFunc)) {
      cocos2d::CCBlendProtocol *obj_self = static_cast< cocos2d::CCBlendProtocol * >(DATA_PTR(mrb_self));
      obj_self->setBlendFunc(*(static_cast< ccBlendFunc * >(cc_mrb_data_get_ptr(mrb, blendFunc, &mrb_type_cocos2d__ccBlendFunc, &mrb_no_free_type_cocos2d__ccBlendFunc))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBlendProtocol#setBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBlink_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCBlink *obj_self = static_cast< cocos2d::CCBlink * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBlink#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBlink_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_int uBlinks;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fi", &duration, &uBlinks)) {
      class cocos2d::CCBlink * res = cocos2d::CCBlink::create(duration, uBlinks);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCBlink,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBlink::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBlink_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_int uBlinks;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fi", &duration, &uBlinks)) {
      cocos2d::CCBlink *obj_self = static_cast< cocos2d::CCBlink * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, uBlinks);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBlink#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBlink_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCBlink *obj_self = static_cast< cocos2d::CCBlink * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBlink#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBlink_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCBlink *obj_self = static_cast< cocos2d::CCBlink * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBlink#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBlink_stop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCBlink *obj_self = static_cast< cocos2d::CCBlink * >(DATA_PTR(mrb_self));
      obj_self->stop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBlink#stop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBlink_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCBlink *obj_self = static_cast< cocos2d::CCBlink * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBlink#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBlink_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCBlink;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCBlink * res = new cocos2d::CCBlink();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBlink#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBool_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool v;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCBool;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &v)) {
      cocos2d::CCBool * res = new cocos2d::CCBool(v);
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBool#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBool_acceptVisitor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value visitor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &visitor)) {
      cocos2d::CCBool *obj_self = static_cast< cocos2d::CCBool * >(DATA_PTR(mrb_self));
      obj_self->acceptVisitor(*(static_cast< cocos2d::CCDataVisitor * >(DATA_PTR(visitor))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBool#acceptVisitor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBool_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool v;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &v)) {
      class cocos2d::CCBool * res = cocos2d::CCBool::create(v);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCBool,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBool::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCBool_getValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCBool *obj_self = static_cast< cocos2d::CCBool * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getValue();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCBool#getValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFunc_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCCallFunc;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCCallFunc * res = new cocos2d::CCCallFunc();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFunc#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFunc_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCallFunc *obj_self = static_cast< cocos2d::CCCallFunc * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFunc#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFunc_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCCallFunc *obj_self = static_cast< cocos2d::CCCallFunc * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFunc#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFunc_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSelectorTarget;
    mrb_value selector;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pSelectorTarget, &selector)) {
      class cocos2d::CCCallFunc * res = cocos2d::CCCallFunc::create(CCMRubyCallbackWrapper::create(mrb, pSelectorTarget, selector), callfunc_selector(CCMRubyCallbackWrapper::SEL_CallFunc_Impl));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCCallFunc,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value nHandler;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &nHandler)) {
      class cocos2d::CCCallFunc * res = cocos2d::CCCallFunc::create(cc_mrb_proc_keep(mrb, nHandler));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      //cc_mrb_proc_keep(mrb, nHandler);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCCallFunc,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFunc::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFunc_execute(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCallFunc *obj_self = static_cast< cocos2d::CCCallFunc * >(DATA_PTR(mrb_self));
      obj_self->execute();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFunc#execute");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFunc_getScriptHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCallFunc *obj_self = static_cast< cocos2d::CCCallFunc * >(DATA_PTR(mrb_self));
      int res = obj_self->getScriptHandler();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFunc#getScriptHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFunc_getTargetCallback(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCallFunc *obj_self = static_cast< cocos2d::CCCallFunc * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->getTargetCallback();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFunc#getTargetCallback");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFunc_initWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSelectorTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pSelectorTarget)) {
      cocos2d::CCCallFunc *obj_self = static_cast< cocos2d::CCCallFunc * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTarget(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pSelectorTarget, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFunc#initWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFunc_removeScriptHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCallFunc *obj_self = static_cast< cocos2d::CCCallFunc * >(DATA_PTR(mrb_self));
      obj_self->removeScriptHandler();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFunc#removeScriptHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFunc_setTargetCallback(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSel;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pSel)) {
      cocos2d::CCCallFunc *obj_self = static_cast< cocos2d::CCCallFunc * >(DATA_PTR(mrb_self));
      obj_self->setTargetCallback(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pSel, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFunc#setTargetCallback");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFunc_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCCallFunc *obj_self = static_cast< cocos2d::CCCallFunc * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFunc#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncN_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCCallFuncN;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCCallFuncN * res = new cocos2d::CCCallFuncN();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncN#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncN_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCCallFuncN *obj_self = static_cast< cocos2d::CCCallFuncN * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncN#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncN_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSelectorTarget;
    mrb_value selector;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pSelectorTarget, &selector)) {
      class cocos2d::CCCallFuncN * res = cocos2d::CCCallFuncN::create(CCMRubyCallbackWrapper::create(mrb, pSelectorTarget, selector), callfuncN_selector(CCMRubyCallbackWrapper::SEL_CallFuncN_Impl));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCCallFuncN,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value nHandler;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &nHandler)) {
      class cocos2d::CCCallFuncN * res = cocos2d::CCCallFuncN::create(cc_mrb_proc_keep(mrb, nHandler));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      //cc_mrb_proc_keep(mrb, nHandler);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCCallFuncN,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncN::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncN_execute(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCallFuncN *obj_self = static_cast< cocos2d::CCCallFuncN * >(DATA_PTR(mrb_self));
      obj_self->execute();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncN#execute");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncN_getClassTypeInfo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCallFuncN *obj_self = static_cast< cocos2d::CCCallFuncN * >(DATA_PTR(mrb_self));
      long res = obj_self->getClassTypeInfo();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncN#getClassTypeInfo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncN_initWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSelectorTarget;
    mrb_value selector;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pSelectorTarget, &selector)) {
      cocos2d::CCCallFuncN *obj_self = static_cast< cocos2d::CCCallFuncN * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTarget(CCMRubyCallbackWrapper::create(mrb, pSelectorTarget, selector), callfuncN_selector(CCMRubyCallbackWrapper::SEL_CallFuncN_Impl));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncN#initWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncND_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCCallFuncND *obj_self = static_cast< cocos2d::CCCallFuncND * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncND#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncND_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSelectorTarget;
    mrb_value selector;
    mrb_value d;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &pSelectorTarget, &selector, &d)) {
      class cocos2d::CCCallFuncND * res = cocos2d::CCCallFuncND::create(CCMRubyCallbackWrapper::create(mrb, pSelectorTarget, selector), callfuncND_selector(CCMRubyCallbackWrapper::SEL_CallFuncND_Impl), static_cast< void * >(DATA_PTR(d)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCCallFuncND,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncND::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncND_execute(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCallFuncND *obj_self = static_cast< cocos2d::CCCallFuncND * >(DATA_PTR(mrb_self));
      obj_self->execute();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncND#execute");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncND_getClassTypeInfo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCallFuncND *obj_self = static_cast< cocos2d::CCCallFuncND * >(DATA_PTR(mrb_self));
      long res = obj_self->getClassTypeInfo();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncND#getClassTypeInfo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncND_initWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSelectorTarget;
    mrb_value selector;
    mrb_value d;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &pSelectorTarget, &selector, &d)) {
      cocos2d::CCCallFuncND *obj_self = static_cast< cocos2d::CCCallFuncND * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTarget(CCMRubyCallbackWrapper::create(mrb, pSelectorTarget, selector), callfuncND_selector(CCMRubyCallbackWrapper::SEL_CallFuncND_Impl), static_cast< void * >(DATA_PTR(d)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncND#initWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncND_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCCallFuncND;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCCallFuncND * res = new cocos2d::CCCallFuncND();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncND#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncO_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCCallFuncO;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCCallFuncO * res = new cocos2d::CCCallFuncO();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncO#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncO_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCCallFuncO *obj_self = static_cast< cocos2d::CCCallFuncO * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncO#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncO_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSelectorTarget;
    mrb_value selector;
    mrb_value pObject;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &pSelectorTarget, &selector, &pObject)) {
      class cocos2d::CCCallFuncO * res = cocos2d::CCCallFuncO::create(CCMRubyCallbackWrapper::create(mrb, pSelectorTarget, selector), callfuncO_selector(CCMRubyCallbackWrapper::SEL_CallFuncO_Impl), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCCallFuncO,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncO::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncO_execute(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCallFuncO *obj_self = static_cast< cocos2d::CCCallFuncO * >(DATA_PTR(mrb_self));
      obj_self->execute();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncO#execute");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncO_getClassTypeInfo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCallFuncO *obj_self = static_cast< cocos2d::CCCallFuncO * >(DATA_PTR(mrb_self));
      long res = obj_self->getClassTypeInfo();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncO#getClassTypeInfo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncO_getObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCallFuncO *obj_self = static_cast< cocos2d::CCCallFuncO * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->getObject();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncO#getObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncO_initWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSelectorTarget;
    mrb_value selector;
    mrb_value pObject;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &pSelectorTarget, &selector, &pObject)) {
      cocos2d::CCCallFuncO *obj_self = static_cast< cocos2d::CCCallFuncO * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTarget(CCMRubyCallbackWrapper::create(mrb, pSelectorTarget, selector), callfuncO_selector(CCMRubyCallbackWrapper::SEL_CallFuncO_Impl), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncO#initWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCallFuncO_setObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObj;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObj)) {
      cocos2d::CCCallFuncO *obj_self = static_cast< cocos2d::CCCallFuncO * >(DATA_PTR(mrb_self));
      obj_self->setObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObj, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCallFuncO#setObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCamera_description(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCamera *obj_self = static_cast< cocos2d::CCCamera * >(DATA_PTR(mrb_self));
      std::string res = obj_self->description();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCamera#description");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCamera_getCenterXYZ(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pCenterX;
    mrb_value pCenterY;
    mrb_value pCenterZ;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "AAA", &pCenterX, &pCenterY, &pCenterZ)) {
      float cxx_pCenterX[1]; cc_mrb_ary_conv_to_c_array(mrb, pCenterX, reinterpret_cast< float * >(cxx_pCenterX), 1);
      float cxx_pCenterY[1]; cc_mrb_ary_conv_to_c_array(mrb, pCenterY, reinterpret_cast< float * >(cxx_pCenterY), 1);
      float cxx_pCenterZ[1]; cc_mrb_ary_conv_to_c_array(mrb, pCenterZ, reinterpret_cast< float * >(cxx_pCenterZ), 1);
      cocos2d::CCCamera *obj_self = static_cast< cocos2d::CCCamera * >(DATA_PTR(mrb_self));
      obj_self->getCenterXYZ(cxx_pCenterX, cxx_pCenterY, cxx_pCenterZ);
      cc_mrb_ary_conv_from_c_array(mrb, pCenterX, reinterpret_cast< float * >(cxx_pCenterX), 1);
      cc_mrb_ary_conv_from_c_array(mrb, pCenterY, reinterpret_cast< float * >(cxx_pCenterY), 1);
      cc_mrb_ary_conv_from_c_array(mrb, pCenterZ, reinterpret_cast< float * >(cxx_pCenterZ), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCamera#getCenterXYZ");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCamera_getEyeXYZ(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pEyeX;
    mrb_value pEyeY;
    mrb_value pEyeZ;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "AAA", &pEyeX, &pEyeY, &pEyeZ)) {
      float cxx_pEyeX[1]; cc_mrb_ary_conv_to_c_array(mrb, pEyeX, reinterpret_cast< float * >(cxx_pEyeX), 1);
      float cxx_pEyeY[1]; cc_mrb_ary_conv_to_c_array(mrb, pEyeY, reinterpret_cast< float * >(cxx_pEyeY), 1);
      float cxx_pEyeZ[1]; cc_mrb_ary_conv_to_c_array(mrb, pEyeZ, reinterpret_cast< float * >(cxx_pEyeZ), 1);
      cocos2d::CCCamera *obj_self = static_cast< cocos2d::CCCamera * >(DATA_PTR(mrb_self));
      obj_self->getEyeXYZ(cxx_pEyeX, cxx_pEyeY, cxx_pEyeZ);
      cc_mrb_ary_conv_from_c_array(mrb, pEyeX, reinterpret_cast< float * >(cxx_pEyeX), 1);
      cc_mrb_ary_conv_from_c_array(mrb, pEyeY, reinterpret_cast< float * >(cxx_pEyeY), 1);
      cc_mrb_ary_conv_from_c_array(mrb, pEyeZ, reinterpret_cast< float * >(cxx_pEyeZ), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCamera#getEyeXYZ");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCamera_getUpXYZ(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pUpX;
    mrb_value pUpY;
    mrb_value pUpZ;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "AAA", &pUpX, &pUpY, &pUpZ)) {
      float cxx_pUpX[1]; cc_mrb_ary_conv_to_c_array(mrb, pUpX, reinterpret_cast< float * >(cxx_pUpX), 1);
      float cxx_pUpY[1]; cc_mrb_ary_conv_to_c_array(mrb, pUpY, reinterpret_cast< float * >(cxx_pUpY), 1);
      float cxx_pUpZ[1]; cc_mrb_ary_conv_to_c_array(mrb, pUpZ, reinterpret_cast< float * >(cxx_pUpZ), 1);
      cocos2d::CCCamera *obj_self = static_cast< cocos2d::CCCamera * >(DATA_PTR(mrb_self));
      obj_self->getUpXYZ(cxx_pUpX, cxx_pUpY, cxx_pUpZ);
      cc_mrb_ary_conv_from_c_array(mrb, pUpX, reinterpret_cast< float * >(cxx_pUpX), 1);
      cc_mrb_ary_conv_from_c_array(mrb, pUpY, reinterpret_cast< float * >(cxx_pUpY), 1);
      cc_mrb_ary_conv_from_c_array(mrb, pUpZ, reinterpret_cast< float * >(cxx_pUpZ), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCamera#getUpXYZ");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCamera_getZEye(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      float res = cocos2d::CCCamera::getZEye();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCamera::getZEye");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCamera_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCamera *obj_self = static_cast< cocos2d::CCCamera * >(DATA_PTR(mrb_self));
      obj_self->init();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCamera#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCamera_isDirty(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCamera *obj_self = static_cast< cocos2d::CCCamera * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isDirty();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCamera#isDirty");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCamera_locate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCamera *obj_self = static_cast< cocos2d::CCCamera * >(DATA_PTR(mrb_self));
      obj_self->locate();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCamera#locate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCamera_restore(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCamera *obj_self = static_cast< cocos2d::CCCamera * >(DATA_PTR(mrb_self));
      obj_self->restore();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCamera#restore");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCamera_setCenterXYZ(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fCenterX;
    mrb_float fCenterY;
    mrb_float fCenterZ;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &fCenterX, &fCenterY, &fCenterZ)) {
      cocos2d::CCCamera *obj_self = static_cast< cocos2d::CCCamera * >(DATA_PTR(mrb_self));
      obj_self->setCenterXYZ(fCenterX, fCenterY, fCenterZ);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCamera#setCenterXYZ");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCamera_setDirty(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bValue)) {
      cocos2d::CCCamera *obj_self = static_cast< cocos2d::CCCamera * >(DATA_PTR(mrb_self));
      obj_self->setDirty(bValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCamera#setDirty");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCamera_setEyeXYZ(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fEyeX;
    mrb_float fEyeY;
    mrb_float fEyeZ;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &fEyeX, &fEyeY, &fEyeZ)) {
      cocos2d::CCCamera *obj_self = static_cast< cocos2d::CCCamera * >(DATA_PTR(mrb_self));
      obj_self->setEyeXYZ(fEyeX, fEyeY, fEyeZ);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCamera#setEyeXYZ");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCamera_setUpXYZ(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fUpX;
    mrb_float fUpY;
    mrb_float fUpZ;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &fUpX, &fUpY, &fUpZ)) {
      cocos2d::CCCamera *obj_self = static_cast< cocos2d::CCCamera * >(DATA_PTR(mrb_self));
      obj_self->setUpXYZ(fUpX, fUpY, fUpZ);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCamera#setUpXYZ");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCardinalSplineBy_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCCardinalSplineBy;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCCardinalSplineBy * res = new cocos2d::CCCardinalSplineBy();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCardinalSplineBy#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCardinalSplineBy_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value points;
    mrb_float tension;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fof", &duration, &points, &tension)) {
      class cocos2d::CCCardinalSplineBy * res = cocos2d::CCCardinalSplineBy::create(duration, static_cast< cocos2d::CCPointArray * >(cc_mrb_data_get_ptr(mrb, points, &mrb_type_cocos2d_CCPointArray, NULL)), tension);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCCardinalSplineBy,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCardinalSplineBy::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCardinalSplineBy_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCardinalSplineBy *obj_self = static_cast< cocos2d::CCCardinalSplineBy * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCardinalSplineBy#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCardinalSplineBy_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCCardinalSplineBy *obj_self = static_cast< cocos2d::CCCardinalSplineBy * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCardinalSplineBy#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCardinalSplineBy_updatePosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value newPos;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &newPos)) {
      cocos2d::CCCardinalSplineBy *obj_self = static_cast< cocos2d::CCCardinalSplineBy * >(DATA_PTR(mrb_self));
      obj_self->updatePosition(*(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, newPos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCardinalSplineBy#updatePosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCardinalSplineTo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCCardinalSplineTo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCCardinalSplineTo * res = new cocos2d::CCCardinalSplineTo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCardinalSplineTo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCardinalSplineTo_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCCardinalSplineTo *obj_self = static_cast< cocos2d::CCCardinalSplineTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCCardinalSplineTo * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCCardinalSplineTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCardinalSplineTo#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCardinalSplineTo_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value points;
    mrb_float tension;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fof", &duration, &points, &tension)) {
      class cocos2d::CCCardinalSplineTo * res = cocos2d::CCCardinalSplineTo::create(duration, static_cast< cocos2d::CCPointArray * >(cc_mrb_data_get_ptr(mrb, points, &mrb_type_cocos2d_CCPointArray, NULL)), tension);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCCardinalSplineTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCardinalSplineTo::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCardinalSplineTo_getPoints(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCardinalSplineTo *obj_self = static_cast< cocos2d::CCCardinalSplineTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCPointArray * res = obj_self->getPoints();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCPointArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCardinalSplineTo#getPoints");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCardinalSplineTo_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value points;
    mrb_float tension;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fof", &duration, &points, &tension)) {
      cocos2d::CCCardinalSplineTo *obj_self = static_cast< cocos2d::CCCardinalSplineTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, static_cast< cocos2d::CCPointArray * >(cc_mrb_data_get_ptr(mrb, points, &mrb_type_cocos2d_CCPointArray, NULL)), tension);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCardinalSplineTo#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCardinalSplineTo_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCCardinalSplineTo *obj_self = static_cast< cocos2d::CCCardinalSplineTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCardinalSplineTo#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCardinalSplineTo_setPoints(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value points;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &points)) {
      cocos2d::CCCardinalSplineTo *obj_self = static_cast< cocos2d::CCCardinalSplineTo * >(DATA_PTR(mrb_self));
      obj_self->setPoints(static_cast< cocos2d::CCPointArray * >(cc_mrb_data_get_ptr(mrb, points, &mrb_type_cocos2d_CCPointArray, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCardinalSplineTo#setPoints");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCardinalSplineTo_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCCardinalSplineTo *obj_self = static_cast< cocos2d::CCCardinalSplineTo * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCardinalSplineTo#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCardinalSplineTo_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCCardinalSplineTo *obj_self = static_cast< cocos2d::CCCardinalSplineTo * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCardinalSplineTo#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCardinalSplineTo_updatePosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value newPos;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &newPos)) {
      cocos2d::CCCardinalSplineTo *obj_self = static_cast< cocos2d::CCCardinalSplineTo * >(DATA_PTR(mrb_self));
      obj_self->updatePosition(*(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, newPos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCardinalSplineTo#updatePosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCatmullRomBy_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    mrb_value points;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &dt, &points)) {
      class cocos2d::CCCatmullRomBy * res = cocos2d::CCCatmullRomBy::create(dt, static_cast< cocos2d::CCPointArray * >(cc_mrb_data_get_ptr(mrb, points, &mrb_type_cocos2d_CCPointArray, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCCatmullRomBy,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCatmullRomBy::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCatmullRomBy_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    mrb_value points;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &dt, &points)) {
      cocos2d::CCCatmullRomBy *obj_self = static_cast< cocos2d::CCCatmullRomBy * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(dt, static_cast< cocos2d::CCPointArray * >(cc_mrb_data_get_ptr(mrb, points, &mrb_type_cocos2d_CCPointArray, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCatmullRomBy#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCatmullRomBy_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCCatmullRomBy;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCCatmullRomBy * res = new cocos2d::CCCatmullRomBy();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCatmullRomBy#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCatmullRomTo_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    mrb_value points;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &dt, &points)) {
      class cocos2d::CCCatmullRomTo * res = cocos2d::CCCatmullRomTo::create(dt, static_cast< cocos2d::CCPointArray * >(cc_mrb_data_get_ptr(mrb, points, &mrb_type_cocos2d_CCPointArray, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCCatmullRomTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCatmullRomTo::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCatmullRomTo_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    mrb_value points;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &dt, &points)) {
      cocos2d::CCCatmullRomTo *obj_self = static_cast< cocos2d::CCCatmullRomTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(dt, static_cast< cocos2d::CCPointArray * >(cc_mrb_data_get_ptr(mrb, points, &mrb_type_cocos2d_CCPointArray, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCatmullRomTo#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCCatmullRomTo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCCatmullRomTo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCCatmullRomTo * res = new cocos2d::CCCatmullRomTo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCCatmullRomTo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCClippingNode_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCClippingNode * res = cocos2d::CCClippingNode::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCClippingNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pStencil;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pStencil)) {
      class cocos2d::CCClippingNode * res = cocos2d::CCClippingNode::create(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pStencil, &mrb_type_cocos2d_CCNode, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCClippingNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCClippingNode::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCClippingNode_getAlphaThreshold(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCClippingNode *obj_self = static_cast< cocos2d::CCClippingNode * >(DATA_PTR(mrb_self));
      GLfloat res = obj_self->getAlphaThreshold();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCClippingNode#getAlphaThreshold");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCClippingNode_getStencil(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCClippingNode *obj_self = static_cast< cocos2d::CCClippingNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getStencil();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCClippingNode#getStencil");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCClippingNode_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCClippingNode *obj_self = static_cast< cocos2d::CCClippingNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value pStencil;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pStencil)) {
      cocos2d::CCClippingNode *obj_self = static_cast< cocos2d::CCClippingNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pStencil, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCClippingNode#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCClippingNode_isInverted(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCClippingNode *obj_self = static_cast< cocos2d::CCClippingNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isInverted();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCClippingNode#isInverted");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCClippingNode_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCClippingNode *obj_self = static_cast< cocos2d::CCClippingNode * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCClippingNode#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCClippingNode_onEnterTransitionDidFinish(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCClippingNode *obj_self = static_cast< cocos2d::CCClippingNode * >(DATA_PTR(mrb_self));
      obj_self->onEnterTransitionDidFinish();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCClippingNode#onEnterTransitionDidFinish");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCClippingNode_onExit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCClippingNode *obj_self = static_cast< cocos2d::CCClippingNode * >(DATA_PTR(mrb_self));
      obj_self->onExit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCClippingNode#onExit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCClippingNode_onExitTransitionDidStart(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCClippingNode *obj_self = static_cast< cocos2d::CCClippingNode * >(DATA_PTR(mrb_self));
      obj_self->onExitTransitionDidStart();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCClippingNode#onExitTransitionDidStart");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCClippingNode_setAlphaThreshold(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fAlphaThreshold;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fAlphaThreshold)) {
      cocos2d::CCClippingNode *obj_self = static_cast< cocos2d::CCClippingNode * >(DATA_PTR(mrb_self));
      obj_self->setAlphaThreshold(fAlphaThreshold);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCClippingNode#setAlphaThreshold");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCClippingNode_setInverted(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bInverted;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bInverted)) {
      cocos2d::CCClippingNode *obj_self = static_cast< cocos2d::CCClippingNode * >(DATA_PTR(mrb_self));
      obj_self->setInverted(bInverted);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCClippingNode#setInverted");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCClippingNode_setStencil(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pStencil;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pStencil)) {
      cocos2d::CCClippingNode *obj_self = static_cast< cocos2d::CCClippingNode * >(DATA_PTR(mrb_self));
      obj_self->setStencil(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pStencil, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCClippingNode#setStencil");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCClippingNode_visit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCClippingNode *obj_self = static_cast< cocos2d::CCClippingNode * >(DATA_PTR(mrb_self));
      obj_self->visit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCClippingNode#visit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponent_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCComponent * res = cocos2d::CCComponent::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCComponent,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponent::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponent_createWithName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      class cocos2d::CCComponent * res = cocos2d::CCComponent::createWithName(RSTRING_PTR(name));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCComponent,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponent::createWithName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponent_getName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCComponent *obj_self = static_cast< cocos2d::CCComponent * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponent#getName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponent_getOwner(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCComponent *obj_self = static_cast< cocos2d::CCComponent * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getOwner();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponent#getOwner");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponent_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCComponent *obj_self = static_cast< cocos2d::CCComponent * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponent#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponent_initWithName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::CCComponent *obj_self = static_cast< cocos2d::CCComponent * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithName(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponent#initWithName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponent_isEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCComponent *obj_self = static_cast< cocos2d::CCComponent * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponent#isEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponent_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCComponent *obj_self = static_cast< cocos2d::CCComponent * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponent#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponent_onExit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCComponent *obj_self = static_cast< cocos2d::CCComponent * >(DATA_PTR(mrb_self));
      obj_self->onExit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponent#onExit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponent_serialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value r;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &r)) {
      cocos2d::CCComponent *obj_self = static_cast< cocos2d::CCComponent * >(DATA_PTR(mrb_self));
      obj_self->serialize(static_cast< void * >(DATA_PTR(r)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponent#serialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponent_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool b;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &b)) {
      cocos2d::CCComponent *obj_self = static_cast< cocos2d::CCComponent * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(b);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponent#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponent_setOwner(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pOwner;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pOwner)) {
      cocos2d::CCComponent *obj_self = static_cast< cocos2d::CCComponent * >(DATA_PTR(mrb_self));
      obj_self->setOwner(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pOwner, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponent#setOwner");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponent_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float delta;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &delta)) {
      cocos2d::CCComponent *obj_self = static_cast< cocos2d::CCComponent * >(DATA_PTR(mrb_self));
      obj_self->update(delta);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponent#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponentContainer_add(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pCom;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pCom)) {
      cocos2d::CCComponentContainer *obj_self = static_cast< cocos2d::CCComponentContainer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->add(static_cast< cocos2d::CCComponent * >(cc_mrb_data_get_ptr(mrb, pCom, &mrb_type_cocos2d_CCComponent, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponentContainer#add");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponentContainer_get(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pName)) {
      cocos2d::CCComponentContainer *obj_self = static_cast< cocos2d::CCComponentContainer * >(DATA_PTR(mrb_self));
      class cocos2d::CCComponent * res = obj_self->get(RSTRING_PTR(pName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCComponent,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponentContainer#get");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponentContainer_isEmpty(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCComponentContainer *obj_self = static_cast< cocos2d::CCComponentContainer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isEmpty();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponentContainer#isEmpty");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponentContainer_remove(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pName)) {
      cocos2d::CCComponentContainer *obj_self = static_cast< cocos2d::CCComponentContainer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->remove(RSTRING_PTR(pName));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponentContainer#remove");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponentContainer_removeAll(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCComponentContainer *obj_self = static_cast< cocos2d::CCComponentContainer * >(DATA_PTR(mrb_self));
      obj_self->removeAll();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponentContainer#removeAll");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCComponentContainer_visit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fDelta;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fDelta)) {
      cocos2d::CCComponentContainer *obj_self = static_cast< cocos2d::CCComponentContainer * >(DATA_PTR(mrb_self));
      obj_self->visit(fDelta);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCComponentContainer#visit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_checkForGLExtension(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value searchName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &searchName)) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->checkForGLExtension(RSTRING_PTR(searchName));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#checkForGLExtension");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_dumpInfo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      obj_self->dumpInfo();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#dumpInfo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_gatherGPUInfo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      obj_self->gatherGPUInfo();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#gatherGPUInfo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_getBool(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    mrb_bool default_value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sb", &key, &default_value)) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getBool(RSTRING_PTR(key), default_value);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#getBool");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_getCString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    mrb_value default_value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &key, &default_value)) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getCString(RSTRING_PTR(key), RSTRING_PTR(default_value));
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#getCString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_getMaxModelviewStackDepth(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      int res = obj_self->getMaxModelviewStackDepth();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#getMaxModelviewStackDepth");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_getMaxTextureSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      int res = obj_self->getMaxTextureSize();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#getMaxTextureSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_getMaxTextureUnits(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      int res = obj_self->getMaxTextureUnits();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#getMaxTextureUnits");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_getNumber(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    mrb_float default_value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sf", &key, &default_value)) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      double res = obj_self->getNumber(RSTRING_PTR(key), default_value);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#getNumber");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_getObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &key)) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->getObject(RSTRING_PTR(key));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#getObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_loadConfigFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value filename;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &filename)) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      obj_self->loadConfigFile(RSTRING_PTR(filename));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#loadConfigFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_purgeConfiguration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCConfiguration::purgeConfiguration();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration::purgeConfiguration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_setObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    mrb_value value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &key, &value)) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      obj_self->setObject(RSTRING_PTR(key), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, value, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#setObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_sharedConfiguration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCConfiguration * res = cocos2d::CCConfiguration::sharedConfiguration();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCConfiguration,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration::sharedConfiguration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_supportsBGRA8888(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->supportsBGRA8888();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#supportsBGRA8888");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_supportsDiscardFramebuffer(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->supportsDiscardFramebuffer();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#supportsDiscardFramebuffer");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_supportsNPOT(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->supportsNPOT();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#supportsNPOT");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_supportsPVRTC(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->supportsPVRTC();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#supportsPVRTC");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCConfiguration_supportsShareableVAO(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCConfiguration *obj_self = static_cast< cocos2d::CCConfiguration * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->supportsShareableVAO();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCConfiguration#supportsShareableVAO");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDeccelAmplitude_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDeccelAmplitude *obj_self = static_cast< cocos2d::CCDeccelAmplitude * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDeccelAmplitude#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDeccelAmplitude_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float duration;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &duration)) {
      class cocos2d::CCDeccelAmplitude * res = cocos2d::CCDeccelAmplitude::create(static_cast< cocos2d::CCAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCAction, NULL)), duration);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCDeccelAmplitude,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDeccelAmplitude::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDeccelAmplitude_getRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDeccelAmplitude *obj_self = static_cast< cocos2d::CCDeccelAmplitude * >(DATA_PTR(mrb_self));
      float res = obj_self->getRate();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDeccelAmplitude#getRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDeccelAmplitude_initWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float duration;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &duration)) {
      cocos2d::CCDeccelAmplitude *obj_self = static_cast< cocos2d::CCDeccelAmplitude * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithAction(static_cast< cocos2d::CCAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCAction, NULL)), duration);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDeccelAmplitude#initWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDeccelAmplitude_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDeccelAmplitude *obj_self = static_cast< cocos2d::CCDeccelAmplitude * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDeccelAmplitude#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDeccelAmplitude_setRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fRate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fRate)) {
      cocos2d::CCDeccelAmplitude *obj_self = static_cast< cocos2d::CCDeccelAmplitude * >(DATA_PTR(mrb_self));
      obj_self->setRate(fRate);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDeccelAmplitude#setRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDeccelAmplitude_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCDeccelAmplitude *obj_self = static_cast< cocos2d::CCDeccelAmplitude * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDeccelAmplitude#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDeccelAmplitude_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCDeccelAmplitude *obj_self = static_cast< cocos2d::CCDeccelAmplitude * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDeccelAmplitude#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDeccelAmplitude_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCDeccelAmplitude;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCDeccelAmplitude * res = new cocos2d::CCDeccelAmplitude();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDeccelAmplitude#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDelayTime_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCDelayTime *obj_self = static_cast< cocos2d::CCDelayTime * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDelayTime#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDelayTime_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float d;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &d)) {
      class cocos2d::CCDelayTime * res = cocos2d::CCDelayTime::create(d);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCDelayTime,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDelayTime::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDelayTime_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDelayTime *obj_self = static_cast< cocos2d::CCDelayTime * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDelayTime#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDelayTime_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCDelayTime *obj_self = static_cast< cocos2d::CCDelayTime * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDelayTime#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDelayTime_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCDelayTime;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCDelayTime * res = new cocos2d::CCDelayTime();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDelayTime#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDevice_getDPI(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      int res = cocos2d::CCDevice::getDPI();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDevice::getDPI");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictElement_getIntKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDictElement *obj_self = static_cast< cocos2d::CCDictElement * >(DATA_PTR(mrb_self));
      intptr_t res = obj_self->getIntKey();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictElement#getIntKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictElement_getObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDictElement *obj_self = static_cast< cocos2d::CCDictElement * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->getObject();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictElement#getObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictElement_getStrKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDictElement *obj_self = static_cast< cocos2d::CCDictElement * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getStrKey();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictElement#getStrKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictElement__get_hh(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCDictElement *obj_self = static_cast< cocos2d::CCDictElement * >(DATA_PTR(mrb_self));
  struct UT_hash_handle *res = &obj_self->hh;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "UT_hash_handle"),
                       &mrb_no_free_type_UT_hash_handle,
                       res));
}

static mrb_value
mrb_cocos2d_CCDictElement__set_hh(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value hh;
  if (1 == mrb_get_args(mrb, "o", &hh)) {
    cocos2d::CCDictElement *obj_self = static_cast< cocos2d::CCDictElement * >(DATA_PTR(mrb_self));
    
    obj_self->hh = *(static_cast< struct UT_hash_handle * >(cc_mrb_data_get_ptr(mrb, hh, &mrb_type_UT_hash_handle, &mrb_no_free_type_UT_hash_handle)));
    return hh;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictElement#hh");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCDictionary;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCDictionary * res = new cocos2d::CCDictionary();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_acceptVisitor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value visitor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &visitor)) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      obj_self->acceptVisitor(*(static_cast< cocos2d::CCDataVisitor * >(DATA_PTR(visitor))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#acceptVisitor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_allKeys(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->allKeys();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#allKeys");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_allKeysForObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value object;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &object)) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->allKeysForObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object, &mrb_type_cocos2d_CCObject, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#allKeysForObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_count(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->count();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#count");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCDictionary * res = cocos2d::CCDictionary::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_createWithContentsOfFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pFileName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pFileName)) {
      class cocos2d::CCDictionary * res = cocos2d::CCDictionary::createWithContentsOfFile(RSTRING_PTR(pFileName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary::createWithContentsOfFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_createWithContentsOfFileThreadSafe(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pFileName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pFileName)) {
      class cocos2d::CCDictionary * res = cocos2d::CCDictionary::createWithContentsOfFileThreadSafe(RSTRING_PTR(pFileName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary::createWithContentsOfFileThreadSafe");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_createWithDictionary(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value srcDict;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &srcDict)) {
      class cocos2d::CCDictionary * res = cocos2d::CCDictionary::createWithDictionary(static_cast< cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, srcDict, &mrb_type_cocos2d_CCDictionary, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary::createWithDictionary");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary__get_m_pElements(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
  class cocos2d::CCDictElement * res = obj_self->m_pElements;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCDictElement"),
                       &mrb_no_free_type_cocos2d_CCDictElement,
                       res));
}

static mrb_value
mrb_cocos2d_CCDictionary__set_m_pElements(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pElements;
  if (1 == mrb_get_args(mrb, "o", &m_pElements)) {
    cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
    
    obj_self->m_pElements = static_cast< cocos2d::CCDictElement * >(cc_mrb_data_get_ptr(mrb, m_pElements, &mrb_type_cocos2d_CCDictElement, &mrb_no_free_type_cocos2d_CCDictElement));
    return m_pElements;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#m_pElements");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_objectForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &key)) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->objectForKey(RSTRING_PTR(key));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_int key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &key)) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->objectForKey(key);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#objectForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_randomObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->randomObject();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#randomObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_removeAllObjects(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      obj_self->removeAllObjects();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#removeAllObjects");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_removeObjectForElememt(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pElement;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pElement)) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      obj_self->removeObjectForElememt(static_cast< cocos2d::CCDictElement * >(cc_mrb_data_get_ptr(mrb, pElement, &mrb_type_cocos2d_CCDictElement, &mrb_no_free_type_cocos2d_CCDictElement)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#removeObjectForElememt");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_removeObjectForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &key)) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      obj_self->removeObjectForKey(RSTRING_PTR(key));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_int key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &key)) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      obj_self->removeObjectForKey(key);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#removeObjectForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_removeObjectsForKeys(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pKeyArray;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pKeyArray)) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      obj_self->removeObjectsForKeys(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, pKeyArray, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#removeObjectsForKeys");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_setObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObject;
    mrb_value key;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &pObject, &key)) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      obj_self->setObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)), RSTRING_PTR(key));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value pObject;
    mrb_int key;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &pObject, &key)) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      obj_self->setObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)), key);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#setObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_valueForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &key)) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      const class cocos2d::CCString * res = obj_self->valueForKey(RSTRING_PTR(key));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = const_cast< class cocos2d::CCString * >(res);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCString,
                       const_cast< cocos2d::CCString * >(res)));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_int key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &key)) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      const class cocos2d::CCString * res = obj_self->valueForKey(key);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = const_cast< class cocos2d::CCString * >(res);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCString,
                       const_cast< cocos2d::CCString * >(res)));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#valueForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDictionary_writeToFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value fullPath;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &fullPath)) {
      cocos2d::CCDictionary *obj_self = static_cast< cocos2d::CCDictionary * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->writeToFile(RSTRING_PTR(fullPath));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDictionary#writeToFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_convertToGL(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value obPoint;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &obPoint)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->convertToGL(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, obPoint, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#convertToGL");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_convertToUI(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value obPoint;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &obPoint)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->convertToUI(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, obPoint, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#convertToUI");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_drawScene(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->drawScene();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#drawScene");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_end(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->end();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#end");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getAccelerometer(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      class cocos2d::CCAccelerometer * res = obj_self->getAccelerometer();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAccelerometer"),
                       &mrb_type_cocos2d_CCAccelerometer,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getAccelerometer");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getActionManager(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionManager * res = obj_self->getActionManager();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionManager,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getActionManager");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getAnimationInterval(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      double res = obj_self->getAnimationInterval();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getAnimationInterval");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getClassTypeInfo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      long res = obj_self->getClassTypeInfo();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getClassTypeInfo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getContentScaleFactor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      float res = obj_self->getContentScaleFactor();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getContentScaleFactor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      class cocos2d::CCDirectorDelegate * res = obj_self->getDelegate();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      /* XXX: class implrements *Delegate or *Protocol, must be a subclass of CCObject. */
      ccobj_res = dynamic_cast< cocos2d::CCObject * >(res);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDirectorDelegate,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getDeltaTime(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      float res = obj_self->getDeltaTime();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getDeltaTime");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getKeypadDispatcher(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      class cocos2d::CCKeypadDispatcher * res = obj_self->getKeypadDispatcher();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCKeypadDispatcher,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getKeypadDispatcher");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getNotificationNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getNotificationNode();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getNotificationNode");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_CCDirector_getOpenGLView(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      class cocos2d::CCEGLView * res = obj_self->getOpenGLView();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCEGLView"),
                       &mrb_no_free_type_cocos2d_CCEGLView,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::CCDirector#getOpenGLView");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getProjection(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      ccDirectorProjection res = obj_self->getProjection();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getProjection");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getRunningScene(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      class cocos2d::CCScene * res = obj_self->getRunningScene();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCScene,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getRunningScene");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getScheduler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      class cocos2d::CCScheduler * res = obj_self->getScheduler();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCScheduler,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getScheduler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getSecondsPerFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      float res = obj_self->getSecondsPerFrame();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getSecondsPerFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getTotalFrames(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getTotalFrames();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getTotalFrames");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getTouchDispatcher(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      class cocos2d::CCTouchDispatcher * res = obj_self->getTouchDispatcher();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTouchDispatcher,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getTouchDispatcher");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getVisibleOrigin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getVisibleOrigin();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getVisibleOrigin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getVisibleSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getVisibleSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getVisibleSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getWinSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getWinSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getWinSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getWinSizeInPixels(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getWinSizeInPixels();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getWinSizeInPixels");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_getZEye(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      float res = obj_self->getZEye();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#getZEye");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_isDisplayStats(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isDisplayStats();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#isDisplayStats");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_isNextDeltaTimeZero(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isNextDeltaTimeZero();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#isNextDeltaTimeZero");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_isPaused(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isPaused();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#isPaused");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_isSendCleanupToScene(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isSendCleanupToScene();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#isSendCleanupToScene");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_mainLoop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->mainLoop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#mainLoop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_pause(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->pause();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#pause");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_popScene(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->popScene();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#popScene");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_popToRootScene(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->popToRootScene();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#popToRootScene");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_popToSceneStackLevel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int level;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &level)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->popToSceneStackLevel(level);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#popToSceneStackLevel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_purgeCachedData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->purgeCachedData();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#purgeCachedData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_pushScene(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pScene;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pScene)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->pushScene(static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, pScene, &mrb_type_cocos2d_CCScene, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#pushScene");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_replaceScene(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pScene;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pScene)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->replaceScene(static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, pScene, &mrb_type_cocos2d_CCScene, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#replaceScene");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_resume(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->resume();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#resume");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_runWithScene(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pScene;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pScene)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->runWithScene(static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, pScene, &mrb_type_cocos2d_CCScene, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#runWithScene");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setAccelerometer(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setAccelerometer(static_cast< cocos2d::CCAccelerometer * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCAccelerometer, &mrb_no_free_type_cocos2d_CCAccelerometer)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setAccelerometer");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setActionManager(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setActionManager(static_cast< cocos2d::CCActionManager * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCActionManager, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setActionManager");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setAlphaBlending(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bOn;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bOn)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setAlphaBlending(bOn);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setAlphaBlending");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setAnimationInterval(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dValue)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setAnimationInterval(dValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setAnimationInterval");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setContentScaleFactor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float scaleFactor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &scaleFactor)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setContentScaleFactor(scaleFactor);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setContentScaleFactor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setDefaultValues(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setDefaultValues();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setDefaultValues");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setDelegate(static_cast< cocos2d::CCDirectorDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCDirectorDelegate, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setDepthTest(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bOn;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bOn)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setDepthTest(bOn);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setDepthTest");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setDisplayStats(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bDisplayStats;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bDisplayStats)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setDisplayStats(bDisplayStats);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setDisplayStats");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setGLDefaultValues(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setGLDefaultValues();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setGLDefaultValues");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setKeypadDispatcher(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setKeypadDispatcher(static_cast< cocos2d::CCKeypadDispatcher * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCKeypadDispatcher, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setKeypadDispatcher");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setNextDeltaTimeZero(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bNextDeltaTimeZero;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bNextDeltaTimeZero)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setNextDeltaTimeZero(bNextDeltaTimeZero);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setNextDeltaTimeZero");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setNotificationNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value node;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &node)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setNotificationNode(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, node, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setNotificationNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setOpenGLView(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pobOpenGLView;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pobOpenGLView)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setOpenGLView(static_cast< cocos2d::CCEGLView * >(cc_mrb_data_get_ptr(mrb, pobOpenGLView, &mrb_type_cocos2d_CCEGLView, &mrb_no_free_type_cocos2d_CCEGLView)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setOpenGLView");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setProjection(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int kProjection;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &kProjection)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setProjection((ccDirectorProjection)kProjection);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setProjection");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setScheduler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setScheduler(static_cast< cocos2d::CCScheduler * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCScheduler, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setScheduler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setTouchDispatcher(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setTouchDispatcher(static_cast< cocos2d::CCTouchDispatcher * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCTouchDispatcher, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setTouchDispatcher");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_setViewport(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->setViewport();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#setViewport");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_sharedDirector(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCDirector * res = cocos2d::CCDirector::sharedDirector();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDirector,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector::sharedDirector");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_startAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->startAnimation();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#startAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirector_stopAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirector *obj_self = static_cast< cocos2d::CCDirector * >(DATA_PTR(mrb_self));
      obj_self->stopAnimation();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirector#stopAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDirectorDelegate_updateProjection(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDirectorDelegate *obj_self = static_cast< cocos2d::CCDirectorDelegate * >(DATA_PTR(mrb_self));
      obj_self->updateProjection();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDirectorDelegate#updateProjection");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDisplayLinkDirector_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCDisplayLinkDirector;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCDisplayLinkDirector * res = new cocos2d::CCDisplayLinkDirector();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDisplayLinkDirector#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDisplayLinkDirector_mainLoop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDisplayLinkDirector *obj_self = static_cast< cocos2d::CCDisplayLinkDirector * >(DATA_PTR(mrb_self));
      obj_self->mainLoop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDisplayLinkDirector#mainLoop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDisplayLinkDirector_setAnimationInterval(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dValue)) {
      cocos2d::CCDisplayLinkDirector *obj_self = static_cast< cocos2d::CCDisplayLinkDirector * >(DATA_PTR(mrb_self));
      obj_self->setAnimationInterval(dValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDisplayLinkDirector#setAnimationInterval");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDisplayLinkDirector_startAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDisplayLinkDirector *obj_self = static_cast< cocos2d::CCDisplayLinkDirector * >(DATA_PTR(mrb_self));
      obj_self->startAnimation();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDisplayLinkDirector#startAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDisplayLinkDirector_stopAnimation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDisplayLinkDirector *obj_self = static_cast< cocos2d::CCDisplayLinkDirector * >(DATA_PTR(mrb_self));
      obj_self->stopAnimation();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDisplayLinkDirector#stopAnimation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDouble_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float v;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCDouble;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &v)) {
      cocos2d::CCDouble * res = new cocos2d::CCDouble(v);
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDouble#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDouble_acceptVisitor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value visitor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &visitor)) {
      cocos2d::CCDouble *obj_self = static_cast< cocos2d::CCDouble * >(DATA_PTR(mrb_self));
      obj_self->acceptVisitor(*(static_cast< cocos2d::CCDataVisitor * >(DATA_PTR(visitor))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDouble#acceptVisitor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDouble_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float v;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &v)) {
      class cocos2d::CCDouble * res = cocos2d::CCDouble::create(v);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCDouble,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDouble::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDouble_getValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDouble *obj_self = static_cast< cocos2d::CCDouble * >(DATA_PTR(mrb_self));
      double res = obj_self->getValue();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDouble#getValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDrawNode_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCDrawNode;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCDrawNode * res = new cocos2d::CCDrawNode();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDrawNode#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDrawNode_clear(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDrawNode *obj_self = static_cast< cocos2d::CCDrawNode * >(DATA_PTR(mrb_self));
      obj_self->clear();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDrawNode#clear");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDrawNode_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCDrawNode * res = cocos2d::CCDrawNode::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCDrawNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDrawNode::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDrawNode_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDrawNode *obj_self = static_cast< cocos2d::CCDrawNode * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDrawNode#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDrawNode_drawDot(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    mrb_float radius;
    mrb_value color;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ofo", &pos, &radius, &color)) {
      cocos2d::CCDrawNode *obj_self = static_cast< cocos2d::CCDrawNode * >(DATA_PTR(mrb_self));
      obj_self->drawDot(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), radius, *(static_cast< const ccColor4F * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDrawNode#drawDot");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDrawNode_drawPolygon(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value verts;
    mrb_int count;
    mrb_value fillColor;
    mrb_float borderWidth;
    mrb_value borderColor;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "Aiofo", &verts, &count, &fillColor, &borderWidth, &borderColor)) {
      cocos2d::CCDrawNode *obj_self = static_cast< cocos2d::CCDrawNode * >(DATA_PTR(mrb_self));
        CCPoint *cxx_verts = new CCPoint[count];
        cc_mrb_ary_conv_to_c_array<CCPoint>(mrb, verts, cxx_verts, count);
      obj_self->drawPolygon(cxx_verts, count, *(static_cast< const ccColor4F * >(cc_mrb_data_get_ptr(mrb, fillColor, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F))), borderWidth, *(static_cast< const ccColor4F * >(cc_mrb_data_get_ptr(mrb, borderColor, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F))));
        delete[] cxx_verts;
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDrawNode#drawPolygon");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDrawNode_drawSegment(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value from;
    mrb_value to;
    mrb_float radius;
    mrb_value color;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oofo", &from, &to, &radius, &color)) {
      cocos2d::CCDrawNode *obj_self = static_cast< cocos2d::CCDrawNode * >(DATA_PTR(mrb_self));
      obj_self->drawSegment(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, from, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, to, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), radius, *(static_cast< const ccColor4F * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDrawNode#drawSegment");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDrawNode_getBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDrawNode *obj_self = static_cast< cocos2d::CCDrawNode * >(DATA_PTR(mrb_self));
      ccBlendFunc *res = new ccBlendFunc(); *res = obj_self->getBlendFunc();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccBlendFunc"),
                       &mrb_type_cocos2d__ccBlendFunc,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDrawNode#getBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDrawNode_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCDrawNode *obj_self = static_cast< cocos2d::CCDrawNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDrawNode#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCDrawNode_setBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value blendFunc;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &blendFunc)) {
      cocos2d::CCDrawNode *obj_self = static_cast< cocos2d::CCDrawNode * >(DATA_PTR(mrb_self));
      obj_self->setBlendFunc(*(static_cast< const ccBlendFunc * >(cc_mrb_data_get_ptr(mrb, blendFunc, &mrb_type_cocos2d__ccBlendFunc, &mrb_no_free_type_cocos2d__ccBlendFunc))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCDrawNode#setBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLView_end(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLView *obj_self = static_cast< cocos2d::CCEGLView * >(DATA_PTR(mrb_self));
      obj_self->end();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLView#end");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLView_isOpenGLReady(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLView *obj_self = static_cast< cocos2d::CCEGLView * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpenGLReady();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLView#isOpenGLReady");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLView_setContentScaleFactor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float contentScaleFactor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &contentScaleFactor)) {
      cocos2d::CCEGLView *obj_self = static_cast< cocos2d::CCEGLView * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->setContentScaleFactor(contentScaleFactor);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLView#setContentScaleFactor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLView_setIMEKeyboardState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bOpen;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bOpen)) {
      cocos2d::CCEGLView *obj_self = static_cast< cocos2d::CCEGLView * >(DATA_PTR(mrb_self));
      obj_self->setIMEKeyboardState(bOpen);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLView#setIMEKeyboardState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLView_sharedOpenGLView(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCEGLView * res = cocos2d::CCEGLView::sharedOpenGLView();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCEGLView"),
                       &mrb_no_free_type_cocos2d_CCEGLView,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLView::sharedOpenGLView");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLView_swapBuffers(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLView *obj_self = static_cast< cocos2d::CCEGLView * >(DATA_PTR(mrb_self));
      obj_self->swapBuffers();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLView#swapBuffers");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_end(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      obj_self->end();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#end");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_getDesignResolutionSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getDesignResolutionSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       const_cast< cocos2d::CCSize * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#getDesignResolutionSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_getFrameSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getFrameSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       const_cast< cocos2d::CCSize * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#getFrameSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_getScaleX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      float res = obj_self->getScaleX();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#getScaleX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_getScaleY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      float res = obj_self->getScaleY();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#getScaleY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_getScissorRect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      class cocos2d::CCRect *res = new class cocos2d::CCRect(); *res = obj_self->getScissorRect();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#getScissorRect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_getViewName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getViewName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#getViewName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_getViewPortRect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      class cocos2d::CCRect *res = new class cocos2d::CCRect(); *res = obj_self->getViewPortRect();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       const_cast< cocos2d::CCRect * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#getViewPortRect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_getVisibleOrigin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getVisibleOrigin();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#getVisibleOrigin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_getVisibleSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getVisibleSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#getVisibleSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_handleTouchesBegin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int num;
    mrb_value ids;
    mrb_value xs;
    mrb_value ys;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "iAAA", &num, &ids, &xs, &ys)) {
      int cxx_ids[1]; cc_mrb_ary_conv_to_c_array(mrb, ids, reinterpret_cast< int * >(cxx_ids), 1);
      float cxx_xs[1]; cc_mrb_ary_conv_to_c_array(mrb, xs, reinterpret_cast< float * >(cxx_xs), 1);
      float cxx_ys[1]; cc_mrb_ary_conv_to_c_array(mrb, ys, reinterpret_cast< float * >(cxx_ys), 1);
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      obj_self->handleTouchesBegin(num, cxx_ids, cxx_xs, cxx_ys);
      cc_mrb_ary_conv_from_c_array(mrb, ids, reinterpret_cast< int * >(cxx_ids), 1);
      cc_mrb_ary_conv_from_c_array(mrb, xs, reinterpret_cast< float * >(cxx_xs), 1);
      cc_mrb_ary_conv_from_c_array(mrb, ys, reinterpret_cast< float * >(cxx_ys), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#handleTouchesBegin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_handleTouchesCancel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int num;
    mrb_value ids;
    mrb_value xs;
    mrb_value ys;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "iAAA", &num, &ids, &xs, &ys)) {
      int cxx_ids[1]; cc_mrb_ary_conv_to_c_array(mrb, ids, reinterpret_cast< int * >(cxx_ids), 1);
      float cxx_xs[1]; cc_mrb_ary_conv_to_c_array(mrb, xs, reinterpret_cast< float * >(cxx_xs), 1);
      float cxx_ys[1]; cc_mrb_ary_conv_to_c_array(mrb, ys, reinterpret_cast< float * >(cxx_ys), 1);
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      obj_self->handleTouchesCancel(num, cxx_ids, cxx_xs, cxx_ys);
      cc_mrb_ary_conv_from_c_array(mrb, ids, reinterpret_cast< int * >(cxx_ids), 1);
      cc_mrb_ary_conv_from_c_array(mrb, xs, reinterpret_cast< float * >(cxx_xs), 1);
      cc_mrb_ary_conv_from_c_array(mrb, ys, reinterpret_cast< float * >(cxx_ys), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#handleTouchesCancel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_handleTouchesEnd(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int num;
    mrb_value ids;
    mrb_value xs;
    mrb_value ys;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "iAAA", &num, &ids, &xs, &ys)) {
      int cxx_ids[1]; cc_mrb_ary_conv_to_c_array(mrb, ids, reinterpret_cast< int * >(cxx_ids), 1);
      float cxx_xs[1]; cc_mrb_ary_conv_to_c_array(mrb, xs, reinterpret_cast< float * >(cxx_xs), 1);
      float cxx_ys[1]; cc_mrb_ary_conv_to_c_array(mrb, ys, reinterpret_cast< float * >(cxx_ys), 1);
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      obj_self->handleTouchesEnd(num, cxx_ids, cxx_xs, cxx_ys);
      cc_mrb_ary_conv_from_c_array(mrb, ids, reinterpret_cast< int * >(cxx_ids), 1);
      cc_mrb_ary_conv_from_c_array(mrb, xs, reinterpret_cast< float * >(cxx_xs), 1);
      cc_mrb_ary_conv_from_c_array(mrb, ys, reinterpret_cast< float * >(cxx_ys), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#handleTouchesEnd");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_handleTouchesMove(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int num;
    mrb_value ids;
    mrb_value xs;
    mrb_value ys;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "iAAA", &num, &ids, &xs, &ys)) {
      int cxx_ids[1]; cc_mrb_ary_conv_to_c_array(mrb, ids, reinterpret_cast< int * >(cxx_ids), 1);
      float cxx_xs[1]; cc_mrb_ary_conv_to_c_array(mrb, xs, reinterpret_cast< float * >(cxx_xs), 1);
      float cxx_ys[1]; cc_mrb_ary_conv_to_c_array(mrb, ys, reinterpret_cast< float * >(cxx_ys), 1);
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      obj_self->handleTouchesMove(num, cxx_ids, cxx_xs, cxx_ys);
      cc_mrb_ary_conv_from_c_array(mrb, ids, reinterpret_cast< int * >(cxx_ids), 1);
      cc_mrb_ary_conv_from_c_array(mrb, xs, reinterpret_cast< float * >(cxx_xs), 1);
      cc_mrb_ary_conv_from_c_array(mrb, ys, reinterpret_cast< float * >(cxx_ys), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#handleTouchesMove");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_isOpenGLReady(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpenGLReady();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#isOpenGLReady");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_isScissorEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isScissorEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#isScissorEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_setDesignResolutionSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float width;
    mrb_float height;
    mrb_int resolutionPolicy;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ffi", &width, &height, &resolutionPolicy)) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      obj_self->setDesignResolutionSize(width, height, (enum ResolutionPolicy)resolutionPolicy);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#setDesignResolutionSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_setFrameSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float width;
    mrb_float height;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &width, &height)) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      obj_self->setFrameSize(width, height);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#setFrameSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_setIMEKeyboardState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bOpen;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bOpen)) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      obj_self->setIMEKeyboardState(bOpen);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#setIMEKeyboardState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_setScissorInPoints(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float x;
    mrb_float y;
    mrb_float w;
    mrb_float h;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &x, &y, &w, &h)) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      obj_self->setScissorInPoints(x, y, w, h);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#setScissorInPoints");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_setTouchDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      obj_self->setTouchDelegate(static_cast< cocos2d::EGLTouchDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_EGLTouchDelegate, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#setTouchDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_setViewName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszViewName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszViewName)) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      obj_self->setViewName(RSTRING_PTR(pszViewName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#setViewName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_setViewPortInPoints(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float x;
    mrb_float y;
    mrb_float w;
    mrb_float h;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &x, &y, &w, &h)) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      obj_self->setViewPortInPoints(x, y, w, h);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#setViewPortInPoints");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEGLViewProtocol_swapBuffers(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEGLViewProtocol *obj_self = static_cast< cocos2d::CCEGLViewProtocol * >(DATA_PTR(mrb_self));
      obj_self->swapBuffers();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEGLViewProtocol#swapBuffers");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBackIn_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseBackIn *obj_self = static_cast< cocos2d::CCEaseBackIn * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBackIn#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBackIn_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseBackIn * res = cocos2d::CCEaseBackIn::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseBackIn,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBackIn::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBackIn_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseBackIn *obj_self = static_cast< cocos2d::CCEaseBackIn * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBackIn#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBackIn_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseBackIn *obj_self = static_cast< cocos2d::CCEaseBackIn * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBackIn#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBackIn_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseBackIn;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseBackIn * res = new cocos2d::CCEaseBackIn();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBackIn#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBackInOut_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseBackInOut *obj_self = static_cast< cocos2d::CCEaseBackInOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBackInOut#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBackInOut_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseBackInOut * res = cocos2d::CCEaseBackInOut::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseBackInOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBackInOut::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBackInOut_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseBackInOut *obj_self = static_cast< cocos2d::CCEaseBackInOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBackInOut#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBackInOut_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseBackInOut *obj_self = static_cast< cocos2d::CCEaseBackInOut * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBackInOut#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBackInOut_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseBackInOut;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseBackInOut * res = new cocos2d::CCEaseBackInOut();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBackInOut#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBackOut_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseBackOut *obj_self = static_cast< cocos2d::CCEaseBackOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBackOut#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBackOut_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseBackOut * res = cocos2d::CCEaseBackOut::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseBackOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBackOut::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBackOut_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseBackOut *obj_self = static_cast< cocos2d::CCEaseBackOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBackOut#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBackOut_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseBackOut *obj_self = static_cast< cocos2d::CCEaseBackOut * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBackOut#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBackOut_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseBackOut;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseBackOut * res = new cocos2d::CCEaseBackOut();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBackOut#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounce_bounceTime(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseBounce *obj_self = static_cast< cocos2d::CCEaseBounce * >(DATA_PTR(mrb_self));
      float res = obj_self->bounceTime(time);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounce#bounceTime");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounce_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseBounce *obj_self = static_cast< cocos2d::CCEaseBounce * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounce#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounce_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseBounce * res = cocos2d::CCEaseBounce::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseBounce,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounce::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounce_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseBounce *obj_self = static_cast< cocos2d::CCEaseBounce * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounce#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounce_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseBounce;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseBounce * res = new cocos2d::CCEaseBounce();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounce#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounceIn_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseBounceIn *obj_self = static_cast< cocos2d::CCEaseBounceIn * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounceIn#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounceIn_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseBounceIn * res = cocos2d::CCEaseBounceIn::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseBounceIn,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounceIn::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounceIn_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseBounceIn *obj_self = static_cast< cocos2d::CCEaseBounceIn * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounceIn#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounceIn_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseBounceIn *obj_self = static_cast< cocos2d::CCEaseBounceIn * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounceIn#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounceIn_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseBounceIn;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseBounceIn * res = new cocos2d::CCEaseBounceIn();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounceIn#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounceInOut_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseBounceInOut *obj_self = static_cast< cocos2d::CCEaseBounceInOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounceInOut#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounceInOut_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseBounceInOut * res = cocos2d::CCEaseBounceInOut::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseBounceInOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounceInOut::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounceInOut_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseBounceInOut *obj_self = static_cast< cocos2d::CCEaseBounceInOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounceInOut#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounceInOut_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseBounceInOut *obj_self = static_cast< cocos2d::CCEaseBounceInOut * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounceInOut#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounceInOut_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseBounceInOut;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseBounceInOut * res = new cocos2d::CCEaseBounceInOut();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounceInOut#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounceOut_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseBounceOut *obj_self = static_cast< cocos2d::CCEaseBounceOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounceOut#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounceOut_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseBounceOut * res = cocos2d::CCEaseBounceOut::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseBounceOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounceOut::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounceOut_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseBounceOut *obj_self = static_cast< cocos2d::CCEaseBounceOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounceOut#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounceOut_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseBounceOut *obj_self = static_cast< cocos2d::CCEaseBounceOut * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounceOut#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseBounceOut_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseBounceOut;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseBounceOut * res = new cocos2d::CCEaseBounceOut();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseBounceOut#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElastic_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseElastic *obj_self = static_cast< cocos2d::CCEaseElastic * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElastic#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElastic_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float fPeriod;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &fPeriod)) {
      class cocos2d::CCEaseElastic * res = cocos2d::CCEaseElastic::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)), fPeriod);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseElastic,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseElastic * res = cocos2d::CCEaseElastic::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseElastic,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElastic::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElastic_getPeriod(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseElastic *obj_self = static_cast< cocos2d::CCEaseElastic * >(DATA_PTR(mrb_self));
      float res = obj_self->getPeriod();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElastic#getPeriod");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElastic_initWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float fPeriod;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &fPeriod)) {
      cocos2d::CCEaseElastic *obj_self = static_cast< cocos2d::CCEaseElastic * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithAction(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)), fPeriod);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElastic#initWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElastic_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseElastic *obj_self = static_cast< cocos2d::CCEaseElastic * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElastic#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElastic_setPeriod(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fPeriod;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fPeriod)) {
      cocos2d::CCEaseElastic *obj_self = static_cast< cocos2d::CCEaseElastic * >(DATA_PTR(mrb_self));
      obj_self->setPeriod(fPeriod);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElastic#setPeriod");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElastic_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseElastic;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseElastic * res = new cocos2d::CCEaseElastic();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElastic#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElasticIn_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseElasticIn *obj_self = static_cast< cocos2d::CCEaseElasticIn * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElasticIn#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElasticIn_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float fPeriod;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &fPeriod)) {
      class cocos2d::CCEaseElasticIn * res = cocos2d::CCEaseElasticIn::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)), fPeriod);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseElasticIn,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseElasticIn * res = cocos2d::CCEaseElasticIn::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseElasticIn,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElasticIn::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElasticIn_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseElasticIn *obj_self = static_cast< cocos2d::CCEaseElasticIn * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElasticIn#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElasticIn_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseElasticIn *obj_self = static_cast< cocos2d::CCEaseElasticIn * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElasticIn#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElasticIn_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseElasticIn;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseElasticIn * res = new cocos2d::CCEaseElasticIn();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElasticIn#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElasticInOut_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseElasticInOut *obj_self = static_cast< cocos2d::CCEaseElasticInOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElasticInOut#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElasticInOut_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float fPeriod;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &fPeriod)) {
      class cocos2d::CCEaseElasticInOut * res = cocos2d::CCEaseElasticInOut::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)), fPeriod);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseElasticInOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseElasticInOut * res = cocos2d::CCEaseElasticInOut::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseElasticInOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElasticInOut::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElasticInOut_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseElasticInOut *obj_self = static_cast< cocos2d::CCEaseElasticInOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElasticInOut#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElasticInOut_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseElasticInOut *obj_self = static_cast< cocos2d::CCEaseElasticInOut * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElasticInOut#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElasticInOut_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseElasticInOut;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseElasticInOut * res = new cocos2d::CCEaseElasticInOut();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElasticInOut#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElasticOut_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseElasticOut *obj_self = static_cast< cocos2d::CCEaseElasticOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElasticOut#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElasticOut_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float fPeriod;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &fPeriod)) {
      class cocos2d::CCEaseElasticOut * res = cocos2d::CCEaseElasticOut::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)), fPeriod);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseElasticOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseElasticOut * res = cocos2d::CCEaseElasticOut::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseElasticOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElasticOut::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElasticOut_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseElasticOut *obj_self = static_cast< cocos2d::CCEaseElasticOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElasticOut#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElasticOut_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseElasticOut *obj_self = static_cast< cocos2d::CCEaseElasticOut * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElasticOut#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseElasticOut_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseElasticOut;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseElasticOut * res = new cocos2d::CCEaseElasticOut();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseElasticOut#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseExponentialIn_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseExponentialIn *obj_self = static_cast< cocos2d::CCEaseExponentialIn * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseExponentialIn#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseExponentialIn_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseExponentialIn * res = cocos2d::CCEaseExponentialIn::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseExponentialIn,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseExponentialIn::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseExponentialIn_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseExponentialIn *obj_self = static_cast< cocos2d::CCEaseExponentialIn * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseExponentialIn#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseExponentialIn_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseExponentialIn *obj_self = static_cast< cocos2d::CCEaseExponentialIn * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseExponentialIn#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseExponentialIn_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseExponentialIn;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseExponentialIn * res = new cocos2d::CCEaseExponentialIn();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseExponentialIn#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseExponentialInOut_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseExponentialInOut *obj_self = static_cast< cocos2d::CCEaseExponentialInOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseExponentialInOut#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseExponentialInOut_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseExponentialInOut * res = cocos2d::CCEaseExponentialInOut::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseExponentialInOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseExponentialInOut::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseExponentialInOut_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseExponentialInOut *obj_self = static_cast< cocos2d::CCEaseExponentialInOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseExponentialInOut#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseExponentialInOut_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseExponentialInOut *obj_self = static_cast< cocos2d::CCEaseExponentialInOut * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseExponentialInOut#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseExponentialInOut_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseExponentialInOut;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseExponentialInOut * res = new cocos2d::CCEaseExponentialInOut();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseExponentialInOut#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseExponentialOut_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseExponentialOut *obj_self = static_cast< cocos2d::CCEaseExponentialOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseExponentialOut#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseExponentialOut_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseExponentialOut * res = cocos2d::CCEaseExponentialOut::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseExponentialOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseExponentialOut::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseExponentialOut_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseExponentialOut *obj_self = static_cast< cocos2d::CCEaseExponentialOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseExponentialOut#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseExponentialOut_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseExponentialOut *obj_self = static_cast< cocos2d::CCEaseExponentialOut * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseExponentialOut#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseExponentialOut_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseExponentialOut;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseExponentialOut * res = new cocos2d::CCEaseExponentialOut();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseExponentialOut#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseIn_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseIn *obj_self = static_cast< cocos2d::CCEaseIn * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseIn#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseIn_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float fRate;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &fRate)) {
      class cocos2d::CCEaseIn * res = cocos2d::CCEaseIn::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)), fRate);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseIn,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseIn::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseIn_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseIn *obj_self = static_cast< cocos2d::CCEaseIn * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseIn#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseIn_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseIn *obj_self = static_cast< cocos2d::CCEaseIn * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseIn#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseIn_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseIn;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseIn * res = new cocos2d::CCEaseIn();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseIn#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseInOut_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseInOut *obj_self = static_cast< cocos2d::CCEaseInOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseInOut#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseInOut_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float fRate;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &fRate)) {
      class cocos2d::CCEaseInOut * res = cocos2d::CCEaseInOut::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)), fRate);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseInOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseInOut::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseInOut_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseInOut *obj_self = static_cast< cocos2d::CCEaseInOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseInOut#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseInOut_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseInOut *obj_self = static_cast< cocos2d::CCEaseInOut * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseInOut#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseInOut_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseInOut;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseInOut * res = new cocos2d::CCEaseInOut();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseInOut#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseOut_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseOut *obj_self = static_cast< cocos2d::CCEaseOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseOut#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseOut_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float fRate;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &fRate)) {
      class cocos2d::CCEaseOut * res = cocos2d::CCEaseOut::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)), fRate);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseOut::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseOut_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseOut *obj_self = static_cast< cocos2d::CCEaseOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseOut#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseOut_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseOut *obj_self = static_cast< cocos2d::CCEaseOut * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseOut#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseOut_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseOut;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseOut * res = new cocos2d::CCEaseOut();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseOut#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseRateAction_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseRateAction *obj_self = static_cast< cocos2d::CCEaseRateAction * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseRateAction#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseRateAction_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float fRate;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &fRate)) {
      class cocos2d::CCEaseRateAction * res = cocos2d::CCEaseRateAction::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)), fRate);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseRateAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseRateAction::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseRateAction_getRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseRateAction *obj_self = static_cast< cocos2d::CCEaseRateAction * >(DATA_PTR(mrb_self));
      float res = obj_self->getRate();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseRateAction#getRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseRateAction_initWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float fRate;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &fRate)) {
      cocos2d::CCEaseRateAction *obj_self = static_cast< cocos2d::CCEaseRateAction * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithAction(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)), fRate);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseRateAction#initWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseRateAction_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseRateAction *obj_self = static_cast< cocos2d::CCEaseRateAction * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseRateAction#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseRateAction_setRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float rate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &rate)) {
      cocos2d::CCEaseRateAction *obj_self = static_cast< cocos2d::CCEaseRateAction * >(DATA_PTR(mrb_self));
      obj_self->setRate(rate);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseRateAction#setRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseRateAction_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseRateAction;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseRateAction * res = new cocos2d::CCEaseRateAction();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseRateAction#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseSineIn_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseSineIn *obj_self = static_cast< cocos2d::CCEaseSineIn * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseSineIn#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseSineIn_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseSineIn * res = cocos2d::CCEaseSineIn::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseSineIn,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseSineIn::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseSineIn_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseSineIn *obj_self = static_cast< cocos2d::CCEaseSineIn * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseSineIn#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseSineIn_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseSineIn *obj_self = static_cast< cocos2d::CCEaseSineIn * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseSineIn#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseSineIn_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseSineIn;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseSineIn * res = new cocos2d::CCEaseSineIn();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseSineIn#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseSineInOut_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseSineInOut *obj_self = static_cast< cocos2d::CCEaseSineInOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseSineInOut#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseSineInOut_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseSineInOut * res = cocos2d::CCEaseSineInOut::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseSineInOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseSineInOut::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseSineInOut_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseSineInOut *obj_self = static_cast< cocos2d::CCEaseSineInOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseSineInOut#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseSineInOut_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseSineInOut *obj_self = static_cast< cocos2d::CCEaseSineInOut * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseSineInOut#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseSineInOut_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseSineInOut;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseSineInOut * res = new cocos2d::CCEaseSineInOut();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseSineInOut#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseSineOut_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCEaseSineOut *obj_self = static_cast< cocos2d::CCEaseSineOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseSineOut#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseSineOut_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCEaseSineOut * res = cocos2d::CCEaseSineOut::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCEaseSineOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseSineOut::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseSineOut_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCEaseSineOut *obj_self = static_cast< cocos2d::CCEaseSineOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseSineOut#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseSineOut_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCEaseSineOut *obj_self = static_cast< cocos2d::CCEaseSineOut * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseSineOut#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEaseSineOut_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEaseSineOut;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEaseSineOut * res = new cocos2d::CCEaseSineOut();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEaseSineOut#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCEvent_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCEvent;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCEvent * res = new cocos2d::CCEvent();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCEvent#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeIn_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCFadeIn *obj_self = static_cast< cocos2d::CCFadeIn * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeIn#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeIn_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float d;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &d)) {
      class cocos2d::CCFadeIn * res = cocos2d::CCFadeIn::create(d);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCFadeIn,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeIn::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeIn_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFadeIn *obj_self = static_cast< cocos2d::CCFadeIn * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeIn#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeIn_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCFadeIn *obj_self = static_cast< cocos2d::CCFadeIn * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeIn#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeIn_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCFadeIn;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCFadeIn * res = new cocos2d::CCFadeIn();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeIn#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOut_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCFadeOut *obj_self = static_cast< cocos2d::CCFadeOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOut#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOut_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float d;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &d)) {
      class cocos2d::CCFadeOut * res = cocos2d::CCFadeOut::create(d);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCFadeOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOut::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOut_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFadeOut *obj_self = static_cast< cocos2d::CCFadeOut * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOut#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOut_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCFadeOut *obj_self = static_cast< cocos2d::CCFadeOut * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOut#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOut_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCFadeOut;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCFadeOut * res = new cocos2d::CCFadeOut();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOut#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutBLTiles_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &duration, &gridSize)) {
      class cocos2d::CCFadeOutBLTiles * res = cocos2d::CCFadeOutBLTiles::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCFadeOutBLTiles,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutBLTiles::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutBLTiles_testFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    mrb_float time;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pos, &time)) {
      cocos2d::CCFadeOutBLTiles *obj_self = static_cast< cocos2d::CCFadeOutBLTiles * >(DATA_PTR(mrb_self));
      float res = obj_self->testFunc(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), time);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutBLTiles#testFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutBLTiles_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCFadeOutBLTiles;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCFadeOutBLTiles * res = new cocos2d::CCFadeOutBLTiles();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutBLTiles#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutDownTiles_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &duration, &gridSize)) {
      class cocos2d::CCFadeOutDownTiles * res = cocos2d::CCFadeOutDownTiles::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCFadeOutDownTiles,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutDownTiles::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutDownTiles_testFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    mrb_float time;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pos, &time)) {
      cocos2d::CCFadeOutDownTiles *obj_self = static_cast< cocos2d::CCFadeOutDownTiles * >(DATA_PTR(mrb_self));
      float res = obj_self->testFunc(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), time);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutDownTiles#testFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutDownTiles_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCFadeOutDownTiles;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCFadeOutDownTiles * res = new cocos2d::CCFadeOutDownTiles();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutDownTiles#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutTRTiles_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &duration, &gridSize)) {
      class cocos2d::CCFadeOutTRTiles * res = cocos2d::CCFadeOutTRTiles::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCFadeOutTRTiles,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutTRTiles::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutTRTiles_testFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    mrb_float time;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pos, &time)) {
      cocos2d::CCFadeOutTRTiles *obj_self = static_cast< cocos2d::CCFadeOutTRTiles * >(DATA_PTR(mrb_self));
      float res = obj_self->testFunc(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), time);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutTRTiles#testFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutTRTiles_transformTile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    mrb_float distance;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pos, &distance)) {
      cocos2d::CCFadeOutTRTiles *obj_self = static_cast< cocos2d::CCFadeOutTRTiles * >(DATA_PTR(mrb_self));
      obj_self->transformTile(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), distance);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutTRTiles#transformTile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutTRTiles_turnOffTile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pos)) {
      cocos2d::CCFadeOutTRTiles *obj_self = static_cast< cocos2d::CCFadeOutTRTiles * >(DATA_PTR(mrb_self));
      obj_self->turnOffTile(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutTRTiles#turnOffTile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutTRTiles_turnOnTile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pos)) {
      cocos2d::CCFadeOutTRTiles *obj_self = static_cast< cocos2d::CCFadeOutTRTiles * >(DATA_PTR(mrb_self));
      obj_self->turnOnTile(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutTRTiles#turnOnTile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutTRTiles_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCFadeOutTRTiles *obj_self = static_cast< cocos2d::CCFadeOutTRTiles * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutTRTiles#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutTRTiles_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCFadeOutTRTiles;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCFadeOutTRTiles * res = new cocos2d::CCFadeOutTRTiles();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutTRTiles#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutUpTiles_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &duration, &gridSize)) {
      class cocos2d::CCFadeOutUpTiles * res = cocos2d::CCFadeOutUpTiles::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCFadeOutUpTiles,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutUpTiles::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutUpTiles_testFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    mrb_float time;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pos, &time)) {
      cocos2d::CCFadeOutUpTiles *obj_self = static_cast< cocos2d::CCFadeOutUpTiles * >(DATA_PTR(mrb_self));
      float res = obj_self->testFunc(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), time);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutUpTiles#testFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutUpTiles_transformTile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    mrb_float distance;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pos, &distance)) {
      cocos2d::CCFadeOutUpTiles *obj_self = static_cast< cocos2d::CCFadeOutUpTiles * >(DATA_PTR(mrb_self));
      obj_self->transformTile(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), distance);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutUpTiles#transformTile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeOutUpTiles_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCFadeOutUpTiles;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCFadeOutUpTiles * res = new cocos2d::CCFadeOutUpTiles();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeOutUpTiles#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeTo_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCFadeTo *obj_self = static_cast< cocos2d::CCFadeTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeTo#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeTo_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_int opacity;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fi", &duration, &opacity)) {
      class cocos2d::CCFadeTo * res = cocos2d::CCFadeTo::create(duration, opacity);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCFadeTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeTo::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeTo_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_int opacity;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fi", &duration, &opacity)) {
      cocos2d::CCFadeTo *obj_self = static_cast< cocos2d::CCFadeTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, opacity);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeTo#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeTo_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCFadeTo *obj_self = static_cast< cocos2d::CCFadeTo * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeTo#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeTo_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCFadeTo *obj_self = static_cast< cocos2d::CCFadeTo * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeTo#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFadeTo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCFadeTo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCFadeTo * res = new cocos2d::CCFadeTo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFadeTo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_addSearchPath(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value path;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &path)) {
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      obj_self->addSearchPath(RSTRING_PTR(path));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#addSearchPath");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_addSearchResolutionsOrder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value order;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &order)) {
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      obj_self->addSearchResolutionsOrder(RSTRING_PTR(order));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#addSearchResolutionsOrder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_fullPathForFilename(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszFileName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszFileName)) {
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      std::string res = obj_self->fullPathForFilename(RSTRING_PTR(pszFileName));
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#fullPathForFilename");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_fullPathFromRelativeFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszFilename;
    mrb_value pszRelativeFile;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &pszFilename, &pszRelativeFile)) {
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      std::string res = obj_self->fullPathFromRelativeFile(RSTRING_PTR(pszFilename), RSTRING_PTR(pszRelativeFile));
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#fullPathFromRelativeFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_getClassTypeInfo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      long res = obj_self->getClassTypeInfo();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#getClassTypeInfo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_getFileData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszFileName;
    mrb_value pszMode;
    mrb_value pSize;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSA", &pszFileName, &pszMode, &pSize)) {
      unsigned long cxx_pSize[1]; cc_mrb_ary_conv_to_c_array(mrb, pSize, reinterpret_cast< unsigned long * >(cxx_pSize), 1);
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      unsigned char *res = obj_self->getFileData(RSTRING_PTR(pszFileName), RSTRING_PTR(pszMode), cxx_pSize);
      cc_mrb_ary_conv_from_c_array(mrb, pSize, reinterpret_cast< unsigned long * >(cxx_pSize), 1);
      mrb_value mrb_res = cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 1), reinterpret_cast< unsigned char * >(res), 1);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#getFileData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_getFileDataFromZip(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszZipFilePath;
    mrb_value pszFileName;
    mrb_value pSize;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSA", &pszZipFilePath, &pszFileName, &pSize)) {
      unsigned long cxx_pSize[1]; cc_mrb_ary_conv_to_c_array(mrb, pSize, reinterpret_cast< unsigned long * >(cxx_pSize), 1);
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      unsigned char *res = obj_self->getFileDataFromZip(RSTRING_PTR(pszZipFilePath), RSTRING_PTR(pszFileName), cxx_pSize);
      cc_mrb_ary_conv_from_c_array(mrb, pSize, reinterpret_cast< unsigned long * >(cxx_pSize), 1);
      mrb_value mrb_res = cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 1), reinterpret_cast< unsigned char * >(res), 1);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#getFileDataFromZip");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_getSearchPaths(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      const std::vector<std::string> & res = obj_self->getSearchPaths();
      mrb_value mrb_res = cc_mrb_ary_conv_from(mrb, mrb_ary_new(mrb), res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#getSearchPaths");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_getSearchResolutionsOrder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      const std::vector<std::string> & res = obj_self->getSearchResolutionsOrder();
      mrb_value mrb_res = cc_mrb_ary_conv_from(mrb, mrb_ary_new(mrb), res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#getSearchResolutionsOrder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_getWritablePath(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getWritablePath();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#getWritablePath");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_isAbsolutePath(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value strPath;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &strPath)) {
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isAbsolutePath(RSTRING_PTR(strPath));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#isAbsolutePath");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_isFileExist(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value strFilePath;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &strFilePath)) {
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isFileExist(RSTRING_PTR(strFilePath));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#isFileExist");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_isPopupNotify(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isPopupNotify();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#isPopupNotify");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_loadFilenameLookupDictionaryFromFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value filename;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &filename)) {
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      obj_self->loadFilenameLookupDictionaryFromFile(RSTRING_PTR(filename));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#loadFilenameLookupDictionaryFromFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_purgeCachedEntries(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      obj_self->purgeCachedEntries();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#purgeCachedEntries");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_purgeFileUtils(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFileUtils::purgeFileUtils();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils::purgeFileUtils");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_setFilenameLookupDictionary(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pFilenameLookupDict;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pFilenameLookupDict)) {
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      obj_self->setFilenameLookupDictionary(static_cast< cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, pFilenameLookupDict, &mrb_type_cocos2d_CCDictionary, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#setFilenameLookupDictionary");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_setPopupNotify(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bNotify;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bNotify)) {
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      obj_self->setPopupNotify(bNotify);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#setPopupNotify");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_setSearchPaths(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value searchPaths;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "A", &searchPaths)) {
      std::vector<std::string> cxx_searchPaths; cc_mrb_ary_conv_to(mrb, searchPaths, cxx_searchPaths);
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      obj_self->setSearchPaths(cxx_searchPaths);
      cc_mrb_ary_conv_from(mrb, searchPaths, cxx_searchPaths);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#setSearchPaths");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_setSearchResolutionsOrder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value searchResolutionsOrder;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "A", &searchResolutionsOrder)) {
      std::vector<std::string> cxx_searchResolutionsOrder; cc_mrb_ary_conv_to(mrb, searchResolutionsOrder, cxx_searchResolutionsOrder);
      cocos2d::CCFileUtils *obj_self = static_cast< cocos2d::CCFileUtils * >(DATA_PTR(mrb_self));
      obj_self->setSearchResolutionsOrder(cxx_searchResolutionsOrder);
      cc_mrb_ary_conv_from(mrb, searchResolutionsOrder, cxx_searchResolutionsOrder);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils#setSearchResolutionsOrder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFileUtils_sharedFileUtils(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCFileUtils * res = cocos2d::CCFileUtils::sharedFileUtils();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCFileUtils"),
                       &mrb_no_free_type_cocos2d_CCFileUtils,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFileUtils::sharedFileUtils");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFiniteTimeAction_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCFiniteTimeAction;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCFiniteTimeAction * res = new cocos2d::CCFiniteTimeAction();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFiniteTimeAction#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFiniteTimeAction_getDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFiniteTimeAction *obj_self = static_cast< cocos2d::CCFiniteTimeAction * >(DATA_PTR(mrb_self));
      float res = obj_self->getDuration();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFiniteTimeAction#getDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFiniteTimeAction_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFiniteTimeAction *obj_self = static_cast< cocos2d::CCFiniteTimeAction * >(DATA_PTR(mrb_self));
      class cocos2d::CCFiniteTimeAction * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCFiniteTimeAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFiniteTimeAction#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFiniteTimeAction_setDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &duration)) {
      cocos2d::CCFiniteTimeAction *obj_self = static_cast< cocos2d::CCFiniteTimeAction * >(DATA_PTR(mrb_self));
      obj_self->setDuration(duration);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFiniteTimeAction#setDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipX_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCFlipX;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCFlipX * res = new cocos2d::CCFlipX();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipX#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipX_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCFlipX *obj_self = static_cast< cocos2d::CCFlipX * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipX#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipX_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool x;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &x)) {
      class cocos2d::CCFlipX * res = cocos2d::CCFlipX::create(x);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCFlipX,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipX::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipX_initWithFlipX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool x;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &x)) {
      cocos2d::CCFlipX *obj_self = static_cast< cocos2d::CCFlipX * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFlipX(x);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipX#initWithFlipX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipX_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFlipX *obj_self = static_cast< cocos2d::CCFlipX * >(DATA_PTR(mrb_self));
      class cocos2d::CCFiniteTimeAction * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCFiniteTimeAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipX#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipX_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCFlipX *obj_self = static_cast< cocos2d::CCFlipX * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipX#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipX3D_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCFlipX3D *obj_self = static_cast< cocos2d::CCFlipX3D * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipX3D#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipX3D_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &duration)) {
      class cocos2d::CCFlipX3D * res = cocos2d::CCFlipX3D::create(duration);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCFlipX3D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipX3D::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipX3D_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &duration)) {
      cocos2d::CCFlipX3D *obj_self = static_cast< cocos2d::CCFlipX3D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipX3D#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipX3D_initWithSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value gridSize;
    mrb_float duration;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &gridSize, &duration)) {
      cocos2d::CCFlipX3D *obj_self = static_cast< cocos2d::CCFlipX3D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), duration);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipX3D#initWithSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipX3D_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCFlipX3D *obj_self = static_cast< cocos2d::CCFlipX3D * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipX3D#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipX3D_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCFlipX3D;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCFlipX3D * res = new cocos2d::CCFlipX3D();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipX3D#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipY_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCFlipY;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCFlipY * res = new cocos2d::CCFlipY();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipY#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipY_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCFlipY *obj_self = static_cast< cocos2d::CCFlipY * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipY#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipY_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool y;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &y)) {
      class cocos2d::CCFlipY * res = cocos2d::CCFlipY::create(y);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCFlipY,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipY::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipY_initWithFlipY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool y;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &y)) {
      cocos2d::CCFlipY *obj_self = static_cast< cocos2d::CCFlipY * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFlipY(y);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipY#initWithFlipY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipY_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFlipY *obj_self = static_cast< cocos2d::CCFlipY * >(DATA_PTR(mrb_self));
      class cocos2d::CCFiniteTimeAction * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCFiniteTimeAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipY#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipY_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCFlipY *obj_self = static_cast< cocos2d::CCFlipY * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipY#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipY3D_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCFlipY3D *obj_self = static_cast< cocos2d::CCFlipY3D * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipY3D#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipY3D_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &duration)) {
      class cocos2d::CCFlipY3D * res = cocos2d::CCFlipY3D::create(duration);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCFlipY3D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipY3D::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipY3D_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCFlipY3D *obj_self = static_cast< cocos2d::CCFlipY3D * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipY3D#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFlipY3D_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCFlipY3D;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCFlipY3D * res = new cocos2d::CCFlipY3D();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFlipY3D#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFloat_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float v;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCFloat;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &v)) {
      cocos2d::CCFloat * res = new cocos2d::CCFloat(v);
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFloat#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFloat_acceptVisitor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value visitor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &visitor)) {
      cocos2d::CCFloat *obj_self = static_cast< cocos2d::CCFloat * >(DATA_PTR(mrb_self));
      obj_self->acceptVisitor(*(static_cast< cocos2d::CCDataVisitor * >(DATA_PTR(visitor))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFloat#acceptVisitor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFloat_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float v;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &v)) {
      class cocos2d::CCFloat * res = cocos2d::CCFloat::create(v);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCFloat,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFloat::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFloat_getValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFloat *obj_self = static_cast< cocos2d::CCFloat * >(DATA_PTR(mrb_self));
      float res = obj_self->getValue();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFloat#getValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFollow_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCFollow;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCFollow * res = new cocos2d::CCFollow();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFollow#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFollow_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCFollow *obj_self = static_cast< cocos2d::CCFollow * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFollow#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFollow_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pFollowedNode;
    mrb_value rect;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pFollowedNode, &rect)) {
      class cocos2d::CCFollow * res = cocos2d::CCFollow::create(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pFollowedNode, &mrb_type_cocos2d_CCNode, NULL)), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCFollow,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFollow::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFollow_initWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pFollowedNode;
    mrb_value rect;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pFollowedNode, &rect)) {
      cocos2d::CCFollow *obj_self = static_cast< cocos2d::CCFollow * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pFollowedNode, &mrb_type_cocos2d_CCNode, NULL)), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFollow#initWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFollow_isBoundarySet(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFollow *obj_self = static_cast< cocos2d::CCFollow * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isBoundarySet();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFollow#isBoundarySet");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFollow_isDone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFollow *obj_self = static_cast< cocos2d::CCFollow * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isDone();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFollow#isDone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFollow_setBoudarySet(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bValue)) {
      cocos2d::CCFollow *obj_self = static_cast< cocos2d::CCFollow * >(DATA_PTR(mrb_self));
      obj_self->setBoudarySet(bValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFollow#setBoudarySet");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFollow_step(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::CCFollow *obj_self = static_cast< cocos2d::CCFollow * >(DATA_PTR(mrb_self));
      obj_self->step(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFollow#step");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCFollow_stop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCFollow *obj_self = static_cast< cocos2d::CCFollow * >(DATA_PTR(mrb_self));
      obj_self->stop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCFollow#stop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCGLProgram;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCGLProgram * res = new cocos2d::CCGLProgram();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_addAttribute(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value attributeName;
    mrb_int index;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &attributeName, &index)) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->addAttribute(RSTRING_PTR(attributeName), index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#addAttribute");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_fragmentShaderLog(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      std::string res = obj_self->fragmentShaderLog();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#fragmentShaderLog");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_getProgram(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      const GLuint res = obj_self->getProgram();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#getProgram");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_getUniformLocationForName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      GLint res = obj_self->getUniformLocationForName(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#getUniformLocationForName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_initWithVertexShaderByteArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value vShaderByteArray;
    mrb_value fShaderByteArray;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &vShaderByteArray, &fShaderByteArray)) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithVertexShaderByteArray(RSTRING_PTR(vShaderByteArray), RSTRING_PTR(fShaderByteArray));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#initWithVertexShaderByteArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_initWithVertexShaderFilename(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value vShaderFilename;
    mrb_value fShaderFilename;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &vShaderFilename, &fShaderFilename)) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithVertexShaderFilename(RSTRING_PTR(vShaderFilename), RSTRING_PTR(fShaderFilename));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#initWithVertexShaderFilename");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_link(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->link();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#link");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_programLog(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      std::string res = obj_self->programLog();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#programLog");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_reset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->reset();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#reset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformLocationWith1f(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int location;
    mrb_float f1;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "if", &location, &f1)) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformLocationWith1f(location, f1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformLocationWith1f");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformLocationWith1i(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int location;
    mrb_int i1;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ii", &location, &i1)) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformLocationWith1i(location, i1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformLocationWith1i");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformLocationWith2f(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int location;
    mrb_float f1;
    mrb_float f2;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "iff", &location, &f1, &f2)) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformLocationWith2f(location, f1, f2);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformLocationWith2f");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformLocationWith2fv(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int location;
    mrb_value floats;
    mrb_int numberOfArrays;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "iAi", &location, &floats, &numberOfArrays)) {
      GLfloat cxx_floats[1]; cc_mrb_ary_conv_to_c_array(mrb, floats, reinterpret_cast< float * >(cxx_floats), 1);
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformLocationWith2fv(location, cxx_floats, numberOfArrays);
      cc_mrb_ary_conv_from_c_array(mrb, floats, reinterpret_cast< GLfloat * >(cxx_floats), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformLocationWith2fv");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformLocationWith2i(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int location;
    mrb_int i1;
    mrb_int i2;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "iii", &location, &i1, &i2)) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformLocationWith2i(location, i1, i2);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformLocationWith2i");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformLocationWith2iv(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int location;
    mrb_value ints;
    mrb_int numberOfArrays;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "iAi", &location, &ints, &numberOfArrays)) {
      GLint cxx_ints[1]; cc_mrb_ary_conv_to_c_array(mrb, ints, reinterpret_cast< int * >(cxx_ints), 1);
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformLocationWith2iv(location, cxx_ints, numberOfArrays);
      cc_mrb_ary_conv_from_c_array(mrb, ints, reinterpret_cast< GLint * >(cxx_ints), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformLocationWith2iv");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformLocationWith3f(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int location;
    mrb_float f1;
    mrb_float f2;
    mrb_float f3;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ifff", &location, &f1, &f2, &f3)) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformLocationWith3f(location, f1, f2, f3);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformLocationWith3f");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformLocationWith3fv(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int location;
    mrb_value floats;
    mrb_int numberOfArrays;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "iAi", &location, &floats, &numberOfArrays)) {
      GLfloat cxx_floats[1]; cc_mrb_ary_conv_to_c_array(mrb, floats, reinterpret_cast< float * >(cxx_floats), 1);
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformLocationWith3fv(location, cxx_floats, numberOfArrays);
      cc_mrb_ary_conv_from_c_array(mrb, floats, reinterpret_cast< GLfloat * >(cxx_floats), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformLocationWith3fv");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformLocationWith3i(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int location;
    mrb_int i1;
    mrb_int i2;
    mrb_int i3;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "iiii", &location, &i1, &i2, &i3)) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformLocationWith3i(location, i1, i2, i3);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformLocationWith3i");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformLocationWith3iv(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int location;
    mrb_value ints;
    mrb_int numberOfArrays;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "iAi", &location, &ints, &numberOfArrays)) {
      GLint cxx_ints[1]; cc_mrb_ary_conv_to_c_array(mrb, ints, reinterpret_cast< int * >(cxx_ints), 1);
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformLocationWith3iv(location, cxx_ints, numberOfArrays);
      cc_mrb_ary_conv_from_c_array(mrb, ints, reinterpret_cast< GLint * >(cxx_ints), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformLocationWith3iv");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformLocationWith4f(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int location;
    mrb_float f1;
    mrb_float f2;
    mrb_float f3;
    mrb_float f4;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "iffff", &location, &f1, &f2, &f3, &f4)) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformLocationWith4f(location, f1, f2, f3, f4);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformLocationWith4f");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformLocationWith4fv(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int location;
    mrb_value floats;
    mrb_int numberOfArrays;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "iAi", &location, &floats, &numberOfArrays)) {
      GLfloat cxx_floats[1]; cc_mrb_ary_conv_to_c_array(mrb, floats, reinterpret_cast< float * >(cxx_floats), 1);
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformLocationWith4fv(location, cxx_floats, numberOfArrays);
      cc_mrb_ary_conv_from_c_array(mrb, floats, reinterpret_cast< GLfloat * >(cxx_floats), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformLocationWith4fv");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformLocationWith4i(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int location;
    mrb_int i1;
    mrb_int i2;
    mrb_int i3;
    mrb_int i4;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "iiiii", &location, &i1, &i2, &i3, &i4)) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformLocationWith4i(location, i1, i2, i3, i4);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformLocationWith4i");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformLocationWith4iv(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int location;
    mrb_value ints;
    mrb_int numberOfArrays;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "iAi", &location, &ints, &numberOfArrays)) {
      GLint cxx_ints[1]; cc_mrb_ary_conv_to_c_array(mrb, ints, reinterpret_cast< int * >(cxx_ints), 1);
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformLocationWith4iv(location, cxx_ints, numberOfArrays);
      cc_mrb_ary_conv_from_c_array(mrb, ints, reinterpret_cast< GLint * >(cxx_ints), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformLocationWith4iv");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformLocationWithMatrix4fv(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int location;
    mrb_value matrixArray;
    mrb_int numberOfMatrices;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "iAi", &location, &matrixArray, &numberOfMatrices)) {
      GLfloat cxx_matrixArray[1]; cc_mrb_ary_conv_to_c_array(mrb, matrixArray, reinterpret_cast< float * >(cxx_matrixArray), 1);
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformLocationWithMatrix4fv(location, cxx_matrixArray, numberOfMatrices);
      cc_mrb_ary_conv_from_c_array(mrb, matrixArray, reinterpret_cast< GLfloat * >(cxx_matrixArray), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformLocationWithMatrix4fv");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_setUniformsForBuiltins(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->setUniformsForBuiltins();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#setUniformsForBuiltins");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_updateUniforms(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->updateUniforms();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#updateUniforms");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_use(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      obj_self->use();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#use");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGLProgram_vertexShaderLog(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGLProgram *obj_self = static_cast< cocos2d::CCGLProgram * >(DATA_PTR(mrb_self));
      std::string res = obj_self->vertexShaderLog();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGLProgram#vertexShaderLog");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrabber_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCGrabber;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCGrabber * res = new cocos2d::CCGrabber();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrabber#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrabber_afterRender(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTexture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTexture)) {
      cocos2d::CCGrabber *obj_self = static_cast< cocos2d::CCGrabber * >(DATA_PTR(mrb_self));
      obj_self->afterRender(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pTexture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrabber#afterRender");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrabber_beforeRender(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTexture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTexture)) {
      cocos2d::CCGrabber *obj_self = static_cast< cocos2d::CCGrabber * >(DATA_PTR(mrb_self));
      obj_self->beforeRender(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pTexture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrabber#beforeRender");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrabber_grab(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTexture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTexture)) {
      cocos2d::CCGrabber *obj_self = static_cast< cocos2d::CCGrabber * >(DATA_PTR(mrb_self));
      obj_self->grab(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pTexture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrabber#grab");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrid3D_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCGrid3D;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCGrid3D * res = new cocos2d::CCGrid3D();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrid3D#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrid3D_blit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGrid3D *obj_self = static_cast< cocos2d::CCGrid3D * >(DATA_PTR(mrb_self));
      obj_self->blit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrid3D#blit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrid3D_calculateVertexPoints(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGrid3D *obj_self = static_cast< cocos2d::CCGrid3D * >(DATA_PTR(mrb_self));
      obj_self->calculateVertexPoints();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrid3D#calculateVertexPoints");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrid3D_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value gridSize;
    mrb_value pTexture;
    mrb_bool bFlipped;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oob", &gridSize, &pTexture, &bFlipped)) {
      class cocos2d::CCGrid3D * res = cocos2d::CCGrid3D::create(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pTexture, &mrb_type_cocos2d_CCTexture2D, NULL)), bFlipped);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCGrid3D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value gridSize;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &gridSize)) {
      class cocos2d::CCGrid3D * res = cocos2d::CCGrid3D::create(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCGrid3D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrid3D::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrid3D_originalVertex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pos)) {
      cocos2d::CCGrid3D *obj_self = static_cast< cocos2d::CCGrid3D * >(DATA_PTR(mrb_self));
      ccVertex3F *res = new ccVertex3F(); *res = obj_self->originalVertex(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex3F"),
                       &mrb_type_cocos2d__ccVertex3F,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrid3D#originalVertex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrid3D_reuse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGrid3D *obj_self = static_cast< cocos2d::CCGrid3D * >(DATA_PTR(mrb_self));
      obj_self->reuse();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrid3D#reuse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrid3D_setVertex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    mrb_value vertex;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pos, &vertex)) {
      cocos2d::CCGrid3D *obj_self = static_cast< cocos2d::CCGrid3D * >(DATA_PTR(mrb_self));
      obj_self->setVertex(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const ccVertex3F * >(cc_mrb_data_get_ptr(mrb, vertex, &mrb_type_cocos2d__ccVertex3F, &mrb_no_free_type_cocos2d__ccVertex3F))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrid3D#setVertex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrid3D_vertex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pos)) {
      cocos2d::CCGrid3D *obj_self = static_cast< cocos2d::CCGrid3D * >(DATA_PTR(mrb_self));
      ccVertex3F *res = new ccVertex3F(); *res = obj_self->vertex(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex3F"),
                       &mrb_type_cocos2d__ccVertex3F,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrid3D#vertex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrid3DAction_getGrid(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGrid3DAction *obj_self = static_cast< cocos2d::CCGrid3DAction * >(DATA_PTR(mrb_self));
      class cocos2d::CCGridBase * res = obj_self->getGrid();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCGridBase,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrid3DAction#getGrid");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrid3DAction_originalVertex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value position;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &position)) {
      cocos2d::CCGrid3DAction *obj_self = static_cast< cocos2d::CCGrid3DAction * >(DATA_PTR(mrb_self));
      ccVertex3F *res = new ccVertex3F(); *res = obj_self->originalVertex(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex3F"),
                       &mrb_type_cocos2d__ccVertex3F,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrid3DAction#originalVertex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrid3DAction_setVertex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value position;
    mrb_value vertex;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &position, &vertex)) {
      cocos2d::CCGrid3DAction *obj_self = static_cast< cocos2d::CCGrid3DAction * >(DATA_PTR(mrb_self));
      obj_self->setVertex(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const ccVertex3F * >(cc_mrb_data_get_ptr(mrb, vertex, &mrb_type_cocos2d__ccVertex3F, &mrb_no_free_type_cocos2d__ccVertex3F))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrid3DAction#setVertex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrid3DAction_vertex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value position;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &position)) {
      cocos2d::CCGrid3DAction *obj_self = static_cast< cocos2d::CCGrid3DAction * >(DATA_PTR(mrb_self));
      ccVertex3F *res = new ccVertex3F(); *res = obj_self->vertex(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex3F"),
                       &mrb_type_cocos2d__ccVertex3F,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrid3DAction#vertex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGrid3DAction_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCGrid3DAction;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCGrid3DAction * res = new cocos2d::CCGrid3DAction();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGrid3DAction#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridAction_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCGridAction *obj_self = static_cast< cocos2d::CCGridAction * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridAction#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridAction_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &duration, &gridSize)) {
      class cocos2d::CCGridAction * res = cocos2d::CCGridAction::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCGridAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridAction::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridAction_getGrid(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGridAction *obj_self = static_cast< cocos2d::CCGridAction * >(DATA_PTR(mrb_self));
      class cocos2d::CCGridBase * res = obj_self->getGrid();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCGridBase,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridAction#getGrid");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridAction_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &duration, &gridSize)) {
      cocos2d::CCGridAction *obj_self = static_cast< cocos2d::CCGridAction * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridAction#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridAction_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGridAction *obj_self = static_cast< cocos2d::CCGridAction * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridAction#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridAction_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCGridAction *obj_self = static_cast< cocos2d::CCGridAction * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridAction#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridAction_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCGridAction;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCGridAction * res = new cocos2d::CCGridAction();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridAction#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_afterDraw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      obj_self->afterDraw(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#afterDraw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_beforeDraw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      obj_self->beforeDraw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#beforeDraw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_blit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      obj_self->blit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#blit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_calculateVertexPoints(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      obj_self->calculateVertexPoints();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#calculateVertexPoints");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value gridSize;
    mrb_value texture;
    mrb_bool flipped;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oob", &gridSize, &texture, &flipped)) {
      class cocos2d::CCGridBase * res = cocos2d::CCGridBase::create(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)), flipped);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCGridBase,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value gridSize;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &gridSize)) {
      class cocos2d::CCGridBase * res = cocos2d::CCGridBase::create(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCGridBase,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_getGridSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getGridSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       const_cast< cocos2d::CCSize * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#getGridSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_getReuseGrid(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      int res = obj_self->getReuseGrid();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#getReuseGrid");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_getStep(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getStep();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#getStep");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_initWithSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value gridSize;
    mrb_value pTexture;
    mrb_bool bFlipped;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oob", &gridSize, &pTexture, &bFlipped)) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pTexture, &mrb_type_cocos2d_CCTexture2D, NULL)), bFlipped);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value gridSize;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &gridSize)) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#initWithSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_isActive(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isActive();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#isActive");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_isTextureFlipped(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isTextureFlipped();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#isTextureFlipped");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_reuse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      obj_self->reuse();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#reuse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_set2DProjection(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      obj_self->set2DProjection();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#set2DProjection");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_setActive(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bActive;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bActive)) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      obj_self->setActive(bActive);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#setActive");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_setGridSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value gridSize;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &gridSize)) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      obj_self->setGridSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#setGridSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_setReuseGrid(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nReuseGrid;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nReuseGrid)) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      obj_self->setReuseGrid(nReuseGrid);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#setReuseGrid");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_setStep(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value step;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &step)) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      obj_self->setStep(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, step, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#setStep");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_setTextureFlipped(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bFlipped;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bFlipped)) {
      cocos2d::CCGridBase *obj_self = static_cast< cocos2d::CCGridBase * >(DATA_PTR(mrb_self));
      obj_self->setTextureFlipped(bFlipped);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#setTextureFlipped");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCGridBase_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCGridBase;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCGridBase * res = new cocos2d::CCGridBase();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCGridBase#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCHide_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCHide;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCHide * res = new cocos2d::CCHide();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCHide#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCHide_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCHide *obj_self = static_cast< cocos2d::CCHide * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCHide#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCHide_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCHide * res = cocos2d::CCHide::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCHide,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCHide::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCHide_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCHide *obj_self = static_cast< cocos2d::CCHide * >(DATA_PTR(mrb_self));
      class cocos2d::CCFiniteTimeAction * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCFiniteTimeAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCHide#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCHide_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCHide *obj_self = static_cast< cocos2d::CCHide * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCHide#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCIMEDelegate_attachWithIME(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCIMEDelegate *obj_self = static_cast< cocos2d::CCIMEDelegate * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->attachWithIME();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCIMEDelegate#attachWithIME");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCIMEDelegate_detachWithIME(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCIMEDelegate *obj_self = static_cast< cocos2d::CCIMEDelegate * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->detachWithIME();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCIMEDelegate#detachWithIME");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCIMEDispatcher_dispatchDeleteBackward(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCIMEDispatcher *obj_self = static_cast< cocos2d::CCIMEDispatcher * >(DATA_PTR(mrb_self));
      obj_self->dispatchDeleteBackward();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCIMEDispatcher#dispatchDeleteBackward");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCIMEDispatcher_dispatchInsertText(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pText;
    mrb_int nLen;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &pText, &nLen)) {
      cocos2d::CCIMEDispatcher *obj_self = static_cast< cocos2d::CCIMEDispatcher * >(DATA_PTR(mrb_self));
      obj_self->dispatchInsertText(RSTRING_PTR(pText), nLen);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCIMEDispatcher#dispatchInsertText");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCIMEDispatcher_dispatchKeyboardDidHide(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value info;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &info)) {
      cocos2d::CCIMEDispatcher *obj_self = static_cast< cocos2d::CCIMEDispatcher * >(DATA_PTR(mrb_self));
      obj_self->dispatchKeyboardDidHide(*(static_cast< CCIMEKeyboardNotificationInfo * >(cc_mrb_data_get_ptr(mrb, info, &mrb_type_cocos2d_CCIMEKeyboardNotificationInfo, &mrb_no_free_type_cocos2d_CCIMEKeyboardNotificationInfo))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCIMEDispatcher#dispatchKeyboardDidHide");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCIMEDispatcher_dispatchKeyboardDidShow(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value info;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &info)) {
      cocos2d::CCIMEDispatcher *obj_self = static_cast< cocos2d::CCIMEDispatcher * >(DATA_PTR(mrb_self));
      obj_self->dispatchKeyboardDidShow(*(static_cast< CCIMEKeyboardNotificationInfo * >(cc_mrb_data_get_ptr(mrb, info, &mrb_type_cocos2d_CCIMEKeyboardNotificationInfo, &mrb_no_free_type_cocos2d_CCIMEKeyboardNotificationInfo))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCIMEDispatcher#dispatchKeyboardDidShow");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCIMEDispatcher_dispatchKeyboardWillHide(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value info;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &info)) {
      cocos2d::CCIMEDispatcher *obj_self = static_cast< cocos2d::CCIMEDispatcher * >(DATA_PTR(mrb_self));
      obj_self->dispatchKeyboardWillHide(*(static_cast< CCIMEKeyboardNotificationInfo * >(cc_mrb_data_get_ptr(mrb, info, &mrb_type_cocos2d_CCIMEKeyboardNotificationInfo, &mrb_no_free_type_cocos2d_CCIMEKeyboardNotificationInfo))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCIMEDispatcher#dispatchKeyboardWillHide");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCIMEDispatcher_dispatchKeyboardWillShow(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value info;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &info)) {
      cocos2d::CCIMEDispatcher *obj_self = static_cast< cocos2d::CCIMEDispatcher * >(DATA_PTR(mrb_self));
      obj_self->dispatchKeyboardWillShow(*(static_cast< CCIMEKeyboardNotificationInfo * >(cc_mrb_data_get_ptr(mrb, info, &mrb_type_cocos2d_CCIMEKeyboardNotificationInfo, &mrb_no_free_type_cocos2d_CCIMEKeyboardNotificationInfo))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCIMEDispatcher#dispatchKeyboardWillShow");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCIMEDispatcher_getContentText(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCIMEDispatcher *obj_self = static_cast< cocos2d::CCIMEDispatcher * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getContentText();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCIMEDispatcher#getContentText");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCIMEDispatcher_sharedDispatcher(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCIMEDispatcher * res = cocos2d::CCIMEDispatcher::sharedDispatcher();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCIMEDispatcher"),
                       &mrb_no_free_type_cocos2d_CCIMEDispatcher,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCIMEDispatcher::sharedDispatcher");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCIMEKeyboardNotificationInfo__get_begin(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCIMEKeyboardNotificationInfo *obj_self = static_cast< cocos2d::CCIMEKeyboardNotificationInfo * >(DATA_PTR(mrb_self));
  class cocos2d::CCRect *res = &obj_self->begin;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_no_free_type_cocos2d_CCRect,
                       res));
}

static mrb_value
mrb_cocos2d_CCIMEKeyboardNotificationInfo__set_begin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value begin;
  if (1 == mrb_get_args(mrb, "o", &begin)) {
    cocos2d::CCIMEKeyboardNotificationInfo *obj_self = static_cast< cocos2d::CCIMEKeyboardNotificationInfo * >(DATA_PTR(mrb_self));
    
    obj_self->begin = *(static_cast< cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, begin, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect)));
    return begin;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCIMEKeyboardNotificationInfo#begin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCIMEKeyboardNotificationInfo__get_duration(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCIMEKeyboardNotificationInfo *obj_self = static_cast< cocos2d::CCIMEKeyboardNotificationInfo * >(DATA_PTR(mrb_self));
  float res = obj_self->duration;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCIMEKeyboardNotificationInfo__set_duration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float duration;
  if (1 == mrb_get_args(mrb, "f", &duration)) {
    cocos2d::CCIMEKeyboardNotificationInfo *obj_self = static_cast< cocos2d::CCIMEKeyboardNotificationInfo * >(DATA_PTR(mrb_self));
    
    obj_self->duration = duration;
    return mrb_float_value(mrb, duration);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCIMEKeyboardNotificationInfo#duration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCIMEKeyboardNotificationInfo__get_end(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCIMEKeyboardNotificationInfo *obj_self = static_cast< cocos2d::CCIMEKeyboardNotificationInfo * >(DATA_PTR(mrb_self));
  class cocos2d::CCRect *res = &obj_self->end;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_no_free_type_cocos2d_CCRect,
                       res));
}

static mrb_value
mrb_cocos2d_CCIMEKeyboardNotificationInfo__set_end(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value end;
  if (1 == mrb_get_args(mrb, "o", &end)) {
    cocos2d::CCIMEKeyboardNotificationInfo *obj_self = static_cast< cocos2d::CCIMEKeyboardNotificationInfo * >(DATA_PTR(mrb_self));
    
    obj_self->end = *(static_cast< cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, end, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect)));
    return end;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCIMEKeyboardNotificationInfo#end");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCIMEKeyboardNotificationInfo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCIMEKeyboardNotificationInfo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCIMEKeyboardNotificationInfo * res = new cocos2d::CCIMEKeyboardNotificationInfo();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCIMEKeyboardNotificationInfo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCImage_getBitsPerComponent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCImage *obj_self = static_cast< cocos2d::CCImage * >(DATA_PTR(mrb_self));
      int res = obj_self->getBitsPerComponent();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCImage#getBitsPerComponent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCImage_getData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCImage *obj_self = static_cast< cocos2d::CCImage * >(DATA_PTR(mrb_self));
      unsigned char *res = obj_self->getData();
      mrb_value mrb_res = cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 1), reinterpret_cast< unsigned char * >(res), 1);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCImage#getData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCImage_getDataLen(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCImage *obj_self = static_cast< cocos2d::CCImage * >(DATA_PTR(mrb_self));
      int res = obj_self->getDataLen();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCImage#getDataLen");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCImage_getHeight(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCImage *obj_self = static_cast< cocos2d::CCImage * >(DATA_PTR(mrb_self));
      unsigned short res = obj_self->getHeight();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCImage#getHeight");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCImage_getWidth(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCImage *obj_self = static_cast< cocos2d::CCImage * >(DATA_PTR(mrb_self));
      unsigned short res = obj_self->getWidth();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCImage#getWidth");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCImage_hasAlpha(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCImage *obj_self = static_cast< cocos2d::CCImage * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->hasAlpha();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCImage#hasAlpha");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCImage_initWithImageData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pData;
    mrb_int nDataLen;
    mrb_int eFmt;
    mrb_int nWidth;
    mrb_int nHeight;
    mrb_int nBitsPerComponent;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "oiiiii", &pData, &nDataLen, &eFmt, &nWidth, &nHeight, &nBitsPerComponent)) {
      cocos2d::CCImage *obj_self = static_cast< cocos2d::CCImage * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithImageData(static_cast< void * >(DATA_PTR(pData)), nDataLen, (EImageFormat)eFmt, nWidth, nHeight, nBitsPerComponent);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCImage#initWithImageData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCImage_initWithImageFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value strPath;
    mrb_int imageType;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &strPath, &imageType)) {
      cocos2d::CCImage *obj_self = static_cast< cocos2d::CCImage * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithImageFile(RSTRING_PTR(strPath), (EImageFormat)imageType);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCImage#initWithImageFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCImage_initWithImageFileThreadSafe(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value fullpath;
    mrb_int imageType;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &fullpath, &imageType)) {
      cocos2d::CCImage *obj_self = static_cast< cocos2d::CCImage * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithImageFileThreadSafe(RSTRING_PTR(fullpath), (EImageFormat)imageType);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCImage#initWithImageFileThreadSafe");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCImage_initWithString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pText;
    mrb_int nWidth;
    mrb_int nHeight;
    mrb_int eAlignMask;
    mrb_value pFontName;
    mrb_int nSize;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "SiiiSi", &pText, &nWidth, &nHeight, &eAlignMask, &pFontName, &nSize)) {
      cocos2d::CCImage *obj_self = static_cast< cocos2d::CCImage * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithString(RSTRING_PTR(pText), nWidth, nHeight, (ETextAlign)eAlignMask, RSTRING_PTR(pFontName), nSize);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCImage#initWithString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCImage_initWithStringShadowStroke(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pText;
    mrb_int nWidth;
    mrb_int nHeight;
    mrb_int eAlignMask;
    mrb_value pFontName;
    mrb_int nSize;
    mrb_float textTintR;
    mrb_float textTintG;
    mrb_float textTintB;
    mrb_bool shadow;
    mrb_float shadowOffsetX;
    mrb_float shadowOffsetY;
    mrb_float shadowOpacity;
    mrb_float shadowBlur;
    mrb_bool stroke;
    mrb_float strokeR;
    mrb_float strokeG;
    mrb_float strokeB;
    mrb_float strokeSize;
    if (19 == _argc_ && 19 == mrb_get_args(mrb, "SiiiSifffbffffbffff", &pText, &nWidth, &nHeight, &eAlignMask, &pFontName, &nSize, &textTintR, &textTintG, &textTintB, &shadow, &shadowOffsetX, &shadowOffsetY, &shadowOpacity, &shadowBlur, &stroke, &strokeR, &strokeG, &strokeB, &strokeSize)) {
      cocos2d::CCImage *obj_self = static_cast< cocos2d::CCImage * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithStringShadowStroke(RSTRING_PTR(pText), nWidth, nHeight, (ETextAlign)eAlignMask, RSTRING_PTR(pFontName), nSize, textTintR, textTintG, textTintB, shadow, shadowOffsetX, shadowOffsetY, shadowOpacity, shadowBlur, stroke, strokeR, strokeG, strokeB, strokeSize);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCImage#initWithStringShadowStroke");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCImage_isPremultipliedAlpha(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCImage *obj_self = static_cast< cocos2d::CCImage * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isPremultipliedAlpha();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCImage#isPremultipliedAlpha");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCImage__get_kAlignBottom(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCImage::kAlignBottom;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCImage__get_kAlignBottomLeft(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCImage::kAlignBottomLeft;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCImage__get_kAlignBottomRight(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCImage::kAlignBottomRight;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCImage__get_kAlignCenter(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCImage::kAlignCenter;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCImage__get_kAlignLeft(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCImage::kAlignLeft;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCImage__get_kAlignRight(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCImage::kAlignRight;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCImage__get_kAlignTop(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCImage::kAlignTop;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCImage__get_kAlignTopLeft(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCImage::kAlignTopLeft;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCImage__get_kAlignTopRight(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCImage::kAlignTopRight;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCImage__get_kFmtJpg(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCImage::kFmtJpg;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCImage__get_kFmtPng(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCImage::kFmtPng;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCImage__get_kFmtRawData(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCImage::kFmtRawData;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCImage__get_kFmtTiff(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCImage::kFmtTiff;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCImage__get_kFmtUnKnown(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCImage::kFmtUnKnown;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCImage__get_kFmtWebp(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCImage::kFmtWebp;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCImage_saveToFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszFilePath;
    mrb_bool bIsToRGB;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sb", &pszFilePath, &bIsToRGB)) {
      cocos2d::CCImage *obj_self = static_cast< cocos2d::CCImage * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->saveToFile(RSTRING_PTR(pszFilePath), bIsToRGB);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCImage#saveToFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCInteger_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int v;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCInteger;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &v)) {
      cocos2d::CCInteger * res = new cocos2d::CCInteger(v);
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCInteger#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCInteger_acceptVisitor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value visitor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &visitor)) {
      cocos2d::CCInteger *obj_self = static_cast< cocos2d::CCInteger * >(DATA_PTR(mrb_self));
      obj_self->acceptVisitor(*(static_cast< cocos2d::CCDataVisitor * >(DATA_PTR(visitor))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCInteger#acceptVisitor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCInteger_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int v;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &v)) {
      class cocos2d::CCInteger * res = cocos2d::CCInteger::create(v);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCInteger,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCInteger::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCInteger_getValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCInteger *obj_self = static_cast< cocos2d::CCInteger * >(DATA_PTR(mrb_self));
      int res = obj_self->getValue();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCInteger#getValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpBy_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCJumpBy *obj_self = static_cast< cocos2d::CCJumpBy * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpBy#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpBy_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value position;
    mrb_float height;
    mrb_int jumps;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "fofi", &duration, &position, &height, &jumps)) {
      class cocos2d::CCJumpBy * res = cocos2d::CCJumpBy::create(duration, *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), height, jumps);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCJumpBy,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpBy::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpBy_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value position;
    mrb_float height;
    mrb_int jumps;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "fofi", &duration, &position, &height, &jumps)) {
      cocos2d::CCJumpBy *obj_self = static_cast< cocos2d::CCJumpBy * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), height, jumps);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpBy#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpBy_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCJumpBy *obj_self = static_cast< cocos2d::CCJumpBy * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpBy#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpBy_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCJumpBy *obj_self = static_cast< cocos2d::CCJumpBy * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpBy#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpBy_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCJumpBy *obj_self = static_cast< cocos2d::CCJumpBy * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpBy#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpBy_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCJumpBy;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCJumpBy * res = new cocos2d::CCJumpBy();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpBy#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpTiles3D_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCJumpTiles3D *obj_self = static_cast< cocos2d::CCJumpTiles3D * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpTiles3D#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpTiles3D_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int numberOfJumps;
    mrb_float amplitude;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foif", &duration, &gridSize, &numberOfJumps, &amplitude)) {
      class cocos2d::CCJumpTiles3D * res = cocos2d::CCJumpTiles3D::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), numberOfJumps, amplitude);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCJumpTiles3D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpTiles3D::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpTiles3D_getAmplitude(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCJumpTiles3D *obj_self = static_cast< cocos2d::CCJumpTiles3D * >(DATA_PTR(mrb_self));
      float res = obj_self->getAmplitude();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpTiles3D#getAmplitude");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpTiles3D_getAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCJumpTiles3D *obj_self = static_cast< cocos2d::CCJumpTiles3D * >(DATA_PTR(mrb_self));
      float res = obj_self->getAmplitudeRate();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpTiles3D#getAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpTiles3D_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int numberOfJumps;
    mrb_float amplitude;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foif", &duration, &gridSize, &numberOfJumps, &amplitude)) {
      cocos2d::CCJumpTiles3D *obj_self = static_cast< cocos2d::CCJumpTiles3D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), numberOfJumps, amplitude);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpTiles3D#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpTiles3D_setAmplitude(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fAmplitude;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fAmplitude)) {
      cocos2d::CCJumpTiles3D *obj_self = static_cast< cocos2d::CCJumpTiles3D * >(DATA_PTR(mrb_self));
      obj_self->setAmplitude(fAmplitude);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpTiles3D#setAmplitude");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpTiles3D_setAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fAmplitudeRate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fAmplitudeRate)) {
      cocos2d::CCJumpTiles3D *obj_self = static_cast< cocos2d::CCJumpTiles3D * >(DATA_PTR(mrb_self));
      obj_self->setAmplitudeRate(fAmplitudeRate);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpTiles3D#setAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpTiles3D_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCJumpTiles3D *obj_self = static_cast< cocos2d::CCJumpTiles3D * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpTiles3D#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpTiles3D_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCJumpTiles3D;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCJumpTiles3D * res = new cocos2d::CCJumpTiles3D();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpTiles3D#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpTo_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCJumpTo *obj_self = static_cast< cocos2d::CCJumpTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpTo#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpTo_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value position;
    mrb_float height;
    mrb_int jumps;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "fofi", &duration, &position, &height, &jumps)) {
      class cocos2d::CCJumpTo * res = cocos2d::CCJumpTo::create(duration, *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), height, jumps);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCJumpTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpTo::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpTo_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCJumpTo *obj_self = static_cast< cocos2d::CCJumpTo * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpTo#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCJumpTo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCJumpTo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCJumpTo * res = new cocos2d::CCJumpTo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCJumpTo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCKeypadDelegate_keyBackClicked(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCKeypadDelegate *obj_self = static_cast< cocos2d::CCKeypadDelegate * >(DATA_PTR(mrb_self));
      obj_self->keyBackClicked();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCKeypadDelegate#keyBackClicked");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCKeypadDelegate_keyMenuClicked(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCKeypadDelegate *obj_self = static_cast< cocos2d::CCKeypadDelegate * >(DATA_PTR(mrb_self));
      obj_self->keyMenuClicked();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCKeypadDelegate#keyMenuClicked");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCKeypadDispatcher_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCKeypadDispatcher;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCKeypadDispatcher * res = new cocos2d::CCKeypadDispatcher();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCKeypadDispatcher#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCKeypadDispatcher_addDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      cocos2d::CCKeypadDispatcher *obj_self = static_cast< cocos2d::CCKeypadDispatcher * >(DATA_PTR(mrb_self));
      obj_self->addDelegate(static_cast< cocos2d::CCKeypadDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCKeypadDelegate, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCKeypadDispatcher#addDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCKeypadDispatcher_dispatchKeypadMSG(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nMsgType;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nMsgType)) {
      cocos2d::CCKeypadDispatcher *obj_self = static_cast< cocos2d::CCKeypadDispatcher * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->dispatchKeypadMSG((ccKeypadMSGType)nMsgType);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCKeypadDispatcher#dispatchKeypadMSG");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCKeypadDispatcher_forceAddDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      cocos2d::CCKeypadDispatcher *obj_self = static_cast< cocos2d::CCKeypadDispatcher * >(DATA_PTR(mrb_self));
      obj_self->forceAddDelegate(static_cast< cocos2d::CCKeypadDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCKeypadDelegate, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCKeypadDispatcher#forceAddDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCKeypadDispatcher_forceRemoveDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      cocos2d::CCKeypadDispatcher *obj_self = static_cast< cocos2d::CCKeypadDispatcher * >(DATA_PTR(mrb_self));
      obj_self->forceRemoveDelegate(static_cast< cocos2d::CCKeypadDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCKeypadDelegate, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCKeypadDispatcher#forceRemoveDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCKeypadDispatcher_removeDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      cocos2d::CCKeypadDispatcher *obj_self = static_cast< cocos2d::CCKeypadDispatcher * >(DATA_PTR(mrb_self));
      obj_self->removeDelegate(static_cast< cocos2d::CCKeypadDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCKeypadDelegate, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCKeypadDispatcher#removeDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCKeypadHandler_getDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCKeypadHandler *obj_self = static_cast< cocos2d::CCKeypadHandler * >(DATA_PTR(mrb_self));
      class cocos2d::CCKeypadDelegate * res = obj_self->getDelegate();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      /* XXX: class implrements *Delegate or *Protocol, must be a subclass of CCObject. */
      ccobj_res = dynamic_cast< cocos2d::CCObject * >(res);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCKeypadDelegate,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCKeypadHandler#getDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCKeypadHandler_handlerWithDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      class cocos2d::CCKeypadHandler * res = cocos2d::CCKeypadHandler::handlerWithDelegate(static_cast< cocos2d::CCKeypadDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCKeypadDelegate, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCKeypadHandler,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCKeypadHandler::handlerWithDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCKeypadHandler_initWithDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      cocos2d::CCKeypadHandler *obj_self = static_cast< cocos2d::CCKeypadHandler * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDelegate(static_cast< cocos2d::CCKeypadDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCKeypadDelegate, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCKeypadHandler#initWithDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCKeypadHandler_setDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      cocos2d::CCKeypadHandler *obj_self = static_cast< cocos2d::CCKeypadHandler * >(DATA_PTR(mrb_self));
      obj_self->setDelegate(static_cast< cocos2d::CCKeypadDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCKeypadDelegate, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCKeypadHandler#setDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCKeypadHandler_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCKeypadHandler;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCKeypadHandler * res = new cocos2d::CCKeypadHandler();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCKeypadHandler#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelAtlas_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCLabelAtlas;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCLabelAtlas * res = new cocos2d::CCLabelAtlas();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelAtlas#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelAtlas_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value string;
    mrb_value charMapFile;
    mrb_int itemWidth;
    mrb_int itemHeight;
    mrb_int startCharMap;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "SSiii", &string, &charMapFile, &itemWidth, &itemHeight, &startCharMap)) {
      class cocos2d::CCLabelAtlas * res = cocos2d::CCLabelAtlas::create(RSTRING_PTR(string), RSTRING_PTR(charMapFile), itemWidth, itemHeight, startCharMap);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLabelAtlas,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value string;
    mrb_value fntFile;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &string, &fntFile)) {
      class cocos2d::CCLabelAtlas * res = cocos2d::CCLabelAtlas::create(RSTRING_PTR(string), RSTRING_PTR(fntFile));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLabelAtlas,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelAtlas::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelAtlas_getString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelAtlas *obj_self = static_cast< cocos2d::CCLabelAtlas * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getString();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelAtlas#getString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelAtlas_initWithString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value string;
    mrb_value charMapFile;
    mrb_int itemWidth;
    mrb_int itemHeight;
    mrb_int startCharMap;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "SSiii", &string, &charMapFile, &itemWidth, &itemHeight, &startCharMap)) {
      cocos2d::CCLabelAtlas *obj_self = static_cast< cocos2d::CCLabelAtlas * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithString(RSTRING_PTR(string), RSTRING_PTR(charMapFile), itemWidth, itemHeight, startCharMap);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value string;
    mrb_value fntFile;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &string, &fntFile)) {
      cocos2d::CCLabelAtlas *obj_self = static_cast< cocos2d::CCLabelAtlas * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithString(RSTRING_PTR(string), RSTRING_PTR(fntFile));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value string;
    mrb_value texture;
    mrb_int itemWidth;
    mrb_int itemHeight;
    mrb_int startCharMap;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "Soiii", &string, &texture, &itemWidth, &itemHeight, &startCharMap)) {
      cocos2d::CCLabelAtlas *obj_self = static_cast< cocos2d::CCLabelAtlas * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithString(RSTRING_PTR(string), static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)), itemWidth, itemHeight, startCharMap);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelAtlas#initWithString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelAtlas_setString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value label;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &label)) {
      cocos2d::CCLabelAtlas *obj_self = static_cast< cocos2d::CCLabelAtlas * >(DATA_PTR(mrb_self));
      obj_self->setString(RSTRING_PTR(label));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelAtlas#setString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelAtlas_updateAtlasValues(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelAtlas *obj_self = static_cast< cocos2d::CCLabelAtlas * >(DATA_PTR(mrb_self));
      obj_self->updateAtlasValues();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelAtlas#updateAtlasValues");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCLabelBMFont;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCLabelBMFont * res = new cocos2d::CCLabelBMFont();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value str;
    mrb_value fntFile;
    mrb_float width;
    mrb_int alignment;
    mrb_value imageOffset;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "SSfio", &str, &fntFile, &width, &alignment, &imageOffset)) {
      class cocos2d::CCLabelBMFont * res = cocos2d::CCLabelBMFont::create(RSTRING_PTR(str), RSTRING_PTR(fntFile), width, (CCTextAlignment)alignment, *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, imageOffset, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLabelBMFont,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value str;
    mrb_value fntFile;
    mrb_float width;
    mrb_int alignment;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "SSfi", &str, &fntFile, &width, &alignment)) {
      class cocos2d::CCLabelBMFont * res = cocos2d::CCLabelBMFont::create(RSTRING_PTR(str), RSTRING_PTR(fntFile), width, (CCTextAlignment)alignment);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLabelBMFont,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value str;
    mrb_value fntFile;
    mrb_float width;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSf", &str, &fntFile, &width)) {
      class cocos2d::CCLabelBMFont * res = cocos2d::CCLabelBMFont::create(RSTRING_PTR(str), RSTRING_PTR(fntFile), width);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLabelBMFont,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value str;
    mrb_value fntFile;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &str, &fntFile)) {
      class cocos2d::CCLabelBMFont * res = cocos2d::CCLabelBMFont::create(RSTRING_PTR(str), RSTRING_PTR(fntFile));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLabelBMFont,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    if (0 == _argc_) {
      class cocos2d::CCLabelBMFont * res = cocos2d::CCLabelBMFont::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLabelBMFont,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_createFontChars(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->createFontChars();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#createFontChars");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_getColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       const_cast< ccColor3B * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#getColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_getDisplayedColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getDisplayedColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       const_cast< ccColor3B * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#getDisplayedColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_getDisplayedOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      GLubyte res = obj_self->getDisplayedOpacity();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#getDisplayedOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_getFntFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getFntFile();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#getFntFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_getOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      GLubyte res = obj_self->getOpacity();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#getOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_getString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getString();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#getString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_initWithString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value str;
    mrb_value fntFile;
    mrb_float width;
    mrb_int alignment;
    mrb_value imageOffset;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "SSfio", &str, &fntFile, &width, &alignment, &imageOffset)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithString(RSTRING_PTR(str), RSTRING_PTR(fntFile), width, (CCTextAlignment)alignment, *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, imageOffset, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#initWithString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_isCascadeColorEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isCascadeColorEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#isCascadeColorEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_isCascadeOpacityEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isCascadeOpacityEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#isCascadeOpacityEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_purgeCachedData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelBMFont::purgeCachedData();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont::purgeCachedData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_setAlignment(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int alignment;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &alignment)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setAlignment((CCTextAlignment)alignment);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#setAlignment");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_setAnchorPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setAnchorPoint(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#setAnchorPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_setCString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value label;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &label)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setCString(RSTRING_PTR(label));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#setCString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_setCascadeColorEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool cascadeColorEnabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &cascadeColorEnabled)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setCascadeColorEnabled(cascadeColorEnabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#setCascadeColorEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_setCascadeOpacityEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool cascadeOpacityEnabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &cascadeOpacityEnabled)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setCascadeOpacityEnabled(cascadeOpacityEnabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#setCascadeOpacityEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_setColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value color;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &color)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#setColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_setFntFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value fntFile;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &fntFile)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setFntFile(RSTRING_PTR(fntFile));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#setFntFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_setLineBreakWithoutSpace(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool breakWithoutSpace;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &breakWithoutSpace)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setLineBreakWithoutSpace(breakWithoutSpace);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#setLineBreakWithoutSpace");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_setOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int opacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &opacity)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setOpacity(opacity);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#setOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool isOpacityModifyRGB;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &isOpacityModifyRGB)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(isOpacityModifyRGB);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_setScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float scale;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &scale)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setScale(scale);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#setScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_setScaleX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float scaleX;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &scaleX)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setScaleX(scaleX);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#setScaleX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_setScaleY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float scaleY;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &scaleY)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setScaleY(scaleY);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#setScaleY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_setString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value newString;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &newString)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setString(RSTRING_PTR(newString));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value newString;
    mrb_bool needUpdateLabel;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sb", &newString, &needUpdateLabel)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setString(RSTRING_PTR(newString), needUpdateLabel);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#setString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_setWidth(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float width;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &width)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->setWidth(width);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#setWidth");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_updateDisplayedColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value parentColor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &parentColor)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->updateDisplayedColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, parentColor, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#updateDisplayedColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_updateDisplayedOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int parentOpacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &parentOpacity)) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->updateDisplayedOpacity(parentOpacity);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#updateDisplayedOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelBMFont_updateLabel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelBMFont *obj_self = static_cast< cocos2d::CCLabelBMFont * >(DATA_PTR(mrb_self));
      obj_self->updateLabel();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelBMFont#updateLabel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelProtocol_getString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelProtocol *obj_self = static_cast< cocos2d::CCLabelProtocol * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getString();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelProtocol#getString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelProtocol_setString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value label;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &label)) {
      cocos2d::CCLabelProtocol *obj_self = static_cast< cocos2d::CCLabelProtocol * >(DATA_PTR(mrb_self));
      obj_self->setString(RSTRING_PTR(label));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelProtocol#setString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCLabelTTF;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCLabelTTF * res = new cocos2d::CCLabelTTF();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value string;
    mrb_value fontName;
    mrb_float fontSize;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSf", &string, &fontName, &fontSize)) {
      class cocos2d::CCLabelTTF * res = cocos2d::CCLabelTTF::create(RSTRING_PTR(string), RSTRING_PTR(fontName), fontSize);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLabelTTF,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value string;
    mrb_value fontName;
    mrb_float fontSize;
    mrb_value dimensions;
    mrb_int hAlignment;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "SSfoi", &string, &fontName, &fontSize, &dimensions, &hAlignment)) {
      class cocos2d::CCLabelTTF * res = cocos2d::CCLabelTTF::create(RSTRING_PTR(string), RSTRING_PTR(fontName), fontSize, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, dimensions, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), (CCTextAlignment)hAlignment);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLabelTTF,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value string;
    mrb_value fontName;
    mrb_float fontSize;
    mrb_value dimensions;
    mrb_int hAlignment;
    mrb_int vAlignment;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "SSfoii", &string, &fontName, &fontSize, &dimensions, &hAlignment, &vAlignment)) {
      class cocos2d::CCLabelTTF * res = cocos2d::CCLabelTTF::create(RSTRING_PTR(string), RSTRING_PTR(fontName), fontSize, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, dimensions, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), (CCTextAlignment)hAlignment, (CCVerticalTextAlignment)vAlignment);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLabelTTF,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    if (0 == _argc_) {
      class cocos2d::CCLabelTTF * res = cocos2d::CCLabelTTF::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLabelTTF,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_createWithFontDefinition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value string;
    mrb_value textDefinition;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &string, &textDefinition)) {
      class cocos2d::CCLabelTTF * res = cocos2d::CCLabelTTF::createWithFontDefinition(RSTRING_PTR(string), *(static_cast< ccFontDefinition * >(cc_mrb_data_get_ptr(mrb, textDefinition, &mrb_type_cocos2d__ccFontDefinition, &mrb_no_free_type_cocos2d__ccFontDefinition))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLabelTTF,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF::createWithFontDefinition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_description(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      std::string res = obj_self->description();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#description");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_disableShadow(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool mustUpdateTexture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &mustUpdateTexture)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      obj_self->disableShadow(mustUpdateTexture);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#disableShadow");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_disableStroke(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool mustUpdateTexture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &mustUpdateTexture)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      obj_self->disableStroke(mustUpdateTexture);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#disableStroke");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_enableShadow(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value shadowOffset;
    mrb_float shadowOpacity;
    mrb_float shadowBlur;
    mrb_bool mustUpdateTexture;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "offb", &shadowOffset, &shadowOpacity, &shadowBlur, &mustUpdateTexture)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      obj_self->enableShadow(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, shadowOffset, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), shadowOpacity, shadowBlur, mustUpdateTexture);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#enableShadow");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_enableStroke(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value strokeColor;
    mrb_float strokeSize;
    mrb_bool mustUpdateTexture;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ofb", &strokeColor, &strokeSize, &mustUpdateTexture)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      obj_self->enableStroke(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, strokeColor, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))), strokeSize, mustUpdateTexture);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#enableStroke");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_getDimensions(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getDimensions();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#getDimensions");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_getFontName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getFontName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#getFontName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_getFontSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      float res = obj_self->getFontSize();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#getFontSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_getHorizontalAlignment(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      CCTextAlignment res = obj_self->getHorizontalAlignment();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#getHorizontalAlignment");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_getString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getString();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#getString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_getTextDefinition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      ccFontDefinition * res = obj_self->getTextDefinition();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccFontDefinition"),
                       &mrb_type_cocos2d__ccFontDefinition,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#getTextDefinition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_getVerticalAlignment(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      CCVerticalTextAlignment res = obj_self->getVerticalAlignment();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#getVerticalAlignment");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_initWithString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value string;
    mrb_value fontName;
    mrb_float fontSize;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSf", &string, &fontName, &fontSize)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithString(RSTRING_PTR(string), RSTRING_PTR(fontName), fontSize);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value string;
    mrb_value fontName;
    mrb_float fontSize;
    mrb_value dimensions;
    mrb_int hAlignment;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "SSfoi", &string, &fontName, &fontSize, &dimensions, &hAlignment)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithString(RSTRING_PTR(string), RSTRING_PTR(fontName), fontSize, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, dimensions, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), (CCTextAlignment)hAlignment);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value string;
    mrb_value fontName;
    mrb_float fontSize;
    mrb_value dimensions;
    mrb_int hAlignment;
    mrb_int vAlignment;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "SSfoii", &string, &fontName, &fontSize, &dimensions, &hAlignment, &vAlignment)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithString(RSTRING_PTR(string), RSTRING_PTR(fontName), fontSize, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, dimensions, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), (CCTextAlignment)hAlignment, (CCVerticalTextAlignment)vAlignment);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#initWithString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_initWithStringAndTextDefinition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value string;
    mrb_value textDefinition;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &string, &textDefinition)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithStringAndTextDefinition(RSTRING_PTR(string), *(static_cast< ccFontDefinition * >(cc_mrb_data_get_ptr(mrb, textDefinition, &mrb_type_cocos2d__ccFontDefinition, &mrb_no_free_type_cocos2d__ccFontDefinition))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#initWithStringAndTextDefinition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_setDimensions(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value dim;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &dim)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      obj_self->setDimensions(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, dim, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#setDimensions");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_setFontFillColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tintColor;
    mrb_bool mustUpdateTexture;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ob", &tintColor, &mustUpdateTexture)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      obj_self->setFontFillColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, tintColor, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))), mustUpdateTexture);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#setFontFillColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_setFontName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value fontName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &fontName)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      obj_self->setFontName(RSTRING_PTR(fontName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#setFontName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_setFontSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fontSize;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fontSize)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      obj_self->setFontSize(fontSize);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#setFontSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_setHorizontalAlignment(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int alignment;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &alignment)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      obj_self->setHorizontalAlignment((CCTextAlignment)alignment);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#setHorizontalAlignment");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_setString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value label;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &label)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      obj_self->setString(RSTRING_PTR(label));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#setString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_setTextDefinition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value theDefinition;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &theDefinition)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      obj_self->setTextDefinition(static_cast< ccFontDefinition * >(cc_mrb_data_get_ptr(mrb, theDefinition, &mrb_type_cocos2d__ccFontDefinition, &mrb_no_free_type_cocos2d__ccFontDefinition)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#setTextDefinition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLabelTTF_setVerticalAlignment(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int verticalAlignment;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &verticalAlignment)) {
      cocos2d::CCLabelTTF *obj_self = static_cast< cocos2d::CCLabelTTF * >(DATA_PTR(mrb_self));
      obj_self->setVerticalAlignment((CCVerticalTextAlignment)verticalAlignment);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLabelTTF#setVerticalAlignment");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCLayer;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCLayer * res = new cocos2d::CCLayer();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_ccTouchBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->ccTouchBegan(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, pTouch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#ccTouchBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_ccTouchCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->ccTouchCancelled(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, pTouch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#ccTouchCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_ccTouchEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->ccTouchEnded(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, pTouch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#ccTouchEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_ccTouchMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->ccTouchMoved(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, pTouch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#ccTouchMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_ccTouchesBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesBegan(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, pTouches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#ccTouchesBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_ccTouchesCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesCancelled(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, pTouches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#ccTouchesCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_ccTouchesEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesEnded(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, pTouches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#ccTouchesEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_ccTouchesMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesMoved(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, pTouches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#ccTouchesMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCLayer * res = cocos2d::CCLayer::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLayer,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_didAccelerate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAccelerationValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAccelerationValue)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->didAccelerate(static_cast< cocos2d::CCAcceleration * >(cc_mrb_data_get_ptr(mrb, pAccelerationValue, &mrb_type_cocos2d_CCAcceleration, &mrb_no_free_type_cocos2d_CCAcceleration)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#didAccelerate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_getScriptAccelerateHandlerEntry(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      class cocos2d::CCScriptHandlerEntry * res = obj_self->getScriptAccelerateHandlerEntry();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCScriptHandlerEntry,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#getScriptAccelerateHandlerEntry");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_getScriptKeypadHandlerEntry(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      class cocos2d::CCScriptHandlerEntry * res = obj_self->getScriptKeypadHandlerEntry();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCScriptHandlerEntry,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#getScriptKeypadHandlerEntry");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_getScriptTouchHandlerEntry(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      class cocos2d::CCTouchScriptHandlerEntry * res = obj_self->getScriptTouchHandlerEntry();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTouchScriptHandlerEntry,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#getScriptTouchHandlerEntry");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_getTouchMode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      int res = obj_self->getTouchMode();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#getTouchMode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_getTouchPriority(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      int res = obj_self->getTouchPriority();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#getTouchPriority");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_isAccelerometerEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isAccelerometerEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#isAccelerometerEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_isKeypadEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isKeypadEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#isKeypadEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_isTouchEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isTouchEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#isTouchEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_keyBackClicked(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->keyBackClicked();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#keyBackClicked");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_keyMenuClicked(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->keyMenuClicked();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#keyMenuClicked");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_onEnterTransitionDidFinish(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->onEnterTransitionDidFinish();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#onEnterTransitionDidFinish");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_onExit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->onExit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#onExit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_registerScriptAccelerateHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &nHandler)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->registerScriptAccelerateHandler(cc_mrb_proc_keep(mrb, nHandler));
      //cc_mrb_proc_keep(mrb, nHandler);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#registerScriptAccelerateHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_registerScriptKeypadHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &nHandler)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->registerScriptKeypadHandler(cc_mrb_proc_keep(mrb, nHandler));
      //cc_mrb_proc_keep(mrb, nHandler);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#registerScriptKeypadHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_registerScriptTouchHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    mrb_bool bIsMultiTouches;
    mrb_int nPriority;
    mrb_bool bSwallowsTouches;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "obib", &nHandler, &bIsMultiTouches, &nPriority, &bSwallowsTouches)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->registerScriptTouchHandler(cc_mrb_proc_keep(mrb, nHandler), bIsMultiTouches, nPriority, bSwallowsTouches);
      //cc_mrb_proc_keep(mrb, nHandler);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#registerScriptTouchHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_registerWithTouchDispatcher(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->registerWithTouchDispatcher();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#registerWithTouchDispatcher");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_setAccelerometerEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &value)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->setAccelerometerEnabled(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#setAccelerometerEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_setAccelerometerInterval(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float interval;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &interval)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->setAccelerometerInterval(interval);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#setAccelerometerInterval");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_setKeypadEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &value)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->setKeypadEnabled(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#setKeypadEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_setTouchEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &value)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->setTouchEnabled(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#setTouchEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_setTouchMode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int mode;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &mode)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->setTouchMode((ccTouchesMode)mode);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#setTouchMode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_setTouchPriority(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int priority;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &priority)) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->setTouchPriority(priority);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#setTouchPriority");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_unregisterScriptAccelerateHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->unregisterScriptAccelerateHandler();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#unregisterScriptAccelerateHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_unregisterScriptKeypadHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->unregisterScriptKeypadHandler();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#unregisterScriptKeypadHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayer_unregisterScriptTouchHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayer *obj_self = static_cast< cocos2d::CCLayer * >(DATA_PTR(mrb_self));
      obj_self->unregisterScriptTouchHandler();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayer#unregisterScriptTouchHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerColor_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCLayerColor;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCLayerColor * res = new cocos2d::CCLayerColor();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerColor#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerColor_changeHeight(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float h;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &h)) {
      cocos2d::CCLayerColor *obj_self = static_cast< cocos2d::CCLayerColor * >(DATA_PTR(mrb_self));
      obj_self->changeHeight(h);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerColor#changeHeight");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerColor_changeWidth(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float w;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &w)) {
      cocos2d::CCLayerColor *obj_self = static_cast< cocos2d::CCLayerColor * >(DATA_PTR(mrb_self));
      obj_self->changeWidth(w);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerColor#changeWidth");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerColor_changeWidthAndHeight(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float w;
    mrb_float h;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &w, &h)) {
      cocos2d::CCLayerColor *obj_self = static_cast< cocos2d::CCLayerColor * >(DATA_PTR(mrb_self));
      obj_self->changeWidthAndHeight(w, h);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerColor#changeWidthAndHeight");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerColor_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCLayerColor * res = cocos2d::CCLayerColor::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLayerColor,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value color;
    mrb_float width;
    mrb_float height;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "off", &color, &width, &height)) {
      class cocos2d::CCLayerColor * res = cocos2d::CCLayerColor::create(*(static_cast< const ccColor4B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B))), width, height);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLayerColor,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value color;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &color)) {
      class cocos2d::CCLayerColor * res = cocos2d::CCLayerColor::create(*(static_cast< const ccColor4B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLayerColor,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerColor::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerColor_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerColor *obj_self = static_cast< cocos2d::CCLayerColor * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerColor#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerColor_getBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerColor *obj_self = static_cast< cocos2d::CCLayerColor * >(DATA_PTR(mrb_self));
      ccBlendFunc *res = new ccBlendFunc(); *res = obj_self->getBlendFunc();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccBlendFunc"),
                       &mrb_type_cocos2d__ccBlendFunc,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerColor#getBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerColor_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerColor *obj_self = static_cast< cocos2d::CCLayerColor * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerColor#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerColor_initWithColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value color;
    mrb_float width;
    mrb_float height;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "off", &color, &width, &height)) {
      cocos2d::CCLayerColor *obj_self = static_cast< cocos2d::CCLayerColor * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithColor(*(static_cast< const ccColor4B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B))), width, height);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value color;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &color)) {
      cocos2d::CCLayerColor *obj_self = static_cast< cocos2d::CCLayerColor * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithColor(*(static_cast< const ccColor4B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerColor#initWithColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerColor_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerColor *obj_self = static_cast< cocos2d::CCLayerColor * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerColor#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerColor_setBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCLayerColor *obj_self = static_cast< cocos2d::CCLayerColor * >(DATA_PTR(mrb_self));
      obj_self->setBlendFunc(*(static_cast< ccBlendFunc * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d__ccBlendFunc, &mrb_no_free_type_cocos2d__ccBlendFunc))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerColor#setBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerColor_setColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value color;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &color)) {
      cocos2d::CCLayerColor *obj_self = static_cast< cocos2d::CCLayerColor * >(DATA_PTR(mrb_self));
      obj_self->setColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerColor#setColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerColor_setContentSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCLayerColor *obj_self = static_cast< cocos2d::CCLayerColor * >(DATA_PTR(mrb_self));
      obj_self->setContentSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerColor#setContentSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerColor_setOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int opacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &opacity)) {
      cocos2d::CCLayerColor *obj_self = static_cast< cocos2d::CCLayerColor * >(DATA_PTR(mrb_self));
      obj_self->setOpacity(opacity);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerColor#setOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerColor_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bValue)) {
      cocos2d::CCLayerColor *obj_self = static_cast< cocos2d::CCLayerColor * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(bValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerColor#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value start;
    mrb_value end;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &start, &end)) {
      class cocos2d::CCLayerGradient * res = cocos2d::CCLayerGradient::create(*(static_cast< const ccColor4B * >(cc_mrb_data_get_ptr(mrb, start, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B))), *(static_cast< const ccColor4B * >(cc_mrb_data_get_ptr(mrb, end, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLayerGradient,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value start;
    mrb_value end;
    mrb_value v;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &start, &end, &v)) {
      class cocos2d::CCLayerGradient * res = cocos2d::CCLayerGradient::create(*(static_cast< const ccColor4B * >(cc_mrb_data_get_ptr(mrb, start, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B))), *(static_cast< const ccColor4B * >(cc_mrb_data_get_ptr(mrb, end, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLayerGradient,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    if (0 == _argc_) {
      class cocos2d::CCLayerGradient * res = cocos2d::CCLayerGradient::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLayerGradient,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_getEndColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerGradient *obj_self = static_cast< cocos2d::CCLayerGradient * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getEndColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       const_cast< ccColor3B * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient#getEndColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_getEndOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerGradient *obj_self = static_cast< cocos2d::CCLayerGradient * >(DATA_PTR(mrb_self));
      GLubyte res = obj_self->getEndOpacity();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient#getEndOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_getStartColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerGradient *obj_self = static_cast< cocos2d::CCLayerGradient * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getStartColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       const_cast< ccColor3B * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient#getStartColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_getStartOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerGradient *obj_self = static_cast< cocos2d::CCLayerGradient * >(DATA_PTR(mrb_self));
      GLubyte res = obj_self->getStartOpacity();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient#getStartOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_getVector(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerGradient *obj_self = static_cast< cocos2d::CCLayerGradient * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getVector();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient#getVector");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerGradient *obj_self = static_cast< cocos2d::CCLayerGradient * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_initWithColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value start;
    mrb_value end;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &start, &end)) {
      cocos2d::CCLayerGradient *obj_self = static_cast< cocos2d::CCLayerGradient * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithColor(*(static_cast< const ccColor4B * >(cc_mrb_data_get_ptr(mrb, start, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B))), *(static_cast< const ccColor4B * >(cc_mrb_data_get_ptr(mrb, end, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value start;
    mrb_value end;
    mrb_value v;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &start, &end, &v)) {
      cocos2d::CCLayerGradient *obj_self = static_cast< cocos2d::CCLayerGradient * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithColor(*(static_cast< const ccColor4B * >(cc_mrb_data_get_ptr(mrb, start, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B))), *(static_cast< const ccColor4B * >(cc_mrb_data_get_ptr(mrb, end, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient#initWithColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_isCompressedInterpolation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerGradient *obj_self = static_cast< cocos2d::CCLayerGradient * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isCompressedInterpolation();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient#isCompressedInterpolation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_setCompressedInterpolation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bCompressedInterpolation;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bCompressedInterpolation)) {
      cocos2d::CCLayerGradient *obj_self = static_cast< cocos2d::CCLayerGradient * >(DATA_PTR(mrb_self));
      obj_self->setCompressedInterpolation(bCompressedInterpolation);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient#setCompressedInterpolation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_setEndColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCLayerGradient *obj_self = static_cast< cocos2d::CCLayerGradient * >(DATA_PTR(mrb_self));
      obj_self->setEndColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient#setEndColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_setEndOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCLayerGradient *obj_self = static_cast< cocos2d::CCLayerGradient * >(DATA_PTR(mrb_self));
      obj_self->setEndOpacity(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient#setEndOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_setStartColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCLayerGradient *obj_self = static_cast< cocos2d::CCLayerGradient * >(DATA_PTR(mrb_self));
      obj_self->setStartColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient#setStartColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_setStartOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCLayerGradient *obj_self = static_cast< cocos2d::CCLayerGradient * >(DATA_PTR(mrb_self));
      obj_self->setStartOpacity(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient#setStartOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_setVector(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCLayerGradient *obj_self = static_cast< cocos2d::CCLayerGradient * >(DATA_PTR(mrb_self));
      obj_self->setVector(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient#setVector");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerGradient_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCLayerGradient;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCLayerGradient * res = new cocos2d::CCLayerGradient();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerGradient#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerMultiplex_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCLayerMultiplex;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCLayerMultiplex * res = new cocos2d::CCLayerMultiplex();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerMultiplex#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerMultiplex_addLayer(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value layer;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &layer)) {
      cocos2d::CCLayerMultiplex *obj_self = static_cast< cocos2d::CCLayerMultiplex * >(DATA_PTR(mrb_self));
      obj_self->addLayer(static_cast< cocos2d::CCLayer * >(cc_mrb_data_get_ptr(mrb, layer, &mrb_type_cocos2d_CCLayer, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerMultiplex#addLayer");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerMultiplex_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerMultiplex *obj_self = static_cast< cocos2d::CCLayerMultiplex * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerMultiplex#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerMultiplex_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCLayerMultiplex * res = cocos2d::CCLayerMultiplex::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLayerMultiplex,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value layer;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &layer)) {
      class cocos2d::CCLayerMultiplex * res = cocos2d::CCLayerMultiplex::create(static_cast< cocos2d::CCLayer * >(cc_mrb_data_get_ptr(mrb, layer, &mrb_type_cocos2d_CCLayer, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLayerMultiplex,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerMultiplex::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerMultiplex_createWithArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arrayOfLayers;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &arrayOfLayers)) {
      class cocos2d::CCLayerMultiplex * res = cocos2d::CCLayerMultiplex::createWithArray(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, arrayOfLayers, &mrb_type_cocos2d_CCArray, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLayerMultiplex,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerMultiplex::createWithArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerMultiplex_createWithLayer(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value layer;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &layer)) {
      class cocos2d::CCLayerMultiplex * res = cocos2d::CCLayerMultiplex::createWithLayer(static_cast< cocos2d::CCLayer * >(cc_mrb_data_get_ptr(mrb, layer, &mrb_type_cocos2d_CCLayer, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLayerMultiplex,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerMultiplex::createWithLayer");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerMultiplex_initWithArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arrayOfLayers;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &arrayOfLayers)) {
      cocos2d::CCLayerMultiplex *obj_self = static_cast< cocos2d::CCLayerMultiplex * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithArray(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, arrayOfLayers, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerMultiplex#initWithArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerMultiplex_initWithLayers(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value layer;
    mrb_value params;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &layer, &params)) {
      cocos2d::CCLayerMultiplex *obj_self = static_cast< cocos2d::CCLayerMultiplex * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithLayers(static_cast< cocos2d::CCLayer * >(cc_mrb_data_get_ptr(mrb, layer, &mrb_type_cocos2d_CCLayer, NULL)), static_cast< __va_list_tag * >(DATA_PTR(params)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerMultiplex#initWithLayers");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerMultiplex_switchTo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int n;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &n)) {
      cocos2d::CCLayerMultiplex *obj_self = static_cast< cocos2d::CCLayerMultiplex * >(DATA_PTR(mrb_self));
      obj_self->switchTo(n);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerMultiplex#switchTo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerMultiplex_switchToAndReleaseMe(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int n;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &n)) {
      cocos2d::CCLayerMultiplex *obj_self = static_cast< cocos2d::CCLayerMultiplex * >(DATA_PTR(mrb_self));
      obj_self->switchToAndReleaseMe(n);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerMultiplex#switchToAndReleaseMe");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCLayerRGBA;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCLayerRGBA * res = new cocos2d::CCLayerRGBA();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCLayerRGBA * res = cocos2d::CCLayerRGBA::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLayerRGBA,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_getColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerRGBA *obj_self = static_cast< cocos2d::CCLayerRGBA * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       const_cast< ccColor3B * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#getColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_getDisplayedColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerRGBA *obj_self = static_cast< cocos2d::CCLayerRGBA * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getDisplayedColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       const_cast< ccColor3B * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#getDisplayedColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_getDisplayedOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerRGBA *obj_self = static_cast< cocos2d::CCLayerRGBA * >(DATA_PTR(mrb_self));
      GLubyte res = obj_self->getDisplayedOpacity();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#getDisplayedOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_getOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerRGBA *obj_self = static_cast< cocos2d::CCLayerRGBA * >(DATA_PTR(mrb_self));
      GLubyte res = obj_self->getOpacity();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#getOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerRGBA *obj_self = static_cast< cocos2d::CCLayerRGBA * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_isCascadeColorEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerRGBA *obj_self = static_cast< cocos2d::CCLayerRGBA * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isCascadeColorEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#isCascadeColorEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_isCascadeOpacityEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerRGBA *obj_self = static_cast< cocos2d::CCLayerRGBA * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isCascadeOpacityEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#isCascadeOpacityEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLayerRGBA *obj_self = static_cast< cocos2d::CCLayerRGBA * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_setCascadeColorEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool cascadeColorEnabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &cascadeColorEnabled)) {
      cocos2d::CCLayerRGBA *obj_self = static_cast< cocos2d::CCLayerRGBA * >(DATA_PTR(mrb_self));
      obj_self->setCascadeColorEnabled(cascadeColorEnabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#setCascadeColorEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_setCascadeOpacityEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool cascadeOpacityEnabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &cascadeOpacityEnabled)) {
      cocos2d::CCLayerRGBA *obj_self = static_cast< cocos2d::CCLayerRGBA * >(DATA_PTR(mrb_self));
      obj_self->setCascadeOpacityEnabled(cascadeOpacityEnabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#setCascadeOpacityEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_setColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value color;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &color)) {
      cocos2d::CCLayerRGBA *obj_self = static_cast< cocos2d::CCLayerRGBA * >(DATA_PTR(mrb_self));
      obj_self->setColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#setColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_setOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int opacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &opacity)) {
      cocos2d::CCLayerRGBA *obj_self = static_cast< cocos2d::CCLayerRGBA * >(DATA_PTR(mrb_self));
      obj_self->setOpacity(opacity);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#setOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bValue)) {
      cocos2d::CCLayerRGBA *obj_self = static_cast< cocos2d::CCLayerRGBA * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(bValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_updateDisplayedColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value parentColor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &parentColor)) {
      cocos2d::CCLayerRGBA *obj_self = static_cast< cocos2d::CCLayerRGBA * >(DATA_PTR(mrb_self));
      obj_self->updateDisplayedColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, parentColor, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#updateDisplayedColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLayerRGBA_updateDisplayedOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int parentOpacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &parentOpacity)) {
      cocos2d::CCLayerRGBA *obj_self = static_cast< cocos2d::CCLayerRGBA * >(DATA_PTR(mrb_self));
      obj_self->updateDisplayedOpacity(parentOpacity);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLayerRGBA#updateDisplayedOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLens3D_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCLens3D *obj_self = static_cast< cocos2d::CCLens3D * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLens3D#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLens3D_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_value position;
    mrb_float radius;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foof", &duration, &gridSize, &position, &radius)) {
      class cocos2d::CCLens3D * res = cocos2d::CCLens3D::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), radius);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLens3D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLens3D::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLens3D_getLensEffect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLens3D *obj_self = static_cast< cocos2d::CCLens3D * >(DATA_PTR(mrb_self));
      float res = obj_self->getLensEffect();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLens3D#getLensEffect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLens3D_getPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLens3D *obj_self = static_cast< cocos2d::CCLens3D * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getPosition();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLens3D#getPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLens3D_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_value position;
    mrb_float radius;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foof", &duration, &gridSize, &position, &radius)) {
      cocos2d::CCLens3D *obj_self = static_cast< cocos2d::CCLens3D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), radius);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLens3D#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLens3D_setConcave(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bConcave;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bConcave)) {
      cocos2d::CCLens3D *obj_self = static_cast< cocos2d::CCLens3D * >(DATA_PTR(mrb_self));
      obj_self->setConcave(bConcave);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLens3D#setConcave");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLens3D_setLensEffect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fLensEffect;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fLensEffect)) {
      cocos2d::CCLens3D *obj_self = static_cast< cocos2d::CCLens3D * >(DATA_PTR(mrb_self));
      obj_self->setLensEffect(fLensEffect);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLens3D#setLensEffect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLens3D_setPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value position;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &position)) {
      cocos2d::CCLens3D *obj_self = static_cast< cocos2d::CCLens3D * >(DATA_PTR(mrb_self));
      obj_self->setPosition(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLens3D#setPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLens3D_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCLens3D *obj_self = static_cast< cocos2d::CCLens3D * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLens3D#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLens3D_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCLens3D;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCLens3D * res = new cocos2d::CCLens3D();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLens3D#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLiquid_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCLiquid *obj_self = static_cast< cocos2d::CCLiquid * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLiquid#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLiquid_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int waves;
    mrb_float amplitude;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foif", &duration, &gridSize, &waves, &amplitude)) {
      class cocos2d::CCLiquid * res = cocos2d::CCLiquid::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), waves, amplitude);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCLiquid,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLiquid::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLiquid_getAmplitude(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLiquid *obj_self = static_cast< cocos2d::CCLiquid * >(DATA_PTR(mrb_self));
      float res = obj_self->getAmplitude();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLiquid#getAmplitude");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLiquid_getAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCLiquid *obj_self = static_cast< cocos2d::CCLiquid * >(DATA_PTR(mrb_self));
      float res = obj_self->getAmplitudeRate();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLiquid#getAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLiquid_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int waves;
    mrb_float amplitude;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foif", &duration, &gridSize, &waves, &amplitude)) {
      cocos2d::CCLiquid *obj_self = static_cast< cocos2d::CCLiquid * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), waves, amplitude);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLiquid#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLiquid_setAmplitude(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fAmplitude;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fAmplitude)) {
      cocos2d::CCLiquid *obj_self = static_cast< cocos2d::CCLiquid * >(DATA_PTR(mrb_self));
      obj_self->setAmplitude(fAmplitude);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLiquid#setAmplitude");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLiquid_setAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fAmplitudeRate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fAmplitudeRate)) {
      cocos2d::CCLiquid *obj_self = static_cast< cocos2d::CCLiquid * >(DATA_PTR(mrb_self));
      obj_self->setAmplitudeRate(fAmplitudeRate);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLiquid#setAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLiquid_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCLiquid *obj_self = static_cast< cocos2d::CCLiquid * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLiquid#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLiquid_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCLiquid;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCLiquid * res = new cocos2d::CCLiquid();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLiquid#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLog(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszFormat;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszFormat)) {
      cocos2d::CCLog(RSTRING_PTR(pszFormat));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLog");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCLuaLog(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszFormat;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszFormat)) {
      cocos2d::CCLuaLog(RSTRING_PTR(pszFormat));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCLuaLog");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCMenu;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCMenu * res = new cocos2d::CCMenu();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_addChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &child)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value child;
    mrb_int zOrder;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &child, &zOrder)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), zOrder);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value child;
    mrb_int zOrder;
    mrb_int tag;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oii", &child, &zOrder, &tag)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), zOrder, tag);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#addChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_alignItemsHorizontally(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->alignItemsHorizontally();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#alignItemsHorizontally");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_alignItemsHorizontallyWithPadding(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float padding;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &padding)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->alignItemsHorizontallyWithPadding(padding);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#alignItemsHorizontallyWithPadding");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_alignItemsInColumns(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int columns;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &columns)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->alignItemsInColumns(columns);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_int columns;
    mrb_value args;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "io", &columns, &args)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->alignItemsInColumns(columns, static_cast< __va_list_tag * >(DATA_PTR(args)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#alignItemsInColumns");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_alignItemsInColumnsWithArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value rows;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &rows)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->alignItemsInColumnsWithArray(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, rows, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#alignItemsInColumnsWithArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_alignItemsInRows(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int rows;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &rows)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->alignItemsInRows(rows);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_int rows;
    mrb_value args;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "io", &rows, &args)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->alignItemsInRows(rows, static_cast< __va_list_tag * >(DATA_PTR(args)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#alignItemsInRows");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_alignItemsInRowsWithArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value columns;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &columns)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->alignItemsInRowsWithArray(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, columns, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#alignItemsInRowsWithArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_alignItemsVertically(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->alignItemsVertically();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#alignItemsVertically");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_alignItemsVerticallyWithPadding(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float padding;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &padding)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->alignItemsVerticallyWithPadding(padding);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#alignItemsVerticallyWithPadding");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_ccTouchBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touch;
    mrb_value event;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &touch, &event)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->ccTouchBegan(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, touch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, event, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#ccTouchBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_ccTouchCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touch;
    mrb_value event;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &touch, &event)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->ccTouchCancelled(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, touch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, event, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#ccTouchCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_ccTouchEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touch;
    mrb_value event;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &touch, &event)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->ccTouchEnded(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, touch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, event, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#ccTouchEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_ccTouchMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touch;
    mrb_value event;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &touch, &event)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->ccTouchMoved(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, touch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, event, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#ccTouchMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCMenu * res = cocos2d::CCMenu::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenu,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value item;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &item)) {
      class cocos2d::CCMenu * res = cocos2d::CCMenu::create(static_cast< cocos2d::CCMenuItem * >(cc_mrb_data_get_ptr(mrb, item, &mrb_type_cocos2d_CCMenuItem, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenu,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_createWithArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pArrayOfItems;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pArrayOfItems)) {
      class cocos2d::CCMenu * res = cocos2d::CCMenu::createWithArray(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, pArrayOfItems, &mrb_type_cocos2d_CCArray, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenu,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu::createWithArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_createWithItem(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value item;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &item)) {
      class cocos2d::CCMenu * res = cocos2d::CCMenu::createWithItem(static_cast< cocos2d::CCMenuItem * >(cc_mrb_data_get_ptr(mrb, item, &mrb_type_cocos2d_CCMenuItem, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenu,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu::createWithItem");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_createWithItems(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value firstItem;
    mrb_value args;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &firstItem, &args)) {
      class cocos2d::CCMenu * res = cocos2d::CCMenu::createWithItems(static_cast< cocos2d::CCMenuItem * >(cc_mrb_data_get_ptr(mrb, firstItem, &mrb_type_cocos2d_CCMenuItem, NULL)), static_cast< __va_list_tag * >(DATA_PTR(args)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenu,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu::createWithItems");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_initWithArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pArrayOfItems;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pArrayOfItems)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithArray(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, pArrayOfItems, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#initWithArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_isEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#isEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_onExit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->onExit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#onExit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_registerWithTouchDispatcher(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->registerWithTouchDispatcher();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#registerWithTouchDispatcher");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_removeChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    mrb_bool cleanup;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ob", &child, &cleanup)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->removeChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), cleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#removeChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &value)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_setHandlerPriority(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int newPriority;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &newPriority)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->setHandlerPriority(newPriority);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#setHandlerPriority");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenu_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bValue)) {
      cocos2d::CCMenu *obj_self = static_cast< cocos2d::CCMenu * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(bValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenu#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCMenuItem;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCMenuItem * res = new cocos2d::CCMenuItem();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_activate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItem *obj_self = static_cast< cocos2d::CCMenuItem * >(DATA_PTR(mrb_self));
      obj_self->activate();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem#activate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCMenuItem * res = cocos2d::CCMenuItem::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItem,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pSelectorTarget;
    mrb_value selector;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pSelectorTarget, &selector)) {
      class cocos2d::CCMenuItem * res = cocos2d::CCMenuItem::create(CCMRubyCallbackWrapper::create(mrb, pSelectorTarget, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItem,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_getScriptTapHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItem *obj_self = static_cast< cocos2d::CCMenuItem * >(DATA_PTR(mrb_self));
      int res = obj_self->getScriptTapHandler();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem#getScriptTapHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_initWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSelectorTarget;
    mrb_value selector;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pSelectorTarget, &selector)) {
      cocos2d::CCMenuItem *obj_self = static_cast< cocos2d::CCMenuItem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTarget(CCMRubyCallbackWrapper::create(mrb, pSelectorTarget, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem#initWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_isEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItem *obj_self = static_cast< cocos2d::CCMenuItem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem#isEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItem *obj_self = static_cast< cocos2d::CCMenuItem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_isSelected(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItem *obj_self = static_cast< cocos2d::CCMenuItem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isSelected();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem#isSelected");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_rect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItem *obj_self = static_cast< cocos2d::CCMenuItem * >(DATA_PTR(mrb_self));
      class cocos2d::CCRect *res = new class cocos2d::CCRect(); *res = obj_self->rect();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem#rect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_registerScriptTapHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &nHandler)) {
      cocos2d::CCMenuItem *obj_self = static_cast< cocos2d::CCMenuItem * >(DATA_PTR(mrb_self));
      obj_self->registerScriptTapHandler(cc_mrb_proc_keep(mrb, nHandler));
      //cc_mrb_proc_keep(mrb, nHandler);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem#registerScriptTapHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_selected(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItem *obj_self = static_cast< cocos2d::CCMenuItem * >(DATA_PTR(mrb_self));
      obj_self->selected();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem#selected");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &value)) {
      cocos2d::CCMenuItem *obj_self = static_cast< cocos2d::CCMenuItem * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bValue)) {
      cocos2d::CCMenuItem *obj_self = static_cast< cocos2d::CCMenuItem * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(bValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_setTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSelectorTarget;
    mrb_value selector;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pSelectorTarget, &selector)) {
      cocos2d::CCMenuItem *obj_self = static_cast< cocos2d::CCMenuItem * >(DATA_PTR(mrb_self));
      obj_self->setTarget(CCMRubyCallbackWrapper::create(mrb, pSelectorTarget, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem#setTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_unregisterScriptTapHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItem *obj_self = static_cast< cocos2d::CCMenuItem * >(DATA_PTR(mrb_self));
      obj_self->unregisterScriptTapHandler();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem#unregisterScriptTapHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItem_unselected(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItem *obj_self = static_cast< cocos2d::CCMenuItem * >(DATA_PTR(mrb_self));
      obj_self->unselected();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItem#unselected");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemAtlasFont_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCMenuItemAtlasFont;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCMenuItemAtlasFont * res = new cocos2d::CCMenuItemAtlasFont();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemAtlasFont#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemAtlasFont_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value value;
    mrb_value charMapFile;
    mrb_int itemWidth;
    mrb_int itemHeight;
    mrb_int startCharMap;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "SSiii", &value, &charMapFile, &itemWidth, &itemHeight, &startCharMap)) {
      class cocos2d::CCMenuItemAtlasFont * res = cocos2d::CCMenuItemAtlasFont::create(RSTRING_PTR(value), RSTRING_PTR(charMapFile), itemWidth, itemHeight, startCharMap);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemAtlasFont,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value value;
    mrb_value charMapFile;
    mrb_int itemWidth;
    mrb_int itemHeight;
    mrb_int startCharMap;
    mrb_value target;
    mrb_value selector;
    if (7 == _argc_ && 7 == mrb_get_args(mrb, "SSiiioo", &value, &charMapFile, &itemWidth, &itemHeight, &startCharMap, &target, &selector)) {
      class cocos2d::CCMenuItemAtlasFont * res = cocos2d::CCMenuItemAtlasFont::create(RSTRING_PTR(value), RSTRING_PTR(charMapFile), itemWidth, itemHeight, startCharMap, CCMRubyCallbackWrapper::create(mrb, target, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemAtlasFont,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemAtlasFont::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemAtlasFont_initWithString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value value;
    mrb_value charMapFile;
    mrb_int itemWidth;
    mrb_int itemHeight;
    mrb_int startCharMap;
    mrb_value target;
    mrb_value selector;
    if (7 == _argc_ && 7 == mrb_get_args(mrb, "SSiiioo", &value, &charMapFile, &itemWidth, &itemHeight, &startCharMap, &target, &selector)) {
      cocos2d::CCMenuItemAtlasFont *obj_self = static_cast< cocos2d::CCMenuItemAtlasFont * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithString(RSTRING_PTR(value), RSTRING_PTR(charMapFile), itemWidth, itemHeight, startCharMap, CCMRubyCallbackWrapper::create(mrb, target, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemAtlasFont#initWithString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemFont_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCMenuItemFont;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCMenuItemFont * res = new cocos2d::CCMenuItemFont();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemFont#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemFont_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &value)) {
      class cocos2d::CCMenuItemFont * res = cocos2d::CCMenuItemFont::create(RSTRING_PTR(value));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemFont,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value value;
    mrb_value target;
    mrb_value selector;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "Soo", &value, &target, &selector)) {
      class cocos2d::CCMenuItemFont * res = cocos2d::CCMenuItemFont::create(RSTRING_PTR(value), CCMRubyCallbackWrapper::create(mrb, target, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemFont,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemFont::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemFont_fontName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      std::string res = cocos2d::CCMenuItemFont::fontName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemFont::fontName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemFont_fontNameObj(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemFont *obj_self = static_cast< cocos2d::CCMenuItemFont * >(DATA_PTR(mrb_self));
      std::string res = obj_self->fontNameObj();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemFont#fontNameObj");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemFont_fontSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      unsigned int res = cocos2d::CCMenuItemFont::fontSize();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemFont::fontSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemFont_fontSizeObj(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemFont *obj_self = static_cast< cocos2d::CCMenuItemFont * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->fontSizeObj();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemFont#fontSizeObj");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemFont_initWithString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value value;
    mrb_value target;
    mrb_value selector;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "Soo", &value, &target, &selector)) {
      cocos2d::CCMenuItemFont *obj_self = static_cast< cocos2d::CCMenuItemFont * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithString(RSTRING_PTR(value), CCMRubyCallbackWrapper::create(mrb, target, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemFont#initWithString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemFont_setFontName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::CCMenuItemFont::setFontName(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemFont::setFontName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemFont_setFontNameObj(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::CCMenuItemFont *obj_self = static_cast< cocos2d::CCMenuItemFont * >(DATA_PTR(mrb_self));
      obj_self->setFontNameObj(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemFont#setFontNameObj");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemFont_setFontSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int s;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &s)) {
      cocos2d::CCMenuItemFont::setFontSize(s);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemFont::setFontSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemFont_setFontSizeObj(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int s;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &s)) {
      cocos2d::CCMenuItemFont *obj_self = static_cast< cocos2d::CCMenuItemFont * >(DATA_PTR(mrb_self));
      obj_self->setFontSizeObj(s);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemFont#setFontSizeObj");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemImage_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCMenuItemImage;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCMenuItemImage * res = new cocos2d::CCMenuItemImage();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemImage#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemImage_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value normalImage;
    mrb_value selectedImage;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &normalImage, &selectedImage)) {
      class cocos2d::CCMenuItemImage * res = cocos2d::CCMenuItemImage::create(RSTRING_PTR(normalImage), RSTRING_PTR(selectedImage));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemImage,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value normalImage;
    mrb_value selectedImage;
    mrb_value disabledImage;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSS", &normalImage, &selectedImage, &disabledImage)) {
      class cocos2d::CCMenuItemImage * res = cocos2d::CCMenuItemImage::create(RSTRING_PTR(normalImage), RSTRING_PTR(selectedImage), RSTRING_PTR(disabledImage));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemImage,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value normalImage;
    mrb_value selectedImage;
    mrb_value target;
    mrb_value selector;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "SSoo", &normalImage, &selectedImage, &target, &selector)) {
      class cocos2d::CCMenuItemImage * res = cocos2d::CCMenuItemImage::create(RSTRING_PTR(normalImage), RSTRING_PTR(selectedImage), CCMRubyCallbackWrapper::create(mrb, target, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemImage,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value normalImage;
    mrb_value selectedImage;
    mrb_value disabledImage;
    mrb_value target;
    mrb_value selector;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "SSSoo", &normalImage, &selectedImage, &disabledImage, &target, &selector)) {
      class cocos2d::CCMenuItemImage * res = cocos2d::CCMenuItemImage::create(RSTRING_PTR(normalImage), RSTRING_PTR(selectedImage), RSTRING_PTR(disabledImage), CCMRubyCallbackWrapper::create(mrb, target, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemImage,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    if (0 == _argc_) {
      class cocos2d::CCMenuItemImage * res = cocos2d::CCMenuItemImage::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemImage,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemImage::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemImage_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemImage *obj_self = static_cast< cocos2d::CCMenuItemImage * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemImage#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemImage_initWithNormalImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value normalImage;
    mrb_value selectedImage;
    mrb_value disabledImage;
    mrb_value target;
    mrb_value selector;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "SSSoo", &normalImage, &selectedImage, &disabledImage, &target, &selector)) {
      cocos2d::CCMenuItemImage *obj_self = static_cast< cocos2d::CCMenuItemImage * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithNormalImage(RSTRING_PTR(normalImage), RSTRING_PTR(selectedImage), RSTRING_PTR(disabledImage), CCMRubyCallbackWrapper::create(mrb, target, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemImage#initWithNormalImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemImage_setDisabledSpriteFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value frame;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &frame)) {
      cocos2d::CCMenuItemImage *obj_self = static_cast< cocos2d::CCMenuItemImage * >(DATA_PTR(mrb_self));
      obj_self->setDisabledSpriteFrame(static_cast< cocos2d::CCSpriteFrame * >(cc_mrb_data_get_ptr(mrb, frame, &mrb_type_cocos2d_CCSpriteFrame, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemImage#setDisabledSpriteFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemImage_setNormalSpriteFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value frame;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &frame)) {
      cocos2d::CCMenuItemImage *obj_self = static_cast< cocos2d::CCMenuItemImage * >(DATA_PTR(mrb_self));
      obj_self->setNormalSpriteFrame(static_cast< cocos2d::CCSpriteFrame * >(cc_mrb_data_get_ptr(mrb, frame, &mrb_type_cocos2d_CCSpriteFrame, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemImage#setNormalSpriteFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemImage_setSelectedSpriteFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value frame;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &frame)) {
      cocos2d::CCMenuItemImage *obj_self = static_cast< cocos2d::CCMenuItemImage * >(DATA_PTR(mrb_self));
      obj_self->setSelectedSpriteFrame(static_cast< cocos2d::CCSpriteFrame * >(cc_mrb_data_get_ptr(mrb, frame, &mrb_type_cocos2d_CCSpriteFrame, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemImage#setSelectedSpriteFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemLabel_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCMenuItemLabel;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCMenuItemLabel * res = new cocos2d::CCMenuItemLabel();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemLabel#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemLabel_activate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemLabel *obj_self = static_cast< cocos2d::CCMenuItemLabel * >(DATA_PTR(mrb_self));
      obj_self->activate();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemLabel#activate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemLabel_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value label;
    mrb_value target;
    mrb_value selector;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &label, &target, &selector)) {
      class cocos2d::CCMenuItemLabel * res = cocos2d::CCMenuItemLabel::create(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, label, &mrb_type_cocos2d_CCNode, NULL)), CCMRubyCallbackWrapper::create(mrb, target, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemLabel,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value label;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &label)) {
      class cocos2d::CCMenuItemLabel * res = cocos2d::CCMenuItemLabel::create(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, label, &mrb_type_cocos2d_CCNode, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemLabel,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemLabel::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemLabel_getDisabledColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemLabel *obj_self = static_cast< cocos2d::CCMenuItemLabel * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getDisabledColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       const_cast< ccColor3B * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemLabel#getDisabledColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemLabel_getLabel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemLabel *obj_self = static_cast< cocos2d::CCMenuItemLabel * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getLabel();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemLabel#getLabel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemLabel_initWithLabel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value label;
    mrb_value target;
    mrb_value selector;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &label, &target, &selector)) {
      cocos2d::CCMenuItemLabel *obj_self = static_cast< cocos2d::CCMenuItemLabel * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithLabel(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, label, &mrb_type_cocos2d_CCNode, NULL)), CCMRubyCallbackWrapper::create(mrb, target, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemLabel#initWithLabel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemLabel_selected(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemLabel *obj_self = static_cast< cocos2d::CCMenuItemLabel * >(DATA_PTR(mrb_self));
      obj_self->selected();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemLabel#selected");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemLabel_setDisabledColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCMenuItemLabel *obj_self = static_cast< cocos2d::CCMenuItemLabel * >(DATA_PTR(mrb_self));
      obj_self->setDisabledColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemLabel#setDisabledColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemLabel_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool enabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &enabled)) {
      cocos2d::CCMenuItemLabel *obj_self = static_cast< cocos2d::CCMenuItemLabel * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(enabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemLabel#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemLabel_setLabel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCMenuItemLabel *obj_self = static_cast< cocos2d::CCMenuItemLabel * >(DATA_PTR(mrb_self));
      obj_self->setLabel(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemLabel#setLabel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemLabel_setString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value label;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &label)) {
      cocos2d::CCMenuItemLabel *obj_self = static_cast< cocos2d::CCMenuItemLabel * >(DATA_PTR(mrb_self));
      obj_self->setString(RSTRING_PTR(label));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemLabel#setString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemLabel_unselected(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemLabel *obj_self = static_cast< cocos2d::CCMenuItemLabel * >(DATA_PTR(mrb_self));
      obj_self->unselected();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemLabel#unselected");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemSprite_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCMenuItemSprite;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCMenuItemSprite * res = new cocos2d::CCMenuItemSprite();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemSprite#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemSprite_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value normalSprite;
    mrb_value selectedSprite;
    mrb_value disabledSprite;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &normalSprite, &selectedSprite, &disabledSprite)) {
      class cocos2d::CCMenuItemSprite * res = cocos2d::CCMenuItemSprite::create(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, normalSprite, &mrb_type_cocos2d_CCNode, NULL)), static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, selectedSprite, &mrb_type_cocos2d_CCNode, NULL)), static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, disabledSprite, &mrb_type_cocos2d_CCNode, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value normalSprite;
    mrb_value selectedSprite;
    mrb_value target;
    mrb_value selector;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oooo", &normalSprite, &selectedSprite, &target, &selector)) {
      class cocos2d::CCMenuItemSprite * res = cocos2d::CCMenuItemSprite::create(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, normalSprite, &mrb_type_cocos2d_CCNode, NULL)), static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, selectedSprite, &mrb_type_cocos2d_CCNode, NULL)), CCMRubyCallbackWrapper::create(mrb, target, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value normalSprite;
    mrb_value selectedSprite;
    mrb_value disabledSprite;
    mrb_value target;
    mrb_value selector;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "ooooo", &normalSprite, &selectedSprite, &disabledSprite, &target, &selector)) {
      class cocos2d::CCMenuItemSprite * res = cocos2d::CCMenuItemSprite::create(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, normalSprite, &mrb_type_cocos2d_CCNode, NULL)), static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, selectedSprite, &mrb_type_cocos2d_CCNode, NULL)), static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, disabledSprite, &mrb_type_cocos2d_CCNode, NULL)), CCMRubyCallbackWrapper::create(mrb, target, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemSprite::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemSprite_getDisabledImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemSprite *obj_self = static_cast< cocos2d::CCMenuItemSprite * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getDisabledImage();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemSprite#getDisabledImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemSprite_getNormalImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemSprite *obj_self = static_cast< cocos2d::CCMenuItemSprite * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getNormalImage();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemSprite#getNormalImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemSprite_getSelectedImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemSprite *obj_self = static_cast< cocos2d::CCMenuItemSprite * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getSelectedImage();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemSprite#getSelectedImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemSprite_initWithNormalSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value normalSprite;
    mrb_value selectedSprite;
    mrb_value disabledSprite;
    mrb_value target;
    mrb_value selector;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "ooooo", &normalSprite, &selectedSprite, &disabledSprite, &target, &selector)) {
      cocos2d::CCMenuItemSprite *obj_self = static_cast< cocos2d::CCMenuItemSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithNormalSprite(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, normalSprite, &mrb_type_cocos2d_CCNode, NULL)), static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, selectedSprite, &mrb_type_cocos2d_CCNode, NULL)), static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, disabledSprite, &mrb_type_cocos2d_CCNode, NULL)), CCMRubyCallbackWrapper::create(mrb, target, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemSprite#initWithNormalSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemSprite_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemSprite *obj_self = static_cast< cocos2d::CCMenuItemSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemSprite#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemSprite_selected(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemSprite *obj_self = static_cast< cocos2d::CCMenuItemSprite * >(DATA_PTR(mrb_self));
      obj_self->selected();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemSprite#selected");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemSprite_setDisabledImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCMenuItemSprite *obj_self = static_cast< cocos2d::CCMenuItemSprite * >(DATA_PTR(mrb_self));
      obj_self->setDisabledImage(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemSprite#setDisabledImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemSprite_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bEnabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bEnabled)) {
      cocos2d::CCMenuItemSprite *obj_self = static_cast< cocos2d::CCMenuItemSprite * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(bEnabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemSprite#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemSprite_setNormalImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCMenuItemSprite *obj_self = static_cast< cocos2d::CCMenuItemSprite * >(DATA_PTR(mrb_self));
      obj_self->setNormalImage(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemSprite#setNormalImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemSprite_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bValue)) {
      cocos2d::CCMenuItemSprite *obj_self = static_cast< cocos2d::CCMenuItemSprite * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(bValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemSprite#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemSprite_setSelectedImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCMenuItemSprite *obj_self = static_cast< cocos2d::CCMenuItemSprite * >(DATA_PTR(mrb_self));
      obj_self->setSelectedImage(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemSprite#setSelectedImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemSprite_unselected(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemSprite *obj_self = static_cast< cocos2d::CCMenuItemSprite * >(DATA_PTR(mrb_self));
      obj_self->unselected();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemSprite#unselected");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCMenuItemToggle;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCMenuItemToggle * res = new cocos2d::CCMenuItemToggle();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_activate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemToggle *obj_self = static_cast< cocos2d::CCMenuItemToggle * >(DATA_PTR(mrb_self));
      obj_self->activate();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle#activate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_addSubItem(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value item;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &item)) {
      cocos2d::CCMenuItemToggle *obj_self = static_cast< cocos2d::CCMenuItemToggle * >(DATA_PTR(mrb_self));
      obj_self->addSubItem(static_cast< cocos2d::CCMenuItem * >(cc_mrb_data_get_ptr(mrb, item, &mrb_type_cocos2d_CCMenuItem, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle#addSubItem");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCMenuItemToggle * res = cocos2d::CCMenuItemToggle::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemToggle,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value item;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &item)) {
      class cocos2d::CCMenuItemToggle * res = cocos2d::CCMenuItemToggle::create(static_cast< cocos2d::CCMenuItem * >(cc_mrb_data_get_ptr(mrb, item, &mrb_type_cocos2d_CCMenuItem, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemToggle,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_createWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value selector;
    mrb_value menuItems;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &target, &selector, &menuItems)) {
      class cocos2d::CCMenuItemToggle * res = cocos2d::CCMenuItemToggle::createWithTarget(CCMRubyCallbackWrapper::create(mrb, target, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl), static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, menuItems, &mrb_type_cocos2d_CCArray, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemToggle,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value target;
    mrb_value selector;
    mrb_value item;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &target, &selector, &item)) {
      class cocos2d::CCMenuItemToggle * res = cocos2d::CCMenuItemToggle::createWithTarget(CCMRubyCallbackWrapper::create(mrb, target, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl), static_cast< cocos2d::CCMenuItem * >(cc_mrb_data_get_ptr(mrb, item, &mrb_type_cocos2d_CCMenuItem, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMenuItemToggle,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle::createWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_getSelectedIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemToggle *obj_self = static_cast< cocos2d::CCMenuItemToggle * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getSelectedIndex();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle#getSelectedIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_getSubItems(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemToggle *obj_self = static_cast< cocos2d::CCMenuItemToggle * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getSubItems();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle#getSubItems");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_initWithItem(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value item;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &item)) {
      cocos2d::CCMenuItemToggle *obj_self = static_cast< cocos2d::CCMenuItemToggle * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithItem(static_cast< cocos2d::CCMenuItem * >(cc_mrb_data_get_ptr(mrb, item, &mrb_type_cocos2d_CCMenuItem, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle#initWithItem");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_initWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value selector;
    mrb_value item;
    mrb_value args;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oooo", &target, &selector, &item, &args)) {
      cocos2d::CCMenuItemToggle *obj_self = static_cast< cocos2d::CCMenuItemToggle * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTarget(CCMRubyCallbackWrapper::create(mrb, target, selector), menu_selector(CCMRubyCallbackWrapper::SEL_MenuHandler_Impl), static_cast< cocos2d::CCMenuItem * >(cc_mrb_data_get_ptr(mrb, item, &mrb_type_cocos2d_CCMenuItem, NULL)), static_cast< __va_list_tag * >(DATA_PTR(args)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle#initWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemToggle *obj_self = static_cast< cocos2d::CCMenuItemToggle * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_selected(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemToggle *obj_self = static_cast< cocos2d::CCMenuItemToggle * >(DATA_PTR(mrb_self));
      obj_self->selected();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle#selected");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_selectedItem(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemToggle *obj_self = static_cast< cocos2d::CCMenuItemToggle * >(DATA_PTR(mrb_self));
      class cocos2d::CCMenuItem * res = obj_self->selectedItem();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCMenuItem,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle#selectedItem");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_setEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &var)) {
      cocos2d::CCMenuItemToggle *obj_self = static_cast< cocos2d::CCMenuItemToggle * >(DATA_PTR(mrb_self));
      obj_self->setEnabled(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle#setEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bValue)) {
      cocos2d::CCMenuItemToggle *obj_self = static_cast< cocos2d::CCMenuItemToggle * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(bValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_setSelectedIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCMenuItemToggle *obj_self = static_cast< cocos2d::CCMenuItemToggle * >(DATA_PTR(mrb_self));
      obj_self->setSelectedIndex(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle#setSelectedIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_setSubItems(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCMenuItemToggle *obj_self = static_cast< cocos2d::CCMenuItemToggle * >(DATA_PTR(mrb_self));
      obj_self->setSubItems(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle#setSubItems");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMenuItemToggle_unselected(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMenuItemToggle *obj_self = static_cast< cocos2d::CCMenuItemToggle * >(DATA_PTR(mrb_self));
      obj_self->unselected();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMenuItemToggle#unselected");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMessageBox(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszMsg;
    mrb_value pszTitle;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &pszMsg, &pszTitle)) {
      cocos2d::CCMessageBox(RSTRING_PTR(pszMsg), RSTRING_PTR(pszTitle));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMessageBox");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCMotionStreak;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCMotionStreak * res = new cocos2d::CCMotionStreak();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fade;
    mrb_float minSeg;
    mrb_float stroke;
    mrb_value color;
    mrb_value path;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "fffoS", &fade, &minSeg, &stroke, &color, &path)) {
      class cocos2d::CCMotionStreak * res = cocos2d::CCMotionStreak::create(fade, minSeg, stroke, *(static_cast< ccColor3B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))), RSTRING_PTR(path));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMotionStreak,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_float fade;
    mrb_float minSeg;
    mrb_float stroke;
    mrb_value color;
    mrb_value texture;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "fffoo", &fade, &minSeg, &stroke, &color, &texture)) {
      class cocos2d::CCMotionStreak * res = cocos2d::CCMotionStreak::create(fade, minSeg, stroke, *(static_cast< ccColor3B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))), static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMotionStreak,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_getBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      ccBlendFunc *res = new ccBlendFunc(); *res = obj_self->getBlendFunc();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccBlendFunc"),
                       &mrb_type_cocos2d__ccBlendFunc,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#getBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_getOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      GLubyte res = obj_self->getOpacity();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#getOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_getTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      class cocos2d::CCTexture2D * res = obj_self->getTexture();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTexture2D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#getTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_initWithFade(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fade;
    mrb_float minSeg;
    mrb_float stroke;
    mrb_value color;
    mrb_value path;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "fffoS", &fade, &minSeg, &stroke, &color, &path)) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFade(fade, minSeg, stroke, *(static_cast< ccColor3B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))), RSTRING_PTR(path));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_float fade;
    mrb_float minSeg;
    mrb_float stroke;
    mrb_value color;
    mrb_value texture;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "fffoo", &fade, &minSeg, &stroke, &color, &texture)) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFade(fade, minSeg, stroke, *(static_cast< ccColor3B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))), static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#initWithFade");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_isFastMode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isFastMode();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#isFastMode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_isStartingPositionInitialized(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isStartingPositionInitialized();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#isStartingPositionInitialized");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_reset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      obj_self->reset();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#reset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_setBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value blendFunc;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &blendFunc)) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      obj_self->setBlendFunc(*(static_cast< ccBlendFunc * >(cc_mrb_data_get_ptr(mrb, blendFunc, &mrb_type_cocos2d__ccBlendFunc, &mrb_no_free_type_cocos2d__ccBlendFunc))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#setBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_setFastMode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bFastMode;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bFastMode)) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      obj_self->setFastMode(bFastMode);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#setFastMode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_setOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int opacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &opacity)) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      obj_self->setOpacity(opacity);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#setOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bValue)) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(bValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_setPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value position;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &position)) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      obj_self->setPosition(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#setPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_setStartingPositionInitialized(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bStartingPositionInitialized;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bStartingPositionInitialized)) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      obj_self->setStartingPositionInitialized(bStartingPositionInitialized);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#setStartingPositionInitialized");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_setTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value texture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &texture)) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      obj_self->setTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#setTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_tintWithColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value colors;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &colors)) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      obj_self->tintWithColor(*(static_cast< ccColor3B * >(cc_mrb_data_get_ptr(mrb, colors, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#tintWithColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMotionStreak_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float delta;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &delta)) {
      cocos2d::CCMotionStreak *obj_self = static_cast< cocos2d::CCMotionStreak * >(DATA_PTR(mrb_self));
      obj_self->update(delta);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMotionStreak#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMoveBy_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCMoveBy *obj_self = static_cast< cocos2d::CCMoveBy * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMoveBy#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMoveBy_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value deltaPosition;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &duration, &deltaPosition)) {
      class cocos2d::CCMoveBy * res = cocos2d::CCMoveBy::create(duration, *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, deltaPosition, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMoveBy,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMoveBy::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMoveBy_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value deltaPosition;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &duration, &deltaPosition)) {
      cocos2d::CCMoveBy *obj_self = static_cast< cocos2d::CCMoveBy * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, deltaPosition, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMoveBy#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMoveBy_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCMoveBy *obj_self = static_cast< cocos2d::CCMoveBy * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMoveBy#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMoveBy_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCMoveBy *obj_self = static_cast< cocos2d::CCMoveBy * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMoveBy#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMoveBy_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCMoveBy *obj_self = static_cast< cocos2d::CCMoveBy * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMoveBy#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMoveBy_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCMoveBy;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCMoveBy * res = new cocos2d::CCMoveBy();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMoveBy#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMoveTo_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCMoveTo *obj_self = static_cast< cocos2d::CCMoveTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMoveTo#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMoveTo_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value position;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &duration, &position)) {
      class cocos2d::CCMoveTo * res = cocos2d::CCMoveTo::create(duration, *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCMoveTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMoveTo::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMoveTo_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value position;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &duration, &position)) {
      cocos2d::CCMoveTo *obj_self = static_cast< cocos2d::CCMoveTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMoveTo#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMoveTo_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCMoveTo *obj_self = static_cast< cocos2d::CCMoveTo * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMoveTo#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCMoveTo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCMoveTo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCMoveTo * res = new cocos2d::CCMoveTo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCMoveTo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCNode;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCNode * res = new cocos2d::CCNode();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode__setZOrder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int z;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &z)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->_setZOrder(z);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#_setZOrder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_addChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &child)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value child;
    mrb_int zOrder;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &child, &zOrder)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), zOrder);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value child;
    mrb_int zOrder;
    mrb_int tag;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oii", &child, &zOrder, &tag)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), zOrder, tag);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#addChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_addComponent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pComponent;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pComponent)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->addComponent(static_cast< cocos2d::CCComponent * >(cc_mrb_data_get_ptr(mrb, pComponent, &mrb_type_cocos2d_CCComponent, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#addComponent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_boundingBox(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCRect *res = new class cocos2d::CCRect(); *res = obj_self->boundingBox();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#boundingBox");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_convertToNodeSpace(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value worldPoint;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &worldPoint)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->convertToNodeSpace(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, worldPoint, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#convertToNodeSpace");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_convertToNodeSpaceAR(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value worldPoint;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &worldPoint)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->convertToNodeSpaceAR(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, worldPoint, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#convertToNodeSpaceAR");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_convertToWorldSpace(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nodePoint;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &nodePoint)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->convertToWorldSpace(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, nodePoint, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#convertToWorldSpace");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_convertToWorldSpaceAR(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nodePoint;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &nodePoint)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->convertToWorldSpaceAR(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, nodePoint, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#convertToWorldSpaceAR");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_convertTouchToNodeSpace(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touch;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &touch)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->convertTouchToNodeSpace(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, touch, &mrb_type_cocos2d_CCTouch, NULL)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#convertTouchToNodeSpace");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_convertTouchToNodeSpaceAR(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touch;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &touch)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->convertTouchToNodeSpaceAR(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, touch, &mrb_type_cocos2d_CCTouch, NULL)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#convertTouchToNodeSpaceAR");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCNode * res = cocos2d::CCNode::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_description(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      std::string res = obj_self->description();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#description");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getActionByTag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int tag;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &tag)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCAction * res = obj_self->getActionByTag(tag);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getActionByTag");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getActionManager(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionManager * res = obj_self->getActionManager();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionManager,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getActionManager");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getAnchorPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getAnchorPoint();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getAnchorPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getAnchorPointInPoints(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getAnchorPointInPoints();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getAnchorPointInPoints");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getCamera(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCCamera * res = obj_self->getCamera();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCCamera,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getCamera");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getChildByTag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int tag;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &tag)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getChildByTag(tag);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getChildByTag");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getChildren(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getChildren();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getChildren");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getChildrenCount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getChildrenCount();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getChildrenCount");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getComponent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pName)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCComponent * res = obj_self->getComponent(RSTRING_PTR(pName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCComponent,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getComponent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getContentSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getContentSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       const_cast< cocos2d::CCSize * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getContentSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getGLServerState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      ccGLServerState res = obj_self->getGLServerState();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getGLServerState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getGrid(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCGridBase * res = obj_self->getGrid();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCGridBase,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getGrid");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getOrderOfArrival(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getOrderOfArrival();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getOrderOfArrival");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getParent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getParent();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getParent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getPosition();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
      return mrb_res;
    }
  }
  {
    mrb_value x;
    mrb_value y;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "AA", &x, &y)) {
      float cxx_x[1]; cc_mrb_ary_conv_to_c_array(mrb, x, reinterpret_cast< float * >(cxx_x), 1);
      float cxx_y[1]; cc_mrb_ary_conv_to_c_array(mrb, y, reinterpret_cast< float * >(cxx_y), 1);
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->getPosition(cxx_x, cxx_y);
      cc_mrb_ary_conv_from_c_array(mrb, x, reinterpret_cast< float * >(cxx_x), 1);
      cc_mrb_ary_conv_from_c_array(mrb, y, reinterpret_cast< float * >(cxx_y), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getPositionX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      float res = obj_self->getPositionX();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getPositionX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getPositionY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      float res = obj_self->getPositionY();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getPositionY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getRotation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      float res = obj_self->getRotation();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getRotation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getRotationX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      float res = obj_self->getRotationX();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getRotationX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getRotationY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      float res = obj_self->getRotationY();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getRotationY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      float res = obj_self->getScale();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getScaleX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      float res = obj_self->getScaleX();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getScaleX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getScaleY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      float res = obj_self->getScaleY();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getScaleY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getScheduler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCScheduler * res = obj_self->getScheduler();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCScheduler,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getScheduler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getScriptHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      int res = obj_self->getScriptHandler();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getScriptHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getShaderProgram(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCGLProgram * res = obj_self->getShaderProgram();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCGLProgram,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getShaderProgram");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getSkewX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      float res = obj_self->getSkewX();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getSkewX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getSkewY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      float res = obj_self->getSkewY();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getSkewY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getTag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      int res = obj_self->getTag();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getTag");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getUserData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      void * res = obj_self->getUserData();
      mrb_value mrb_res = mrb_obj_value(res) /* XXX: */ ;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getUserData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getUserObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->getUserObject();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getUserObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getVertexZ(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      float res = obj_self->getVertexZ();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getVertexZ");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_getZOrder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      int res = obj_self->getZOrder();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#getZOrder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_ignoreAnchorPointForPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool ignore;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &ignore)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->ignoreAnchorPointForPosition(ignore);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#ignoreAnchorPointForPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_isIgnoreAnchorPointForPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isIgnoreAnchorPointForPosition();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#isIgnoreAnchorPointForPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_isRunning(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isRunning();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#isRunning");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_isVisible(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isVisible();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#isVisible");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_nodeToParentTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      struct cocos2d::CCAffineTransform *res = new struct cocos2d::CCAffineTransform(); *res = obj_self->nodeToParentTransform();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform"),
                       &mrb_type_cocos2d_CCAffineTransform,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#nodeToParentTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_nodeToWorldTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      struct cocos2d::CCAffineTransform *res = new struct cocos2d::CCAffineTransform(); *res = obj_self->nodeToWorldTransform();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform"),
                       &mrb_type_cocos2d_CCAffineTransform,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#nodeToWorldTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_numberOfRunningActions(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->numberOfRunningActions();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#numberOfRunningActions");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_onEnterTransitionDidFinish(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->onEnterTransitionDidFinish();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#onEnterTransitionDidFinish");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_onExit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->onExit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#onExit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_onExitTransitionDidStart(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->onExitTransitionDidStart();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#onExitTransitionDidStart");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_parentToNodeTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      struct cocos2d::CCAffineTransform *res = new struct cocos2d::CCAffineTransform(); *res = obj_self->parentToNodeTransform();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform"),
                       &mrb_type_cocos2d_CCAffineTransform,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#parentToNodeTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_pauseSchedulerAndActions(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->pauseSchedulerAndActions();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#pauseSchedulerAndActions");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_registerScriptHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value handler;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &handler)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->registerScriptHandler(cc_mrb_proc_keep(mrb, handler));
      //cc_mrb_proc_keep(mrb, handler);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#registerScriptHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_removeAllChildren(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->removeAllChildren();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#removeAllChildren");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_removeAllChildrenWithCleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool cleanup;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &cleanup)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->removeAllChildrenWithCleanup(cleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#removeAllChildrenWithCleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_removeAllComponents(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->removeAllComponents();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#removeAllComponents");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_removeChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &child)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->removeChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value child;
    mrb_bool cleanup;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ob", &child, &cleanup)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->removeChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), cleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#removeChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_removeChildByTag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int tag;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &tag)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->removeChildByTag(tag);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_int tag;
    mrb_bool cleanup;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ib", &tag, &cleanup)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->removeChildByTag(tag, cleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#removeChildByTag");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_removeComponent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pName)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->removeComponent(RSTRING_PTR(pName));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#removeComponent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_removeFromParent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->removeFromParent();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#removeFromParent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_removeFromParentAndCleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool cleanup;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &cleanup)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->removeFromParentAndCleanup(cleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#removeFromParentAndCleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_reorderChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    mrb_int zOrder;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &child, &zOrder)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->reorderChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), zOrder);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#reorderChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_resumeSchedulerAndActions(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->resumeSchedulerAndActions();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#resumeSchedulerAndActions");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_runAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value action;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &action)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCAction * res = obj_self->runAction(static_cast< cocos2d::CCAction * >(cc_mrb_data_get_ptr(mrb, action, &mrb_type_cocos2d_CCAction, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#runAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_schedule(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value selector;
    mrb_float interval;
    mrb_int repeat;
    mrb_float delay;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ofif", &selector, &interval, &repeat, &delay)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->schedule(schedule_selector(CCMRubyCallbackWrapper::SEL_SCHEDULE_Impl), interval, repeat, delay);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value selector;
    mrb_float interval;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &selector, &interval)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->schedule(schedule_selector(CCMRubyCallbackWrapper::SEL_SCHEDULE_Impl), interval);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value selector;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &selector)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->schedule(schedule_selector(CCMRubyCallbackWrapper::SEL_SCHEDULE_Impl));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#schedule");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_scheduleOnce(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value selector;
    mrb_float delay;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &selector, &delay)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->scheduleOnce(schedule_selector(CCMRubyCallbackWrapper::SEL_SCHEDULE_Impl), delay);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#scheduleOnce");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_scheduleUpdate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->scheduleUpdate();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#scheduleUpdate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_scheduleUpdateWithPriority(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int priority;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &priority)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->scheduleUpdateWithPriority(priority);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#scheduleUpdateWithPriority");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_scheduleUpdateWithPriorityLua(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    mrb_int priority;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &nHandler, &priority)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->scheduleUpdateWithPriorityLua(cc_mrb_proc_keep(mrb, nHandler), priority);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#scheduleUpdateWithPriorityLua");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setActionManager(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value actionManager;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &actionManager)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setActionManager(static_cast< cocos2d::CCActionManager * >(cc_mrb_data_get_ptr(mrb, actionManager, &mrb_type_cocos2d_CCActionManager, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setActionManager");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setAdditionalTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value additionalTransform;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &additionalTransform)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setAdditionalTransform(*(static_cast< const struct cocos2d::CCAffineTransform * >(cc_mrb_data_get_ptr(mrb, additionalTransform, &mrb_type_cocos2d_CCAffineTransform, &mrb_no_free_type_cocos2d_CCAffineTransform))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setAdditionalTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setAnchorPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value anchorPoint;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &anchorPoint)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setAnchorPoint(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, anchorPoint, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setAnchorPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setContentSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value contentSize;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &contentSize)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setContentSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, contentSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setContentSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setGLServerState(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int glServerState;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &glServerState)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setGLServerState((ccGLServerState)glServerState);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setGLServerState");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setGrid(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pGrid;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pGrid)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setGrid(static_cast< cocos2d::CCGridBase * >(cc_mrb_data_get_ptr(mrb, pGrid, &mrb_type_cocos2d_CCGridBase, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setGrid");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setOrderOfArrival(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int uOrderOfArrival;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &uOrderOfArrival)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setOrderOfArrival(uOrderOfArrival);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setOrderOfArrival");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setParent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value parent;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &parent)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setParent(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, parent, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setParent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value position;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &position)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setPosition(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_float x;
    mrb_float y;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &x, &y)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setPosition(x, y);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setPositionX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float x;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &x)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setPositionX(x);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setPositionX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setPositionY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float y;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &y)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setPositionY(y);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setPositionY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setRotation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fRotation;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fRotation)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setRotation(fRotation);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setRotation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setRotationX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fRotaionX;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fRotaionX)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setRotationX(fRotaionX);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setRotationX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setRotationY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fRotationY;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fRotationY)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setRotationY(fRotationY);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setRotationY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float scale;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &scale)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setScale(scale);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setScaleX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fScaleX;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fScaleX)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setScaleX(fScaleX);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setScaleX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setScaleY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fScaleY;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fScaleY)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setScaleY(fScaleY);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setScaleY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setScheduler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value scheduler;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &scheduler)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setScheduler(static_cast< cocos2d::CCScheduler * >(cc_mrb_data_get_ptr(mrb, scheduler, &mrb_type_cocos2d_CCScheduler, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setScheduler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setShaderProgram(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pShaderProgram;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pShaderProgram)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setShaderProgram(static_cast< cocos2d::CCGLProgram * >(cc_mrb_data_get_ptr(mrb, pShaderProgram, &mrb_type_cocos2d_CCGLProgram, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setShaderProgram");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setSkewX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fSkewX;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fSkewX)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setSkewX(fSkewX);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setSkewX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setSkewY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fSkewY;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fSkewY)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setSkewY(fSkewY);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setSkewY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setTag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nTag;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nTag)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setTag(nTag);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setTag");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setUserData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pUserData;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pUserData)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setUserData(static_cast< void * >(DATA_PTR(pUserData)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setUserData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setUserObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pUserObject;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pUserObject)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setUserObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pUserObject, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setUserObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setVertexZ(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float vertexZ;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &vertexZ)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setVertexZ(vertexZ);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setVertexZ");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setVisible(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool visible;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &visible)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setVisible(visible);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setVisible");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_setZOrder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int zOrder;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &zOrder)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->setZOrder(zOrder);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#setZOrder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_sortAllChildren(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->sortAllChildren();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#sortAllChildren");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_stopAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value action;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &action)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->stopAction(static_cast< cocos2d::CCAction * >(cc_mrb_data_get_ptr(mrb, action, &mrb_type_cocos2d_CCAction, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#stopAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_stopActionByTag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int tag;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &tag)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->stopActionByTag(tag);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#stopActionByTag");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_stopAllActions(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->stopAllActions();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#stopAllActions");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_transform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->transform();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#transform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_transformAncestors(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->transformAncestors();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#transformAncestors");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_unregisterScriptHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->unregisterScriptHandler();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#unregisterScriptHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_unschedule(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value selector;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &selector)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->unschedule(schedule_selector(CCMRubyCallbackWrapper::SEL_SCHEDULE_Impl));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#unschedule");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_unscheduleAllSelectors(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->unscheduleAllSelectors();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#unscheduleAllSelectors");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_unscheduleUpdate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->unscheduleUpdate();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#unscheduleUpdate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float delta;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &delta)) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->update(delta);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_updateTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->updateTransform();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#updateTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_visit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      obj_self->visit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#visit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNode_worldToNodeTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNode *obj_self = static_cast< cocos2d::CCNode * >(DATA_PTR(mrb_self));
      struct cocos2d::CCAffineTransform *res = new struct cocos2d::CCAffineTransform(); *res = obj_self->worldToNodeTransform();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform"),
                       &mrb_type_cocos2d_CCAffineTransform,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNode#worldToNodeTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCNodeRGBA;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCNodeRGBA * res = new cocos2d::CCNodeRGBA();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_getColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNodeRGBA *obj_self = static_cast< cocos2d::CCNodeRGBA * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       const_cast< ccColor3B * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#getColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_getDisplayedColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNodeRGBA *obj_self = static_cast< cocos2d::CCNodeRGBA * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getDisplayedColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       const_cast< ccColor3B * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#getDisplayedColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_getDisplayedOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNodeRGBA *obj_self = static_cast< cocos2d::CCNodeRGBA * >(DATA_PTR(mrb_self));
      GLubyte res = obj_self->getDisplayedOpacity();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#getDisplayedOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_getOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNodeRGBA *obj_self = static_cast< cocos2d::CCNodeRGBA * >(DATA_PTR(mrb_self));
      GLubyte res = obj_self->getOpacity();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#getOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNodeRGBA *obj_self = static_cast< cocos2d::CCNodeRGBA * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_isCascadeColorEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNodeRGBA *obj_self = static_cast< cocos2d::CCNodeRGBA * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isCascadeColorEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#isCascadeColorEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_isCascadeOpacityEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNodeRGBA *obj_self = static_cast< cocos2d::CCNodeRGBA * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isCascadeOpacityEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#isCascadeOpacityEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNodeRGBA *obj_self = static_cast< cocos2d::CCNodeRGBA * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_setCascadeColorEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool cascadeColorEnabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &cascadeColorEnabled)) {
      cocos2d::CCNodeRGBA *obj_self = static_cast< cocos2d::CCNodeRGBA * >(DATA_PTR(mrb_self));
      obj_self->setCascadeColorEnabled(cascadeColorEnabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#setCascadeColorEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_setCascadeOpacityEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool cascadeOpacityEnabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &cascadeOpacityEnabled)) {
      cocos2d::CCNodeRGBA *obj_self = static_cast< cocos2d::CCNodeRGBA * >(DATA_PTR(mrb_self));
      obj_self->setCascadeOpacityEnabled(cascadeOpacityEnabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#setCascadeOpacityEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_setColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value color;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &color)) {
      cocos2d::CCNodeRGBA *obj_self = static_cast< cocos2d::CCNodeRGBA * >(DATA_PTR(mrb_self));
      obj_self->setColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#setColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_setOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int opacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &opacity)) {
      cocos2d::CCNodeRGBA *obj_self = static_cast< cocos2d::CCNodeRGBA * >(DATA_PTR(mrb_self));
      obj_self->setOpacity(opacity);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#setOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bValue)) {
      cocos2d::CCNodeRGBA *obj_self = static_cast< cocos2d::CCNodeRGBA * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(bValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_updateDisplayedColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value parentColor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &parentColor)) {
      cocos2d::CCNodeRGBA *obj_self = static_cast< cocos2d::CCNodeRGBA * >(DATA_PTR(mrb_self));
      obj_self->updateDisplayedColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, parentColor, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#updateDisplayedColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNodeRGBA_updateDisplayedOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int parentOpacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &parentOpacity)) {
      cocos2d::CCNodeRGBA *obj_self = static_cast< cocos2d::CCNodeRGBA * >(DATA_PTR(mrb_self));
      obj_self->updateDisplayedOpacity(parentOpacity);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNodeRGBA#updateDisplayedOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationCenter_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCNotificationCenter;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCNotificationCenter * res = new cocos2d::CCNotificationCenter();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationCenter#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationCenter_addObserver(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value selector;
    mrb_value name;
    mrb_value obj;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ooSo", &target, &selector, &name, &obj)) {
      cocos2d::CCNotificationCenter *obj_self = static_cast< cocos2d::CCNotificationCenter * >(DATA_PTR(mrb_self));
      obj_self->addObserver(CCMRubyCallbackWrapper::create(mrb, target, selector), callfuncO_selector(CCMRubyCallbackWrapper::SEL_CallFuncO_Impl), RSTRING_PTR(name), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, obj, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationCenter#addObserver");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationCenter_getObserverHandlerByName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::CCNotificationCenter *obj_self = static_cast< cocos2d::CCNotificationCenter * >(DATA_PTR(mrb_self));
      int res = obj_self->getObserverHandlerByName(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationCenter#getObserverHandlerByName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationCenter_getScriptHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNotificationCenter *obj_self = static_cast< cocos2d::CCNotificationCenter * >(DATA_PTR(mrb_self));
      int res = obj_self->getScriptHandler();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationCenter#getScriptHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationCenter_postNotification(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value name;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &name)) {
      cocos2d::CCNotificationCenter *obj_self = static_cast< cocos2d::CCNotificationCenter * >(DATA_PTR(mrb_self));
      obj_self->postNotification(RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value name;
    mrb_value object;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &name, &object)) {
      cocos2d::CCNotificationCenter *obj_self = static_cast< cocos2d::CCNotificationCenter * >(DATA_PTR(mrb_self));
      obj_self->postNotification(RSTRING_PTR(name), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationCenter#postNotification");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationCenter_purgeNotificationCenter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNotificationCenter::purgeNotificationCenter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationCenter::purgeNotificationCenter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationCenter_registerScriptObserver(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value handler;
    mrb_value name;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooS", &target, &handler, &name)) {
      cocos2d::CCNotificationCenter *obj_self = static_cast< cocos2d::CCNotificationCenter * >(DATA_PTR(mrb_self));
      obj_self->registerScriptObserver(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, target, &mrb_type_cocos2d_CCObject, NULL)), cc_mrb_proc_keep(mrb, handler), RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationCenter#registerScriptObserver");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationCenter_removeAllObservers(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &target)) {
      cocos2d::CCNotificationCenter *obj_self = static_cast< cocos2d::CCNotificationCenter * >(DATA_PTR(mrb_self));
      int res = obj_self->removeAllObservers(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, target, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationCenter#removeAllObservers");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationCenter_removeObserver(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value name;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &target, &name)) {
      cocos2d::CCNotificationCenter *obj_self = static_cast< cocos2d::CCNotificationCenter * >(DATA_PTR(mrb_self));
      obj_self->removeObserver(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, target, &mrb_type_cocos2d_CCObject, NULL)), RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationCenter#removeObserver");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationCenter_sharedNotificationCenter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCNotificationCenter * res = cocos2d::CCNotificationCenter::sharedNotificationCenter();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNotificationCenter,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationCenter::sharedNotificationCenter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationCenter_unregisterScriptObserver(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value name;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &target, &name)) {
      cocos2d::CCNotificationCenter *obj_self = static_cast< cocos2d::CCNotificationCenter * >(DATA_PTR(mrb_self));
      obj_self->unregisterScriptObserver(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, target, &mrb_type_cocos2d_CCObject, NULL)), RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationCenter#unregisterScriptObserver");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationObserver_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_value selector;
    mrb_value name;
    mrb_value obj;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCNotificationObserver;
    DATA_PTR(mrb_self) = NULL;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ooSo", &target, &selector, &name, &obj)) {
      cocos2d::CCNotificationObserver * res = new cocos2d::CCNotificationObserver(CCMRubyCallbackWrapper::create(mrb, target, selector), callfuncO_selector(CCMRubyCallbackWrapper::SEL_CallFuncO_Impl), RSTRING_PTR(name), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, obj, &mrb_type_cocos2d_CCObject, NULL)));
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationObserver#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationObserver_getHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNotificationObserver *obj_self = static_cast< cocos2d::CCNotificationObserver * >(DATA_PTR(mrb_self));
      int res = obj_self->getHandler();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationObserver#getHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationObserver_getName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNotificationObserver *obj_self = static_cast< cocos2d::CCNotificationObserver * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationObserver#getName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationObserver_getObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNotificationObserver *obj_self = static_cast< cocos2d::CCNotificationObserver * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->getObject();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationObserver#getObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationObserver_getTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNotificationObserver *obj_self = static_cast< cocos2d::CCNotificationObserver * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->getTarget();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationObserver#getTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationObserver_performSelector(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value obj;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &obj)) {
      cocos2d::CCNotificationObserver *obj_self = static_cast< cocos2d::CCNotificationObserver * >(DATA_PTR(mrb_self));
      obj_self->performSelector(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, obj, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationObserver#performSelector");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationObserver_removeHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCNotificationObserver *obj_self = static_cast< cocos2d::CCNotificationObserver * >(DATA_PTR(mrb_self));
      obj_self->removeHandler();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationObserver#removeHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCNotificationObserver_setHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCNotificationObserver *obj_self = static_cast< cocos2d::CCNotificationObserver * >(DATA_PTR(mrb_self));
      obj_self->setHandler(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCNotificationObserver#setHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCObject_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCObject;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCObject * res = new cocos2d::CCObject();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCObject#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCObject_acceptVisitor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value visitor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &visitor)) {
      cocos2d::CCObject *obj_self = static_cast< cocos2d::CCObject * >(DATA_PTR(mrb_self));
      obj_self->acceptVisitor(*(static_cast< cocos2d::CCDataVisitor * >(DATA_PTR(visitor))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCObject#acceptVisitor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCObject_autoReleaseCount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCObject *obj_self = static_cast< cocos2d::CCObject * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->autoReleaseCount();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCObject#autoReleaseCount");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_CCObject_autorelease(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCObject *obj_self = static_cast< cocos2d::CCObject * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->autorelease();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class(mrb, mrb_self),
                       DATA_TYPE(mrb_self),
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::CCObject#autorelease");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_CCObject_copy(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCObject *obj_self = static_cast< cocos2d::CCObject * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copy();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class(mrb, mrb_self),
                       DATA_TYPE(mrb_self),
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        //ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::CCObject#copy");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCObject_isEqual(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObject;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObject)) {
      cocos2d::CCObject *obj_self = static_cast< cocos2d::CCObject * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isEqual(static_cast< const class cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCObject#isEqual");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCObject_isSingleReference(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCObject *obj_self = static_cast< cocos2d::CCObject * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isSingleReference();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCObject#isSingleReference");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCObject__get_m_nLuaID(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCObject *obj_self = static_cast< cocos2d::CCObject * >(DATA_PTR(mrb_self));
  int res = obj_self->m_nLuaID;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCObject__set_m_nLuaID(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_nLuaID;
  if (1 == mrb_get_args(mrb, "i", &m_nLuaID)) {
    cocos2d::CCObject *obj_self = static_cast< cocos2d::CCObject * >(DATA_PTR(mrb_self));
    
    obj_self->m_nLuaID = m_nLuaID;
    return mrb_fixnum_value(m_nLuaID);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCObject#m_nLuaID");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCObject__get_m_uID(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCObject *obj_self = static_cast< cocos2d::CCObject * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->m_uID;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCObject__set_m_uID(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_uID;
  if (1 == mrb_get_args(mrb, "i", &m_uID)) {
    cocos2d::CCObject *obj_self = static_cast< cocos2d::CCObject * >(DATA_PTR(mrb_self));
    
    obj_self->m_uID = m_uID;
    return mrb_fixnum_value(m_uID);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCObject#m_uID");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCObject_release(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCObject *obj_self = static_cast< cocos2d::CCObject * >(DATA_PTR(mrb_self));
      obj_self->release();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCObject#release");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCObject_retain(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCObject *obj_self = static_cast< cocos2d::CCObject * >(DATA_PTR(mrb_self));
      obj_self->retain();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCObject#retain");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCObject_retainCount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCObject *obj_self = static_cast< cocos2d::CCObject * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->retainCount();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCObject#retainCount");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCObject_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::CCObject *obj_self = static_cast< cocos2d::CCObject * >(DATA_PTR(mrb_self));
      obj_self->update(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCObject#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCOrbitCamera_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCOrbitCamera;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCOrbitCamera * res = new cocos2d::CCOrbitCamera();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCOrbitCamera#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCOrbitCamera_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCOrbitCamera *obj_self = static_cast< cocos2d::CCOrbitCamera * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCOrbitCamera#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCOrbitCamera_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float radius;
    mrb_float deltaRadius;
    mrb_float angleZ;
    mrb_float deltaAngleZ;
    mrb_float angleX;
    mrb_float deltaAngleX;
    if (7 == _argc_ && 7 == mrb_get_args(mrb, "fffffff", &t, &radius, &deltaRadius, &angleZ, &deltaAngleZ, &angleX, &deltaAngleX)) {
      class cocos2d::CCOrbitCamera * res = cocos2d::CCOrbitCamera::create(t, radius, deltaRadius, angleZ, deltaAngleZ, angleX, deltaAngleX);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCOrbitCamera,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCOrbitCamera::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCOrbitCamera_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float radius;
    mrb_float deltaRadius;
    mrb_float angleZ;
    mrb_float deltaAngleZ;
    mrb_float angleX;
    mrb_float deltaAngleX;
    if (7 == _argc_ && 7 == mrb_get_args(mrb, "fffffff", &t, &radius, &deltaRadius, &angleZ, &deltaAngleZ, &angleX, &deltaAngleX)) {
      cocos2d::CCOrbitCamera *obj_self = static_cast< cocos2d::CCOrbitCamera * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(t, radius, deltaRadius, angleZ, deltaAngleZ, angleX, deltaAngleX);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCOrbitCamera#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCOrbitCamera_sphericalRadius(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value r;
    mrb_value zenith;
    mrb_value azimuth;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "AAA", &r, &zenith, &azimuth)) {
      float cxx_r[1]; cc_mrb_ary_conv_to_c_array(mrb, r, reinterpret_cast< float * >(cxx_r), 1);
      float cxx_zenith[1]; cc_mrb_ary_conv_to_c_array(mrb, zenith, reinterpret_cast< float * >(cxx_zenith), 1);
      float cxx_azimuth[1]; cc_mrb_ary_conv_to_c_array(mrb, azimuth, reinterpret_cast< float * >(cxx_azimuth), 1);
      cocos2d::CCOrbitCamera *obj_self = static_cast< cocos2d::CCOrbitCamera * >(DATA_PTR(mrb_self));
      obj_self->sphericalRadius(cxx_r, cxx_zenith, cxx_azimuth);
      cc_mrb_ary_conv_from_c_array(mrb, r, reinterpret_cast< float * >(cxx_r), 1);
      cc_mrb_ary_conv_from_c_array(mrb, zenith, reinterpret_cast< float * >(cxx_zenith), 1);
      cc_mrb_ary_conv_from_c_array(mrb, azimuth, reinterpret_cast< float * >(cxx_azimuth), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCOrbitCamera#sphericalRadius");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCOrbitCamera_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCOrbitCamera *obj_self = static_cast< cocos2d::CCOrbitCamera * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCOrbitCamera#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCOrbitCamera_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCOrbitCamera *obj_self = static_cast< cocos2d::CCOrbitCamera * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCOrbitCamera#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPVRMipmap__get_address(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCPVRMipmap *obj_self = static_cast< cocos2d::CCPVRMipmap * >(DATA_PTR(mrb_self));
  unsigned char *res = obj_self->address;
  return cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 1), reinterpret_cast< unsigned char * >(res), 1);
}

static mrb_value
mrb_cocos2d_CCPVRMipmap__set_address(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value address;
  if (1 == mrb_get_args(mrb, "A", &address)) {
    cocos2d::CCPVRMipmap *obj_self = static_cast< cocos2d::CCPVRMipmap * >(DATA_PTR(mrb_self));
    
    cc_mrb_ary_conv_to_c_array(mrb, address, reinterpret_cast< unsigned char * >(obj_self->address), 1);
    return address;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPVRMipmap#address");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPVRMipmap__get_len(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCPVRMipmap *obj_self = static_cast< cocos2d::CCPVRMipmap * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->len;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCPVRMipmap__set_len(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int len;
  if (1 == mrb_get_args(mrb, "i", &len)) {
    cocos2d::CCPVRMipmap *obj_self = static_cast< cocos2d::CCPVRMipmap * >(DATA_PTR(mrb_self));
    
    obj_self->len = len;
    return mrb_fixnum_value(len);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPVRMipmap#len");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPVRMipmap_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCPVRMipmap;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCPVRMipmap * res = new cocos2d::CCPVRMipmap();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPVRMipmap#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPageTurn3D_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &duration, &gridSize)) {
      class cocos2d::CCPageTurn3D * res = cocos2d::CCPageTurn3D::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCPageTurn3D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPageTurn3D::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPageTurn3D_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCPageTurn3D *obj_self = static_cast< cocos2d::CCPageTurn3D * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPageTurn3D#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPageTurn3D_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCPageTurn3D;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCPageTurn3D * res = new cocos2d::CCPageTurn3D();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPageTurn3D#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParallaxNode_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCParallaxNode;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCParallaxNode * res = new cocos2d::CCParallaxNode();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParallaxNode#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParallaxNode_addChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    mrb_int z;
    mrb_value parallaxRatio;
    mrb_value positionOffset;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oioo", &child, &z, &parallaxRatio, &positionOffset)) {
      cocos2d::CCParallaxNode *obj_self = static_cast< cocos2d::CCParallaxNode * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), z, *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, parallaxRatio, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, positionOffset, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value child;
    mrb_int zOrder;
    mrb_int tag;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oii", &child, &zOrder, &tag)) {
      cocos2d::CCParallaxNode *obj_self = static_cast< cocos2d::CCParallaxNode * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), zOrder, tag);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParallaxNode#addChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParallaxNode_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCParallaxNode * res = cocos2d::CCParallaxNode::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParallaxNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParallaxNode::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParallaxNode_getParallaxArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParallaxNode *obj_self = static_cast< cocos2d::CCParallaxNode * >(DATA_PTR(mrb_self));
      struct _ccArray * res = obj_self->getParallaxArray();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccArray"),
                       &mrb_type_cocos2d__ccArray,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParallaxNode#getParallaxArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParallaxNode_removeAllChildrenWithCleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool cleanup;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &cleanup)) {
      cocos2d::CCParallaxNode *obj_self = static_cast< cocos2d::CCParallaxNode * >(DATA_PTR(mrb_self));
      obj_self->removeAllChildrenWithCleanup(cleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParallaxNode#removeAllChildrenWithCleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParallaxNode_removeChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    mrb_bool cleanup;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ob", &child, &cleanup)) {
      cocos2d::CCParallaxNode *obj_self = static_cast< cocos2d::CCParallaxNode * >(DATA_PTR(mrb_self));
      obj_self->removeChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), cleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParallaxNode#removeChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParallaxNode_setParallaxArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCParallaxNode *obj_self = static_cast< cocos2d::CCParallaxNode * >(DATA_PTR(mrb_self));
      obj_self->setParallaxArray(static_cast< struct _ccArray * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParallaxNode#setParallaxArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParallaxNode_visit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParallaxNode *obj_self = static_cast< cocos2d::CCParallaxNode * >(DATA_PTR(mrb_self));
      obj_self->visit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParallaxNode#visit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCParticleBatchNode;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCParticleBatchNode * res = new cocos2d::CCParticleBatchNode();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_addChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &child)) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value child;
    mrb_int zOrder;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &child, &zOrder)) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), zOrder);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value child;
    mrb_int zOrder;
    mrb_int tag;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oii", &child, &zOrder, &tag)) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), zOrder, tag);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#addChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value fileImage;
    mrb_int capacity;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &fileImage, &capacity)) {
      class cocos2d::CCParticleBatchNode * res = cocos2d::CCParticleBatchNode::create(RSTRING_PTR(fileImage), capacity);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleBatchNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_createWithTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tex;
    mrb_int capacity;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &tex, &capacity)) {
      class cocos2d::CCParticleBatchNode * res = cocos2d::CCParticleBatchNode::createWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, tex, &mrb_type_cocos2d_CCTexture2D, NULL)), capacity);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleBatchNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode::createWithTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_disableParticle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int particleIndex;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &particleIndex)) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      obj_self->disableParticle(particleIndex);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#disableParticle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_getBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      ccBlendFunc *res = new ccBlendFunc(); *res = obj_self->getBlendFunc();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccBlendFunc"),
                       &mrb_type_cocos2d__ccBlendFunc,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#getBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_getTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCTexture2D * res = obj_self->getTexture();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTexture2D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#getTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_getTextureAtlas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCTextureAtlas * res = obj_self->getTextureAtlas();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTextureAtlas,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#getTextureAtlas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_initWithFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value fileImage;
    mrb_int capacity;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &fileImage, &capacity)) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFile(RSTRING_PTR(fileImage), capacity);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#initWithFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_initWithTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tex;
    mrb_int capacity;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &tex, &capacity)) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, tex, &mrb_type_cocos2d_CCTexture2D, NULL)), capacity);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#initWithTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_insertChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSystem;
    mrb_int index;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &pSystem, &index)) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      obj_self->insertChild(static_cast< cocos2d::CCParticleSystem * >(cc_mrb_data_get_ptr(mrb, pSystem, &mrb_type_cocos2d_CCParticleSystem, NULL)), index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#insertChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_removeAllChildrenWithCleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool doCleanup;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &doCleanup)) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      obj_self->removeAllChildrenWithCleanup(doCleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#removeAllChildrenWithCleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_removeChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    mrb_bool cleanup;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ob", &child, &cleanup)) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      obj_self->removeChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), cleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#removeChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_removeChildAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    mrb_bool doCleanup;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ib", &index, &doCleanup)) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      obj_self->removeChildAtIndex(index, doCleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#removeChildAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_reorderChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    mrb_int zOrder;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &child, &zOrder)) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      obj_self->reorderChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), zOrder);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#reorderChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_setBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value blendFunc;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &blendFunc)) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      obj_self->setBlendFunc(*(static_cast< ccBlendFunc * >(cc_mrb_data_get_ptr(mrb, blendFunc, &mrb_type_cocos2d__ccBlendFunc, &mrb_no_free_type_cocos2d__ccBlendFunc))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#setBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_setTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value texture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &texture)) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      obj_self->setTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#setTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_setTextureAtlas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      obj_self->setTextureAtlas(static_cast< cocos2d::CCTextureAtlas * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCTextureAtlas, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#setTextureAtlas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleBatchNode_visit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleBatchNode *obj_self = static_cast< cocos2d::CCParticleBatchNode * >(DATA_PTR(mrb_self));
      obj_self->visit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleBatchNode#visit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleExplosion_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCParticleExplosion;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCParticleExplosion * res = new cocos2d::CCParticleExplosion();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleExplosion#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleExplosion_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCParticleExplosion * res = cocos2d::CCParticleExplosion::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleExplosion,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleExplosion::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleExplosion_createWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      class cocos2d::CCParticleExplosion * res = cocos2d::CCParticleExplosion::createWithTotalParticles(numberOfParticles);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleExplosion,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleExplosion::createWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleExplosion_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleExplosion *obj_self = static_cast< cocos2d::CCParticleExplosion * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleExplosion#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleExplosion_initWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      cocos2d::CCParticleExplosion *obj_self = static_cast< cocos2d::CCParticleExplosion * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTotalParticles(numberOfParticles);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleExplosion#initWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleFire_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCParticleFire;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCParticleFire * res = new cocos2d::CCParticleFire();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleFire#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleFire_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCParticleFire * res = cocos2d::CCParticleFire::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleFire,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleFire::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleFire_createWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      class cocos2d::CCParticleFire * res = cocos2d::CCParticleFire::createWithTotalParticles(numberOfParticles);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleFire,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleFire::createWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleFire_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleFire *obj_self = static_cast< cocos2d::CCParticleFire * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleFire#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleFire_initWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      cocos2d::CCParticleFire *obj_self = static_cast< cocos2d::CCParticleFire * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTotalParticles(numberOfParticles);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleFire#initWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleFireworks_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCParticleFireworks;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCParticleFireworks * res = new cocos2d::CCParticleFireworks();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleFireworks#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleFireworks_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCParticleFireworks * res = cocos2d::CCParticleFireworks::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleFireworks,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleFireworks::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleFireworks_createWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      class cocos2d::CCParticleFireworks * res = cocos2d::CCParticleFireworks::createWithTotalParticles(numberOfParticles);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleFireworks,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleFireworks::createWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleFireworks_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleFireworks *obj_self = static_cast< cocos2d::CCParticleFireworks * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleFireworks#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleFireworks_initWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      cocos2d::CCParticleFireworks *obj_self = static_cast< cocos2d::CCParticleFireworks * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTotalParticles(numberOfParticles);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleFireworks#initWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleFlower_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCParticleFlower;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCParticleFlower * res = new cocos2d::CCParticleFlower();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleFlower#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleFlower_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCParticleFlower * res = cocos2d::CCParticleFlower::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleFlower,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleFlower::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleFlower_createWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      class cocos2d::CCParticleFlower * res = cocos2d::CCParticleFlower::createWithTotalParticles(numberOfParticles);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleFlower,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleFlower::createWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleFlower_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleFlower *obj_self = static_cast< cocos2d::CCParticleFlower * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleFlower#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleFlower_initWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      cocos2d::CCParticleFlower *obj_self = static_cast< cocos2d::CCParticleFlower * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTotalParticles(numberOfParticles);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleFlower#initWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleGalaxy_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCParticleGalaxy;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCParticleGalaxy * res = new cocos2d::CCParticleGalaxy();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleGalaxy#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleGalaxy_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCParticleGalaxy * res = cocos2d::CCParticleGalaxy::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleGalaxy,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleGalaxy::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleGalaxy_createWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      class cocos2d::CCParticleGalaxy * res = cocos2d::CCParticleGalaxy::createWithTotalParticles(numberOfParticles);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleGalaxy,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleGalaxy::createWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleGalaxy_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleGalaxy *obj_self = static_cast< cocos2d::CCParticleGalaxy * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleGalaxy#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleGalaxy_initWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      cocos2d::CCParticleGalaxy *obj_self = static_cast< cocos2d::CCParticleGalaxy * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTotalParticles(numberOfParticles);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleGalaxy#initWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleMeteor_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCParticleMeteor;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCParticleMeteor * res = new cocos2d::CCParticleMeteor();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleMeteor#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleMeteor_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCParticleMeteor * res = cocos2d::CCParticleMeteor::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleMeteor,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleMeteor::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleMeteor_createWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      class cocos2d::CCParticleMeteor * res = cocos2d::CCParticleMeteor::createWithTotalParticles(numberOfParticles);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleMeteor,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleMeteor::createWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleMeteor_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleMeteor *obj_self = static_cast< cocos2d::CCParticleMeteor * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleMeteor#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleMeteor_initWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      cocos2d::CCParticleMeteor *obj_self = static_cast< cocos2d::CCParticleMeteor * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTotalParticles(numberOfParticles);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleMeteor#initWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleRain_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCParticleRain;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCParticleRain * res = new cocos2d::CCParticleRain();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleRain#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleRain_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCParticleRain * res = cocos2d::CCParticleRain::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleRain,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleRain::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleRain_createWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      class cocos2d::CCParticleRain * res = cocos2d::CCParticleRain::createWithTotalParticles(numberOfParticles);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleRain,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleRain::createWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleRain_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleRain *obj_self = static_cast< cocos2d::CCParticleRain * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleRain#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleRain_initWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      cocos2d::CCParticleRain *obj_self = static_cast< cocos2d::CCParticleRain * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTotalParticles(numberOfParticles);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleRain#initWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSmoke_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCParticleSmoke;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCParticleSmoke * res = new cocos2d::CCParticleSmoke();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSmoke#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSmoke_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCParticleSmoke * res = cocos2d::CCParticleSmoke::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleSmoke,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSmoke::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSmoke_createWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      class cocos2d::CCParticleSmoke * res = cocos2d::CCParticleSmoke::createWithTotalParticles(numberOfParticles);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleSmoke,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSmoke::createWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSmoke_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSmoke *obj_self = static_cast< cocos2d::CCParticleSmoke * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSmoke#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSmoke_initWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      cocos2d::CCParticleSmoke *obj_self = static_cast< cocos2d::CCParticleSmoke * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTotalParticles(numberOfParticles);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSmoke#initWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSnow_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCParticleSnow;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCParticleSnow * res = new cocos2d::CCParticleSnow();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSnow#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSnow_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCParticleSnow * res = cocos2d::CCParticleSnow::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleSnow,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSnow::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSnow_createWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      class cocos2d::CCParticleSnow * res = cocos2d::CCParticleSnow::createWithTotalParticles(numberOfParticles);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleSnow,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSnow::createWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSnow_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSnow *obj_self = static_cast< cocos2d::CCParticleSnow * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSnow#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSnow_initWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      cocos2d::CCParticleSnow *obj_self = static_cast< cocos2d::CCParticleSnow * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTotalParticles(numberOfParticles);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSnow#initWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSpiral_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCParticleSpiral;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCParticleSpiral * res = new cocos2d::CCParticleSpiral();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSpiral#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSpiral_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCParticleSpiral * res = cocos2d::CCParticleSpiral::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleSpiral,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSpiral::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSpiral_createWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      class cocos2d::CCParticleSpiral * res = cocos2d::CCParticleSpiral::createWithTotalParticles(numberOfParticles);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleSpiral,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSpiral::createWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSpiral_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSpiral *obj_self = static_cast< cocos2d::CCParticleSpiral * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSpiral#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSpiral_initWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      cocos2d::CCParticleSpiral *obj_self = static_cast< cocos2d::CCParticleSpiral * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTotalParticles(numberOfParticles);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSpiral#initWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSun_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCParticleSun;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCParticleSun * res = new cocos2d::CCParticleSun();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSun#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSun_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCParticleSun * res = cocos2d::CCParticleSun::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleSun,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSun::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSun_createWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      class cocos2d::CCParticleSun * res = cocos2d::CCParticleSun::createWithTotalParticles(numberOfParticles);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleSun,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSun::createWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSun_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSun *obj_self = static_cast< cocos2d::CCParticleSun * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSun#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSun_initWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      cocos2d::CCParticleSun *obj_self = static_cast< cocos2d::CCParticleSun * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTotalParticles(numberOfParticles);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSun#initWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCParticleSystem;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCParticleSystem * res = new cocos2d::CCParticleSystem();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_addParticle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->addParticle();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#addParticle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value plistFile;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &plistFile)) {
      class cocos2d::CCParticleSystem * res = cocos2d::CCParticleSystem::create(RSTRING_PTR(plistFile));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleSystem,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_createWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      class cocos2d::CCParticleSystem * res = cocos2d::CCParticleSystem::createWithTotalParticles(numberOfParticles);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleSystem,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem::createWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getAngle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getAngle();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getAngle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getAngleVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getAngleVar();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getAngleVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getAtlasIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getAtlasIndex();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getAtlasIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getBatchNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      class cocos2d::CCParticleBatchNode * res = obj_self->getBatchNode();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCParticleBatchNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getBatchNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      ccBlendFunc *res = new ccBlendFunc(); *res = obj_self->getBlendFunc();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccBlendFunc"),
                       &mrb_type_cocos2d__ccBlendFunc,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getDuration();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getEmissionRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getEmissionRate();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getEmissionRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getEmitterMode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      int res = obj_self->getEmitterMode();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getEmitterMode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getEndColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      ccColor4F *res = new ccColor4F(); *res = obj_self->getEndColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4F"),
                       &mrb_type_cocos2d__ccColor4F,
                       const_cast< ccColor4F * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getEndColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getEndColorVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      ccColor4F *res = new ccColor4F(); *res = obj_self->getEndColorVar();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4F"),
                       &mrb_type_cocos2d__ccColor4F,
                       const_cast< ccColor4F * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getEndColorVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getEndRadius(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getEndRadius();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getEndRadius");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getEndRadiusVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getEndRadiusVar();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getEndRadiusVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getEndSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getEndSize();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getEndSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getEndSizeVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getEndSizeVar();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getEndSizeVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getEndSpin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getEndSpin();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getEndSpin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getEndSpinVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getEndSpinVar();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getEndSpinVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getGravity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getGravity();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getGravity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getLife(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getLife();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getLife");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getLifeVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getLifeVar();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getLifeVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getParticleCount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getParticleCount();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getParticleCount");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getPosVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getPosVar();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getPosVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getPositionType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      tCCPositionType res = obj_self->getPositionType();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getPositionType");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getRadialAccel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getRadialAccel();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getRadialAccel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getRadialAccelVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getRadialAccelVar();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getRadialAccelVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getRotatePerSecond(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getRotatePerSecond();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getRotatePerSecond");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getRotatePerSecondVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getRotatePerSecondVar();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getRotatePerSecondVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getRotationIsDir(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getRotationIsDir();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getRotationIsDir");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getSourcePosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getSourcePosition();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getSourcePosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getSpeed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getSpeed();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getSpeed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getSpeedVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getSpeedVar();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getSpeedVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getStartColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      ccColor4F *res = new ccColor4F(); *res = obj_self->getStartColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4F"),
                       &mrb_type_cocos2d__ccColor4F,
                       const_cast< ccColor4F * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getStartColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getStartColorVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      ccColor4F *res = new ccColor4F(); *res = obj_self->getStartColorVar();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4F"),
                       &mrb_type_cocos2d__ccColor4F,
                       const_cast< ccColor4F * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getStartColorVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getStartRadius(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getStartRadius();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getStartRadius");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getStartRadiusVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getStartRadiusVar();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getStartRadiusVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getStartSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getStartSize();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getStartSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getStartSizeVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getStartSizeVar();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getStartSizeVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getStartSpin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getStartSpin();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getStartSpin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getStartSpinVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getStartSpinVar();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getStartSpinVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getTangentialAccel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getTangentialAccel();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getTangentialAccel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getTangentialAccelVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      float res = obj_self->getTangentialAccelVar();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getTangentialAccelVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      class cocos2d::CCTexture2D * res = obj_self->getTexture();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTexture2D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_getTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getTotalParticles();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#getTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_initParticle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value particle;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &particle)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->initParticle(static_cast< tCCParticle * >(cc_mrb_data_get_ptr(mrb, particle, &mrb_type_cocos2d_sCCParticle, &mrb_no_free_type_cocos2d_sCCParticle)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#initParticle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_initWithDictionary(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value dictionary;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &dictionary)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDictionary(static_cast< cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, dictionary, &mrb_type_cocos2d_CCDictionary, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value dictionary;
    mrb_value dirname;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &dictionary, &dirname)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDictionary(static_cast< cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, dictionary, &mrb_type_cocos2d_CCDictionary, NULL)), RSTRING_PTR(dirname));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#initWithDictionary");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_initWithFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value plistFile;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &plistFile)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFile(RSTRING_PTR(plistFile));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#initWithFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_initWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTotalParticles(numberOfParticles);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#initWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_isActive(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isActive();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#isActive");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_isAutoRemoveOnFinish(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isAutoRemoveOnFinish();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#isAutoRemoveOnFinish");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_isBlendAdditive(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isBlendAdditive();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#isBlendAdditive");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_isFull(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isFull();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#isFull");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem__get_m_bIsActive(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bIsActive;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_CCParticleSystem__set_m_bIsActive(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bIsActive;
  if (1 == mrb_get_args(mrb, "b", &m_bIsActive)) {
    cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
    
    obj_self->m_bIsActive = m_bIsActive;
    return mrb_bool_value(m_bIsActive);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#m_bIsActive");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem__get_m_bIsBlendAdditive(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bIsBlendAdditive;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_CCParticleSystem__set_m_bIsBlendAdditive(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bIsBlendAdditive;
  if (1 == mrb_get_args(mrb, "b", &m_bIsBlendAdditive)) {
    cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
    
    obj_self->m_bIsBlendAdditive = m_bIsBlendAdditive;
    return mrb_bool_value(m_bIsBlendAdditive);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#m_bIsBlendAdditive");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem__get_m_bTransformSystemDirty(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bTransformSystemDirty;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_CCParticleSystem__set_m_bTransformSystemDirty(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bTransformSystemDirty;
  if (1 == mrb_get_args(mrb, "b", &m_bTransformSystemDirty)) {
    cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
    
    obj_self->m_bTransformSystemDirty = m_bTransformSystemDirty;
    return mrb_bool_value(m_bTransformSystemDirty);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#m_bTransformSystemDirty");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem__get_m_uAllocatedParticles(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->m_uAllocatedParticles;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCParticleSystem__set_m_uAllocatedParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_uAllocatedParticles;
  if (1 == mrb_get_args(mrb, "i", &m_uAllocatedParticles)) {
    cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
    
    obj_self->m_uAllocatedParticles = m_uAllocatedParticles;
    return mrb_fixnum_value(m_uAllocatedParticles);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#m_uAllocatedParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_postStep(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->postStep();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#postStep");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_resetSystem(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->resetSystem();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#resetSystem");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setAngle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setAngle(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setAngle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setAngleVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setAngleVar(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setAngleVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setAtlasIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setAtlasIndex(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setAtlasIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setAutoRemoveOnFinish(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setAutoRemoveOnFinish(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setAutoRemoveOnFinish");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setBatchNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setBatchNode(static_cast< cocos2d::CCParticleBatchNode * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCParticleBatchNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setBatchNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setBlendAdditive(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &value)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setBlendAdditive(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setBlendAdditive");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setBlendFunc(*(static_cast< ccBlendFunc * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d__ccBlendFunc, &mrb_no_free_type_cocos2d__ccBlendFunc))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setDuration(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setEmissionRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setEmissionRate(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setEmissionRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setEmitterMode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setEmitterMode(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setEmitterMode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setEndColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setEndColor(*(static_cast< const ccColor4F * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setEndColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setEndColorVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setEndColorVar(*(static_cast< const ccColor4F * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setEndColorVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setEndRadius(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float endRadius;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &endRadius)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setEndRadius(endRadius);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setEndRadius");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setEndRadiusVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float endRadiusVar;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &endRadiusVar)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setEndRadiusVar(endRadiusVar);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setEndRadiusVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setEndSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setEndSize(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setEndSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setEndSizeVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setEndSizeVar(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setEndSizeVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setEndSpin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setEndSpin(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setEndSpin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setEndSpinVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setEndSpinVar(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setEndSpinVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setGravity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value g;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &g)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setGravity(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, g, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setGravity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setLife(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setLife(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setLife");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setLifeVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setLifeVar(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setLifeVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setPosVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setPosVar(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setPosVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setPositionType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setPositionType((tCCPositionType)var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setPositionType");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setRadialAccel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &t)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setRadialAccel(t);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setRadialAccel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setRadialAccelVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &t)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setRadialAccelVar(t);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setRadialAccelVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setRotatePerSecond(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float degrees;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &degrees)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setRotatePerSecond(degrees);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setRotatePerSecond");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setRotatePerSecondVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float degrees;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &degrees)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setRotatePerSecondVar(degrees);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setRotatePerSecondVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setRotation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float newRotation;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &newRotation)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setRotation(newRotation);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setRotation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setRotationIsDir(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool t;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &t)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setRotationIsDir(t);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setRotationIsDir");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float s;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &s)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setScale(s);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setScaleX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float newScaleX;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &newScaleX)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setScaleX(newScaleX);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setScaleX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setScaleY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float newScaleY;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &newScaleY)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setScaleY(newScaleY);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setScaleY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setSourcePosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setSourcePosition(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setSourcePosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setSpeed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float speed;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &speed)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setSpeed(speed);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setSpeed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setSpeedVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float speed;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &speed)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setSpeedVar(speed);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setSpeedVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setStartColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setStartColor(*(static_cast< const ccColor4F * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setStartColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setStartColorVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setStartColorVar(*(static_cast< const ccColor4F * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setStartColorVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setStartRadius(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float startRadius;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &startRadius)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setStartRadius(startRadius);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setStartRadius");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setStartRadiusVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float startRadiusVar;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &startRadiusVar)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setStartRadiusVar(startRadiusVar);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setStartRadiusVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setStartSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setStartSize(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setStartSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setStartSizeVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setStartSizeVar(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setStartSizeVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setStartSpin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setStartSpin(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setStartSpin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setStartSpinVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setStartSpinVar(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setStartSpinVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setTangentialAccel(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &t)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setTangentialAccel(t);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setTangentialAccel");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setTangentialAccelVar(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &t)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setTangentialAccelVar(t);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setTangentialAccelVar");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_setTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->setTotalParticles(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#setTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_stopSystem(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->stopSystem();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#stopSystem");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->update(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_updateQuadWithParticle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value particle;
    mrb_value newPosition;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &particle, &newPosition)) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->updateQuadWithParticle(static_cast< tCCParticle * >(cc_mrb_data_get_ptr(mrb, particle, &mrb_type_cocos2d_sCCParticle, &mrb_no_free_type_cocos2d_sCCParticle)), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, newPosition, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#updateQuadWithParticle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystem_updateWithNoTime(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystem *obj_self = static_cast< cocos2d::CCParticleSystem * >(DATA_PTR(mrb_self));
      obj_self->updateWithNoTime();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystem#updateWithNoTime");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystemQuad_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCParticleSystemQuad;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCParticleSystemQuad * res = new cocos2d::CCParticleSystemQuad();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystemQuad#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystemQuad_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value plistFile;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &plistFile)) {
      class cocos2d::CCParticleSystemQuad * res = cocos2d::CCParticleSystemQuad::create(RSTRING_PTR(plistFile));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleSystemQuad,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    if (0 == _argc_) {
      class cocos2d::CCParticleSystemQuad * res = cocos2d::CCParticleSystemQuad::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleSystemQuad,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystemQuad::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystemQuad_createWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      class cocos2d::CCParticleSystemQuad * res = cocos2d::CCParticleSystemQuad::createWithTotalParticles(numberOfParticles);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCParticleSystemQuad,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystemQuad::createWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystemQuad_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystemQuad *obj_self = static_cast< cocos2d::CCParticleSystemQuad * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystemQuad#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystemQuad_initIndices(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystemQuad *obj_self = static_cast< cocos2d::CCParticleSystemQuad * >(DATA_PTR(mrb_self));
      obj_self->initIndices();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystemQuad#initIndices");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystemQuad_initTexCoordsWithRect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value rect;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &rect)) {
      cocos2d::CCParticleSystemQuad *obj_self = static_cast< cocos2d::CCParticleSystemQuad * >(DATA_PTR(mrb_self));
      obj_self->initTexCoordsWithRect(*(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystemQuad#initTexCoordsWithRect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystemQuad_initWithTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int numberOfParticles;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &numberOfParticles)) {
      cocos2d::CCParticleSystemQuad *obj_self = static_cast< cocos2d::CCParticleSystemQuad * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTotalParticles(numberOfParticles);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystemQuad#initWithTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystemQuad_listenBackToForeground(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value obj;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &obj)) {
      cocos2d::CCParticleSystemQuad *obj_self = static_cast< cocos2d::CCParticleSystemQuad * >(DATA_PTR(mrb_self));
      obj_self->listenBackToForeground(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, obj, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystemQuad#listenBackToForeground");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystemQuad_postStep(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCParticleSystemQuad *obj_self = static_cast< cocos2d::CCParticleSystemQuad * >(DATA_PTR(mrb_self));
      obj_self->postStep();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystemQuad#postStep");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystemQuad_setBatchNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value batchNode;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &batchNode)) {
      cocos2d::CCParticleSystemQuad *obj_self = static_cast< cocos2d::CCParticleSystemQuad * >(DATA_PTR(mrb_self));
      obj_self->setBatchNode(static_cast< cocos2d::CCParticleBatchNode * >(cc_mrb_data_get_ptr(mrb, batchNode, &mrb_type_cocos2d_CCParticleBatchNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystemQuad#setBatchNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystemQuad_setDisplayFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value spriteFrame;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &spriteFrame)) {
      cocos2d::CCParticleSystemQuad *obj_self = static_cast< cocos2d::CCParticleSystemQuad * >(DATA_PTR(mrb_self));
      obj_self->setDisplayFrame(static_cast< cocos2d::CCSpriteFrame * >(cc_mrb_data_get_ptr(mrb, spriteFrame, &mrb_type_cocos2d_CCSpriteFrame, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystemQuad#setDisplayFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystemQuad_setTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value texture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &texture)) {
      cocos2d::CCParticleSystemQuad *obj_self = static_cast< cocos2d::CCParticleSystemQuad * >(DATA_PTR(mrb_self));
      obj_self->setTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystemQuad#setTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystemQuad_setTextureWithRect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value texture;
    mrb_value rect;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &texture, &rect)) {
      cocos2d::CCParticleSystemQuad *obj_self = static_cast< cocos2d::CCParticleSystemQuad * >(DATA_PTR(mrb_self));
      obj_self->setTextureWithRect(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystemQuad#setTextureWithRect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystemQuad_setTotalParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int tp;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &tp)) {
      cocos2d::CCParticleSystemQuad *obj_self = static_cast< cocos2d::CCParticleSystemQuad * >(DATA_PTR(mrb_self));
      obj_self->setTotalParticles(tp);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystemQuad#setTotalParticles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCParticleSystemQuad_updateQuadWithParticle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value particle;
    mrb_value newPosition;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &particle, &newPosition)) {
      cocos2d::CCParticleSystemQuad *obj_self = static_cast< cocos2d::CCParticleSystemQuad * >(DATA_PTR(mrb_self));
      obj_self->updateQuadWithParticle(static_cast< tCCParticle * >(cc_mrb_data_get_ptr(mrb, particle, &mrb_type_cocos2d_sCCParticle, &mrb_no_free_type_cocos2d_sCCParticle)), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, newPosition, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCParticleSystemQuad#updateQuadWithParticle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPlace_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCPlace;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCPlace * res = new cocos2d::CCPlace();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPlace#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPlace_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCPlace *obj_self = static_cast< cocos2d::CCPlace * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPlace#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPlace_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pos)) {
      class cocos2d::CCPlace * res = cocos2d::CCPlace::create(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCPlace,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPlace::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPlace_initWithPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pos)) {
      cocos2d::CCPlace *obj_self = static_cast< cocos2d::CCPlace * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithPosition(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPlace#initWithPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPlace_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCPlace *obj_self = static_cast< cocos2d::CCPlace * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPlace#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCPoint;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCPoint * res = new cocos2d::CCPoint();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  {
    mrb_float x;
    mrb_float y;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCPoint;
    DATA_PTR(mrb_self) = NULL;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &x, &y)) {
      cocos2d::CCPoint * res = new cocos2d::CCPoint(x, y);
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  {
    mrb_value other;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCPoint;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::CCPoint * res = new cocos2d::CCPoint(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  {
    mrb_value size;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCPoint;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &size)) {
      cocos2d::CCPoint * res = new cocos2d::CCPoint(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, size, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_cross(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      float res = obj_self->cross(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#cross");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_dot(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      float res = obj_self->dot(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#dot");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_equals(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &target)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->equals(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, target, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#equals");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_forAngle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float a;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &a)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::CCPoint::forAngle(a);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint::forAngle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_fuzzyEquals(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    mrb_float variance;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &target, &variance)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->fuzzyEquals(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, target, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), variance);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#fuzzyEquals");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_getAngle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      float res = obj_self->getAngle();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      float res = obj_self->getAngle(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#getAngle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_getDistance(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      float res = obj_self->getDistance(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#getDistance");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_getDistanceSq(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      float res = obj_self->getDistanceSq(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#getDistanceSq");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_getLength(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      float res = obj_self->getLength();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#getLength");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_getLengthSq(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      float res = obj_self->getLengthSq();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#getLengthSq");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_getPerp(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getPerp();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#getPerp");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_getRPerp(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getRPerp();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#getRPerp");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_lerp(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    mrb_float alpha;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &other, &alpha)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->lerp(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), alpha);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#lerp");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_normalize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->normalize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#normalize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_mul(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float a;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &a)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->operator*(a);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#operator*");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_plus(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value right;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &right)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->operator+(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, right, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#operator+");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_minus(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value right;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &right)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->operator-(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, right, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  {
    if (0 == _argc_) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->operator-();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#operator-");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_div(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float a;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &a)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->operator/(a);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#operator/");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_assign(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->operator=(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  {
    mrb_value size;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &size)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->operator=(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, size, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#operator=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_project(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->project(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#project");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_rotate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->rotate(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#rotate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_rotateByAngle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pivot;
    mrb_float angle;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pivot, &angle)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->rotateByAngle(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pivot, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), angle);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#rotateByAngle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_setPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float x;
    mrb_float y;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &x, &y)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      obj_self->setPoint(x, y);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#setPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint_unrotate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->unrotate(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#unrotate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint__get_x(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
  float res = obj_self->x;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCPoint__set_x(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float x;
  if (1 == mrb_get_args(mrb, "f", &x)) {
    cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
    
    obj_self->x = x;
    return mrb_float_value(mrb, x);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#x");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoint__get_y(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
  float res = obj_self->y;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCPoint__set_y(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float y;
  if (1 == mrb_get_args(mrb, "f", &y)) {
    cocos2d::CCPoint *obj_self = static_cast< cocos2d::CCPoint * >(DATA_PTR(mrb_self));
    
    obj_self->y = y;
    return mrb_float_value(mrb, y);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoint#y");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPointArray_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCPointArray;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCPointArray * res = new cocos2d::CCPointArray();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPointArray#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPointArray_addControlPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value controlPoint;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &controlPoint)) {
      cocos2d::CCPointArray *obj_self = static_cast< cocos2d::CCPointArray * >(DATA_PTR(mrb_self));
      obj_self->addControlPoint(*(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, controlPoint, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPointArray#addControlPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPointArray_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value zone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &zone)) {
      cocos2d::CCPointArray *obj_self = static_cast< cocos2d::CCPointArray * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, zone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPointArray#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPointArray_count(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCPointArray *obj_self = static_cast< cocos2d::CCPointArray * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->count();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPointArray#count");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPointArray_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int capacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &capacity)) {
      class cocos2d::CCPointArray * res = cocos2d::CCPointArray::create(capacity);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCPointArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPointArray::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPointArray_getControlPointAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &index)) {
      cocos2d::CCPointArray *obj_self = static_cast< cocos2d::CCPointArray * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getControlPointAtIndex(index);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPointArray#getControlPointAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPointArray_initWithCapacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int capacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &capacity)) {
      cocos2d::CCPointArray *obj_self = static_cast< cocos2d::CCPointArray * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithCapacity(capacity);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPointArray#initWithCapacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPointArray_insertControlPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value controlPoint;
    mrb_int index;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &controlPoint, &index)) {
      cocos2d::CCPointArray *obj_self = static_cast< cocos2d::CCPointArray * >(DATA_PTR(mrb_self));
      obj_self->insertControlPoint(*(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, controlPoint, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPointArray#insertControlPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPointArray_removeControlPointAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &index)) {
      cocos2d::CCPointArray *obj_self = static_cast< cocos2d::CCPointArray * >(DATA_PTR(mrb_self));
      obj_self->removeControlPointAtIndex(index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPointArray#removeControlPointAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPointArray_replaceControlPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value controlPoint;
    mrb_int index;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &controlPoint, &index)) {
      cocos2d::CCPointArray *obj_self = static_cast< cocos2d::CCPointArray * >(DATA_PTR(mrb_self));
      obj_self->replaceControlPoint(*(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, controlPoint, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPointArray#replaceControlPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPointArray_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCPointArray *obj_self = static_cast< cocos2d::CCPointArray * >(DATA_PTR(mrb_self));
      class cocos2d::CCPointArray * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCPointArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPointArray#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPointArray_reverseInline(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCPointArray *obj_self = static_cast< cocos2d::CCPointArray * >(DATA_PTR(mrb_self));
      obj_self->reverseInline();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPointArray#reverseInline");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPointArray_setControlPoints(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value controlPoints;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "A", &controlPoints)) {
      std::vector<CCPoint *> * cxx_controlPoints; cc_mrb_ary_conv_to(mrb, controlPoints, cxx_controlPoints);
      cocos2d::CCPointArray *obj_self = static_cast< cocos2d::CCPointArray * >(DATA_PTR(mrb_self));
      obj_self->setControlPoints(cxx_controlPoints);
      cc_mrb_ary_conv_from(mrb, controlPoints, cxx_controlPoints);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPointArray#setControlPoints");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPointFromString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszContent;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszContent)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::CCPointFromString(RSTRING_PTR(pszContent));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPointFromString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_CCPointZero(mrb_state *mrb, mrb_value mrb_self)
{
  const class cocos2d::CCPoint *res = &cocos2d::CCPointZero;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_no_free_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
}

static mrb_value
mrb_cocos2d_CCPoolManager_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCPoolManager;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCPoolManager * res = new cocos2d::CCPoolManager();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoolManager#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoolManager_addObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObject;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObject)) {
      cocos2d::CCPoolManager *obj_self = static_cast< cocos2d::CCPoolManager * >(DATA_PTR(mrb_self));
      obj_self->addObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoolManager#addObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoolManager_finalize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCPoolManager *obj_self = static_cast< cocos2d::CCPoolManager * >(DATA_PTR(mrb_self));
      obj_self->finalize();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoolManager#finalize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoolManager_pop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCPoolManager *obj_self = static_cast< cocos2d::CCPoolManager * >(DATA_PTR(mrb_self));
      obj_self->pop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoolManager#pop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoolManager_purgePoolManager(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCPoolManager::purgePoolManager();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoolManager::purgePoolManager");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoolManager_push(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCPoolManager *obj_self = static_cast< cocos2d::CCPoolManager * >(DATA_PTR(mrb_self));
      obj_self->push();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoolManager#push");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoolManager_removeObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObject;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObject)) {
      cocos2d::CCPoolManager *obj_self = static_cast< cocos2d::CCPoolManager * >(DATA_PTR(mrb_self));
      obj_self->removeObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoolManager#removeObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPoolManager_sharedPoolManager(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCPoolManager * res = cocos2d::CCPoolManager::sharedPoolManager();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoolManager"),
                       &mrb_no_free_type_cocos2d_CCPoolManager,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPoolManager::sharedPoolManager");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPrettyPrinter_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int indentLevel;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCPrettyPrinter;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &indentLevel)) {
      cocos2d::CCPrettyPrinter * res = new cocos2d::CCPrettyPrinter(indentLevel);
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPrettyPrinter#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPrettyPrinter_clear(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCPrettyPrinter *obj_self = static_cast< cocos2d::CCPrettyPrinter * >(DATA_PTR(mrb_self));
      obj_self->clear();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPrettyPrinter#clear");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPrettyPrinter_getResult(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCPrettyPrinter *obj_self = static_cast< cocos2d::CCPrettyPrinter * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getResult();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPrettyPrinter#getResult");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPrettyPrinter_visit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value p;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &p)) {
      cocos2d::CCPrettyPrinter *obj_self = static_cast< cocos2d::CCPrettyPrinter * >(DATA_PTR(mrb_self));
      obj_self->visit(static_cast< const class cocos2d::CCBool * >(cc_mrb_data_get_ptr(mrb, p, &mrb_type_cocos2d_CCBool, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value p;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &p)) {
      cocos2d::CCPrettyPrinter *obj_self = static_cast< cocos2d::CCPrettyPrinter * >(DATA_PTR(mrb_self));
      obj_self->visit(static_cast< const class cocos2d::CCInteger * >(cc_mrb_data_get_ptr(mrb, p, &mrb_type_cocos2d_CCInteger, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value p;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &p)) {
      cocos2d::CCPrettyPrinter *obj_self = static_cast< cocos2d::CCPrettyPrinter * >(DATA_PTR(mrb_self));
      obj_self->visit(static_cast< const class cocos2d::CCFloat * >(cc_mrb_data_get_ptr(mrb, p, &mrb_type_cocos2d_CCFloat, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value p;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &p)) {
      cocos2d::CCPrettyPrinter *obj_self = static_cast< cocos2d::CCPrettyPrinter * >(DATA_PTR(mrb_self));
      obj_self->visit(static_cast< const class cocos2d::CCDouble * >(cc_mrb_data_get_ptr(mrb, p, &mrb_type_cocos2d_CCDouble, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value p;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &p)) {
      cocos2d::CCPrettyPrinter *obj_self = static_cast< cocos2d::CCPrettyPrinter * >(DATA_PTR(mrb_self));
      obj_self->visit(static_cast< const class cocos2d::CCString * >(cc_mrb_data_get_ptr(mrb, p, &mrb_type_cocos2d_CCString, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value p;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &p)) {
      cocos2d::CCPrettyPrinter *obj_self = static_cast< cocos2d::CCPrettyPrinter * >(DATA_PTR(mrb_self));
      obj_self->visit(static_cast< const class cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, p, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value p;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &p)) {
      cocos2d::CCPrettyPrinter *obj_self = static_cast< cocos2d::CCPrettyPrinter * >(DATA_PTR(mrb_self));
      obj_self->visit(static_cast< const class cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, p, &mrb_type_cocos2d_CCDictionary, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value p;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &p)) {
      cocos2d::CCPrettyPrinter *obj_self = static_cast< cocos2d::CCPrettyPrinter * >(DATA_PTR(mrb_self));
      obj_self->visit(static_cast< const class cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, p, &mrb_type_cocos2d_CCSet, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPrettyPrinter#visit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCPrettyPrinter_visitObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value p;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &p)) {
      cocos2d::CCPrettyPrinter *obj_self = static_cast< cocos2d::CCPrettyPrinter * >(DATA_PTR(mrb_self));
      obj_self->visitObject(static_cast< const class cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, p, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCPrettyPrinter#visitObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfiler_createAndAddTimerWithName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value timerName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &timerName)) {
      cocos2d::CCProfiler *obj_self = static_cast< cocos2d::CCProfiler * >(DATA_PTR(mrb_self));
      class cocos2d::CCProfilingTimer * res = obj_self->createAndAddTimerWithName(RSTRING_PTR(timerName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCProfilingTimer,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfiler#createAndAddTimerWithName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfiler_displayTimers(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProfiler *obj_self = static_cast< cocos2d::CCProfiler * >(DATA_PTR(mrb_self));
      obj_self->displayTimers();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfiler#displayTimers");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfiler_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProfiler *obj_self = static_cast< cocos2d::CCProfiler * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfiler#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfiler__get_m_pActiveTimers(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCProfiler *obj_self = static_cast< cocos2d::CCProfiler * >(DATA_PTR(mrb_self));
  class cocos2d::CCDictionary * res = obj_self->m_pActiveTimers;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCDictionary"),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
}

static mrb_value
mrb_cocos2d_CCProfiler__set_m_pActiveTimers(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pActiveTimers;
  if (1 == mrb_get_args(mrb, "o", &m_pActiveTimers)) {
    static_cast< cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, m_pActiveTimers, &mrb_type_cocos2d_CCDictionary, NULL))->retain();
    cocos2d::CCProfiler *obj_self = static_cast< cocos2d::CCProfiler * >(DATA_PTR(mrb_self));
    if (obj_self->m_pActiveTimers) { obj_self->m_pActiveTimers->release(); }
    obj_self->m_pActiveTimers = static_cast< cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, m_pActiveTimers, &mrb_type_cocos2d_CCDictionary, NULL));
    return m_pActiveTimers;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfiler#m_pActiveTimers");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfiler_releaseAllTimers(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProfiler *obj_self = static_cast< cocos2d::CCProfiler * >(DATA_PTR(mrb_self));
      obj_self->releaseAllTimers();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfiler#releaseAllTimers");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfiler_releaseTimer(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value timerName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &timerName)) {
      cocos2d::CCProfiler *obj_self = static_cast< cocos2d::CCProfiler * >(DATA_PTR(mrb_self));
      obj_self->releaseTimer(RSTRING_PTR(timerName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfiler#releaseTimer");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfiler_sharedProfiler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCProfiler * res = cocos2d::CCProfiler::sharedProfiler();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCProfiler,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfiler::sharedProfiler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfiler_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCProfiler;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCProfiler * res = new cocos2d::CCProfiler();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfiler#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingBeginTimingBlock(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value timerName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &timerName)) {
      cocos2d::CCProfilingBeginTimingBlock(RSTRING_PTR(timerName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingBeginTimingBlock");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingEndTimingBlock(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value timerName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &timerName)) {
      cocos2d::CCProfilingEndTimingBlock(RSTRING_PTR(timerName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingEndTimingBlock");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingResetTimingBlock(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value timerName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &timerName)) {
      cocos2d::CCProfilingResetTimingBlock(RSTRING_PTR(timerName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingResetTimingBlock");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingTimer_description(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
      std::string res = obj_self->description();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingTimer#description");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingTimer_getAverageTime(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
      double res = obj_self->getAverageTime();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingTimer#getAverageTime");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingTimer_getStartTime(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
      struct cc_timeval * res = obj_self->getStartTime();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::cc_timeval"),
                       &mrb_type_cocos2d_cc_timeval,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingTimer#getStartTime");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingTimer_initWithName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value timerName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &timerName)) {
      cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithName(RSTRING_PTR(timerName));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingTimer#initWithName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingTimer__get_m_NameStr(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
  std::string res = obj_self->m_NameStr;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_CCProfilingTimer__set_m_NameStr(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_NameStr;
  if (1 == mrb_get_args(mrb, "S", &m_NameStr)) {
    cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
    
    obj_self->m_NameStr = RSTRING_PTR(m_NameStr);
    return m_NameStr;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingTimer#m_NameStr");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingTimer__get_m_dAverageTime(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
  double res = obj_self->m_dAverageTime;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCProfilingTimer__set_m_dAverageTime(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float m_dAverageTime;
  if (1 == mrb_get_args(mrb, "f", &m_dAverageTime)) {
    cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
    
    obj_self->m_dAverageTime = m_dAverageTime;
    return mrb_float_value(mrb, m_dAverageTime);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingTimer#m_dAverageTime");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingTimer__get_m_sStartTime(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
  struct cocos2d::cc_timeval *res = &obj_self->m_sStartTime;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::cc_timeval"),
                       &mrb_no_free_type_cocos2d_cc_timeval,
                       res));
}

static mrb_value
mrb_cocos2d_CCProfilingTimer__set_m_sStartTime(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_sStartTime;
  if (1 == mrb_get_args(mrb, "o", &m_sStartTime)) {
    cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
    
    obj_self->m_sStartTime = *(static_cast< struct cocos2d::cc_timeval * >(cc_mrb_data_get_ptr(mrb, m_sStartTime, &mrb_type_cocos2d_cc_timeval, &mrb_no_free_type_cocos2d_cc_timeval)));
    return m_sStartTime;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingTimer#m_sStartTime");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingTimer__get_maxTime(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
  double res = obj_self->maxTime;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCProfilingTimer__set_maxTime(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float maxTime;
  if (1 == mrb_get_args(mrb, "f", &maxTime)) {
    cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
    
    obj_self->maxTime = maxTime;
    return mrb_float_value(mrb, maxTime);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingTimer#maxTime");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingTimer__get_minTime(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
  double res = obj_self->minTime;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCProfilingTimer__set_minTime(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float minTime;
  if (1 == mrb_get_args(mrb, "f", &minTime)) {
    cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
    
    obj_self->minTime = minTime;
    return mrb_float_value(mrb, minTime);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingTimer#minTime");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingTimer__get_numberOfCalls(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->numberOfCalls;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCProfilingTimer__set_numberOfCalls(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int numberOfCalls;
  if (1 == mrb_get_args(mrb, "i", &numberOfCalls)) {
    cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
    
    obj_self->numberOfCalls = numberOfCalls;
    return mrb_fixnum_value(numberOfCalls);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingTimer#numberOfCalls");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingTimer_reset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
      obj_self->reset();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingTimer#reset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingTimer_setAverageTime(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &value)) {
      cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
      obj_self->setAverageTime(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingTimer#setAverageTime");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingTimer__get_totalTime(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
  double res = obj_self->totalTime;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCProfilingTimer__set_totalTime(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float totalTime;
  if (1 == mrb_get_args(mrb, "f", &totalTime)) {
    cocos2d::CCProfilingTimer *obj_self = static_cast< cocos2d::CCProfilingTimer * >(DATA_PTR(mrb_self));
    
    obj_self->totalTime = totalTime;
    return mrb_float_value(mrb, totalTime);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingTimer#totalTime");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProfilingTimer_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCProfilingTimer;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCProfilingTimer * res = new cocos2d::CCProfilingTimer();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProfilingTimer#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressFromTo_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCProgressFromTo *obj_self = static_cast< cocos2d::CCProgressFromTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressFromTo#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressFromTo_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_float fFromPercentage;
    mrb_float fToPercentage;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &duration, &fFromPercentage, &fToPercentage)) {
      class cocos2d::CCProgressFromTo * res = cocos2d::CCProgressFromTo::create(duration, fFromPercentage, fToPercentage);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCProgressFromTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressFromTo::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressFromTo_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_float fFromPercentage;
    mrb_float fToPercentage;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &duration, &fFromPercentage, &fToPercentage)) {
      cocos2d::CCProgressFromTo *obj_self = static_cast< cocos2d::CCProgressFromTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, fFromPercentage, fToPercentage);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressFromTo#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressFromTo_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProgressFromTo *obj_self = static_cast< cocos2d::CCProgressFromTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressFromTo#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressFromTo_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCProgressFromTo *obj_self = static_cast< cocos2d::CCProgressFromTo * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressFromTo#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressFromTo_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCProgressFromTo *obj_self = static_cast< cocos2d::CCProgressFromTo * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressFromTo#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressFromTo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCProgressFromTo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCProgressFromTo * res = new cocos2d::CCProgressFromTo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressFromTo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCProgressTimer;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCProgressTimer * res = new cocos2d::CCProgressTimer();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sp;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sp)) {
      class cocos2d::CCProgressTimer * res = cocos2d::CCProgressTimer::create(static_cast< cocos2d::CCSprite * >(cc_mrb_data_get_ptr(mrb, sp, &mrb_type_cocos2d_CCSprite, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCProgressTimer,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_getBarChangeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getBarChangeRate();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#getBarChangeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_getMidpoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getMidpoint();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#getMidpoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_getPercentage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      float res = obj_self->getPercentage();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#getPercentage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_getSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->getSprite();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#getSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_getType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      CCProgressTimerType res = obj_self->getType();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#getType");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_initWithSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sp;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sp)) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSprite(static_cast< cocos2d::CCSprite * >(cc_mrb_data_get_ptr(mrb, sp, &mrb_type_cocos2d_CCSprite, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#initWithSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_isReverseDirection(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isReverseDirection();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#isReverseDirection");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer__get_m_bReverseDirection(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bReverseDirection;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_CCProgressTimer__set_m_bReverseDirection(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bReverseDirection;
  if (1 == mrb_get_args(mrb, "b", &m_bReverseDirection)) {
    cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
    
    obj_self->m_bReverseDirection = m_bReverseDirection;
    return mrb_bool_value(m_bReverseDirection);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#m_bReverseDirection");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_setAnchorPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value anchorPoint;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &anchorPoint)) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      obj_self->setAnchorPoint(*(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, anchorPoint, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#setAnchorPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_setBarChangeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      obj_self->setBarChangeRate(*(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#setBarChangeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_setMidpoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      obj_self->setMidpoint(*(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#setMidpoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bValue)) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(bValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_setPercentage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fPercentage;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fPercentage)) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      obj_self->setPercentage(fPercentage);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#setPercentage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_setReverseDirection(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &value)) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      obj_self->setReverseDirection(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#setReverseDirection");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_setReverseProgress(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool reverse;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &reverse)) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      obj_self->setReverseProgress(reverse);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#setReverseProgress");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_setSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSprite;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pSprite)) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      obj_self->setSprite(static_cast< cocos2d::CCSprite * >(cc_mrb_data_get_ptr(mrb, pSprite, &mrb_type_cocos2d_CCSprite, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#setSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTimer_setType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int type;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &type)) {
      cocos2d::CCProgressTimer *obj_self = static_cast< cocos2d::CCProgressTimer * >(DATA_PTR(mrb_self));
      obj_self->setType((CCProgressTimerType)type);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTimer#setType");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTo_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCProgressTo *obj_self = static_cast< cocos2d::CCProgressTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTo#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTo_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_float fPercent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &duration, &fPercent)) {
      class cocos2d::CCProgressTo * res = cocos2d::CCProgressTo::create(duration, fPercent);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCProgressTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTo::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTo_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_float fPercent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &duration, &fPercent)) {
      cocos2d::CCProgressTo *obj_self = static_cast< cocos2d::CCProgressTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, fPercent);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTo#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTo_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCProgressTo *obj_self = static_cast< cocos2d::CCProgressTo * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTo#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTo_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCProgressTo *obj_self = static_cast< cocos2d::CCProgressTo * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTo#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCProgressTo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCProgressTo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCProgressTo * res = new cocos2d::CCProgressTo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCProgressTo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRGBAProtocol_getColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRGBAProtocol *obj_self = static_cast< cocos2d::CCRGBAProtocol * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       const_cast< ccColor3B * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRGBAProtocol#getColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRGBAProtocol_getDisplayedColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRGBAProtocol *obj_self = static_cast< cocos2d::CCRGBAProtocol * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getDisplayedColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       const_cast< ccColor3B * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRGBAProtocol#getDisplayedColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRGBAProtocol_getDisplayedOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRGBAProtocol *obj_self = static_cast< cocos2d::CCRGBAProtocol * >(DATA_PTR(mrb_self));
      GLubyte res = obj_self->getDisplayedOpacity();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRGBAProtocol#getDisplayedOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRGBAProtocol_getOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRGBAProtocol *obj_self = static_cast< cocos2d::CCRGBAProtocol * >(DATA_PTR(mrb_self));
      GLubyte res = obj_self->getOpacity();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRGBAProtocol#getOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRGBAProtocol_isCascadeColorEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRGBAProtocol *obj_self = static_cast< cocos2d::CCRGBAProtocol * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isCascadeColorEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRGBAProtocol#isCascadeColorEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRGBAProtocol_isCascadeOpacityEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRGBAProtocol *obj_self = static_cast< cocos2d::CCRGBAProtocol * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isCascadeOpacityEnabled();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRGBAProtocol#isCascadeOpacityEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRGBAProtocol_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRGBAProtocol *obj_self = static_cast< cocos2d::CCRGBAProtocol * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRGBAProtocol#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRGBAProtocol_setCascadeColorEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool cascadeColorEnabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &cascadeColorEnabled)) {
      cocos2d::CCRGBAProtocol *obj_self = static_cast< cocos2d::CCRGBAProtocol * >(DATA_PTR(mrb_self));
      obj_self->setCascadeColorEnabled(cascadeColorEnabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRGBAProtocol#setCascadeColorEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRGBAProtocol_setCascadeOpacityEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool cascadeOpacityEnabled;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &cascadeOpacityEnabled)) {
      cocos2d::CCRGBAProtocol *obj_self = static_cast< cocos2d::CCRGBAProtocol * >(DATA_PTR(mrb_self));
      obj_self->setCascadeOpacityEnabled(cascadeOpacityEnabled);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRGBAProtocol#setCascadeOpacityEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRGBAProtocol_setColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value color;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &color)) {
      cocos2d::CCRGBAProtocol *obj_self = static_cast< cocos2d::CCRGBAProtocol * >(DATA_PTR(mrb_self));
      obj_self->setColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRGBAProtocol#setColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRGBAProtocol_setOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int opacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &opacity)) {
      cocos2d::CCRGBAProtocol *obj_self = static_cast< cocos2d::CCRGBAProtocol * >(DATA_PTR(mrb_self));
      obj_self->setOpacity(opacity);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRGBAProtocol#setOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRGBAProtocol_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bValue)) {
      cocos2d::CCRGBAProtocol *obj_self = static_cast< cocos2d::CCRGBAProtocol * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(bValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRGBAProtocol#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRGBAProtocol_updateDisplayedColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value color;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &color)) {
      cocos2d::CCRGBAProtocol *obj_self = static_cast< cocos2d::CCRGBAProtocol * >(DATA_PTR(mrb_self));
      obj_self->updateDisplayedColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRGBAProtocol#updateDisplayedColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRGBAProtocol_updateDisplayedOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int opacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &opacity)) {
      cocos2d::CCRGBAProtocol *obj_self = static_cast< cocos2d::CCRGBAProtocol * >(DATA_PTR(mrb_self));
      obj_self->updateDisplayedOpacity(opacity);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRGBAProtocol#updateDisplayedOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRect_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCRect;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCRect * res = new cocos2d::CCRect();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  {
    mrb_float x;
    mrb_float y;
    mrb_float width;
    mrb_float height;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCRect;
    DATA_PTR(mrb_self) = NULL;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &x, &y, &width, &height)) {
      cocos2d::CCRect * res = new cocos2d::CCRect(x, y, width, height);
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  {
    mrb_value other;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCRect;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::CCRect * res = new cocos2d::CCRect(*(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRect#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRect_containsPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value point;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &point)) {
      cocos2d::CCRect *obj_self = static_cast< cocos2d::CCRect * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->containsPoint(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, point, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRect#containsPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRect_equals(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value rect;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &rect)) {
      cocos2d::CCRect *obj_self = static_cast< cocos2d::CCRect * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->equals(*(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRect#equals");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRect_getMaxX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRect *obj_self = static_cast< cocos2d::CCRect * >(DATA_PTR(mrb_self));
      float res = obj_self->getMaxX();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRect#getMaxX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRect_getMaxY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRect *obj_self = static_cast< cocos2d::CCRect * >(DATA_PTR(mrb_self));
      float res = obj_self->getMaxY();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRect#getMaxY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRect_getMidX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRect *obj_self = static_cast< cocos2d::CCRect * >(DATA_PTR(mrb_self));
      float res = obj_self->getMidX();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRect#getMidX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRect_getMidY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRect *obj_self = static_cast< cocos2d::CCRect * >(DATA_PTR(mrb_self));
      float res = obj_self->getMidY();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRect#getMidY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRect_getMinX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRect *obj_self = static_cast< cocos2d::CCRect * >(DATA_PTR(mrb_self));
      float res = obj_self->getMinX();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRect#getMinX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRect_getMinY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRect *obj_self = static_cast< cocos2d::CCRect * >(DATA_PTR(mrb_self));
      float res = obj_self->getMinY();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRect#getMinY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRect_intersectsRect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value rect;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &rect)) {
      cocos2d::CCRect *obj_self = static_cast< cocos2d::CCRect * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->intersectsRect(*(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRect#intersectsRect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRect_assign(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::CCRect *obj_self = static_cast< cocos2d::CCRect * >(DATA_PTR(mrb_self));
      class cocos2d::CCRect *res = new class cocos2d::CCRect(); *res = obj_self->operator=(*(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRect#operator=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRect__get_origin(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCRect *obj_self = static_cast< cocos2d::CCRect * >(DATA_PTR(mrb_self));
  class cocos2d::CCPoint *res = &obj_self->origin;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_no_free_type_cocos2d_CCPoint,
                       res));
}

static mrb_value
mrb_cocos2d_CCRect__set_origin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value origin;
  if (1 == mrb_get_args(mrb, "o", &origin)) {
    cocos2d::CCRect *obj_self = static_cast< cocos2d::CCRect * >(DATA_PTR(mrb_self));
    
    obj_self->origin = *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, origin, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint)));
    return origin;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRect#origin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRect_setRect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float x;
    mrb_float y;
    mrb_float width;
    mrb_float height;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &x, &y, &width, &height)) {
      cocos2d::CCRect *obj_self = static_cast< cocos2d::CCRect * >(DATA_PTR(mrb_self));
      obj_self->setRect(x, y, width, height);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRect#setRect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRect__get_size(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCRect *obj_self = static_cast< cocos2d::CCRect * >(DATA_PTR(mrb_self));
  class cocos2d::CCSize *res = &obj_self->size;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_no_free_type_cocos2d_CCSize,
                       res));
}

static mrb_value
mrb_cocos2d_CCRect__set_size(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value size;
  if (1 == mrb_get_args(mrb, "o", &size)) {
    cocos2d::CCRect *obj_self = static_cast< cocos2d::CCRect * >(DATA_PTR(mrb_self));
    
    obj_self->size = *(static_cast< cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, size, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize)));
    return size;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRect#size");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRectApplyAffineTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value rect;
    mrb_value anAffineTransform;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &rect, &anAffineTransform)) {
      class cocos2d::CCRect *res = new class cocos2d::CCRect(); *res = cocos2d::CCRectApplyAffineTransform(*(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))), *(static_cast< const struct cocos2d::CCAffineTransform * >(cc_mrb_data_get_ptr(mrb, anAffineTransform, &mrb_type_cocos2d_CCAffineTransform, &mrb_no_free_type_cocos2d_CCAffineTransform))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRectApplyAffineTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRectFromString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszContent;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszContent)) {
      class cocos2d::CCRect *res = new class cocos2d::CCRect(); *res = cocos2d::CCRectFromString(RSTRING_PTR(pszContent));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRectFromString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_CCRectZero(mrb_state *mrb, mrb_value mrb_self)
{
  const class cocos2d::CCRect *res = &cocos2d::CCRectZero;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_no_free_type_cocos2d_CCRect,
                       const_cast< cocos2d::CCRect * >(res)));
}

static mrb_value
mrb_cocos2d_CCRemoveSelf_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCRemoveSelf;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCRemoveSelf * res = new cocos2d::CCRemoveSelf();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRemoveSelf#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRemoveSelf_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCRemoveSelf *obj_self = static_cast< cocos2d::CCRemoveSelf * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRemoveSelf#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRemoveSelf_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool isNeedCleanUp;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &isNeedCleanUp)) {
      class cocos2d::CCRemoveSelf * res = cocos2d::CCRemoveSelf::create(isNeedCleanUp);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCRemoveSelf,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRemoveSelf::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRemoveSelf_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool isNeedCleanUp;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &isNeedCleanUp)) {
      cocos2d::CCRemoveSelf *obj_self = static_cast< cocos2d::CCRemoveSelf * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init(isNeedCleanUp);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRemoveSelf#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRemoveSelf_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRemoveSelf *obj_self = static_cast< cocos2d::CCRemoveSelf * >(DATA_PTR(mrb_self));
      class cocos2d::CCFiniteTimeAction * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCFiniteTimeAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRemoveSelf#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRemoveSelf_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCRemoveSelf *obj_self = static_cast< cocos2d::CCRemoveSelf * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRemoveSelf#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCRenderTexture;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCRenderTexture * res = new cocos2d::CCRenderTexture();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_begin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->begin();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#begin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_beginWithClear(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float r;
    mrb_float g;
    mrb_float b;
    mrb_float a;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &r, &g, &b, &a)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->beginWithClear(r, g, b, a);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_float r;
    mrb_float g;
    mrb_float b;
    mrb_float a;
    mrb_float depthValue;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "fffff", &r, &g, &b, &a, &depthValue)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->beginWithClear(r, g, b, a, depthValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_float r;
    mrb_float g;
    mrb_float b;
    mrb_float a;
    mrb_float depthValue;
    mrb_int stencilValue;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "fffffi", &r, &g, &b, &a, &depthValue, &stencilValue)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->beginWithClear(r, g, b, a, depthValue, stencilValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#beginWithClear");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_clear(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float r;
    mrb_float g;
    mrb_float b;
    mrb_float a;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &r, &g, &b, &a)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->clear(r, g, b, a);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#clear");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_clearDepth(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float depthValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &depthValue)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->clearDepth(depthValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#clearDepth");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_clearStencil(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int stencilValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &stencilValue)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->clearStencil(stencilValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#clearStencil");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int w;
    mrb_int h;
    mrb_int eFormat;
    mrb_int uDepthStencilFormat;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "iiii", &w, &h, &eFormat, &uDepthStencilFormat)) {
      class cocos2d::CCRenderTexture * res = cocos2d::CCRenderTexture::create(w, h, (CCTexture2DPixelFormat)eFormat, uDepthStencilFormat);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCRenderTexture,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_int w;
    mrb_int h;
    mrb_int eFormat;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "iii", &w, &h, &eFormat)) {
      class cocos2d::CCRenderTexture * res = cocos2d::CCRenderTexture::create(w, h, (CCTexture2DPixelFormat)eFormat);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCRenderTexture,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_int w;
    mrb_int h;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ii", &w, &h)) {
      class cocos2d::CCRenderTexture * res = cocos2d::CCRenderTexture::create(w, h);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCRenderTexture,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_end(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->end();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#end");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_endToLua(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->endToLua();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#endToLua");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_getClearColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      ccColor4F *res = new ccColor4F(); *res = obj_self->getClearColor();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4F"),
                       &mrb_type_cocos2d__ccColor4F,
                       const_cast< ccColor4F * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#getClearColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_getClearDepth(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      float res = obj_self->getClearDepth();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#getClearDepth");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_getClearFlags(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getClearFlags();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#getClearFlags");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_getClearStencil(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      int res = obj_self->getClearStencil();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#getClearStencil");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_getSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->getSprite();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#getSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_initWithWidthAndHeight(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int w;
    mrb_int h;
    mrb_int eFormat;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "iii", &w, &h, &eFormat)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithWidthAndHeight(w, h, (CCTexture2DPixelFormat)eFormat);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_int w;
    mrb_int h;
    mrb_int eFormat;
    mrb_int uDepthStencilFormat;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "iiii", &w, &h, &eFormat, &uDepthStencilFormat)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithWidthAndHeight(w, h, (CCTexture2DPixelFormat)eFormat, uDepthStencilFormat);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#initWithWidthAndHeight");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_isAutoDraw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isAutoDraw();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#isAutoDraw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_listenToBackground(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value obj;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &obj)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->listenToBackground(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, obj, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#listenToBackground");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_listenToForeground(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value obj;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &obj)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->listenToForeground(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, obj, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#listenToForeground");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_newCCImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool flipImage;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &flipImage)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      class cocos2d::CCImage * res = obj_self->newCCImage(flipImage);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCImage,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        //ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#newCCImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_saveToFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value szFilePath;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &szFilePath)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->saveToFile(RSTRING_PTR(szFilePath));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value name;
    mrb_int format;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &name, &format)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->saveToFile(RSTRING_PTR(name), (tCCImageFormat)format);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#saveToFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_setAutoDraw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bAutoDraw;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bAutoDraw)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->setAutoDraw(bAutoDraw);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#setAutoDraw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_setClearColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value clearColor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &clearColor)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->setClearColor(*(static_cast< const ccColor4F * >(cc_mrb_data_get_ptr(mrb, clearColor, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#setClearColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_setClearDepth(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fClearDepth;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fClearDepth)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->setClearDepth(fClearDepth);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#setClearDepth");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_setClearFlags(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int uClearFlags;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &uClearFlags)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->setClearFlags(uClearFlags);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#setClearFlags");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_setClearStencil(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fClearStencil;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fClearStencil)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->setClearStencil(fClearStencil);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#setClearStencil");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_setSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->setSprite(static_cast< cocos2d::CCSprite * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCSprite, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#setSprite");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRenderTexture_visit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRenderTexture *obj_self = static_cast< cocos2d::CCRenderTexture * >(DATA_PTR(mrb_self));
      obj_self->visit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRenderTexture#visit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeat_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRepeat *obj_self = static_cast< cocos2d::CCRepeat * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeat#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeat_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCRepeat *obj_self = static_cast< cocos2d::CCRepeat * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeat#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeat_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_int times;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &pAction, &times)) {
      class cocos2d::CCRepeat * res = cocos2d::CCRepeat::create(static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)), times);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCRepeat,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeat::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeat_getInnerAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRepeat *obj_self = static_cast< cocos2d::CCRepeat * >(DATA_PTR(mrb_self));
      class cocos2d::CCFiniteTimeAction * res = obj_self->getInnerAction();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCFiniteTimeAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeat#getInnerAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeat_initWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_int times;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &pAction, &times)) {
      cocos2d::CCRepeat *obj_self = static_cast< cocos2d::CCRepeat * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithAction(static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)), times);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeat#initWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeat_isDone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRepeat *obj_self = static_cast< cocos2d::CCRepeat * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isDone();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeat#isDone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeat_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRepeat *obj_self = static_cast< cocos2d::CCRepeat * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeat#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeat_setInnerAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      cocos2d::CCRepeat *obj_self = static_cast< cocos2d::CCRepeat * >(DATA_PTR(mrb_self));
      obj_self->setInnerAction(static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeat#setInnerAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeat_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCRepeat *obj_self = static_cast< cocos2d::CCRepeat * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeat#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeat_stop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRepeat *obj_self = static_cast< cocos2d::CCRepeat * >(DATA_PTR(mrb_self));
      obj_self->stop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeat#stop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeat_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::CCRepeat *obj_self = static_cast< cocos2d::CCRepeat * >(DATA_PTR(mrb_self));
      obj_self->update(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeat#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeat_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCRepeat;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCRepeat * res = new cocos2d::CCRepeat();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeat#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeatForever_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCRepeatForever;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCRepeatForever * res = new cocos2d::CCRepeatForever();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeatForever#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeatForever_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRepeatForever *obj_self = static_cast< cocos2d::CCRepeatForever * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeatForever#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeatForever_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCRepeatForever *obj_self = static_cast< cocos2d::CCRepeatForever * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeatForever#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeatForever_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCRepeatForever * res = cocos2d::CCRepeatForever::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCRepeatForever,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeatForever::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeatForever_getInnerAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRepeatForever *obj_self = static_cast< cocos2d::CCRepeatForever * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->getInnerAction();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeatForever#getInnerAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeatForever_initWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      cocos2d::CCRepeatForever *obj_self = static_cast< cocos2d::CCRepeatForever * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithAction(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeatForever#initWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeatForever_isDone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRepeatForever *obj_self = static_cast< cocos2d::CCRepeatForever * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isDone();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeatForever#isDone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeatForever_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRepeatForever *obj_self = static_cast< cocos2d::CCRepeatForever * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeatForever#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeatForever_setInnerAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      cocos2d::CCRepeatForever *obj_self = static_cast< cocos2d::CCRepeatForever * >(DATA_PTR(mrb_self));
      obj_self->setInnerAction(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeatForever#setInnerAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeatForever_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCRepeatForever *obj_self = static_cast< cocos2d::CCRepeatForever * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeatForever#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRepeatForever_step(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::CCRepeatForever *obj_self = static_cast< cocos2d::CCRepeatForever * >(DATA_PTR(mrb_self));
      obj_self->step(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRepeatForever#step");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCReuseGrid_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int times;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &times)) {
      class cocos2d::CCReuseGrid * res = cocos2d::CCReuseGrid::create(times);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCReuseGrid,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCReuseGrid::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCReuseGrid_initWithTimes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int times;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &times)) {
      cocos2d::CCReuseGrid *obj_self = static_cast< cocos2d::CCReuseGrid * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTimes(times);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCReuseGrid#initWithTimes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCReuseGrid_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCReuseGrid *obj_self = static_cast< cocos2d::CCReuseGrid * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCReuseGrid#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCReuseGrid_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCReuseGrid;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCReuseGrid * res = new cocos2d::CCReuseGrid();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCReuseGrid#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCReverseTime_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCReverseTime;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCReverseTime * res = new cocos2d::CCReverseTime();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCReverseTime#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCReverseTime_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCReverseTime *obj_self = static_cast< cocos2d::CCReverseTime * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCReverseTime#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCReverseTime_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCReverseTime *obj_self = static_cast< cocos2d::CCReverseTime * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCReverseTime#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCReverseTime_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      class cocos2d::CCReverseTime * res = cocos2d::CCReverseTime::create(static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCReverseTime,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCReverseTime::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCReverseTime_initWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      cocos2d::CCReverseTime *obj_self = static_cast< cocos2d::CCReverseTime * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithAction(static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCReverseTime#initWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCReverseTime_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCReverseTime *obj_self = static_cast< cocos2d::CCReverseTime * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCReverseTime#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCReverseTime_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCReverseTime *obj_self = static_cast< cocos2d::CCReverseTime * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCReverseTime#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCReverseTime_stop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCReverseTime *obj_self = static_cast< cocos2d::CCReverseTime * >(DATA_PTR(mrb_self));
      obj_self->stop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCReverseTime#stop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCReverseTime_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCReverseTime *obj_self = static_cast< cocos2d::CCReverseTime * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCReverseTime#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRipple3D_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCRipple3D *obj_self = static_cast< cocos2d::CCRipple3D * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRipple3D#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRipple3D_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_value position;
    mrb_float radius;
    mrb_int waves;
    mrb_float amplitude;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "foofif", &duration, &gridSize, &position, &radius, &waves, &amplitude)) {
      class cocos2d::CCRipple3D * res = cocos2d::CCRipple3D::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), radius, waves, amplitude);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCRipple3D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRipple3D::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRipple3D_getAmplitude(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRipple3D *obj_self = static_cast< cocos2d::CCRipple3D * >(DATA_PTR(mrb_self));
      float res = obj_self->getAmplitude();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRipple3D#getAmplitude");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRipple3D_getAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRipple3D *obj_self = static_cast< cocos2d::CCRipple3D * >(DATA_PTR(mrb_self));
      float res = obj_self->getAmplitudeRate();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRipple3D#getAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRipple3D_getPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRipple3D *obj_self = static_cast< cocos2d::CCRipple3D * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getPosition();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRipple3D#getPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRipple3D_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_value position;
    mrb_float radius;
    mrb_int waves;
    mrb_float amplitude;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "foofif", &duration, &gridSize, &position, &radius, &waves, &amplitude)) {
      cocos2d::CCRipple3D *obj_self = static_cast< cocos2d::CCRipple3D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), radius, waves, amplitude);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRipple3D#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRipple3D_setAmplitude(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fAmplitude;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fAmplitude)) {
      cocos2d::CCRipple3D *obj_self = static_cast< cocos2d::CCRipple3D * >(DATA_PTR(mrb_self));
      obj_self->setAmplitude(fAmplitude);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRipple3D#setAmplitude");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRipple3D_setAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fAmplitudeRate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fAmplitudeRate)) {
      cocos2d::CCRipple3D *obj_self = static_cast< cocos2d::CCRipple3D * >(DATA_PTR(mrb_self));
      obj_self->setAmplitudeRate(fAmplitudeRate);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRipple3D#setAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRipple3D_setPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value position;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &position)) {
      cocos2d::CCRipple3D *obj_self = static_cast< cocos2d::CCRipple3D * >(DATA_PTR(mrb_self));
      obj_self->setPosition(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRipple3D#setPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRipple3D_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCRipple3D *obj_self = static_cast< cocos2d::CCRipple3D * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRipple3D#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRipple3D_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCRipple3D;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCRipple3D * res = new cocos2d::CCRipple3D();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRipple3D#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRotateBy_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCRotateBy *obj_self = static_cast< cocos2d::CCRotateBy * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRotateBy#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRotateBy_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fDuration;
    mrb_float fDeltaAngle;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &fDuration, &fDeltaAngle)) {
      class cocos2d::CCRotateBy * res = cocos2d::CCRotateBy::create(fDuration, fDeltaAngle);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCRotateBy,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_float fDuration;
    mrb_float fDeltaAngleX;
    mrb_float fDeltaAngleY;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &fDuration, &fDeltaAngleX, &fDeltaAngleY)) {
      class cocos2d::CCRotateBy * res = cocos2d::CCRotateBy::create(fDuration, fDeltaAngleX, fDeltaAngleY);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCRotateBy,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRotateBy::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRotateBy_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fDuration;
    mrb_float fDeltaAngle;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &fDuration, &fDeltaAngle)) {
      cocos2d::CCRotateBy *obj_self = static_cast< cocos2d::CCRotateBy * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(fDuration, fDeltaAngle);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_float fDuration;
    mrb_float fDeltaAngleX;
    mrb_float fDeltaAngleY;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &fDuration, &fDeltaAngleX, &fDeltaAngleY)) {
      cocos2d::CCRotateBy *obj_self = static_cast< cocos2d::CCRotateBy * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(fDuration, fDeltaAngleX, fDeltaAngleY);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRotateBy#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRotateBy_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCRotateBy *obj_self = static_cast< cocos2d::CCRotateBy * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRotateBy#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRotateBy_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCRotateBy *obj_self = static_cast< cocos2d::CCRotateBy * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRotateBy#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRotateBy_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCRotateBy *obj_self = static_cast< cocos2d::CCRotateBy * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRotateBy#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRotateBy_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCRotateBy;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCRotateBy * res = new cocos2d::CCRotateBy();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRotateBy#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRotateTo_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCRotateTo *obj_self = static_cast< cocos2d::CCRotateTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRotateTo#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRotateTo_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fDuration;
    mrb_float fDeltaAngle;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &fDuration, &fDeltaAngle)) {
      class cocos2d::CCRotateTo * res = cocos2d::CCRotateTo::create(fDuration, fDeltaAngle);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCRotateTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_float fDuration;
    mrb_float fDeltaAngleX;
    mrb_float fDeltaAngleY;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &fDuration, &fDeltaAngleX, &fDeltaAngleY)) {
      class cocos2d::CCRotateTo * res = cocos2d::CCRotateTo::create(fDuration, fDeltaAngleX, fDeltaAngleY);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCRotateTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRotateTo::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRotateTo_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fDuration;
    mrb_float fDeltaAngle;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &fDuration, &fDeltaAngle)) {
      cocos2d::CCRotateTo *obj_self = static_cast< cocos2d::CCRotateTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(fDuration, fDeltaAngle);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_float fDuration;
    mrb_float fDeltaAngleX;
    mrb_float fDeltaAngleY;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &fDuration, &fDeltaAngleX, &fDeltaAngleY)) {
      cocos2d::CCRotateTo *obj_self = static_cast< cocos2d::CCRotateTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(fDuration, fDeltaAngleX, fDeltaAngleY);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRotateTo#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRotateTo_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCRotateTo *obj_self = static_cast< cocos2d::CCRotateTo * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRotateTo#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRotateTo_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCRotateTo *obj_self = static_cast< cocos2d::CCRotateTo * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRotateTo#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCRotateTo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCRotateTo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCRotateTo * res = new cocos2d::CCRotateTo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCRotateTo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSAXParser_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSAXParser;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCSAXParser * res = new cocos2d::CCSAXParser();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSAXParser#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSAXParser_endElement(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value ctx;
    mrb_value name;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oA", &ctx, &name)) {
      CC_XML_CHAR cxx_name[1]; cc_mrb_ary_conv_to_c_array(mrb, name, reinterpret_cast< unsigned char * >(cxx_name), 1);
      cocos2d::CCSAXParser::endElement(static_cast< void * >(DATA_PTR(ctx)), cxx_name);
      cc_mrb_ary_conv_from_c_array(mrb, name, reinterpret_cast< CC_XML_CHAR * >(cxx_name), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSAXParser::endElement");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSAXParser_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszEncoding;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszEncoding)) {
      cocos2d::CCSAXParser *obj_self = static_cast< cocos2d::CCSAXParser * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init(RSTRING_PTR(pszEncoding));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSAXParser#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSAXParser_parse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pXMLData;
    mrb_int uDataLength;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &pXMLData, &uDataLength)) {
      cocos2d::CCSAXParser *obj_self = static_cast< cocos2d::CCSAXParser * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->parse(RSTRING_PTR(pXMLData), uDataLength);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value pszFile;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszFile)) {
      cocos2d::CCSAXParser *obj_self = static_cast< cocos2d::CCSAXParser * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->parse(RSTRING_PTR(pszFile));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSAXParser#parse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSAXParser_setDelegator(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegator;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegator)) {
      cocos2d::CCSAXParser *obj_self = static_cast< cocos2d::CCSAXParser * >(DATA_PTR(mrb_self));
      obj_self->setDelegator(static_cast< cocos2d::CCSAXDelegator * >(DATA_PTR(pDelegator)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSAXParser#setDelegator");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSAXParser_startElement(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value ctx;
    mrb_value name;
    mrb_value atts;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oAo", &ctx, &name, &atts)) {
      CC_XML_CHAR cxx_name[1]; cc_mrb_ary_conv_to_c_array(mrb, name, reinterpret_cast< unsigned char * >(cxx_name), 1);
      cocos2d::CCSAXParser::startElement(static_cast< void * >(DATA_PTR(ctx)), cxx_name, static_cast< const CC_XML_CHAR ** >(DATA_PTR(atts)));
      cc_mrb_ary_conv_from_c_array(mrb, name, reinterpret_cast< CC_XML_CHAR * >(cxx_name), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSAXParser::startElement");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSAXParser_textHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value ctx;
    mrb_value name;
    mrb_int len;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oAi", &ctx, &name, &len)) {
      CC_XML_CHAR cxx_name[1]; cc_mrb_ary_conv_to_c_array(mrb, name, reinterpret_cast< unsigned char * >(cxx_name), 1);
      cocos2d::CCSAXParser::textHandler(static_cast< void * >(DATA_PTR(ctx)), cxx_name, len);
      cc_mrb_ary_conv_from_c_array(mrb, name, reinterpret_cast< CC_XML_CHAR * >(cxx_name), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSAXParser::textHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScaleBy_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCScaleBy *obj_self = static_cast< cocos2d::CCScaleBy * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScaleBy#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScaleBy_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_float s;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &duration, &s)) {
      class cocos2d::CCScaleBy * res = cocos2d::CCScaleBy::create(duration, s);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCScaleBy,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_float duration;
    mrb_float sx;
    mrb_float sy;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &duration, &sx, &sy)) {
      class cocos2d::CCScaleBy * res = cocos2d::CCScaleBy::create(duration, sx, sy);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCScaleBy,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScaleBy::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScaleBy_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCScaleBy *obj_self = static_cast< cocos2d::CCScaleBy * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScaleBy#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScaleBy_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCScaleBy *obj_self = static_cast< cocos2d::CCScaleBy * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScaleBy#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScaleBy_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCScaleBy;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCScaleBy * res = new cocos2d::CCScaleBy();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScaleBy#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScaleTo_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCScaleTo *obj_self = static_cast< cocos2d::CCScaleTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScaleTo#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScaleTo_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_float s;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &duration, &s)) {
      class cocos2d::CCScaleTo * res = cocos2d::CCScaleTo::create(duration, s);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCScaleTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_float duration;
    mrb_float sx;
    mrb_float sy;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &duration, &sx, &sy)) {
      class cocos2d::CCScaleTo * res = cocos2d::CCScaleTo::create(duration, sx, sy);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCScaleTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScaleTo::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScaleTo_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_float s;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &duration, &s)) {
      cocos2d::CCScaleTo *obj_self = static_cast< cocos2d::CCScaleTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, s);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_float duration;
    mrb_float sx;
    mrb_float sy;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &duration, &sx, &sy)) {
      cocos2d::CCScaleTo *obj_self = static_cast< cocos2d::CCScaleTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, sx, sy);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScaleTo#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScaleTo_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCScaleTo *obj_self = static_cast< cocos2d::CCScaleTo * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScaleTo#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScaleTo_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCScaleTo *obj_self = static_cast< cocos2d::CCScaleTo * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScaleTo#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScaleTo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCScaleTo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCScaleTo * res = new cocos2d::CCScaleTo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScaleTo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScene_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCScene;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCScene * res = new cocos2d::CCScene();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScene#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScene_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCScene * res = cocos2d::CCScene::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCScene,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScene::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScene_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCScene *obj_self = static_cast< cocos2d::CCScene * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScene#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCScheduler;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCScheduler * res = new cocos2d::CCScheduler();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_getTimeScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      float res = obj_self->getTimeScale();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#getTimeScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_isTargetPaused(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isTargetPaused(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#isTargetPaused");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_pauseAllTargets(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      class cocos2d::CCSet * res = obj_self->pauseAllTargets();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSet,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#pauseAllTargets");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_pauseAllTargetsWithMinPriority(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nMinPriority;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nMinPriority)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      class cocos2d::CCSet * res = obj_self->pauseAllTargetsWithMinPriority(nMinPriority);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSet,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#pauseAllTargetsWithMinPriority");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_pauseTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      obj_self->pauseTarget(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#pauseTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_resumeTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      obj_self->resumeTarget(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#resumeTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_resumeTargets(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value targetsToResume;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &targetsToResume)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      obj_self->resumeTargets(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, targetsToResume, &mrb_type_cocos2d_CCSet, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#resumeTargets");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_scheduleScriptFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    mrb_float fInterval;
    mrb_bool bPaused;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ofb", &nHandler, &fInterval, &bPaused)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->scheduleScriptFunc(cc_mrb_proc_keep(mrb, nHandler), fInterval, bPaused);
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#scheduleScriptFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_scheduleSelector(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pfnSelector;
    mrb_value pTarget;
    mrb_float fInterval;
    mrb_int repeat;
    mrb_float delay;
    mrb_bool bPaused;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "oofifb", &pfnSelector, &pTarget, &fInterval, &repeat, &delay, &bPaused)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      obj_self->scheduleSelector(schedule_selector(CCMRubyCallbackWrapper::SEL_SCHEDULE_Impl), CCMRubyCallbackWrapper::create(mrb, pTarget, pfnSelector), fInterval, repeat, delay, bPaused);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value pfnSelector;
    mrb_value pTarget;
    mrb_float fInterval;
    mrb_bool bPaused;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oofb", &pfnSelector, &pTarget, &fInterval, &bPaused)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      obj_self->scheduleSelector(schedule_selector(CCMRubyCallbackWrapper::SEL_SCHEDULE_Impl), CCMRubyCallbackWrapper::create(mrb, pTarget, pfnSelector), fInterval, bPaused);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#scheduleSelector");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_scheduleUpdateForTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    mrb_int nPriority;
    mrb_bool bPaused;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oib", &pTarget, &nPriority, &bPaused)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      obj_self->scheduleUpdateForTarget(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCObject, NULL)), nPriority, bPaused);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#scheduleUpdateForTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_setTimeScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fTimeScale;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fTimeScale)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      obj_self->setTimeScale(fTimeScale);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#setTimeScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_unscheduleAll(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      obj_self->unscheduleAll();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#unscheduleAll");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_unscheduleAllForTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      obj_self->unscheduleAllForTarget(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#unscheduleAllForTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_unscheduleAllWithMinPriority(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nMinPriority;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nMinPriority)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      obj_self->unscheduleAllWithMinPriority(nMinPriority);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#unscheduleAllWithMinPriority");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_unscheduleScriptEntry(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int uScheduleScriptEntryID;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &uScheduleScriptEntryID)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      obj_self->unscheduleScriptEntry(uScheduleScriptEntryID);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#unscheduleScriptEntry");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_unscheduleSelector(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pfnSelector;
    mrb_value pTarget;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pfnSelector, &pTarget)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      obj_self->unscheduleSelector(schedule_selector(CCMRubyCallbackWrapper::SEL_SCHEDULE_Impl), CCMRubyCallbackWrapper::create(mrb, pTarget, pfnSelector));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#unscheduleSelector");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_unscheduleUpdateForTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      obj_self->unscheduleUpdateForTarget(static_cast< const class cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#unscheduleUpdateForTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScheduler_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::CCScheduler *obj_self = static_cast< cocos2d::CCScheduler * >(DATA_PTR(mrb_self));
      obj_self->update(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScheduler#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSchedulerScriptHandlerEntry_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    mrb_float fInterval;
    mrb_bool bPaused;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ofb", &nHandler, &fInterval, &bPaused)) {
      class cocos2d::CCSchedulerScriptHandlerEntry * res = cocos2d::CCSchedulerScriptHandlerEntry::create(cc_mrb_proc_keep(mrb, nHandler), fInterval, bPaused);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      //cc_mrb_proc_keep(mrb, nHandler);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSchedulerScriptHandlerEntry,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSchedulerScriptHandlerEntry::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSchedulerScriptHandlerEntry_getTimer(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSchedulerScriptHandlerEntry *obj_self = static_cast< cocos2d::CCSchedulerScriptHandlerEntry * >(DATA_PTR(mrb_self));
      cocos2d::CCTimer * res = obj_self->getTimer();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTimer,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSchedulerScriptHandlerEntry#getTimer");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSchedulerScriptHandlerEntry_isMarkedForDeletion(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSchedulerScriptHandlerEntry *obj_self = static_cast< cocos2d::CCSchedulerScriptHandlerEntry * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isMarkedForDeletion();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSchedulerScriptHandlerEntry#isMarkedForDeletion");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSchedulerScriptHandlerEntry_isPaused(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSchedulerScriptHandlerEntry *obj_self = static_cast< cocos2d::CCSchedulerScriptHandlerEntry * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isPaused();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSchedulerScriptHandlerEntry#isPaused");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSchedulerScriptHandlerEntry_markedForDeletion(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSchedulerScriptHandlerEntry *obj_self = static_cast< cocos2d::CCSchedulerScriptHandlerEntry * >(DATA_PTR(mrb_self));
      obj_self->markedForDeletion();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSchedulerScriptHandlerEntry#markedForDeletion");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineManager_getScriptEngine(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCScriptEngineManager *obj_self = static_cast< cocos2d::CCScriptEngineManager * >(DATA_PTR(mrb_self));
      class cocos2d::CCScriptEngineProtocol * res = obj_self->getScriptEngine();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCScriptEngineProtocol"),
                       &mrb_type_cocos2d_CCScriptEngineProtocol,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineManager#getScriptEngine");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineManager_purgeSharedManager(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCScriptEngineManager::purgeSharedManager();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineManager::purgeSharedManager");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineManager_removeScriptEngine(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCScriptEngineManager *obj_self = static_cast< cocos2d::CCScriptEngineManager * >(DATA_PTR(mrb_self));
      obj_self->removeScriptEngine();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineManager#removeScriptEngine");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineManager_sharedManager(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCScriptEngineManager * res = cocos2d::CCScriptEngineManager::sharedManager();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCScriptEngineManager"),
                       &mrb_no_free_type_cocos2d_CCScriptEngineManager,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineManager::sharedManager");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_executeAccelerometerEvent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pLayer;
    mrb_value pAccelerationValue;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pLayer, &pAccelerationValue)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      int res = obj_self->executeAccelerometerEvent(static_cast< cocos2d::CCLayer * >(cc_mrb_data_get_ptr(mrb, pLayer, &mrb_type_cocos2d_CCLayer, NULL)), static_cast< cocos2d::CCAcceleration * >(cc_mrb_data_get_ptr(mrb, pAccelerationValue, &mrb_type_cocos2d_CCAcceleration, &mrb_no_free_type_cocos2d_CCAcceleration)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#executeAccelerometerEvent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_executeCallFuncActionEvent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_value pTarget;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pAction, &pTarget)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      int res = obj_self->executeCallFuncActionEvent(static_cast< cocos2d::CCCallFunc * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCCallFunc, NULL)), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#executeCallFuncActionEvent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_executeEvent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    mrb_value pEventName;
    mrb_value pEventSource;
    mrb_value pEventSourceClassName;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oSoS", &nHandler, &pEventName, &pEventSource, &pEventSourceClassName)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      int res = obj_self->executeEvent(cc_mrb_proc_keep(mrb, nHandler), RSTRING_PTR(pEventName), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pEventSource, &mrb_type_cocos2d_CCObject, NULL)), RSTRING_PTR(pEventSourceClassName));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#executeEvent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_executeGlobalFunction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value functionName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &functionName)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      int res = obj_self->executeGlobalFunction(RSTRING_PTR(functionName));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#executeGlobalFunction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_executeLayerKeypadEvent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pLayer;
    mrb_int eventType;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &pLayer, &eventType)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      int res = obj_self->executeLayerKeypadEvent(static_cast< cocos2d::CCLayer * >(cc_mrb_data_get_ptr(mrb, pLayer, &mrb_type_cocos2d_CCLayer, NULL)), eventType);
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#executeLayerKeypadEvent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_executeLayerTouchEvent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pLayer;
    mrb_int eventType;
    mrb_value pTouch;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oio", &pLayer, &eventType, &pTouch)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      int res = obj_self->executeLayerTouchEvent(static_cast< cocos2d::CCLayer * >(cc_mrb_data_get_ptr(mrb, pLayer, &mrb_type_cocos2d_CCLayer, NULL)), eventType, static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, pTouch, &mrb_type_cocos2d_CCTouch, NULL)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#executeLayerTouchEvent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_executeLayerTouchesEvent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pLayer;
    mrb_int eventType;
    mrb_value pTouches;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oio", &pLayer, &eventType, &pTouches)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      int res = obj_self->executeLayerTouchesEvent(static_cast< cocos2d::CCLayer * >(cc_mrb_data_get_ptr(mrb, pLayer, &mrb_type_cocos2d_CCLayer, NULL)), eventType, static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, pTouches, &mrb_type_cocos2d_CCSet, NULL)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#executeLayerTouchesEvent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_executeMenuItemEvent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pMenuItem;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pMenuItem)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      int res = obj_self->executeMenuItemEvent(static_cast< cocos2d::CCMenuItem * >(cc_mrb_data_get_ptr(mrb, pMenuItem, &mrb_type_cocos2d_CCMenuItem, NULL)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#executeMenuItemEvent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_executeNodeEvent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pNode;
    mrb_int nAction;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &pNode, &nAction)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      int res = obj_self->executeNodeEvent(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pNode, &mrb_type_cocos2d_CCNode, NULL)), nAction);
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#executeNodeEvent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_executeNotificationEvent(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pNotificationCenter;
    mrb_value pszName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &pNotificationCenter, &pszName)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      int res = obj_self->executeNotificationEvent(static_cast< cocos2d::CCNotificationCenter * >(cc_mrb_data_get_ptr(mrb, pNotificationCenter, &mrb_type_cocos2d_CCNotificationCenter, NULL)), RSTRING_PTR(pszName));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#executeNotificationEvent");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_executeSchedule(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    mrb_float dt;
    mrb_value pNode;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ofo", &nHandler, &dt, &pNode)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      int res = obj_self->executeSchedule(cc_mrb_proc_keep(mrb, nHandler), dt, static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pNode, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#executeSchedule");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_executeScriptFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value filename;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &filename)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      int res = obj_self->executeScriptFile(RSTRING_PTR(filename));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#executeScriptFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_executeString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value codes;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &codes)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      int res = obj_self->executeString(RSTRING_PTR(codes));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#executeString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_getScriptType(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      enum cocos2d::ccScriptType res = obj_self->getScriptType();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#getScriptType");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_handleAssert(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value msg;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &msg)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->handleAssert(RSTRING_PTR(msg));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#handleAssert");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_reallocateScriptHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &nHandler)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      int res = obj_self->reallocateScriptHandler(cc_mrb_proc_keep(mrb, nHandler));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#reallocateScriptHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_removeScriptHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &nHandler)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      obj_self->removeScriptHandler(cc_mrb_proc_keep(mrb, nHandler));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#removeScriptHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_removeScriptObjectByCCObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObj;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObj)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      obj_self->removeScriptObjectByCCObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObj, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#removeScriptObjectByCCObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptEngineProtocol_willRemoveAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pActionManager;
    mrb_value pAction;
    mrb_value pTarget;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &pActionManager, &pAction, &pTarget)) {
      cocos2d::CCScriptEngineProtocol *obj_self = static_cast< cocos2d::CCScriptEngineProtocol * >(DATA_PTR(mrb_self));
      obj_self->willRemoveAction(static_cast< cocos2d::CCActionManager * >(cc_mrb_data_get_ptr(mrb, pActionManager, &mrb_type_cocos2d_CCActionManager, NULL)), static_cast< cocos2d::CCAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCAction, NULL)), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptEngineProtocol#willRemoveAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptHandlerEntry_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &nHandler)) {
      class cocos2d::CCScriptHandlerEntry * res = cocos2d::CCScriptHandlerEntry::create(cc_mrb_proc_keep(mrb, nHandler));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      //cc_mrb_proc_keep(mrb, nHandler);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCScriptHandlerEntry,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptHandlerEntry::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptHandlerEntry_getEntryId(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCScriptHandlerEntry *obj_self = static_cast< cocos2d::CCScriptHandlerEntry * >(DATA_PTR(mrb_self));
      int res = obj_self->getEntryId();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptHandlerEntry#getEntryId");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCScriptHandlerEntry_getHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCScriptHandlerEntry *obj_self = static_cast< cocos2d::CCScriptHandlerEntry * >(DATA_PTR(mrb_self));
      int res = obj_self->getHandler();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCScriptHandlerEntry#getHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSequence_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSequence *obj_self = static_cast< cocos2d::CCSequence * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSequence#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSequence_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCSequence *obj_self = static_cast< cocos2d::CCSequence * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSequence#copyWithZone");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_CCSequence_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction1;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction1) && mrb_obj_is_kind_of(mrb, pAction1, cc_mrb_class_get(mrb, "Cocos2d::CCFiniteTimeAction"))) {
      class cocos2d::CCSequence * res = cocos2d::CCSequence::create(static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pAction1, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSequence,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value arrayOfActions;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &arrayOfActions) && mrb_obj_is_kind_of(mrb, arrayOfActions, cc_mrb_class_get(mrb, "Cocos2d::CCArray"))) {
      class cocos2d::CCSequence * res = cocos2d::CCSequence::create(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, arrayOfActions, &mrb_type_cocos2d_CCArray, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSequence,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::CCSequence::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSequence_createWithTwoActions(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pActionOne;
    mrb_value pActionTwo;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pActionOne, &pActionTwo)) {
      class cocos2d::CCSequence * res = cocos2d::CCSequence::createWithTwoActions(static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pActionOne, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)), static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pActionTwo, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSequence,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSequence::createWithTwoActions");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSequence_createWithVariableList(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction1;
    mrb_value args;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pAction1, &args)) {
      class cocos2d::CCSequence * res = cocos2d::CCSequence::createWithVariableList(static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pAction1, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)), static_cast< __va_list_tag * >(DATA_PTR(args)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSequence,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSequence::createWithVariableList");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSequence_initWithTwoActions(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pActionOne;
    mrb_value pActionTwo;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pActionOne, &pActionTwo)) {
      cocos2d::CCSequence *obj_self = static_cast< cocos2d::CCSequence * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTwoActions(static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pActionOne, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)), static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pActionTwo, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSequence#initWithTwoActions");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSequence_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSequence *obj_self = static_cast< cocos2d::CCSequence * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSequence#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSequence_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCSequence *obj_self = static_cast< cocos2d::CCSequence * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSequence#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSequence_stop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSequence *obj_self = static_cast< cocos2d::CCSequence * >(DATA_PTR(mrb_self));
      obj_self->stop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSequence#stop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSequence_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &t)) {
      cocos2d::CCSequence *obj_self = static_cast< cocos2d::CCSequence * >(DATA_PTR(mrb_self));
      obj_self->update(t);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSequence#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSequence_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSequence;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCSequence * res = new cocos2d::CCSequence();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSequence#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSet_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSet;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCSet * res = new cocos2d::CCSet();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  {
    mrb_value rSetObject;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSet;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &rSetObject)) {
      cocos2d::CCSet * res = new cocos2d::CCSet(*(static_cast< const class cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, rSetObject, &mrb_type_cocos2d_CCSet, NULL))));
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSet#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSet_acceptVisitor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value visitor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &visitor)) {
      cocos2d::CCSet *obj_self = static_cast< cocos2d::CCSet * >(DATA_PTR(mrb_self));
      obj_self->acceptVisitor(*(static_cast< cocos2d::CCDataVisitor * >(DATA_PTR(visitor))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSet#acceptVisitor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSet_addObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObject;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObject)) {
      cocos2d::CCSet *obj_self = static_cast< cocos2d::CCSet * >(DATA_PTR(mrb_self));
      obj_self->addObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSet#addObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSet_anyObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSet *obj_self = static_cast< cocos2d::CCSet * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->anyObject();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSet#anyObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSet_containsObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObject;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObject)) {
      cocos2d::CCSet *obj_self = static_cast< cocos2d::CCSet * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->containsObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSet#containsObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSet_copy(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSet *obj_self = static_cast< cocos2d::CCSet * >(DATA_PTR(mrb_self));
      class cocos2d::CCSet * res = obj_self->copy();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSet,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSet#copy");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSet_count(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSet *obj_self = static_cast< cocos2d::CCSet * >(DATA_PTR(mrb_self));
      int res = obj_self->count();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSet#count");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSet_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCSet * res = cocos2d::CCSet::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSet,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSet::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSet_mutableCopy(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSet *obj_self = static_cast< cocos2d::CCSet * >(DATA_PTR(mrb_self));
      class cocos2d::CCSet * res = obj_self->mutableCopy();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSet,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSet#mutableCopy");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSet_removeAllObjects(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSet *obj_self = static_cast< cocos2d::CCSet * >(DATA_PTR(mrb_self));
      obj_self->removeAllObjects();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSet#removeAllObjects");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSet_removeObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObject;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObject)) {
      cocos2d::CCSet *obj_self = static_cast< cocos2d::CCSet * >(DATA_PTR(mrb_self));
      obj_self->removeObject(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSet#removeObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShaderCache_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCShaderCache;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCShaderCache * res = new cocos2d::CCShaderCache();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShaderCache#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShaderCache_addProgram(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value program;
    mrb_value key;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &program, &key)) {
      cocos2d::CCShaderCache *obj_self = static_cast< cocos2d::CCShaderCache * >(DATA_PTR(mrb_self));
      obj_self->addProgram(static_cast< cocos2d::CCGLProgram * >(cc_mrb_data_get_ptr(mrb, program, &mrb_type_cocos2d_CCGLProgram, NULL)), RSTRING_PTR(key));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShaderCache#addProgram");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShaderCache_loadDefaultShaders(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCShaderCache *obj_self = static_cast< cocos2d::CCShaderCache * >(DATA_PTR(mrb_self));
      obj_self->loadDefaultShaders();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShaderCache#loadDefaultShaders");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShaderCache_programForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &key)) {
      cocos2d::CCShaderCache *obj_self = static_cast< cocos2d::CCShaderCache * >(DATA_PTR(mrb_self));
      class cocos2d::CCGLProgram * res = obj_self->programForKey(RSTRING_PTR(key));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCGLProgram,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShaderCache#programForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShaderCache_purgeSharedShaderCache(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCShaderCache::purgeSharedShaderCache();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShaderCache::purgeSharedShaderCache");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShaderCache_reloadDefaultShaders(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCShaderCache *obj_self = static_cast< cocos2d::CCShaderCache * >(DATA_PTR(mrb_self));
      obj_self->reloadDefaultShaders();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShaderCache#reloadDefaultShaders");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShaderCache_sharedShaderCache(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCShaderCache * res = cocos2d::CCShaderCache::sharedShaderCache();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCShaderCache,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShaderCache::sharedShaderCache");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShaky3D_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCShaky3D *obj_self = static_cast< cocos2d::CCShaky3D * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShaky3D#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShaky3D_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int range;
    mrb_bool shakeZ;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foib", &duration, &gridSize, &range, &shakeZ)) {
      class cocos2d::CCShaky3D * res = cocos2d::CCShaky3D::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), range, shakeZ);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCShaky3D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShaky3D::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShaky3D_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int range;
    mrb_bool shakeZ;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foib", &duration, &gridSize, &range, &shakeZ)) {
      cocos2d::CCShaky3D *obj_self = static_cast< cocos2d::CCShaky3D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), range, shakeZ);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShaky3D#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShaky3D_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCShaky3D *obj_self = static_cast< cocos2d::CCShaky3D * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShaky3D#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShaky3D_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCShaky3D;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCShaky3D * res = new cocos2d::CCShaky3D();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShaky3D#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShakyTiles3D_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCShakyTiles3D *obj_self = static_cast< cocos2d::CCShakyTiles3D * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShakyTiles3D#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShakyTiles3D_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int nRange;
    mrb_bool bShakeZ;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foib", &duration, &gridSize, &nRange, &bShakeZ)) {
      class cocos2d::CCShakyTiles3D * res = cocos2d::CCShakyTiles3D::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), nRange, bShakeZ);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCShakyTiles3D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShakyTiles3D::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShakyTiles3D_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int nRange;
    mrb_bool bShakeZ;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foib", &duration, &gridSize, &nRange, &bShakeZ)) {
      cocos2d::CCShakyTiles3D *obj_self = static_cast< cocos2d::CCShakyTiles3D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), nRange, bShakeZ);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShakyTiles3D#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShakyTiles3D_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCShakyTiles3D *obj_self = static_cast< cocos2d::CCShakyTiles3D * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShakyTiles3D#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShakyTiles3D_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCShakyTiles3D;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCShakyTiles3D * res = new cocos2d::CCShakyTiles3D();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShakyTiles3D#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShatteredTiles3D_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCShatteredTiles3D *obj_self = static_cast< cocos2d::CCShatteredTiles3D * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShatteredTiles3D#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShatteredTiles3D_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int nRange;
    mrb_bool bShatterZ;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foib", &duration, &gridSize, &nRange, &bShatterZ)) {
      class cocos2d::CCShatteredTiles3D * res = cocos2d::CCShatteredTiles3D::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), nRange, bShatterZ);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCShatteredTiles3D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShatteredTiles3D::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShatteredTiles3D_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int nRange;
    mrb_bool bShatterZ;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foib", &duration, &gridSize, &nRange, &bShatterZ)) {
      cocos2d::CCShatteredTiles3D *obj_self = static_cast< cocos2d::CCShatteredTiles3D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), nRange, bShatterZ);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShatteredTiles3D#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShatteredTiles3D_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCShatteredTiles3D *obj_self = static_cast< cocos2d::CCShatteredTiles3D * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShatteredTiles3D#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShatteredTiles3D_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCShatteredTiles3D;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCShatteredTiles3D * res = new cocos2d::CCShatteredTiles3D();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShatteredTiles3D#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShow_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCShow;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCShow * res = new cocos2d::CCShow();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShow#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShow_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCShow *obj_self = static_cast< cocos2d::CCShow * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShow#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShow_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCShow * res = cocos2d::CCShow::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCShow,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShow::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShow_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCShow *obj_self = static_cast< cocos2d::CCShow * >(DATA_PTR(mrb_self));
      class cocos2d::CCFiniteTimeAction * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCFiniteTimeAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShow#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShow_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCShow *obj_self = static_cast< cocos2d::CCShow * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShow#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShuffleTiles_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCShuffleTiles *obj_self = static_cast< cocos2d::CCShuffleTiles * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShuffleTiles#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShuffleTiles_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int seed;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "foi", &duration, &gridSize, &seed)) {
      class cocos2d::CCShuffleTiles * res = cocos2d::CCShuffleTiles::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), seed);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCShuffleTiles,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShuffleTiles::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShuffleTiles_getDelta(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pos)) {
      cocos2d::CCShuffleTiles *obj_self = static_cast< cocos2d::CCShuffleTiles * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getDelta(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShuffleTiles#getDelta");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShuffleTiles_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int seed;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "foi", &duration, &gridSize, &seed)) {
      cocos2d::CCShuffleTiles *obj_self = static_cast< cocos2d::CCShuffleTiles * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), seed);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShuffleTiles#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShuffleTiles_placeTile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    mrb_value t;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pos, &t)) {
      cocos2d::CCShuffleTiles *obj_self = static_cast< cocos2d::CCShuffleTiles * >(DATA_PTR(mrb_self));
      obj_self->placeTile(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), static_cast< struct cocos2d::Tile * >(DATA_PTR(t)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShuffleTiles#placeTile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShuffleTiles_shuffle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pArray;
    mrb_int nLen;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Ai", &pArray, &nLen)) {
      unsigned int cxx_pArray[1]; cc_mrb_ary_conv_to_c_array(mrb, pArray, reinterpret_cast< unsigned int * >(cxx_pArray), 1);
      cocos2d::CCShuffleTiles *obj_self = static_cast< cocos2d::CCShuffleTiles * >(DATA_PTR(mrb_self));
      obj_self->shuffle(cxx_pArray, nLen);
      cc_mrb_ary_conv_from_c_array(mrb, pArray, reinterpret_cast< unsigned int * >(cxx_pArray), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShuffleTiles#shuffle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShuffleTiles_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCShuffleTiles *obj_self = static_cast< cocos2d::CCShuffleTiles * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShuffleTiles#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShuffleTiles_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCShuffleTiles *obj_self = static_cast< cocos2d::CCShuffleTiles * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShuffleTiles#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCShuffleTiles_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCShuffleTiles;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCShuffleTiles * res = new cocos2d::CCShuffleTiles();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCShuffleTiles#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSize_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSize;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCSize * res = new cocos2d::CCSize();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  {
    mrb_float width;
    mrb_float height;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSize;
    DATA_PTR(mrb_self) = NULL;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &width, &height)) {
      cocos2d::CCSize * res = new cocos2d::CCSize(width, height);
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  {
    mrb_value other;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSize;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::CCSize * res = new cocos2d::CCSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  {
    mrb_value point;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSize;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &point)) {
      cocos2d::CCSize * res = new cocos2d::CCSize(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, point, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSize#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSize_equals(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value target;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &target)) {
      cocos2d::CCSize *obj_self = static_cast< cocos2d::CCSize * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->equals(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, target, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSize#equals");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSize__get_height(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCSize *obj_self = static_cast< cocos2d::CCSize * >(DATA_PTR(mrb_self));
  float res = obj_self->height;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCSize__set_height(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float height;
  if (1 == mrb_get_args(mrb, "f", &height)) {
    cocos2d::CCSize *obj_self = static_cast< cocos2d::CCSize * >(DATA_PTR(mrb_self));
    
    obj_self->height = height;
    return mrb_float_value(mrb, height);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSize#height");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSize_mul(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float a;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &a)) {
      cocos2d::CCSize *obj_self = static_cast< cocos2d::CCSize * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->operator*(a);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSize#operator*");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSize_plus(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value right;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &right)) {
      cocos2d::CCSize *obj_self = static_cast< cocos2d::CCSize * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->operator+(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, right, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSize#operator+");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSize_minus(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value right;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &right)) {
      cocos2d::CCSize *obj_self = static_cast< cocos2d::CCSize * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->operator-(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, right, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSize#operator-");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSize_div(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float a;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &a)) {
      cocos2d::CCSize *obj_self = static_cast< cocos2d::CCSize * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->operator/(a);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSize#operator/");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSize_assign(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::CCSize *obj_self = static_cast< cocos2d::CCSize * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->operator=(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  {
    mrb_value point;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &point)) {
      cocos2d::CCSize *obj_self = static_cast< cocos2d::CCSize * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->operator=(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, point, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSize#operator=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSize_setSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float width;
    mrb_float height;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &width, &height)) {
      cocos2d::CCSize *obj_self = static_cast< cocos2d::CCSize * >(DATA_PTR(mrb_self));
      obj_self->setSize(width, height);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSize#setSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSize__get_width(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCSize *obj_self = static_cast< cocos2d::CCSize * >(DATA_PTR(mrb_self));
  float res = obj_self->width;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_CCSize__set_width(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float width;
  if (1 == mrb_get_args(mrb, "f", &width)) {
    cocos2d::CCSize *obj_self = static_cast< cocos2d::CCSize * >(DATA_PTR(mrb_self));
    
    obj_self->width = width;
    return mrb_float_value(mrb, width);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSize#width");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSizeFromString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszContent;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszContent)) {
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = cocos2d::CCSizeFromString(RSTRING_PTR(pszContent));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSizeFromString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_CCSizeZero(mrb_state *mrb, mrb_value mrb_self)
{
  const class cocos2d::CCSize *res = &cocos2d::CCSizeZero;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_no_free_type_cocos2d_CCSize,
                       const_cast< cocos2d::CCSize * >(res)));
}

static mrb_value
mrb_cocos2d_CCSkewBy_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float deltaSkewX;
    mrb_float deltaSkewY;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &t, &deltaSkewX, &deltaSkewY)) {
      class cocos2d::CCSkewBy * res = cocos2d::CCSkewBy::create(t, deltaSkewX, deltaSkewY);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSkewBy,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSkewBy::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSkewBy_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float sx;
    mrb_float sy;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &t, &sx, &sy)) {
      cocos2d::CCSkewBy *obj_self = static_cast< cocos2d::CCSkewBy * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(t, sx, sy);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSkewBy#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSkewBy_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSkewBy *obj_self = static_cast< cocos2d::CCSkewBy * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSkewBy#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSkewBy_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCSkewBy *obj_self = static_cast< cocos2d::CCSkewBy * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSkewBy#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSkewBy_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSkewBy;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCSkewBy * res = new cocos2d::CCSkewBy();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSkewBy#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSkewTo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSkewTo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCSkewTo * res = new cocos2d::CCSkewTo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSkewTo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSkewTo_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCSkewTo *obj_self = static_cast< cocos2d::CCSkewTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSkewTo#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSkewTo_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float sx;
    mrb_float sy;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &t, &sx, &sy)) {
      class cocos2d::CCSkewTo * res = cocos2d::CCSkewTo::create(t, sx, sy);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSkewTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSkewTo::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSkewTo_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_float sx;
    mrb_float sy;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &t, &sx, &sy)) {
      cocos2d::CCSkewTo *obj_self = static_cast< cocos2d::CCSkewTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(t, sx, sy);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSkewTo#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSkewTo_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCSkewTo *obj_self = static_cast< cocos2d::CCSkewTo * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSkewTo#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSkewTo_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCSkewTo *obj_self = static_cast< cocos2d::CCSkewTo * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSkewTo#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpawn_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpawn *obj_self = static_cast< cocos2d::CCSpawn * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpawn#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpawn_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCSpawn *obj_self = static_cast< cocos2d::CCSpawn * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpawn#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpawn_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
#if 0
  {
    mrb_value pAction1;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction1)) {
      class cocos2d::CCSpawn * res = cocos2d::CCSpawn::create(static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pAction1, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSpawn,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
#endif
  {
    mrb_value arrayOfActions;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &arrayOfActions)) {
      class cocos2d::CCSpawn * res = cocos2d::CCSpawn::create(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, arrayOfActions, &mrb_type_cocos2d_CCArray, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSpawn,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpawn::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpawn_createWithTwoActions(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction1;
    mrb_value pAction2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pAction1, &pAction2)) {
      class cocos2d::CCSpawn * res = cocos2d::CCSpawn::createWithTwoActions(static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pAction1, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)), static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pAction2, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSpawn,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpawn::createWithTwoActions");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpawn_createWithVariableList(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction1;
    mrb_value args;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pAction1, &args)) {
      class cocos2d::CCSpawn * res = cocos2d::CCSpawn::createWithVariableList(static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pAction1, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)), static_cast< __va_list_tag * >(DATA_PTR(args)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSpawn,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpawn::createWithVariableList");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpawn_initWithTwoActions(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction1;
    mrb_value pAction2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pAction1, &pAction2)) {
      cocos2d::CCSpawn *obj_self = static_cast< cocos2d::CCSpawn * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTwoActions(static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pAction1, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)), static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pAction2, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpawn#initWithTwoActions");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpawn_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpawn *obj_self = static_cast< cocos2d::CCSpawn * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpawn#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpawn_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCSpawn *obj_self = static_cast< cocos2d::CCSpawn * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpawn#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpawn_stop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpawn *obj_self = static_cast< cocos2d::CCSpawn * >(DATA_PTR(mrb_self));
      obj_self->stop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpawn#stop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpawn_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCSpawn *obj_self = static_cast< cocos2d::CCSpawn * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpawn#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpawn_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSpawn;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCSpawn * res = new cocos2d::CCSpawn();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpawn#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpeed_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSpeed;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCSpeed * res = new cocos2d::CCSpeed();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpeed#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpeed_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpeed *obj_self = static_cast< cocos2d::CCSpeed * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpeed#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpeed_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCSpeed *obj_self = static_cast< cocos2d::CCSpeed * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpeed#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpeed_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float fSpeed;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &fSpeed)) {
      class cocos2d::CCSpeed * res = cocos2d::CCSpeed::create(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)), fSpeed);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSpeed,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpeed::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpeed_getInnerAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpeed *obj_self = static_cast< cocos2d::CCSpeed * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->getInnerAction();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpeed#getInnerAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpeed_getSpeed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpeed *obj_self = static_cast< cocos2d::CCSpeed * >(DATA_PTR(mrb_self));
      float res = obj_self->getSpeed();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpeed#getSpeed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpeed_initWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    mrb_float fSpeed;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &pAction, &fSpeed)) {
      cocos2d::CCSpeed *obj_self = static_cast< cocos2d::CCSpeed * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithAction(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)), fSpeed);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpeed#initWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpeed_isDone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpeed *obj_self = static_cast< cocos2d::CCSpeed * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isDone();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpeed#isDone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpeed_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpeed *obj_self = static_cast< cocos2d::CCSpeed * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpeed#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpeed_setInnerAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pAction;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pAction)) {
      cocos2d::CCSpeed *obj_self = static_cast< cocos2d::CCSpeed * >(DATA_PTR(mrb_self));
      obj_self->setInnerAction(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCActionInterval, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpeed#setInnerAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpeed_setSpeed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fSpeed;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fSpeed)) {
      cocos2d::CCSpeed *obj_self = static_cast< cocos2d::CCSpeed * >(DATA_PTR(mrb_self));
      obj_self->setSpeed(fSpeed);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpeed#setSpeed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpeed_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCSpeed *obj_self = static_cast< cocos2d::CCSpeed * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpeed#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpeed_step(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::CCSpeed *obj_self = static_cast< cocos2d::CCSpeed * >(DATA_PTR(mrb_self));
      obj_self->step(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpeed#step");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpeed_stop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpeed *obj_self = static_cast< cocos2d::CCSpeed * >(DATA_PTR(mrb_self));
      obj_self->stop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpeed#stop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSplitCols_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCSplitCols *obj_self = static_cast< cocos2d::CCSplitCols * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSplitCols#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSplitCols_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_int nCols;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fi", &duration, &nCols)) {
      class cocos2d::CCSplitCols * res = cocos2d::CCSplitCols::create(duration, nCols);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSplitCols,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSplitCols::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSplitCols_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_int nCols;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fi", &duration, &nCols)) {
      cocos2d::CCSplitCols *obj_self = static_cast< cocos2d::CCSplitCols * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, nCols);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSplitCols#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSplitCols_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCSplitCols *obj_self = static_cast< cocos2d::CCSplitCols * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSplitCols#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSplitCols_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCSplitCols *obj_self = static_cast< cocos2d::CCSplitCols * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSplitCols#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSplitCols_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSplitCols;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCSplitCols * res = new cocos2d::CCSplitCols();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSplitCols#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSplitRows_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCSplitRows *obj_self = static_cast< cocos2d::CCSplitRows * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSplitRows#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSplitRows_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_int nRows;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fi", &duration, &nRows)) {
      class cocos2d::CCSplitRows * res = cocos2d::CCSplitRows::create(duration, nRows);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSplitRows,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSplitRows::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSplitRows_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_int nRows;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fi", &duration, &nRows)) {
      cocos2d::CCSplitRows *obj_self = static_cast< cocos2d::CCSplitRows * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, nRows);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSplitRows#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSplitRows_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCSplitRows *obj_self = static_cast< cocos2d::CCSplitRows * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSplitRows#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSplitRows_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCSplitRows *obj_self = static_cast< cocos2d::CCSplitRows * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSplitRows#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSplitRows_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSplitRows;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCSplitRows * res = new cocos2d::CCSplitRows();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSplitRows#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSprite;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCSprite * res = new cocos2d::CCSprite();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_addChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pChild;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pChild)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pChild, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value pChild;
    mrb_int zOrder;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &pChild, &zOrder)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pChild, &mrb_type_cocos2d_CCNode, NULL)), zOrder);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value pChild;
    mrb_int zOrder;
    mrb_int tag;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oii", &pChild, &zOrder, &tag)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pChild, &mrb_type_cocos2d_CCNode, NULL)), zOrder, tag);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#addChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCSprite * res = cocos2d::CCSprite::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pszFileName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszFileName)) {
      class cocos2d::CCSprite * res = cocos2d::CCSprite::create(RSTRING_PTR(pszFileName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pszFileName;
    mrb_value rect;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &pszFileName, &rect)) {
      class cocos2d::CCSprite * res = cocos2d::CCSprite::create(RSTRING_PTR(pszFileName), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_createWithSpriteFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSpriteFrame;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pSpriteFrame)) {
      class cocos2d::CCSprite * res = cocos2d::CCSprite::createWithSpriteFrame(static_cast< cocos2d::CCSpriteFrame * >(cc_mrb_data_get_ptr(mrb, pSpriteFrame, &mrb_type_cocos2d_CCSpriteFrame, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite::createWithSpriteFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_createWithSpriteFrameName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszSpriteFrameName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszSpriteFrameName)) {
      class cocos2d::CCSprite * res = cocos2d::CCSprite::createWithSpriteFrameName(RSTRING_PTR(pszSpriteFrameName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite::createWithSpriteFrameName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_createWithTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTexture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTexture)) {
      class cocos2d::CCSprite * res = cocos2d::CCSprite::createWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pTexture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pTexture;
    mrb_value rect;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTexture, &rect)) {
      class cocos2d::CCSprite * res = cocos2d::CCSprite::createWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pTexture, &mrb_type_cocos2d_CCTexture2D, NULL)), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite::createWithTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_displayFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      class cocos2d::CCSpriteFrame * res = obj_self->displayFrame();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSpriteFrame,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#displayFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_getAtlasIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getAtlasIndex();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#getAtlasIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_getBatchNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      class cocos2d::CCSpriteBatchNode * res = obj_self->getBatchNode();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSpriteBatchNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#getBatchNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_getBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      ccBlendFunc *res = new ccBlendFunc(); *res = obj_self->getBlendFunc();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccBlendFunc"),
                       &mrb_type_cocos2d__ccBlendFunc,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#getBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_getOffsetPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getOffsetPosition();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#getOffsetPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_getQuad(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      ccV3F_C4B_T2F_Quad *res = new ccV3F_C4B_T2F_Quad(); *res = obj_self->getQuad();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV3F_C4B_T2F_Quad"),
                       &mrb_type_cocos2d__ccV3F_C4B_T2F_Quad,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#getQuad");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_getTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      class cocos2d::CCTexture2D * res = obj_self->getTexture();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTexture2D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#getTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_getTextureAtlas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      class cocos2d::CCTextureAtlas * res = obj_self->getTextureAtlas();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTextureAtlas,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#getTextureAtlas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_getTextureRect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      class cocos2d::CCRect *res = new class cocos2d::CCRect(); *res = obj_self->getTextureRect();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       const_cast< cocos2d::CCRect * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#getTextureRect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_ignoreAnchorPointForPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &value)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->ignoreAnchorPointForPosition(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#ignoreAnchorPointForPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_initWithFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszFilename;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszFilename)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFile(RSTRING_PTR(pszFilename));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value pszFilename;
    mrb_value rect;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &pszFilename, &rect)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFile(RSTRING_PTR(pszFilename), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#initWithFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_initWithSpriteFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pSpriteFrame;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pSpriteFrame)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSpriteFrame(static_cast< cocos2d::CCSpriteFrame * >(cc_mrb_data_get_ptr(mrb, pSpriteFrame, &mrb_type_cocos2d_CCSpriteFrame, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#initWithSpriteFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_initWithSpriteFrameName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszSpriteFrameName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszSpriteFrameName)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithSpriteFrameName(RSTRING_PTR(pszSpriteFrameName));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#initWithSpriteFrameName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_initWithTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTexture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTexture)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pTexture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value pTexture;
    mrb_value rect;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTexture, &rect)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pTexture, &mrb_type_cocos2d_CCTexture2D, NULL)), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value pTexture;
    mrb_value rect;
    mrb_bool rotated;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oob", &pTexture, &rect, &rotated)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pTexture, &mrb_type_cocos2d_CCTexture2D, NULL)), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))), rotated);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#initWithTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_isDirty(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isDirty();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#isDirty");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_isFlipX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isFlipX();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#isFlipX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_isFlipY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isFlipY();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#isFlipY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_isFrameDisplayed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pFrame;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pFrame)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isFrameDisplayed(static_cast< cocos2d::CCSpriteFrame * >(cc_mrb_data_get_ptr(mrb, pFrame, &mrb_type_cocos2d_CCSpriteFrame, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#isFrameDisplayed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_isOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isOpacityModifyRGB();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#isOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_isTextureRectRotated(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isTextureRectRotated();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#isTextureRectRotated");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_removeAllChildrenWithCleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bCleanup;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bCleanup)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->removeAllChildrenWithCleanup(bCleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#removeAllChildrenWithCleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_removeChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pChild;
    mrb_bool bCleanup;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ob", &pChild, &bCleanup)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->removeChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pChild, &mrb_type_cocos2d_CCNode, NULL)), bCleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#removeChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_reorderChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pChild;
    mrb_int zOrder;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &pChild, &zOrder)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->reorderChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pChild, &mrb_type_cocos2d_CCNode, NULL)), zOrder);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#reorderChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setAnchorPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value anchor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &anchor)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setAnchorPoint(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, anchor, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setAnchorPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setAtlasIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int uAtlasIndex;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &uAtlasIndex)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setAtlasIndex(uAtlasIndex);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setAtlasIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setBatchNode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pobSpriteBatchNode;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pobSpriteBatchNode)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setBatchNode(static_cast< cocos2d::CCSpriteBatchNode * >(cc_mrb_data_get_ptr(mrb, pobSpriteBatchNode, &mrb_type_cocos2d_CCSpriteBatchNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setBatchNode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value blendFunc;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &blendFunc)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setBlendFunc(*(static_cast< ccBlendFunc * >(cc_mrb_data_get_ptr(mrb, blendFunc, &mrb_type_cocos2d__ccBlendFunc, &mrb_no_free_type_cocos2d__ccBlendFunc))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value color3;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &color3)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, color3, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setDirty(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bDirty;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bDirty)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setDirty(bDirty);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setDirty");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setDisplayFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pNewFrame;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pNewFrame)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setDisplayFrame(static_cast< cocos2d::CCSpriteFrame * >(cc_mrb_data_get_ptr(mrb, pNewFrame, &mrb_type_cocos2d_CCSpriteFrame, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setDisplayFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setDisplayFrameWithAnimationName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value animationName;
    mrb_int frameIndex;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &animationName, &frameIndex)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setDisplayFrameWithAnimationName(RSTRING_PTR(animationName), frameIndex);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setDisplayFrameWithAnimationName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setFlipX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bFlipX;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bFlipX)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setFlipX(bFlipX);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setFlipX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setFlipY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bFlipY;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bFlipY)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setFlipY(bFlipY);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setFlipY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int opacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &opacity)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setOpacity(opacity);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setOpacityModifyRGB(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool modify;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &modify)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setOpacityModifyRGB(modify);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setOpacityModifyRGB");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pos)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setPosition(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setRotation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fRotation;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fRotation)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setRotation(fRotation);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setRotation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setRotationX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fRotationX;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fRotationX)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setRotationX(fRotationX);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setRotationX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setRotationY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fRotationY;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fRotationY)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setRotationY(fRotationY);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setRotationY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setScale(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fScale;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fScale)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setScale(fScale);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setScale");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setScaleX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fScaleX;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fScaleX)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setScaleX(fScaleX);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setScaleX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setScaleY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fScaleY;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fScaleY)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setScaleY(fScaleY);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setScaleY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setSkewX(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float sx;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &sx)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setSkewX(sx);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setSkewX");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setSkewY(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float sy;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &sy)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setSkewY(sy);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setSkewY");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value texture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &texture)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setTextureAtlas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pobTextureAtlas;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pobTextureAtlas)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setTextureAtlas(static_cast< cocos2d::CCTextureAtlas * >(cc_mrb_data_get_ptr(mrb, pobTextureAtlas, &mrb_type_cocos2d_CCTextureAtlas, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setTextureAtlas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setTextureRect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value rect;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &rect)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setTextureRect(*(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value rect;
    mrb_bool rotated;
    mrb_value untrimmedSize;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "obo", &rect, &rotated, &untrimmedSize)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setTextureRect(*(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))), rotated, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, untrimmedSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setTextureRect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setVertexRect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value rect;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &rect)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setVertexRect(*(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setVertexRect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setVertexZ(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fVertexZ;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fVertexZ)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setVertexZ(fVertexZ);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setVertexZ");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_setVisible(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bVisible;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bVisible)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->setVisible(bVisible);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#setVisible");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_sortAllChildren(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->sortAllChildren();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#sortAllChildren");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_updateDisplayedColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value parentColor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &parentColor)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->updateDisplayedColor(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, parentColor, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#updateDisplayedColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_updateDisplayedOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int parentOpacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &parentOpacity)) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->updateDisplayedOpacity(parentOpacity);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#updateDisplayedOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSprite_updateTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSprite *obj_self = static_cast< cocos2d::CCSprite * >(DATA_PTR(mrb_self));
      obj_self->updateTransform();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSprite#updateTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSpriteBatchNode;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCSpriteBatchNode * res = new cocos2d::CCSpriteBatchNode();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_addChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &child)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value child;
    mrb_int zOrder;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &child, &zOrder)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), zOrder);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value child;
    mrb_int zOrder;
    mrb_int tag;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oii", &child, &zOrder, &tag)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), zOrder, tag);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#addChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_appendChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sprite;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sprite)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->appendChild(static_cast< cocos2d::CCSprite * >(cc_mrb_data_get_ptr(mrb, sprite, &mrb_type_cocos2d_CCSprite, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#appendChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_atlasIndexForChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sprite;
    mrb_int z;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &sprite, &z)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->atlasIndexForChild(static_cast< cocos2d::CCSprite * >(cc_mrb_data_get_ptr(mrb, sprite, &mrb_type_cocos2d_CCSprite, NULL)), z);
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#atlasIndexForChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value fileImage;
    mrb_int capacity;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &fileImage, &capacity)) {
      class cocos2d::CCSpriteBatchNode * res = cocos2d::CCSpriteBatchNode::create(RSTRING_PTR(fileImage), capacity);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSpriteBatchNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value fileImage;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &fileImage)) {
      class cocos2d::CCSpriteBatchNode * res = cocos2d::CCSpriteBatchNode::create(RSTRING_PTR(fileImage));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSpriteBatchNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_createWithTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tex;
    mrb_int capacity;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &tex, &capacity)) {
      class cocos2d::CCSpriteBatchNode * res = cocos2d::CCSpriteBatchNode::createWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, tex, &mrb_type_cocos2d_CCTexture2D, NULL)), capacity);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSpriteBatchNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value tex;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &tex)) {
      class cocos2d::CCSpriteBatchNode * res = cocos2d::CCSpriteBatchNode::createWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, tex, &mrb_type_cocos2d_CCTexture2D, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSpriteBatchNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode::createWithTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_getBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      ccBlendFunc *res = new ccBlendFunc(); *res = obj_self->getBlendFunc();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccBlendFunc"),
                       &mrb_type_cocos2d__ccBlendFunc,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#getBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_getDescendants(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getDescendants();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#getDescendants");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_getTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCTexture2D * res = obj_self->getTexture();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTexture2D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#getTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_getTextureAtlas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      class cocos2d::CCTextureAtlas * res = obj_self->getTextureAtlas();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTextureAtlas,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#getTextureAtlas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_highestAtlasIndexInChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sprite;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sprite)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->highestAtlasIndexInChild(static_cast< cocos2d::CCSprite * >(cc_mrb_data_get_ptr(mrb, sprite, &mrb_type_cocos2d_CCSprite, NULL)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#highestAtlasIndexInChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_increaseAtlasCapacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->increaseAtlasCapacity();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#increaseAtlasCapacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_initWithFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value fileImage;
    mrb_int capacity;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &fileImage, &capacity)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFile(RSTRING_PTR(fileImage), capacity);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#initWithFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_initWithTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tex;
    mrb_int capacity;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &tex, &capacity)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, tex, &mrb_type_cocos2d_CCTexture2D, NULL)), capacity);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#initWithTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_insertChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    mrb_int index;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &child, &index)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->insertChild(static_cast< cocos2d::CCSprite * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCSprite, NULL)), index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#insertChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_lowestAtlasIndexInChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sprite;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sprite)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->lowestAtlasIndexInChild(static_cast< cocos2d::CCSprite * >(cc_mrb_data_get_ptr(mrb, sprite, &mrb_type_cocos2d_CCSprite, NULL)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#lowestAtlasIndexInChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_rebuildIndexInOrder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value parent;
    mrb_int index;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &parent, &index)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->rebuildIndexInOrder(static_cast< cocos2d::CCSprite * >(cc_mrb_data_get_ptr(mrb, parent, &mrb_type_cocos2d_CCSprite, NULL)), index);
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#rebuildIndexInOrder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_removeAllChildrenWithCleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool cleanup;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &cleanup)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->removeAllChildrenWithCleanup(cleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#removeAllChildrenWithCleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_removeChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    mrb_bool cleanup;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ob", &child, &cleanup)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->removeChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), cleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#removeChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_removeChildAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    mrb_bool doCleanup;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ib", &index, &doCleanup)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->removeChildAtIndex(index, doCleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#removeChildAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_removeSpriteFromAtlas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sprite;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sprite)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->removeSpriteFromAtlas(static_cast< cocos2d::CCSprite * >(cc_mrb_data_get_ptr(mrb, sprite, &mrb_type_cocos2d_CCSprite, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#removeSpriteFromAtlas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_reorderBatch(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool reorder;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &reorder)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->reorderBatch(reorder);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#reorderBatch");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_reorderChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    mrb_int zOrder;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &child, &zOrder)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->reorderChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), zOrder);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#reorderChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_setBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value blendFunc;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &blendFunc)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->setBlendFunc(*(static_cast< ccBlendFunc * >(cc_mrb_data_get_ptr(mrb, blendFunc, &mrb_type_cocos2d__ccBlendFunc, &mrb_no_free_type_cocos2d__ccBlendFunc))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#setBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_setTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value texture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &texture)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->setTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#setTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_setTextureAtlas(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value textureAtlas;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &textureAtlas)) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->setTextureAtlas(static_cast< cocos2d::CCTextureAtlas * >(cc_mrb_data_get_ptr(mrb, textureAtlas, &mrb_type_cocos2d_CCTextureAtlas, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#setTextureAtlas");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_sortAllChildren(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->sortAllChildren();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#sortAllChildren");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteBatchNode_visit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteBatchNode *obj_self = static_cast< cocos2d::CCSpriteBatchNode * >(DATA_PTR(mrb_self));
      obj_self->visit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteBatchNode#visit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value filename;
    mrb_value rect;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &filename, &rect)) {
      class cocos2d::CCSpriteFrame * res = cocos2d::CCSpriteFrame::create(RSTRING_PTR(filename), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSpriteFrame,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value filename;
    mrb_value rect;
    mrb_bool rotated;
    mrb_value offset;
    mrb_value originalSize;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "Soboo", &filename, &rect, &rotated, &offset, &originalSize)) {
      class cocos2d::CCSpriteFrame * res = cocos2d::CCSpriteFrame::create(RSTRING_PTR(filename), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))), rotated, *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, offset, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, originalSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSpriteFrame,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_createWithTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pobTexture;
    mrb_value rect;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pobTexture, &rect)) {
      class cocos2d::CCSpriteFrame * res = cocos2d::CCSpriteFrame::createWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pobTexture, &mrb_type_cocos2d_CCTexture2D, NULL)), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSpriteFrame,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pobTexture;
    mrb_value rect;
    mrb_bool rotated;
    mrb_value offset;
    mrb_value originalSize;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "ooboo", &pobTexture, &rect, &rotated, &offset, &originalSize)) {
      class cocos2d::CCSpriteFrame * res = cocos2d::CCSpriteFrame::createWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pobTexture, &mrb_type_cocos2d_CCTexture2D, NULL)), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))), rotated, *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, offset, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, originalSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCSpriteFrame,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame::createWithTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_getOffset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getOffset();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#getOffset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_getOffsetInPixels(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getOffsetInPixels();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#getOffsetInPixels");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_getOriginalSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getOriginalSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       const_cast< cocos2d::CCSize * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#getOriginalSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_getOriginalSizeInPixels(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getOriginalSizeInPixels();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       const_cast< cocos2d::CCSize * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#getOriginalSizeInPixels");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_getRect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      class cocos2d::CCRect *res = new class cocos2d::CCRect(); *res = obj_self->getRect();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       const_cast< cocos2d::CCRect * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#getRect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_getRectInPixels(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      class cocos2d::CCRect *res = new class cocos2d::CCRect(); *res = obj_self->getRectInPixels();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       const_cast< cocos2d::CCRect * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#getRectInPixels");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_getTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      class cocos2d::CCTexture2D * res = obj_self->getTexture();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTexture2D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#getTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_initWithTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pobTexture;
    mrb_value rect;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pobTexture, &rect)) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pobTexture, &mrb_type_cocos2d_CCTexture2D, NULL)), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value pobTexture;
    mrb_value rect;
    mrb_bool rotated;
    mrb_value offset;
    mrb_value originalSize;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "ooboo", &pobTexture, &rect, &rotated, &offset, &originalSize)) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pobTexture, &mrb_type_cocos2d_CCTexture2D, NULL)), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))), rotated, *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, offset, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, originalSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#initWithTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_initWithTextureFilename(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value filename;
    mrb_value rect;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &filename, &rect)) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTextureFilename(RSTRING_PTR(filename), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value filename;
    mrb_value rect;
    mrb_bool rotated;
    mrb_value offset;
    mrb_value originalSize;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "Soboo", &filename, &rect, &rotated, &offset, &originalSize)) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTextureFilename(RSTRING_PTR(filename), *(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))), rotated, *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, offset, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, originalSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#initWithTextureFilename");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_isRotated(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isRotated();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#isRotated");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_setOffset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value offsets;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &offsets)) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      obj_self->setOffset(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, offsets, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#setOffset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_setOffsetInPixels(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value offsetInPixels;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &offsetInPixels)) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      obj_self->setOffsetInPixels(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, offsetInPixels, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#setOffsetInPixels");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_setOriginalSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sizeInPixels;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sizeInPixels)) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      obj_self->setOriginalSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, sizeInPixels, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#setOriginalSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_setOriginalSizeInPixels(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sizeInPixels;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sizeInPixels)) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      obj_self->setOriginalSizeInPixels(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, sizeInPixels, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#setOriginalSizeInPixels");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_setRect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value rect;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &rect)) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      obj_self->setRect(*(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#setRect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_setRectInPixels(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value rectInPixels;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &rectInPixels)) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      obj_self->setRectInPixels(*(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rectInPixels, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#setRectInPixels");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_setRotated(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bRotated;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bRotated)) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      obj_self->setRotated(bRotated);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#setRotated");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_setTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pobTexture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pobTexture)) {
      cocos2d::CCSpriteFrame *obj_self = static_cast< cocos2d::CCSpriteFrame * >(DATA_PTR(mrb_self));
      obj_self->setTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pobTexture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#setTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrame_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCSpriteFrame;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCSpriteFrame * res = new cocos2d::CCSpriteFrame();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrame#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrameCache_addSpriteFrame(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pobFrame;
    mrb_value pszFrameName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &pobFrame, &pszFrameName)) {
      cocos2d::CCSpriteFrameCache *obj_self = static_cast< cocos2d::CCSpriteFrameCache * >(DATA_PTR(mrb_self));
      obj_self->addSpriteFrame(static_cast< cocos2d::CCSpriteFrame * >(cc_mrb_data_get_ptr(mrb, pobFrame, &mrb_type_cocos2d_CCSpriteFrame, NULL)), RSTRING_PTR(pszFrameName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrameCache#addSpriteFrame");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrameCache_addSpriteFramesWithFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszPlist;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszPlist)) {
      cocos2d::CCSpriteFrameCache *obj_self = static_cast< cocos2d::CCSpriteFrameCache * >(DATA_PTR(mrb_self));
      obj_self->addSpriteFramesWithFile(RSTRING_PTR(pszPlist));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value plist;
    mrb_value textureFileName;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &plist, &textureFileName)) {
      cocos2d::CCSpriteFrameCache *obj_self = static_cast< cocos2d::CCSpriteFrameCache * >(DATA_PTR(mrb_self));
      obj_self->addSpriteFramesWithFile(RSTRING_PTR(plist), RSTRING_PTR(textureFileName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value pszPlist;
    mrb_value pobTexture;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &pszPlist, &pobTexture)) {
      cocos2d::CCSpriteFrameCache *obj_self = static_cast< cocos2d::CCSpriteFrameCache * >(DATA_PTR(mrb_self));
      obj_self->addSpriteFramesWithFile(RSTRING_PTR(pszPlist), static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pobTexture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrameCache#addSpriteFramesWithFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrameCache_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteFrameCache *obj_self = static_cast< cocos2d::CCSpriteFrameCache * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrameCache#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrameCache_purgeSharedSpriteFrameCache(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteFrameCache::purgeSharedSpriteFrameCache();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrameCache::purgeSharedSpriteFrameCache");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrameCache_removeSpriteFrameByName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszName)) {
      cocos2d::CCSpriteFrameCache *obj_self = static_cast< cocos2d::CCSpriteFrameCache * >(DATA_PTR(mrb_self));
      obj_self->removeSpriteFrameByName(RSTRING_PTR(pszName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrameCache#removeSpriteFrameByName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrameCache_removeSpriteFrames(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteFrameCache *obj_self = static_cast< cocos2d::CCSpriteFrameCache * >(DATA_PTR(mrb_self));
      obj_self->removeSpriteFrames();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrameCache#removeSpriteFrames");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrameCache_removeSpriteFramesFromFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value plist;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &plist)) {
      cocos2d::CCSpriteFrameCache *obj_self = static_cast< cocos2d::CCSpriteFrameCache * >(DATA_PTR(mrb_self));
      obj_self->removeSpriteFramesFromFile(RSTRING_PTR(plist));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrameCache#removeSpriteFramesFromFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrameCache_removeSpriteFramesFromTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value texture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &texture)) {
      cocos2d::CCSpriteFrameCache *obj_self = static_cast< cocos2d::CCSpriteFrameCache * >(DATA_PTR(mrb_self));
      obj_self->removeSpriteFramesFromTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrameCache#removeSpriteFramesFromTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrameCache_removeUnusedSpriteFrames(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCSpriteFrameCache *obj_self = static_cast< cocos2d::CCSpriteFrameCache * >(DATA_PTR(mrb_self));
      obj_self->removeUnusedSpriteFrames();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrameCache#removeUnusedSpriteFrames");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrameCache_sharedSpriteFrameCache(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCSpriteFrameCache * res = cocos2d::CCSpriteFrameCache::sharedSpriteFrameCache();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSpriteFrameCache,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrameCache::sharedSpriteFrameCache");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCSpriteFrameCache_spriteFrameByName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszName)) {
      cocos2d::CCSpriteFrameCache *obj_self = static_cast< cocos2d::CCSpriteFrameCache * >(DATA_PTR(mrb_self));
      class cocos2d::CCSpriteFrame * res = obj_self->spriteFrameByName(RSTRING_PTR(pszName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSpriteFrame,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCSpriteFrameCache#spriteFrameByName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCStandardTouchDelegate_ccTouchesBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::CCStandardTouchDelegate *obj_self = static_cast< cocos2d::CCStandardTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesBegan(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, pTouches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCStandardTouchDelegate#ccTouchesBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCStandardTouchDelegate_ccTouchesCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::CCStandardTouchDelegate *obj_self = static_cast< cocos2d::CCStandardTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesCancelled(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, pTouches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCStandardTouchDelegate#ccTouchesCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCStandardTouchDelegate_ccTouchesEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::CCStandardTouchDelegate *obj_self = static_cast< cocos2d::CCStandardTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesEnded(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, pTouches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCStandardTouchDelegate#ccTouchesEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCStandardTouchDelegate_ccTouchesMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::CCStandardTouchDelegate *obj_self = static_cast< cocos2d::CCStandardTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesMoved(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, pTouches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCStandardTouchDelegate#ccTouchesMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCStandardTouchHandler_handlerWithDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    mrb_int nPriority;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &pDelegate, &nPriority)) {
      class cocos2d::CCStandardTouchHandler * res = cocos2d::CCStandardTouchHandler::handlerWithDelegate(static_cast< cocos2d::CCTouchDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCTouchDelegate, NULL)), nPriority);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCStandardTouchHandler,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCStandardTouchHandler::handlerWithDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCStandardTouchHandler_initWithDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    mrb_int nPriority;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &pDelegate, &nPriority)) {
      cocos2d::CCStandardTouchHandler *obj_self = static_cast< cocos2d::CCStandardTouchHandler * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDelegate(static_cast< cocos2d::CCTouchDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCTouchDelegate, NULL)), nPriority);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCStandardTouchHandler#initWithDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCStandardTouchHandler_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCStandardTouchHandler;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCStandardTouchHandler * res = new cocos2d::CCStandardTouchHandler();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCStandardTouchHandler#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCStopGrid_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCStopGrid * res = cocos2d::CCStopGrid::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCStopGrid,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCStopGrid::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCStopGrid_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCStopGrid *obj_self = static_cast< cocos2d::CCStopGrid * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCStopGrid#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCStopGrid_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCStopGrid;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCStopGrid * res = new cocos2d::CCStopGrid();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCStopGrid#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCString;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCString * res = new cocos2d::CCString();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  {
    mrb_value str;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCString;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &str)) {
      cocos2d::CCString * res = new cocos2d::CCString(RSTRING_PTR(str));
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  {
    mrb_value str;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCString;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &str)) {
      cocos2d::CCString * res = new cocos2d::CCString(RSTRING_PTR(str));
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  {
    mrb_value str;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCString;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &str)) {
      cocos2d::CCString * res = new cocos2d::CCString(*(static_cast< const class cocos2d::CCString * >(cc_mrb_data_get_ptr(mrb, str, &mrb_type_cocos2d_CCString, NULL))));
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_acceptVisitor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value visitor;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &visitor)) {
      cocos2d::CCString *obj_self = static_cast< cocos2d::CCString * >(DATA_PTR(mrb_self));
      obj_self->acceptVisitor(*(static_cast< cocos2d::CCDataVisitor * >(DATA_PTR(visitor))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString#acceptVisitor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_boolValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCString *obj_self = static_cast< cocos2d::CCString * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->boolValue();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString#boolValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_compare(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arg1;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &arg1)) {
      cocos2d::CCString *obj_self = static_cast< cocos2d::CCString * >(DATA_PTR(mrb_self));
      int res = obj_self->compare(RSTRING_PTR(arg1));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString#compare");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCString *obj_self = static_cast< cocos2d::CCString * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value str;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &str)) {
      class cocos2d::CCString * res = cocos2d::CCString::create(RSTRING_PTR(str));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCString,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_createWithContentsOfFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pszFileName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pszFileName)) {
      class cocos2d::CCString * res = cocos2d::CCString::createWithContentsOfFile(RSTRING_PTR(pszFileName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCString,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString::createWithContentsOfFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_createWithData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pData;
    mrb_int nLen;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Ai", &pData, &nLen)) {
      unsigned char cxx_pData[1]; cc_mrb_ary_conv_to_c_array(mrb, pData, reinterpret_cast< unsigned char * >(cxx_pData), 1);
      class cocos2d::CCString * res = cocos2d::CCString::createWithData(cxx_pData, nLen);
      cc_mrb_ary_conv_from_c_array(mrb, pData, reinterpret_cast< unsigned char * >(cxx_pData), 1);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCString,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString::createWithData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_createWithFormat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value format;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &format)) {
      class cocos2d::CCString * res = cocos2d::CCString::createWithFormat(RSTRING_PTR(format));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCString,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString::createWithFormat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_doubleValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCString *obj_self = static_cast< cocos2d::CCString * >(DATA_PTR(mrb_self));
      double res = obj_self->doubleValue();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString#doubleValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_floatValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCString *obj_self = static_cast< cocos2d::CCString * >(DATA_PTR(mrb_self));
      float res = obj_self->floatValue();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString#floatValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_getCString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCString *obj_self = static_cast< cocos2d::CCString * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getCString();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString#getCString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_initWithFormat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value format;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &format)) {
      cocos2d::CCString *obj_self = static_cast< cocos2d::CCString * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFormat(RSTRING_PTR(format));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString#initWithFormat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_intValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCString *obj_self = static_cast< cocos2d::CCString * >(DATA_PTR(mrb_self));
      int res = obj_self->intValue();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString#intValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_isEqual(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObject;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObject)) {
      cocos2d::CCString *obj_self = static_cast< cocos2d::CCString * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isEqual(static_cast< const class cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString#isEqual");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_length(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCString *obj_self = static_cast< cocos2d::CCString * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->length();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString#length");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString__get_m_sString(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCString *obj_self = static_cast< cocos2d::CCString * >(DATA_PTR(mrb_self));
  std::string res = obj_self->m_sString;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_CCString__set_m_sString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_sString;
  if (1 == mrb_get_args(mrb, "S", &m_sString)) {
    cocos2d::CCString *obj_self = static_cast< cocos2d::CCString * >(DATA_PTR(mrb_self));
    
    obj_self->m_sString = RSTRING_PTR(m_sString);
    return m_sString;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString#m_sString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_assign(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value other;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &other)) {
      cocos2d::CCString *obj_self = static_cast< cocos2d::CCString * >(DATA_PTR(mrb_self));
      class cocos2d::CCString *res = new class cocos2d::CCString(); *res = obj_self->operator=(*(static_cast< const class cocos2d::CCString * >(cc_mrb_data_get_ptr(mrb, other, &mrb_type_cocos2d_CCString, NULL))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCString,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString#operator=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCString_uintValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCString *obj_self = static_cast< cocos2d::CCString * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->uintValue();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCString#uintValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCStringCompare_round_brackets(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value a;
    mrb_value b;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &a, &b)) {
      cocos2d::CCStringCompare *obj_self = static_cast< cocos2d::CCStringCompare * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->operator()(static_cast< cocos2d::CCString * >(cc_mrb_data_get_ptr(mrb, a, &mrb_type_cocos2d_CCString, NULL)), static_cast< cocos2d::CCString * >(cc_mrb_data_get_ptr(mrb, b, &mrb_type_cocos2d_CCString, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCStringCompare#operator()");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCStringCompare_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCStringCompare;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCStringCompare * res = new cocos2d::CCStringCompare();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCStringCompare#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTMXLayer;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTMXLayer * res = new cocos2d::CCTMXLayer();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_addChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    mrb_int zOrder;
    mrb_int tag;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oii", &child, &zOrder, &tag)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      obj_self->addChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), zOrder, tag);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#addChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tilesetInfo;
    mrb_value layerInfo;
    mrb_value mapInfo;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &tilesetInfo, &layerInfo, &mapInfo)) {
      class cocos2d::CCTMXLayer * res = cocos2d::CCTMXLayer::create(static_cast< cocos2d::CCTMXTilesetInfo * >(cc_mrb_data_get_ptr(mrb, tilesetInfo, &mrb_type_cocos2d_CCTMXTilesetInfo, NULL)), static_cast< cocos2d::CCTMXLayerInfo * >(cc_mrb_data_get_ptr(mrb, layerInfo, &mrb_type_cocos2d_CCTMXLayerInfo, NULL)), static_cast< cocos2d::CCTMXMapInfo * >(cc_mrb_data_get_ptr(mrb, mapInfo, &mrb_type_cocos2d_CCTMXMapInfo, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTMXLayer,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_getLayerName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getLayerName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#getLayerName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_getLayerOrientation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getLayerOrientation();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#getLayerOrientation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_getLayerSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getLayerSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       const_cast< cocos2d::CCSize * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#getLayerSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_getMapTileSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getMapTileSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       const_cast< cocos2d::CCSize * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#getMapTileSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_getProperties(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getProperties();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#getProperties");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_getTileSet(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      class cocos2d::CCTMXTilesetInfo * res = obj_self->getTileSet();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTMXTilesetInfo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#getTileSet");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_getTiles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      unsigned int *res = obj_self->getTiles();
      mrb_value mrb_res = cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 1), reinterpret_cast< unsigned int * >(res), 1);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#getTiles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_initWithTilesetInfo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tilesetInfo;
    mrb_value layerInfo;
    mrb_value mapInfo;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &tilesetInfo, &layerInfo, &mapInfo)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTilesetInfo(static_cast< cocos2d::CCTMXTilesetInfo * >(cc_mrb_data_get_ptr(mrb, tilesetInfo, &mrb_type_cocos2d_CCTMXTilesetInfo, NULL)), static_cast< cocos2d::CCTMXLayerInfo * >(cc_mrb_data_get_ptr(mrb, layerInfo, &mrb_type_cocos2d_CCTMXLayerInfo, NULL)), static_cast< cocos2d::CCTMXMapInfo * >(cc_mrb_data_get_ptr(mrb, mapInfo, &mrb_type_cocos2d_CCTMXMapInfo, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#initWithTilesetInfo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_positionAt(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tileCoordinate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &tileCoordinate)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->positionAt(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, tileCoordinate, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#positionAt");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_propertyNamed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value propertyName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &propertyName)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      class cocos2d::CCString * res = obj_self->propertyNamed(RSTRING_PTR(propertyName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCString,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#propertyNamed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_releaseMap(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      obj_self->releaseMap();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#releaseMap");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_removeChild(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value child;
    mrb_bool cleanup;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ob", &child, &cleanup)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      obj_self->removeChild(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, child, &mrb_type_cocos2d_CCNode, NULL)), cleanup);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#removeChild");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_removeTileAt(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tileCoordinate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &tileCoordinate)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      obj_self->removeTileAt(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, tileCoordinate, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#removeTileAt");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_setLayerName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value layerName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &layerName)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      obj_self->setLayerName(RSTRING_PTR(layerName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#setLayerName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_setLayerOrientation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      obj_self->setLayerOrientation(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#setLayerOrientation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_setLayerSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      obj_self->setLayerSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#setLayerSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_setMapTileSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      obj_self->setMapTileSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#setMapTileSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_setProperties(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      obj_self->setProperties(static_cast< cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCDictionary, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#setProperties");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_setTileGID(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int gid;
    mrb_value tileCoordinate;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "io", &gid, &tileCoordinate)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      obj_self->setTileGID(gid, *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, tileCoordinate, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_int gid;
    mrb_value tileCoordinate;
    mrb_int flags;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ioi", &gid, &tileCoordinate, &flags)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      obj_self->setTileGID(gid, *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, tileCoordinate, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), (ccTMXTileFlags)flags);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#setTileGID");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_setTileSet(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      obj_self->setTileSet(static_cast< cocos2d::CCTMXTilesetInfo * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCTMXTilesetInfo, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#setTileSet");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_setTiles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "A", &var)) {
      unsigned int cxx_var[1]; cc_mrb_ary_conv_to_c_array(mrb, var, reinterpret_cast< unsigned int * >(cxx_var), 1);
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      obj_self->setTiles(cxx_var);
      cc_mrb_ary_conv_from_c_array(mrb, var, reinterpret_cast< unsigned int * >(cxx_var), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#setTiles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_setupTiles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      obj_self->setupTiles();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#setupTiles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_tileAt(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tileCoordinate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &tileCoordinate)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      class cocos2d::CCSprite * res = obj_self->tileAt(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, tileCoordinate, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSprite,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#tileAt");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayer_tileGIDAt(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tileCoordinate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &tileCoordinate)) {
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->tileGIDAt(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, tileCoordinate, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value tileCoordinate;
    mrb_value flags;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oA", &tileCoordinate, &flags)) {
      ccTMXTileFlags cxx_flags[1]; cc_mrb_ary_conv_to_c_array(mrb, flags, reinterpret_cast< int * >(cxx_flags), 1);
      cocos2d::CCTMXLayer *obj_self = static_cast< cocos2d::CCTMXLayer * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->tileGIDAt(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, tileCoordinate, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), cxx_flags);
      cc_mrb_ary_conv_from_c_array(mrb, flags, reinterpret_cast< ccTMXTileFlags * >(cxx_flags), 1);
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayer#tileGIDAt");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTMXLayerInfo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTMXLayerInfo * res = new cocos2d::CCTMXLayerInfo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayerInfo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo_getProperties(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getProperties();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayerInfo#getProperties");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__get_m_bOwnTiles(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bOwnTiles;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__set_m_bOwnTiles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bOwnTiles;
  if (1 == mrb_get_args(mrb, "b", &m_bOwnTiles)) {
    cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
    
    obj_self->m_bOwnTiles = m_bOwnTiles;
    return mrb_bool_value(m_bOwnTiles);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayerInfo#m_bOwnTiles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__get_m_bVisible(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bVisible;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__set_m_bVisible(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bVisible;
  if (1 == mrb_get_args(mrb, "b", &m_bVisible)) {
    cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
    
    obj_self->m_bVisible = m_bVisible;
    return mrb_bool_value(m_bVisible);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayerInfo#m_bVisible");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__get_m_cOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
  unsigned char res = obj_self->m_cOpacity;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__set_m_cOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_cOpacity;
  if (1 == mrb_get_args(mrb, "i", &m_cOpacity)) {
    cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
    
    obj_self->m_cOpacity = m_cOpacity;
    return mrb_fixnum_value(m_cOpacity);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayerInfo#m_cOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__get_m_pTiles(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
  unsigned int *res = obj_self->m_pTiles;
  return cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 1), reinterpret_cast< unsigned int * >(res), 1);
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__set_m_pTiles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pTiles;
  if (1 == mrb_get_args(mrb, "A", &m_pTiles)) {
    cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
    
    cc_mrb_ary_conv_to_c_array(mrb, m_pTiles, reinterpret_cast< unsigned int * >(obj_self->m_pTiles), 1);
    return m_pTiles;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayerInfo#m_pTiles");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__get_m_sName(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
  std::string res = obj_self->m_sName;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__set_m_sName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_sName;
  if (1 == mrb_get_args(mrb, "S", &m_sName)) {
    cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
    
    obj_self->m_sName = RSTRING_PTR(m_sName);
    return m_sName;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayerInfo#m_sName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__get_m_tLayerSize(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
  class cocos2d::CCSize *res = &obj_self->m_tLayerSize;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_no_free_type_cocos2d_CCSize,
                       res));
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__set_m_tLayerSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_tLayerSize;
  if (1 == mrb_get_args(mrb, "o", &m_tLayerSize)) {
    cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
    
    obj_self->m_tLayerSize = *(static_cast< cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, m_tLayerSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize)));
    return m_tLayerSize;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayerInfo#m_tLayerSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__get_m_tOffset(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
  class cocos2d::CCPoint *res = &obj_self->m_tOffset;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_no_free_type_cocos2d_CCPoint,
                       res));
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__set_m_tOffset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_tOffset;
  if (1 == mrb_get_args(mrb, "o", &m_tOffset)) {
    cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
    
    obj_self->m_tOffset = *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, m_tOffset, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint)));
    return m_tOffset;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayerInfo#m_tOffset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__get_m_uMaxGID(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->m_uMaxGID;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__set_m_uMaxGID(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_uMaxGID;
  if (1 == mrb_get_args(mrb, "i", &m_uMaxGID)) {
    cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
    
    obj_self->m_uMaxGID = m_uMaxGID;
    return mrb_fixnum_value(m_uMaxGID);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayerInfo#m_uMaxGID");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__get_m_uMinGID(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->m_uMinGID;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo__set_m_uMinGID(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_uMinGID;
  if (1 == mrb_get_args(mrb, "i", &m_uMinGID)) {
    cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
    
    obj_self->m_uMinGID = m_uMinGID;
    return mrb_fixnum_value(m_uMinGID);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayerInfo#m_uMinGID");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXLayerInfo_setProperties(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXLayerInfo *obj_self = static_cast< cocos2d::CCTMXLayerInfo * >(DATA_PTR(mrb_self));
      obj_self->setProperties(static_cast< cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCDictionary, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXLayerInfo#setProperties");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTMXMapInfo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTMXMapInfo * res = new cocos2d::CCTMXMapInfo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_endElement(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value ctx;
    mrb_value name;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &ctx, &name)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->endElement(static_cast< void * >(DATA_PTR(ctx)), RSTRING_PTR(name));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#endElement");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_formatWithTMXFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tmxFile;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &tmxFile)) {
      class cocos2d::CCTMXMapInfo * res = cocos2d::CCTMXMapInfo::formatWithTMXFile(RSTRING_PTR(tmxFile));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTMXMapInfo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo::formatWithTMXFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_formatWithXML(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tmxString;
    mrb_value resourcePath;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &tmxString, &resourcePath)) {
      class cocos2d::CCTMXMapInfo * res = cocos2d::CCTMXMapInfo::formatWithXML(RSTRING_PTR(tmxString), RSTRING_PTR(resourcePath));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTMXMapInfo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo::formatWithXML");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_getCurrentString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getCurrentString();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#getCurrentString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_getLayerAttribs(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      int res = obj_self->getLayerAttribs();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#getLayerAttribs");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_getLayers(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getLayers();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#getLayers");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_getMapSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getMapSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       const_cast< cocos2d::CCSize * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#getMapSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_getObjectGroups(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getObjectGroups();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#getObjectGroups");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_getOrientation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      int res = obj_self->getOrientation();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#getOrientation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_getParentElement(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      int res = obj_self->getParentElement();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#getParentElement");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_getParentGID(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getParentGID();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#getParentGID");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_getProperties(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getProperties();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#getProperties");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_getStoringCharacters(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getStoringCharacters();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#getStoringCharacters");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_getTMXFileName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getTMXFileName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#getTMXFileName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_getTileProperties(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getTileProperties();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#getTileProperties");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_getTileSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getTileSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       const_cast< cocos2d::CCSize * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#getTileSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_getTilesets(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getTilesets();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#getTilesets");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_initWithTMXFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tmxFile;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &tmxFile)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTMXFile(RSTRING_PTR(tmxFile));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#initWithTMXFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_initWithXML(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tmxString;
    mrb_value resourcePath;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &tmxString, &resourcePath)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithXML(RSTRING_PTR(tmxString), RSTRING_PTR(resourcePath));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#initWithXML");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_parseXMLFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value xmlFilename;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &xmlFilename)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->parseXMLFile(RSTRING_PTR(xmlFilename));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#parseXMLFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_parseXMLString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value xmlString;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &xmlString)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->parseXMLString(RSTRING_PTR(xmlString));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#parseXMLString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_setCurrentString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value currentString;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &currentString)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->setCurrentString(RSTRING_PTR(currentString));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#setCurrentString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_setLayerAttribs(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->setLayerAttribs(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#setLayerAttribs");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_setLayers(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->setLayers(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#setLayers");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_setMapSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->setMapSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#setMapSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_setObjectGroups(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->setObjectGroups(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#setObjectGroups");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_setOrientation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->setOrientation(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#setOrientation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_setParentElement(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->setParentElement(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#setParentElement");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_setParentGID(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->setParentGID(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#setParentGID");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_setProperties(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->setProperties(static_cast< cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCDictionary, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#setProperties");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_setStoringCharacters(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &var)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->setStoringCharacters(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#setStoringCharacters");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_setTMXFileName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value fileName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &fileName)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->setTMXFileName(RSTRING_PTR(fileName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#setTMXFileName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_setTileProperties(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tileProperties;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &tileProperties)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->setTileProperties(static_cast< cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, tileProperties, &mrb_type_cocos2d_CCDictionary, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#setTileProperties");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_setTileSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->setTileSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#setTileSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_setTilesets(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->setTilesets(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#setTilesets");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_startElement(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value ctx;
    mrb_value name;
    mrb_value atts;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oSo", &ctx, &name, &atts)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->startElement(static_cast< void * >(DATA_PTR(ctx)), RSTRING_PTR(name), static_cast< const char ** >(DATA_PTR(atts)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#startElement");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXMapInfo_textHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value ctx;
    mrb_value ch;
    mrb_int len;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oSi", &ctx, &ch, &len)) {
      cocos2d::CCTMXMapInfo *obj_self = static_cast< cocos2d::CCTMXMapInfo * >(DATA_PTR(mrb_self));
      obj_self->textHandler(static_cast< void * >(DATA_PTR(ctx)), RSTRING_PTR(ch), len);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXMapInfo#textHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXObjectGroup_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTMXObjectGroup;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTMXObjectGroup * res = new cocos2d::CCTMXObjectGroup();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXObjectGroup#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXObjectGroup_getGroupName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXObjectGroup *obj_self = static_cast< cocos2d::CCTMXObjectGroup * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getGroupName();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXObjectGroup#getGroupName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXObjectGroup_getObjects(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXObjectGroup *obj_self = static_cast< cocos2d::CCTMXObjectGroup * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getObjects();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXObjectGroup#getObjects");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXObjectGroup_getPositionOffset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXObjectGroup *obj_self = static_cast< cocos2d::CCTMXObjectGroup * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getPositionOffset();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXObjectGroup#getPositionOffset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXObjectGroup_getProperties(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXObjectGroup *obj_self = static_cast< cocos2d::CCTMXObjectGroup * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getProperties();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXObjectGroup#getProperties");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXObjectGroup_objectNamed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value objectName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &objectName)) {
      cocos2d::CCTMXObjectGroup *obj_self = static_cast< cocos2d::CCTMXObjectGroup * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->objectNamed(RSTRING_PTR(objectName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXObjectGroup#objectNamed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXObjectGroup_propertyNamed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value propertyName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &propertyName)) {
      cocos2d::CCTMXObjectGroup *obj_self = static_cast< cocos2d::CCTMXObjectGroup * >(DATA_PTR(mrb_self));
      class cocos2d::CCString * res = obj_self->propertyNamed(RSTRING_PTR(propertyName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCString,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXObjectGroup#propertyNamed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXObjectGroup_setGroupName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value groupName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &groupName)) {
      cocos2d::CCTMXObjectGroup *obj_self = static_cast< cocos2d::CCTMXObjectGroup * >(DATA_PTR(mrb_self));
      obj_self->setGroupName(RSTRING_PTR(groupName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXObjectGroup#setGroupName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXObjectGroup_setObjects(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXObjectGroup *obj_self = static_cast< cocos2d::CCTMXObjectGroup * >(DATA_PTR(mrb_self));
      obj_self->setObjects(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXObjectGroup#setObjects");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXObjectGroup_setPositionOffset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXObjectGroup *obj_self = static_cast< cocos2d::CCTMXObjectGroup * >(DATA_PTR(mrb_self));
      obj_self->setPositionOffset(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXObjectGroup#setPositionOffset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXObjectGroup_setProperties(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXObjectGroup *obj_self = static_cast< cocos2d::CCTMXObjectGroup * >(DATA_PTR(mrb_self));
      obj_self->setProperties(static_cast< cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCDictionary, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXObjectGroup#setProperties");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_CCTMXOrientationHex(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCTMXOrientationHex;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_CCTMXOrientationIso(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCTMXOrientationIso;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_CCTMXOrientationOrtho(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCTMXOrientationOrtho;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTMXTiledMap;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTMXTiledMap * res = new cocos2d::CCTMXTiledMap();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tmxFile;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &tmxFile)) {
      class cocos2d::CCTMXTiledMap * res = cocos2d::CCTMXTiledMap::create(RSTRING_PTR(tmxFile));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTMXTiledMap,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_createWithXML(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tmxString;
    mrb_value resourcePath;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &tmxString, &resourcePath)) {
      class cocos2d::CCTMXTiledMap * res = cocos2d::CCTMXTiledMap::createWithXML(RSTRING_PTR(tmxString), RSTRING_PTR(resourcePath));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTMXTiledMap,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap::createWithXML");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_getMapOrientation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      int res = obj_self->getMapOrientation();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#getMapOrientation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_getMapSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getMapSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       const_cast< cocos2d::CCSize * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#getMapSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_getObjectGroups(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      class cocos2d::CCArray * res = obj_self->getObjectGroups();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCArray,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#getObjectGroups");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_getProperties(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->getProperties();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#getProperties");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_getTileSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getTileSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       const_cast< cocos2d::CCSize * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#getTileSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_initWithTMXFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tmxFile;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &tmxFile)) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTMXFile(RSTRING_PTR(tmxFile));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#initWithTMXFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_initWithXML(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tmxString;
    mrb_value resourcePath;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &tmxString, &resourcePath)) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithXML(RSTRING_PTR(tmxString), RSTRING_PTR(resourcePath));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#initWithXML");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_layerNamed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value layerName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &layerName)) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      class cocos2d::CCTMXLayer * res = obj_self->layerNamed(RSTRING_PTR(layerName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTMXLayer,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#layerNamed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_objectGroupNamed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value groupName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &groupName)) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      class cocos2d::CCTMXObjectGroup * res = obj_self->objectGroupNamed(RSTRING_PTR(groupName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTMXObjectGroup,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#objectGroupNamed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_propertiesForGID(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int GID;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &GID)) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->propertiesForGID(GID);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#propertiesForGID");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_propertyNamed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value propertyName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &propertyName)) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      class cocos2d::CCString * res = obj_self->propertyNamed(RSTRING_PTR(propertyName));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCString,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#propertyNamed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_setMapOrientation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &var)) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      obj_self->setMapOrientation(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#setMapOrientation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_setMapSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      obj_self->setMapSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#setMapSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_setObjectGroups(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      obj_self->setObjectGroups(static_cast< cocos2d::CCArray * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCArray, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#setObjectGroups");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_setProperties(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      obj_self->setProperties(static_cast< cocos2d::CCDictionary * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCDictionary, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#setProperties");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTiledMap_setTileSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTMXTiledMap *obj_self = static_cast< cocos2d::CCTMXTiledMap * >(DATA_PTR(mrb_self));
      obj_self->setTileSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTiledMap#setTileSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTMXTilesetInfo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTMXTilesetInfo * res = new cocos2d::CCTMXTilesetInfo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTilesetInfo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo__get_m_sName(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXTilesetInfo *obj_self = static_cast< cocos2d::CCTMXTilesetInfo * >(DATA_PTR(mrb_self));
  std::string res = obj_self->m_sName;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo__set_m_sName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_sName;
  if (1 == mrb_get_args(mrb, "S", &m_sName)) {
    cocos2d::CCTMXTilesetInfo *obj_self = static_cast< cocos2d::CCTMXTilesetInfo * >(DATA_PTR(mrb_self));
    
    obj_self->m_sName = RSTRING_PTR(m_sName);
    return m_sName;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTilesetInfo#m_sName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo__get_m_sSourceImage(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXTilesetInfo *obj_self = static_cast< cocos2d::CCTMXTilesetInfo * >(DATA_PTR(mrb_self));
  std::string res = obj_self->m_sSourceImage;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo__set_m_sSourceImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_sSourceImage;
  if (1 == mrb_get_args(mrb, "S", &m_sSourceImage)) {
    cocos2d::CCTMXTilesetInfo *obj_self = static_cast< cocos2d::CCTMXTilesetInfo * >(DATA_PTR(mrb_self));
    
    obj_self->m_sSourceImage = RSTRING_PTR(m_sSourceImage);
    return m_sSourceImage;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTilesetInfo#m_sSourceImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo__get_m_tImageSize(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXTilesetInfo *obj_self = static_cast< cocos2d::CCTMXTilesetInfo * >(DATA_PTR(mrb_self));
  class cocos2d::CCSize *res = &obj_self->m_tImageSize;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_no_free_type_cocos2d_CCSize,
                       res));
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo__set_m_tImageSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_tImageSize;
  if (1 == mrb_get_args(mrb, "o", &m_tImageSize)) {
    cocos2d::CCTMXTilesetInfo *obj_self = static_cast< cocos2d::CCTMXTilesetInfo * >(DATA_PTR(mrb_self));
    
    obj_self->m_tImageSize = *(static_cast< cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, m_tImageSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize)));
    return m_tImageSize;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTilesetInfo#m_tImageSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo__get_m_tTileSize(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXTilesetInfo *obj_self = static_cast< cocos2d::CCTMXTilesetInfo * >(DATA_PTR(mrb_self));
  class cocos2d::CCSize *res = &obj_self->m_tTileSize;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_no_free_type_cocos2d_CCSize,
                       res));
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo__set_m_tTileSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_tTileSize;
  if (1 == mrb_get_args(mrb, "o", &m_tTileSize)) {
    cocos2d::CCTMXTilesetInfo *obj_self = static_cast< cocos2d::CCTMXTilesetInfo * >(DATA_PTR(mrb_self));
    
    obj_self->m_tTileSize = *(static_cast< cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, m_tTileSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize)));
    return m_tTileSize;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTilesetInfo#m_tTileSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo__get_m_uFirstGid(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXTilesetInfo *obj_self = static_cast< cocos2d::CCTMXTilesetInfo * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->m_uFirstGid;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo__set_m_uFirstGid(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_uFirstGid;
  if (1 == mrb_get_args(mrb, "i", &m_uFirstGid)) {
    cocos2d::CCTMXTilesetInfo *obj_self = static_cast< cocos2d::CCTMXTilesetInfo * >(DATA_PTR(mrb_self));
    
    obj_self->m_uFirstGid = m_uFirstGid;
    return mrb_fixnum_value(m_uFirstGid);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTilesetInfo#m_uFirstGid");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo__get_m_uMargin(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXTilesetInfo *obj_self = static_cast< cocos2d::CCTMXTilesetInfo * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->m_uMargin;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo__set_m_uMargin(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_uMargin;
  if (1 == mrb_get_args(mrb, "i", &m_uMargin)) {
    cocos2d::CCTMXTilesetInfo *obj_self = static_cast< cocos2d::CCTMXTilesetInfo * >(DATA_PTR(mrb_self));
    
    obj_self->m_uMargin = m_uMargin;
    return mrb_fixnum_value(m_uMargin);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTilesetInfo#m_uMargin");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo__get_m_uSpacing(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTMXTilesetInfo *obj_self = static_cast< cocos2d::CCTMXTilesetInfo * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->m_uSpacing;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo__set_m_uSpacing(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_uSpacing;
  if (1 == mrb_get_args(mrb, "i", &m_uSpacing)) {
    cocos2d::CCTMXTilesetInfo *obj_self = static_cast< cocos2d::CCTMXTilesetInfo * >(DATA_PTR(mrb_self));
    
    obj_self->m_uSpacing = m_uSpacing;
    return mrb_fixnum_value(m_uSpacing);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTilesetInfo#m_uSpacing");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTMXTilesetInfo_rectForGID(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int gid;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &gid)) {
      cocos2d::CCTMXTilesetInfo *obj_self = static_cast< cocos2d::CCTMXTilesetInfo * >(DATA_PTR(mrb_self));
      class cocos2d::CCRect *res = new class cocos2d::CCRect(); *res = obj_self->rectForGID(gid);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_type_cocos2d_CCRect,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTMXTilesetInfo#rectForGID");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_CCTOUCHBEGAN(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCTOUCHBEGAN;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_CCTOUCHCANCELLED(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCTOUCHCANCELLED;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_CCTOUCHENDED(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCTOUCHENDED;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_CCTOUCHMOVED(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CCTOUCHMOVED;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_CCTargetedAction_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTargetedAction;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTargetedAction * res = new cocos2d::CCTargetedAction();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedAction#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedAction_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTargetedAction *obj_self = static_cast< cocos2d::CCTargetedAction * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedAction#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedAction_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCTargetedAction *obj_self = static_cast< cocos2d::CCTargetedAction * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedAction#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedAction_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    mrb_value pAction;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTarget, &pAction)) {
      class cocos2d::CCTargetedAction * res = cocos2d::CCTargetedAction::create(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)), static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTargetedAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedAction::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedAction_getForcedTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTargetedAction *obj_self = static_cast< cocos2d::CCTargetedAction * >(DATA_PTR(mrb_self));
      class cocos2d::CCNode * res = obj_self->getForcedTarget();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCNode,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedAction#getForcedTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedAction_initWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    mrb_value pAction;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTarget, &pAction)) {
      cocos2d::CCTargetedAction *obj_self = static_cast< cocos2d::CCTargetedAction * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)), static_cast< cocos2d::CCFiniteTimeAction * >(cc_mrb_data_get_ptr(mrb, pAction, &mrb_type_cocos2d_CCFiniteTimeAction, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedAction#initWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedAction_setForcedTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTargetedAction *obj_self = static_cast< cocos2d::CCTargetedAction * >(DATA_PTR(mrb_self));
      obj_self->setForcedTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedAction#setForcedTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedAction_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCTargetedAction *obj_self = static_cast< cocos2d::CCTargetedAction * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedAction#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedAction_stop(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTargetedAction *obj_self = static_cast< cocos2d::CCTargetedAction * >(DATA_PTR(mrb_self));
      obj_self->stop();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedAction#stop");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedAction_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCTargetedAction *obj_self = static_cast< cocos2d::CCTargetedAction * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedAction#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedTouchDelegate_ccTouchBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::CCTargetedTouchDelegate *obj_self = static_cast< cocos2d::CCTargetedTouchDelegate * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->ccTouchBegan(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, pTouch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedTouchDelegate#ccTouchBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedTouchDelegate_ccTouchCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::CCTargetedTouchDelegate *obj_self = static_cast< cocos2d::CCTargetedTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchCancelled(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, pTouch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedTouchDelegate#ccTouchCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedTouchDelegate_ccTouchEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::CCTargetedTouchDelegate *obj_self = static_cast< cocos2d::CCTargetedTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchEnded(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, pTouch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedTouchDelegate#ccTouchEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedTouchDelegate_ccTouchMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::CCTargetedTouchDelegate *obj_self = static_cast< cocos2d::CCTargetedTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchMoved(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, pTouch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedTouchDelegate#ccTouchMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedTouchHandler_getClaimedTouches(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTargetedTouchHandler *obj_self = static_cast< cocos2d::CCTargetedTouchHandler * >(DATA_PTR(mrb_self));
      class cocos2d::CCSet * res = obj_self->getClaimedTouches();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCSet,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedTouchHandler#getClaimedTouches");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedTouchHandler_handlerWithDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    mrb_int nPriority;
    mrb_bool bSwallow;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oib", &pDelegate, &nPriority, &bSwallow)) {
      class cocos2d::CCTargetedTouchHandler * res = cocos2d::CCTargetedTouchHandler::handlerWithDelegate(static_cast< cocos2d::CCTouchDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCTouchDelegate, NULL)), nPriority, bSwallow);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTargetedTouchHandler,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedTouchHandler::handlerWithDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedTouchHandler_initWithDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    mrb_int nPriority;
    mrb_bool bSwallow;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oib", &pDelegate, &nPriority, &bSwallow)) {
      cocos2d::CCTargetedTouchHandler *obj_self = static_cast< cocos2d::CCTargetedTouchHandler * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDelegate(static_cast< cocos2d::CCTouchDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCTouchDelegate, NULL)), nPriority, bSwallow);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedTouchHandler#initWithDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedTouchHandler_isSwallowsTouches(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTargetedTouchHandler *obj_self = static_cast< cocos2d::CCTargetedTouchHandler * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isSwallowsTouches();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedTouchHandler#isSwallowsTouches");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedTouchHandler_setSwallowsTouches(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bSwallowsTouches;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bSwallowsTouches)) {
      cocos2d::CCTargetedTouchHandler *obj_self = static_cast< cocos2d::CCTargetedTouchHandler * >(DATA_PTR(mrb_self));
      obj_self->setSwallowsTouches(bSwallowsTouches);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedTouchHandler#setSwallowsTouches");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTargetedTouchHandler_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTargetedTouchHandler;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTargetedTouchHandler * res = new cocos2d::CCTargetedTouchHandler();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTargetedTouchHandler#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldDelegate_onDraw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sender;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sender)) {
      cocos2d::CCTextFieldDelegate *obj_self = static_cast< cocos2d::CCTextFieldDelegate * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->onDraw(static_cast< cocos2d::CCTextFieldTTF * >(cc_mrb_data_get_ptr(mrb, sender, &mrb_type_cocos2d_CCTextFieldTTF, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldDelegate#onDraw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldDelegate_onTextFieldAttachWithIME(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sender;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sender)) {
      cocos2d::CCTextFieldDelegate *obj_self = static_cast< cocos2d::CCTextFieldDelegate * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->onTextFieldAttachWithIME(static_cast< cocos2d::CCTextFieldTTF * >(cc_mrb_data_get_ptr(mrb, sender, &mrb_type_cocos2d_CCTextFieldTTF, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldDelegate#onTextFieldAttachWithIME");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldDelegate_onTextFieldDeleteBackward(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sender;
    mrb_value delText;
    mrb_int nLen;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oSi", &sender, &delText, &nLen)) {
      cocos2d::CCTextFieldDelegate *obj_self = static_cast< cocos2d::CCTextFieldDelegate * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->onTextFieldDeleteBackward(static_cast< cocos2d::CCTextFieldTTF * >(cc_mrb_data_get_ptr(mrb, sender, &mrb_type_cocos2d_CCTextFieldTTF, NULL)), RSTRING_PTR(delText), nLen);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldDelegate#onTextFieldDeleteBackward");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldDelegate_onTextFieldDetachWithIME(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sender;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &sender)) {
      cocos2d::CCTextFieldDelegate *obj_self = static_cast< cocos2d::CCTextFieldDelegate * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->onTextFieldDetachWithIME(static_cast< cocos2d::CCTextFieldTTF * >(cc_mrb_data_get_ptr(mrb, sender, &mrb_type_cocos2d_CCTextFieldTTF, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldDelegate#onTextFieldDetachWithIME");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldDelegate_onTextFieldInsertText(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value sender;
    mrb_value text;
    mrb_int nLen;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oSi", &sender, &text, &nLen)) {
      cocos2d::CCTextFieldDelegate *obj_self = static_cast< cocos2d::CCTextFieldDelegate * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->onTextFieldInsertText(static_cast< cocos2d::CCTextFieldTTF * >(cc_mrb_data_get_ptr(mrb, sender, &mrb_type_cocos2d_CCTextFieldTTF, NULL)), RSTRING_PTR(text), nLen);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldDelegate#onTextFieldInsertText");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTextFieldTTF;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTextFieldTTF * res = new cocos2d::CCTextFieldTTF();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_attachWithIME(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextFieldTTF *obj_self = static_cast< cocos2d::CCTextFieldTTF * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->attachWithIME();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF#attachWithIME");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_detachWithIME(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextFieldTTF *obj_self = static_cast< cocos2d::CCTextFieldTTF * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->detachWithIME();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF#detachWithIME");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_getCharCount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextFieldTTF *obj_self = static_cast< cocos2d::CCTextFieldTTF * >(DATA_PTR(mrb_self));
      int res = obj_self->getCharCount();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF#getCharCount");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_getColorSpaceHolder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextFieldTTF *obj_self = static_cast< cocos2d::CCTextFieldTTF * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->getColorSpaceHolder();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       const_cast< ccColor3B * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF#getColorSpaceHolder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_getDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextFieldTTF *obj_self = static_cast< cocos2d::CCTextFieldTTF * >(DATA_PTR(mrb_self));
      class cocos2d::CCTextFieldDelegate * res = obj_self->getDelegate();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      /* XXX: class implrements *Delegate or *Protocol, must be a subclass of CCObject. */
      ccobj_res = dynamic_cast< cocos2d::CCObject * >(res);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTextFieldDelegate,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF#getDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_getPlaceHolder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextFieldTTF *obj_self = static_cast< cocos2d::CCTextFieldTTF * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getPlaceHolder();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF#getPlaceHolder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_getString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextFieldTTF *obj_self = static_cast< cocos2d::CCTextFieldTTF * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getString();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF#getString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_initWithPlaceHolder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value placeholder;
    mrb_value dimensions;
    mrb_int alignment;
    mrb_value fontName;
    mrb_float fontSize;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "SoiSf", &placeholder, &dimensions, &alignment, &fontName, &fontSize)) {
      cocos2d::CCTextFieldTTF *obj_self = static_cast< cocos2d::CCTextFieldTTF * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithPlaceHolder(RSTRING_PTR(placeholder), *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, dimensions, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), (CCTextAlignment)alignment, RSTRING_PTR(fontName), fontSize);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value placeholder;
    mrb_value fontName;
    mrb_float fontSize;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSf", &placeholder, &fontName, &fontSize)) {
      cocos2d::CCTextFieldTTF *obj_self = static_cast< cocos2d::CCTextFieldTTF * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithPlaceHolder(RSTRING_PTR(placeholder), RSTRING_PTR(fontName), fontSize);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF#initWithPlaceHolder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_isSecureTextEntry(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextFieldTTF *obj_self = static_cast< cocos2d::CCTextFieldTTF * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isSecureTextEntry();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF#isSecureTextEntry");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_setColorSpaceHolder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value color;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &color)) {
      cocos2d::CCTextFieldTTF *obj_self = static_cast< cocos2d::CCTextFieldTTF * >(DATA_PTR(mrb_self));
      obj_self->setColorSpaceHolder(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF#setColorSpaceHolder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_setDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTextFieldTTF *obj_self = static_cast< cocos2d::CCTextFieldTTF * >(DATA_PTR(mrb_self));
      obj_self->setDelegate(static_cast< cocos2d::CCTextFieldDelegate * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCTextFieldDelegate, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF#setDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_setPlaceHolder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value text;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &text)) {
      cocos2d::CCTextFieldTTF *obj_self = static_cast< cocos2d::CCTextFieldTTF * >(DATA_PTR(mrb_self));
      obj_self->setPlaceHolder(RSTRING_PTR(text));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF#setPlaceHolder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_setSecureTextEntry(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool value;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &value)) {
      cocos2d::CCTextFieldTTF *obj_self = static_cast< cocos2d::CCTextFieldTTF * >(DATA_PTR(mrb_self));
      obj_self->setSecureTextEntry(value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF#setSecureTextEntry");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_setString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value text;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &text)) {
      cocos2d::CCTextFieldTTF *obj_self = static_cast< cocos2d::CCTextFieldTTF * >(DATA_PTR(mrb_self));
      obj_self->setString(RSTRING_PTR(text));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF#setString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextFieldTTF_textFieldWithPlaceHolder(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value placeholder;
    mrb_value dimensions;
    mrb_int alignment;
    mrb_value fontName;
    mrb_float fontSize;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "SoiSf", &placeholder, &dimensions, &alignment, &fontName, &fontSize)) {
      class cocos2d::CCTextFieldTTF * res = cocos2d::CCTextFieldTTF::textFieldWithPlaceHolder(RSTRING_PTR(placeholder), *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, dimensions, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), (CCTextAlignment)alignment, RSTRING_PTR(fontName), fontSize);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTextFieldTTF,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value placeholder;
    mrb_value fontName;
    mrb_float fontSize;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSf", &placeholder, &fontName, &fontSize)) {
      class cocos2d::CCTextFieldTTF * res = cocos2d::CCTextFieldTTF::textFieldWithPlaceHolder(RSTRING_PTR(placeholder), RSTRING_PTR(fontName), fontSize);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTextFieldTTF,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextFieldTTF::textFieldWithPlaceHolder");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTexture2D;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTexture2D * res = new cocos2d::CCTexture2D();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_PVRImagesHavePremultipliedAlpha(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool haveAlphaPremultiplied;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &haveAlphaPremultiplied)) {
      cocos2d::CCTexture2D::PVRImagesHavePremultipliedAlpha(haveAlphaPremultiplied);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D::PVRImagesHavePremultipliedAlpha");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_bitsPerPixelForFormat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->bitsPerPixelForFormat();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  {
    mrb_int format;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &format)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->bitsPerPixelForFormat((CCTexture2DPixelFormat)format);
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#bitsPerPixelForFormat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_defaultAlphaPixelFormat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      CCTexture2DPixelFormat res = cocos2d::CCTexture2D::defaultAlphaPixelFormat();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D::defaultAlphaPixelFormat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_description(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      std::string res = obj_self->description();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#description");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_drawAtPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value point;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &point)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      obj_self->drawAtPoint(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, point, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#drawAtPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_drawInRect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value rect;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &rect)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      obj_self->drawInRect(*(static_cast< const class cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#drawInRect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_generateMipmap(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      obj_self->generateMipmap();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#generateMipmap");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_getContentSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getContentSize();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#getContentSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_getContentSizeInPixels(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = obj_self->getContentSizeInPixels();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       const_cast< cocos2d::CCSize * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#getContentSizeInPixels");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_getMaxS(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      GLfloat res = obj_self->getMaxS();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#getMaxS");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_getMaxT(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      GLfloat res = obj_self->getMaxT();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#getMaxT");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_getName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      GLuint res = obj_self->getName();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#getName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_getPixelFormat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      CCTexture2DPixelFormat res = obj_self->getPixelFormat();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#getPixelFormat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_getPixelsHigh(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getPixelsHigh();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#getPixelsHigh");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_getPixelsWide(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getPixelsWide();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#getPixelsWide");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_getShaderProgram(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      class cocos2d::CCGLProgram * res = obj_self->getShaderProgram();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCGLProgram,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#getShaderProgram");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_hasMipmaps(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->hasMipmaps();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#hasMipmaps");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_hasPremultipliedAlpha(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->hasPremultipliedAlpha();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#hasPremultipliedAlpha");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_initWithData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value data;
    mrb_int pixelFormat;
    mrb_int pixelsWide;
    mrb_int pixelsHigh;
    mrb_value contentSize;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "oiiio", &data, &pixelFormat, &pixelsWide, &pixelsHigh, &contentSize)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithData(static_cast< const void * >(DATA_PTR(data)), (CCTexture2DPixelFormat)pixelFormat, pixelsWide, pixelsHigh, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, contentSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#initWithData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_initWithETCFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value file;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &file)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithETCFile(RSTRING_PTR(file));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#initWithETCFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_initWithImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value uiImage;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &uiImage)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithImage(static_cast< cocos2d::CCImage * >(cc_mrb_data_get_ptr(mrb, uiImage, &mrb_type_cocos2d_CCImage, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#initWithImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_initWithPVRFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value file;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &file)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithPVRFile(RSTRING_PTR(file));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#initWithPVRFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_initWithString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value text;
    mrb_value fontName;
    mrb_float fontSize;
    mrb_value dimensions;
    mrb_int hAlignment;
    mrb_int vAlignment;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "SSfoii", &text, &fontName, &fontSize, &dimensions, &hAlignment, &vAlignment)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithString(RSTRING_PTR(text), RSTRING_PTR(fontName), fontSize, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, dimensions, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), (CCTextAlignment)hAlignment, (CCVerticalTextAlignment)vAlignment);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value text;
    mrb_value fontName;
    mrb_float fontSize;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SSf", &text, &fontName, &fontSize)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithString(RSTRING_PTR(text), RSTRING_PTR(fontName), fontSize);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value text;
    mrb_value textDefinition;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "So", &text, &textDefinition)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithString(RSTRING_PTR(text), static_cast< ccFontDefinition * >(cc_mrb_data_get_ptr(mrb, textDefinition, &mrb_type_cocos2d__ccFontDefinition, &mrb_no_free_type_cocos2d__ccFontDefinition)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#initWithString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_keepData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value data;
    mrb_int length;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &data, &length)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      void * res = obj_self->keepData(static_cast< void * >(DATA_PTR(data)), length);
      mrb_value mrb_res = mrb_obj_value(res) /* XXX: */ ;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#keepData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D__get_m_bHasMipmaps(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bHasMipmaps;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_CCTexture2D__set_m_bHasMipmaps(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bHasMipmaps;
  if (1 == mrb_get_args(mrb, "b", &m_bHasMipmaps)) {
    cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
    
    obj_self->m_bHasMipmaps = m_bHasMipmaps;
    return mrb_bool_value(m_bHasMipmaps);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#m_bHasMipmaps");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D__get_m_bHasPremultipliedAlpha(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_bHasPremultipliedAlpha;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d_CCTexture2D__set_m_bHasPremultipliedAlpha(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_bHasPremultipliedAlpha;
  if (1 == mrb_get_args(mrb, "b", &m_bHasPremultipliedAlpha)) {
    cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
    
    obj_self->m_bHasPremultipliedAlpha = m_bHasPremultipliedAlpha;
    return mrb_bool_value(m_bHasPremultipliedAlpha);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#m_bHasPremultipliedAlpha");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_releaseData(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value data;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &data)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      obj_self->releaseData(static_cast< void * >(DATA_PTR(data)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#releaseData");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_setAliasTexParameters(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      obj_self->setAliasTexParameters();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#setAliasTexParameters");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_setAntiAliasTexParameters(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      obj_self->setAntiAliasTexParameters();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#setAntiAliasTexParameters");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_setDefaultAlphaPixelFormat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int format;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &format)) {
      cocos2d::CCTexture2D::setDefaultAlphaPixelFormat((CCTexture2DPixelFormat)format);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D::setDefaultAlphaPixelFormat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_setMaxS(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      obj_self->setMaxS(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#setMaxS");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_setMaxT(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &var)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      obj_self->setMaxT(var);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#setMaxT");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_setShaderProgram(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      obj_self->setShaderProgram(static_cast< cocos2d::CCGLProgram * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCGLProgram, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#setShaderProgram");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_setTexParameters(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value texParams;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &texParams)) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      obj_self->setTexParameters(static_cast< ccTexParams * >(cc_mrb_data_get_ptr(mrb, texParams, &mrb_type_cocos2d__ccTexParams, &mrb_no_free_type_cocos2d__ccTexParams)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#setTexParameters");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexture2D_stringForFormat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexture2D *obj_self = static_cast< cocos2d::CCTexture2D * >(DATA_PTR(mrb_self));
      std::string res = obj_self->stringForFormat();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexture2D#stringForFormat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTextureAtlas;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTextureAtlas * res = new cocos2d::CCTextureAtlas();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value file;
    mrb_int capacity;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &file, &capacity)) {
      class cocos2d::CCTextureAtlas * res = cocos2d::CCTextureAtlas::create(RSTRING_PTR(file), capacity);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTextureAtlas,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_createWithTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value texture;
    mrb_int capacity;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &texture, &capacity)) {
      class cocos2d::CCTextureAtlas * res = cocos2d::CCTextureAtlas::createWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)), capacity);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTextureAtlas,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas::createWithTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_description(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      std::string res = obj_self->description();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#description");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_drawNumberOfQuads(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int n;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &n)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->drawNumberOfQuads(n);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_int n;
    mrb_int start;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ii", &n, &start)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->drawNumberOfQuads(n, start);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#drawNumberOfQuads");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_drawQuads(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->drawQuads();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#drawQuads");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_fillWithEmptyQuadsFromIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    mrb_int amount;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ii", &index, &amount)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->fillWithEmptyQuadsFromIndex(index, amount);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#fillWithEmptyQuadsFromIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_getCapacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getCapacity();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#getCapacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_getQuads(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      ccV3F_C4B_T2F_Quad * res = obj_self->getQuads();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV3F_C4B_T2F_Quad"),
                       &mrb_type_cocos2d__ccV3F_C4B_T2F_Quad,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#getQuads");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_getTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      class cocos2d::CCTexture2D * res = obj_self->getTexture();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTexture2D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#getTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_getTotalQuads(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getTotalQuads();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#getTotalQuads");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_increaseTotalQuadsWith(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int amount;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &amount)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->increaseTotalQuadsWith(amount);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#increaseTotalQuadsWith");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_initWithFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value file;
    mrb_int capacity;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &file, &capacity)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithFile(RSTRING_PTR(file), capacity);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#initWithFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_initWithTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value texture;
    mrb_int capacity;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &texture, &capacity)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)), capacity);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#initWithTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_insertQuad(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value quad;
    mrb_int index;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &quad, &index)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->insertQuad(static_cast< ccV3F_C4B_T2F_Quad * >(cc_mrb_data_get_ptr(mrb, quad, &mrb_type_cocos2d__ccV3F_C4B_T2F_Quad, &mrb_no_free_type_cocos2d__ccV3F_C4B_T2F_Quad)), index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#insertQuad");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_insertQuadFromIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int fromIndex;
    mrb_int newIndex;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ii", &fromIndex, &newIndex)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->insertQuadFromIndex(fromIndex, newIndex);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#insertQuadFromIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_insertQuads(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value quads;
    mrb_int index;
    mrb_int amount;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oii", &quads, &index, &amount)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->insertQuads(static_cast< ccV3F_C4B_T2F_Quad * >(cc_mrb_data_get_ptr(mrb, quads, &mrb_type_cocos2d__ccV3F_C4B_T2F_Quad, &mrb_no_free_type_cocos2d__ccV3F_C4B_T2F_Quad)), index, amount);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#insertQuads");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_isDirty(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isDirty();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#isDirty");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_listenBackToForeground(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value obj;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &obj)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->listenBackToForeground(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, obj, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#listenBackToForeground");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_moveQuadsFromIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int oldIndex;
    mrb_int amount;
    mrb_int newIndex;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "iii", &oldIndex, &amount, &newIndex)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->moveQuadsFromIndex(oldIndex, amount, newIndex);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_int index;
    mrb_int newIndex;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ii", &index, &newIndex)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->moveQuadsFromIndex(index, newIndex);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#moveQuadsFromIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_removeAllQuads(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->removeAllQuads();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#removeAllQuads");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_removeQuadAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &index)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->removeQuadAtIndex(index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#removeQuadAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_removeQuadsAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int index;
    mrb_int amount;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ii", &index, &amount)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->removeQuadsAtIndex(index, amount);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#removeQuadsAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_resizeCapacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int n;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &n)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->resizeCapacity(n);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#resizeCapacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_setDirty(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bDirty;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bDirty)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->setDirty(bDirty);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#setDirty");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_setQuads(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->setQuads(static_cast< ccV3F_C4B_T2F_Quad * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d__ccV3F_C4B_T2F_Quad, &mrb_no_free_type_cocos2d__ccV3F_C4B_T2F_Quad)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#setQuads");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_setTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->setTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, var, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#setTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureAtlas_updateQuad(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value quad;
    mrb_int index;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &quad, &index)) {
      cocos2d::CCTextureAtlas *obj_self = static_cast< cocos2d::CCTextureAtlas * >(DATA_PTR(mrb_self));
      obj_self->updateQuad(static_cast< ccV3F_C4B_T2F_Quad * >(cc_mrb_data_get_ptr(mrb, quad, &mrb_type_cocos2d__ccV3F_C4B_T2F_Quad, &mrb_no_free_type_cocos2d__ccV3F_C4B_T2F_Quad)), index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureAtlas#updateQuad");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTextureCache;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTextureCache * res = new cocos2d::CCTextureCache();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_addETCImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value filename;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &filename)) {
      cocos2d::CCTextureCache *obj_self = static_cast< cocos2d::CCTextureCache * >(DATA_PTR(mrb_self));
      class cocos2d::CCTexture2D * res = obj_self->addETCImage(RSTRING_PTR(filename));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTexture2D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache#addETCImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_addImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value fileimage;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &fileimage)) {
      cocos2d::CCTextureCache *obj_self = static_cast< cocos2d::CCTextureCache * >(DATA_PTR(mrb_self));
      class cocos2d::CCTexture2D * res = obj_self->addImage(RSTRING_PTR(fileimage));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTexture2D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache#addImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_addImageAsync(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value path;
    mrb_value target;
    mrb_value selector;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "Soo", &path, &target, &selector)) {
      cocos2d::CCTextureCache *obj_self = static_cast< cocos2d::CCTextureCache * >(DATA_PTR(mrb_self));
      obj_self->addImageAsync(RSTRING_PTR(path), CCMRubyCallbackWrapper::create(mrb, target, selector), callfuncO_selector(CCMRubyCallbackWrapper::SEL_CallFuncO_Impl));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache#addImageAsync");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_addPVRImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value filename;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &filename)) {
      cocos2d::CCTextureCache *obj_self = static_cast< cocos2d::CCTextureCache * >(DATA_PTR(mrb_self));
      class cocos2d::CCTexture2D * res = obj_self->addPVRImage(RSTRING_PTR(filename));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTexture2D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache#addPVRImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_addUIImage(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value image;
    mrb_value key;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oS", &image, &key)) {
      cocos2d::CCTextureCache *obj_self = static_cast< cocos2d::CCTextureCache * >(DATA_PTR(mrb_self));
      class cocos2d::CCTexture2D * res = obj_self->addUIImage(static_cast< cocos2d::CCImage * >(cc_mrb_data_get_ptr(mrb, image, &mrb_type_cocos2d_CCImage, NULL)), RSTRING_PTR(key));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTexture2D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache#addUIImage");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_description(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureCache *obj_self = static_cast< cocos2d::CCTextureCache * >(DATA_PTR(mrb_self));
      std::string res = obj_self->description();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache#description");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_dumpCachedTextureInfo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureCache *obj_self = static_cast< cocos2d::CCTextureCache * >(DATA_PTR(mrb_self));
      obj_self->dumpCachedTextureInfo();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache#dumpCachedTextureInfo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_purgeSharedTextureCache(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureCache::purgeSharedTextureCache();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache::purgeSharedTextureCache");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_reloadAllTextures(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureCache::reloadAllTextures();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache::reloadAllTextures");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_removeAllTextures(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureCache *obj_self = static_cast< cocos2d::CCTextureCache * >(DATA_PTR(mrb_self));
      obj_self->removeAllTextures();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache#removeAllTextures");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_removeTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value texture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &texture)) {
      cocos2d::CCTextureCache *obj_self = static_cast< cocos2d::CCTextureCache * >(DATA_PTR(mrb_self));
      obj_self->removeTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache#removeTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_removeTextureForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value textureKeyName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &textureKeyName)) {
      cocos2d::CCTextureCache *obj_self = static_cast< cocos2d::CCTextureCache * >(DATA_PTR(mrb_self));
      obj_self->removeTextureForKey(RSTRING_PTR(textureKeyName));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache#removeTextureForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_removeUnusedTextures(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureCache *obj_self = static_cast< cocos2d::CCTextureCache * >(DATA_PTR(mrb_self));
      obj_self->removeUnusedTextures();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache#removeUnusedTextures");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_sharedTextureCache(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCTextureCache * res = cocos2d::CCTextureCache::sharedTextureCache();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTextureCache,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache::sharedTextureCache");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_snapshotTextures(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureCache *obj_self = static_cast< cocos2d::CCTextureCache * >(DATA_PTR(mrb_self));
      class cocos2d::CCDictionary * res = obj_self->snapshotTextures();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCDictionary,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache#snapshotTextures");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureCache_textureForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &key)) {
      cocos2d::CCTextureCache *obj_self = static_cast< cocos2d::CCTextureCache * >(DATA_PTR(mrb_self));
      class cocos2d::CCTexture2D * res = obj_self->textureForKey(RSTRING_PTR(key));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTexture2D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureCache#textureForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexturePVR_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTexturePVR;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTexturePVR * res = new cocos2d::CCTexturePVR();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexturePVR#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexturePVR_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value path;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &path)) {
      class cocos2d::CCTexturePVR * res = cocos2d::CCTexturePVR::create(RSTRING_PTR(path));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTexturePVR,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexturePVR::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexturePVR_getFormat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexturePVR *obj_self = static_cast< cocos2d::CCTexturePVR * >(DATA_PTR(mrb_self));
      CCTexture2DPixelFormat res = obj_self->getFormat();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexturePVR#getFormat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexturePVR_getHeight(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexturePVR *obj_self = static_cast< cocos2d::CCTexturePVR * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getHeight();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexturePVR#getHeight");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexturePVR_getName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexturePVR *obj_self = static_cast< cocos2d::CCTexturePVR * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getName();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexturePVR#getName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexturePVR_getNumberOfMipmaps(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexturePVR *obj_self = static_cast< cocos2d::CCTexturePVR * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getNumberOfMipmaps();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexturePVR#getNumberOfMipmaps");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexturePVR_getWidth(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexturePVR *obj_self = static_cast< cocos2d::CCTexturePVR * >(DATA_PTR(mrb_self));
      unsigned int res = obj_self->getWidth();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexturePVR#getWidth");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexturePVR_hasAlpha(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexturePVR *obj_self = static_cast< cocos2d::CCTexturePVR * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->hasAlpha();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexturePVR#hasAlpha");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexturePVR_hasPremultipliedAlpha(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexturePVR *obj_self = static_cast< cocos2d::CCTexturePVR * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->hasPremultipliedAlpha();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexturePVR#hasPremultipliedAlpha");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexturePVR_initWithContentsOfFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value path;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &path)) {
      cocos2d::CCTexturePVR *obj_self = static_cast< cocos2d::CCTexturePVR * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithContentsOfFile(RSTRING_PTR(path));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexturePVR#initWithContentsOfFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexturePVR_isForcePremultipliedAlpha(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexturePVR *obj_self = static_cast< cocos2d::CCTexturePVR * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isForcePremultipliedAlpha();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexturePVR#isForcePremultipliedAlpha");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexturePVR_isRetainName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTexturePVR *obj_self = static_cast< cocos2d::CCTexturePVR * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isRetainName();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexturePVR#isRetainName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTexturePVR_setRetainName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool retainName;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &retainName)) {
      cocos2d::CCTexturePVR *obj_self = static_cast< cocos2d::CCTexturePVR * >(DATA_PTR(mrb_self));
      obj_self->setRetainName(retainName);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTexturePVR#setRetainName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureProtocol_getTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTextureProtocol *obj_self = static_cast< cocos2d::CCTextureProtocol * >(DATA_PTR(mrb_self));
      class cocos2d::CCTexture2D * res = obj_self->getTexture();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTexture2D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureProtocol#getTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTextureProtocol_setTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value texture;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &texture)) {
      cocos2d::CCTextureProtocol *obj_self = static_cast< cocos2d::CCTextureProtocol * >(DATA_PTR(mrb_self));
      obj_self->setTexture(static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, texture, &mrb_type_cocos2d_CCTexture2D, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTextureProtocol#setTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCThread_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCThread;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCThread * res = new cocos2d::CCThread();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCThread#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCThread_createAutoreleasePool(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCThread *obj_self = static_cast< cocos2d::CCThread * >(DATA_PTR(mrb_self));
      obj_self->createAutoreleasePool();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCThread#createAutoreleasePool");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTileMapAtlas_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTileMapAtlas;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTileMapAtlas * res = new cocos2d::CCTileMapAtlas();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTileMapAtlas#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTileMapAtlas_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tile;
    mrb_value mapFile;
    mrb_int tileWidth;
    mrb_int tileHeight;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "SSii", &tile, &mapFile, &tileWidth, &tileHeight)) {
      class cocos2d::CCTileMapAtlas * res = cocos2d::CCTileMapAtlas::create(RSTRING_PTR(tile), RSTRING_PTR(mapFile), tileWidth, tileHeight);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTileMapAtlas,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTileMapAtlas::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTileMapAtlas_initWithTileFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tile;
    mrb_value mapFile;
    mrb_int tileWidth;
    mrb_int tileHeight;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "SSii", &tile, &mapFile, &tileWidth, &tileHeight)) {
      cocos2d::CCTileMapAtlas *obj_self = static_cast< cocos2d::CCTileMapAtlas * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTileFile(RSTRING_PTR(tile), RSTRING_PTR(mapFile), tileWidth, tileHeight);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTileMapAtlas#initWithTileFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTileMapAtlas_releaseMap(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTileMapAtlas *obj_self = static_cast< cocos2d::CCTileMapAtlas * >(DATA_PTR(mrb_self));
      obj_self->releaseMap();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTileMapAtlas#releaseMap");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTileMapAtlas_setTGAInfo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value var;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &var)) {
      cocos2d::CCTileMapAtlas *obj_self = static_cast< cocos2d::CCTileMapAtlas * >(DATA_PTR(mrb_self));
      obj_self->setTGAInfo(static_cast< struct sImageTGA * >(DATA_PTR(var)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTileMapAtlas#setTGAInfo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTileMapAtlas_setTile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tile;
    mrb_value position;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &tile, &position)) {
      cocos2d::CCTileMapAtlas *obj_self = static_cast< cocos2d::CCTileMapAtlas * >(DATA_PTR(mrb_self));
      obj_self->setTile(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, tile, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTileMapAtlas#setTile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTileMapAtlas_tileAt(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value position;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &position)) {
      cocos2d::CCTileMapAtlas *obj_self = static_cast< cocos2d::CCTileMapAtlas * >(DATA_PTR(mrb_self));
      ccColor3B *res = new ccColor3B(); *res = obj_self->tileAt(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTileMapAtlas#tileAt");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTiledGrid3D_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTiledGrid3D;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTiledGrid3D * res = new cocos2d::CCTiledGrid3D();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTiledGrid3D#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTiledGrid3D_blit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTiledGrid3D *obj_self = static_cast< cocos2d::CCTiledGrid3D * >(DATA_PTR(mrb_self));
      obj_self->blit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTiledGrid3D#blit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTiledGrid3D_calculateVertexPoints(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTiledGrid3D *obj_self = static_cast< cocos2d::CCTiledGrid3D * >(DATA_PTR(mrb_self));
      obj_self->calculateVertexPoints();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTiledGrid3D#calculateVertexPoints");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTiledGrid3D_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value gridSize;
    mrb_value pTexture;
    mrb_bool bFlipped;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oob", &gridSize, &pTexture, &bFlipped)) {
      class cocos2d::CCTiledGrid3D * res = cocos2d::CCTiledGrid3D::create(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), static_cast< cocos2d::CCTexture2D * >(cc_mrb_data_get_ptr(mrb, pTexture, &mrb_type_cocos2d_CCTexture2D, NULL)), bFlipped);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTiledGrid3D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value gridSize;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &gridSize)) {
      class cocos2d::CCTiledGrid3D * res = cocos2d::CCTiledGrid3D::create(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTiledGrid3D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTiledGrid3D::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTiledGrid3D_originalTile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pos)) {
      cocos2d::CCTiledGrid3D *obj_self = static_cast< cocos2d::CCTiledGrid3D * >(DATA_PTR(mrb_self));
      ccQuad3 *res = new ccQuad3(); *res = obj_self->originalTile(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccQuad3"),
                       &mrb_type_cocos2d__ccQuad3,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTiledGrid3D#originalTile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTiledGrid3D_reuse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTiledGrid3D *obj_self = static_cast< cocos2d::CCTiledGrid3D * >(DATA_PTR(mrb_self));
      obj_self->reuse();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTiledGrid3D#reuse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTiledGrid3D_setTile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    mrb_value coords;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pos, &coords)) {
      cocos2d::CCTiledGrid3D *obj_self = static_cast< cocos2d::CCTiledGrid3D * >(DATA_PTR(mrb_self));
      obj_self->setTile(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const ccQuad3 * >(cc_mrb_data_get_ptr(mrb, coords, &mrb_type_cocos2d__ccQuad3, &mrb_no_free_type_cocos2d__ccQuad3))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTiledGrid3D#setTile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTiledGrid3D_tile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pos)) {
      cocos2d::CCTiledGrid3D *obj_self = static_cast< cocos2d::CCTiledGrid3D * >(DATA_PTR(mrb_self));
      ccQuad3 *res = new ccQuad3(); *res = obj_self->tile(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccQuad3"),
                       &mrb_type_cocos2d__ccQuad3,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTiledGrid3D#tile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTiledGrid3DAction_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &duration, &gridSize)) {
      class cocos2d::CCTiledGrid3DAction * res = cocos2d::CCTiledGrid3DAction::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTiledGrid3DAction,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTiledGrid3DAction::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTiledGrid3DAction_getGrid(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTiledGrid3DAction *obj_self = static_cast< cocos2d::CCTiledGrid3DAction * >(DATA_PTR(mrb_self));
      class cocos2d::CCGridBase * res = obj_self->getGrid();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCGridBase,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTiledGrid3DAction#getGrid");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTiledGrid3DAction_originalTile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value position;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &position)) {
      cocos2d::CCTiledGrid3DAction *obj_self = static_cast< cocos2d::CCTiledGrid3DAction * >(DATA_PTR(mrb_self));
      ccQuad3 *res = new ccQuad3(); *res = obj_self->originalTile(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccQuad3"),
                       &mrb_type_cocos2d__ccQuad3,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTiledGrid3DAction#originalTile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTiledGrid3DAction_setTile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value position;
    mrb_value coords;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &position, &coords)) {
      cocos2d::CCTiledGrid3DAction *obj_self = static_cast< cocos2d::CCTiledGrid3DAction * >(DATA_PTR(mrb_self));
      obj_self->setTile(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const ccQuad3 * >(cc_mrb_data_get_ptr(mrb, coords, &mrb_type_cocos2d__ccQuad3, &mrb_no_free_type_cocos2d__ccQuad3))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTiledGrid3DAction#setTile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTiledGrid3DAction_tile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value position;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &position)) {
      cocos2d::CCTiledGrid3DAction *obj_self = static_cast< cocos2d::CCTiledGrid3DAction * >(DATA_PTR(mrb_self));
      ccQuad3 *res = new ccQuad3(); *res = obj_self->tile(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccQuad3"),
                       &mrb_type_cocos2d__ccQuad3,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTiledGrid3DAction#tile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTiledGrid3DAction_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTiledGrid3DAction;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTiledGrid3DAction * res = new cocos2d::CCTiledGrid3DAction();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTiledGrid3DAction#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTime_gettimeofdayCocos2d(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value tp;
    mrb_value tzp;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &tp, &tzp)) {
      int res = cocos2d::CCTime::gettimeofdayCocos2d(static_cast< struct cc_timeval * >(cc_mrb_data_get_ptr(mrb, tp, &mrb_type_cocos2d_cc_timeval, &mrb_no_free_type_cocos2d_cc_timeval)), static_cast< void * >(DATA_PTR(tzp)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTime::gettimeofdayCocos2d");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTime_timersubCocos2d(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value start;
    mrb_value end;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &start, &end)) {
      double res = cocos2d::CCTime::timersubCocos2d(static_cast< struct cc_timeval * >(cc_mrb_data_get_ptr(mrb, start, &mrb_type_cocos2d_cc_timeval, &mrb_no_free_type_cocos2d_cc_timeval)), static_cast< struct cc_timeval * >(cc_mrb_data_get_ptr(mrb, end, &mrb_type_cocos2d_cc_timeval, &mrb_no_free_type_cocos2d_cc_timeval)));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTime::timersubCocos2d");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTime_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTime;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTime * res = new cocos2d::CCTime();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTime#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTimer_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTimer;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTimer * res = new cocos2d::CCTimer();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTimer#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTimer_getInterval(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTimer *obj_self = static_cast< cocos2d::CCTimer * >(DATA_PTR(mrb_self));
      float res = obj_self->getInterval();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTimer#getInterval");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTimer_getScriptHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTimer *obj_self = static_cast< cocos2d::CCTimer * >(DATA_PTR(mrb_self));
      int res = obj_self->getScriptHandler();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTimer#getScriptHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTimer_initWithScriptHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    mrb_float fSeconds;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &nHandler, &fSeconds)) {
      cocos2d::CCTimer *obj_self = static_cast< cocos2d::CCTimer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithScriptHandler(cc_mrb_proc_keep(mrb, nHandler), fSeconds);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTimer#initWithScriptHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTimer_initWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    mrb_value pfnSelector;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTarget, &pfnSelector)) {
      cocos2d::CCTimer *obj_self = static_cast< cocos2d::CCTimer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTarget(CCMRubyCallbackWrapper::create(mrb, pTarget, pfnSelector), schedule_selector(CCMRubyCallbackWrapper::SEL_SCHEDULE_Impl));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value pTarget;
    mrb_value pfnSelector;
    mrb_float fSeconds;
    mrb_int nRepeat;
    mrb_float fDelay;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "oofif", &pTarget, &pfnSelector, &fSeconds, &nRepeat, &fDelay)) {
      cocos2d::CCTimer *obj_self = static_cast< cocos2d::CCTimer * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithTarget(CCMRubyCallbackWrapper::create(mrb, pTarget, pfnSelector), schedule_selector(CCMRubyCallbackWrapper::SEL_SCHEDULE_Impl), fSeconds, nRepeat, fDelay);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTimer#initWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTimer_setInterval(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fInterval;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fInterval)) {
      cocos2d::CCTimer *obj_self = static_cast< cocos2d::CCTimer * >(DATA_PTR(mrb_self));
      obj_self->setInterval(fInterval);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTimer#setInterval");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTimer_timerWithScriptHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    mrb_float fSeconds;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &nHandler, &fSeconds)) {
      class cocos2d::CCTimer * res = cocos2d::CCTimer::timerWithScriptHandler(cc_mrb_proc_keep(mrb, nHandler), fSeconds);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTimer,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTimer::timerWithScriptHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTimer_timerWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    mrb_value pfnSelector;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTarget, &pfnSelector)) {
      class cocos2d::CCTimer * res = cocos2d::CCTimer::timerWithTarget(CCMRubyCallbackWrapper::create(mrb, pTarget, pfnSelector), schedule_selector(CCMRubyCallbackWrapper::SEL_SCHEDULE_Impl));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTimer,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_value pTarget;
    mrb_value pfnSelector;
    mrb_float fSeconds;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oof", &pTarget, &pfnSelector, &fSeconds)) {
      class cocos2d::CCTimer * res = cocos2d::CCTimer::timerWithTarget(CCMRubyCallbackWrapper::create(mrb, pTarget, pfnSelector), schedule_selector(CCMRubyCallbackWrapper::SEL_SCHEDULE_Impl), fSeconds);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTimer,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTimer::timerWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTimer_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float dt;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &dt)) {
      cocos2d::CCTimer *obj_self = static_cast< cocos2d::CCTimer * >(DATA_PTR(mrb_self));
      obj_self->update(dt);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTimer#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTintBy_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCTintBy *obj_self = static_cast< cocos2d::CCTintBy * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTintBy#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTintBy_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_int deltaRed;
    mrb_int deltaGreen;
    mrb_int deltaBlue;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "fiii", &duration, &deltaRed, &deltaGreen, &deltaBlue)) {
      class cocos2d::CCTintBy * res = cocos2d::CCTintBy::create(duration, deltaRed, deltaGreen, deltaBlue);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTintBy,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTintBy::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTintBy_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_int deltaRed;
    mrb_int deltaGreen;
    mrb_int deltaBlue;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "fiii", &duration, &deltaRed, &deltaGreen, &deltaBlue)) {
      cocos2d::CCTintBy *obj_self = static_cast< cocos2d::CCTintBy * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, deltaRed, deltaGreen, deltaBlue);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTintBy#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTintBy_reverse(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTintBy *obj_self = static_cast< cocos2d::CCTintBy * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->reverse();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTintBy#reverse");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTintBy_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCTintBy *obj_self = static_cast< cocos2d::CCTintBy * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTintBy#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTintBy_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCTintBy *obj_self = static_cast< cocos2d::CCTintBy * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTintBy#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTintBy_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTintBy;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTintBy * res = new cocos2d::CCTintBy();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTintBy#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTintTo_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCTintTo *obj_self = static_cast< cocos2d::CCTintTo * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTintTo#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTintTo_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_int red;
    mrb_int green;
    mrb_int blue;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "fiii", &duration, &red, &green, &blue)) {
      class cocos2d::CCTintTo * res = cocos2d::CCTintTo::create(duration, red, green, blue);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTintTo,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTintTo::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTintTo_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_int red;
    mrb_int green;
    mrb_int blue;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "fiii", &duration, &red, &green, &blue)) {
      cocos2d::CCTintTo *obj_self = static_cast< cocos2d::CCTintTo * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, red, green, blue);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTintTo#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTintTo_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCTintTo *obj_self = static_cast< cocos2d::CCTintTo * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTintTo#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTintTo_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCTintTo *obj_self = static_cast< cocos2d::CCTintTo * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTintTo#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTintTo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTintTo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTintTo * res = new cocos2d::CCTintTo();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTintTo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCToggleVisibility_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCToggleVisibility;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCToggleVisibility * res = new cocos2d::CCToggleVisibility();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCToggleVisibility#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCToggleVisibility_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCToggleVisibility *obj_self = static_cast< cocos2d::CCToggleVisibility * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCToggleVisibility#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCToggleVisibility_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCToggleVisibility * res = cocos2d::CCToggleVisibility::create();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCToggleVisibility,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCToggleVisibility::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCToggleVisibility_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCToggleVisibility *obj_self = static_cast< cocos2d::CCToggleVisibility * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCToggleVisibility#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouch_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTouch;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTouch * res = new cocos2d::CCTouch();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouch#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouch_getDelta(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouch *obj_self = static_cast< cocos2d::CCTouch * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getDelta();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouch#getDelta");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouch_getID(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouch *obj_self = static_cast< cocos2d::CCTouch * >(DATA_PTR(mrb_self));
      int res = obj_self->getID();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouch#getID");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouch_getLocation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouch *obj_self = static_cast< cocos2d::CCTouch * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getLocation();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouch#getLocation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouch_getLocationInView(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouch *obj_self = static_cast< cocos2d::CCTouch * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getLocationInView();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouch#getLocationInView");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouch_getPreviousLocation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouch *obj_self = static_cast< cocos2d::CCTouch * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getPreviousLocation();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouch#getPreviousLocation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouch_getPreviousLocationInView(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouch *obj_self = static_cast< cocos2d::CCTouch * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getPreviousLocationInView();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouch#getPreviousLocationInView");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouch_getStartLocation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouch *obj_self = static_cast< cocos2d::CCTouch * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getStartLocation();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouch#getStartLocation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouch_getStartLocationInView(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouch *obj_self = static_cast< cocos2d::CCTouch * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getStartLocationInView();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouch#getStartLocationInView");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouch_setTouchInfo(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int id;
    mrb_float x;
    mrb_float y;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "iff", &id, &x, &y)) {
      cocos2d::CCTouch *obj_self = static_cast< cocos2d::CCTouch * >(DATA_PTR(mrb_self));
      obj_self->setTouchInfo(id, x, y);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouch#setTouchInfo");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDelegate_ccTouchBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::CCTouchDelegate *obj_self = static_cast< cocos2d::CCTouchDelegate * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->ccTouchBegan(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, pTouch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDelegate#ccTouchBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDelegate_ccTouchCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::CCTouchDelegate *obj_self = static_cast< cocos2d::CCTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchCancelled(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, pTouch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDelegate#ccTouchCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDelegate_ccTouchEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::CCTouchDelegate *obj_self = static_cast< cocos2d::CCTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchEnded(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, pTouch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDelegate#ccTouchEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDelegate_ccTouchMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouch;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouch, &pEvent)) {
      cocos2d::CCTouchDelegate *obj_self = static_cast< cocos2d::CCTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchMoved(static_cast< cocos2d::CCTouch * >(cc_mrb_data_get_ptr(mrb, pTouch, &mrb_type_cocos2d_CCTouch, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDelegate#ccTouchMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDelegate_ccTouchesBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::CCTouchDelegate *obj_self = static_cast< cocos2d::CCTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesBegan(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, pTouches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDelegate#ccTouchesBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDelegate_ccTouchesCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::CCTouchDelegate *obj_self = static_cast< cocos2d::CCTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesCancelled(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, pTouches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDelegate#ccTouchesCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDelegate_ccTouchesEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::CCTouchDelegate *obj_self = static_cast< cocos2d::CCTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesEnded(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, pTouches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDelegate#ccTouchesEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDelegate_ccTouchesMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &pTouches, &pEvent)) {
      cocos2d::CCTouchDelegate *obj_self = static_cast< cocos2d::CCTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->ccTouchesMoved(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, pTouches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDelegate#ccTouchesMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDispatcher_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTouchDispatcher;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTouchDispatcher * res = new cocos2d::CCTouchDispatcher();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDispatcher#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDispatcher_addStandardDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    mrb_int nPriority;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &pDelegate, &nPriority)) {
      cocos2d::CCTouchDispatcher *obj_self = static_cast< cocos2d::CCTouchDispatcher * >(DATA_PTR(mrb_self));
      obj_self->addStandardDelegate(static_cast< cocos2d::CCTouchDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCTouchDelegate, NULL)), nPriority);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDispatcher#addStandardDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDispatcher_addTargetedDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    mrb_int nPriority;
    mrb_bool bSwallowsTouches;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oib", &pDelegate, &nPriority, &bSwallowsTouches)) {
      cocos2d::CCTouchDispatcher *obj_self = static_cast< cocos2d::CCTouchDispatcher * >(DATA_PTR(mrb_self));
      obj_self->addTargetedDelegate(static_cast< cocos2d::CCTouchDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCTouchDelegate, NULL)), nPriority, bSwallowsTouches);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDispatcher#addTargetedDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDispatcher_findHandler(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      cocos2d::CCTouchDispatcher *obj_self = static_cast< cocos2d::CCTouchDispatcher * >(DATA_PTR(mrb_self));
      class cocos2d::CCTouchHandler * res = obj_self->findHandler(static_cast< cocos2d::CCTouchDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCTouchDelegate, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTouchHandler,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDispatcher#findHandler");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDispatcher_init(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouchDispatcher *obj_self = static_cast< cocos2d::CCTouchDispatcher * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->init();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDispatcher#init");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDispatcher_isDispatchEvents(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouchDispatcher *obj_self = static_cast< cocos2d::CCTouchDispatcher * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isDispatchEvents();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDispatcher#isDispatchEvents");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDispatcher_removeAllDelegates(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouchDispatcher *obj_self = static_cast< cocos2d::CCTouchDispatcher * >(DATA_PTR(mrb_self));
      obj_self->removeAllDelegates();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDispatcher#removeAllDelegates");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDispatcher_removeDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      cocos2d::CCTouchDispatcher *obj_self = static_cast< cocos2d::CCTouchDispatcher * >(DATA_PTR(mrb_self));
      obj_self->removeDelegate(static_cast< cocos2d::CCTouchDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCTouchDelegate, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDispatcher#removeDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDispatcher_setDispatchEvents(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_bool bDispatchEvents;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "b", &bDispatchEvents)) {
      cocos2d::CCTouchDispatcher *obj_self = static_cast< cocos2d::CCTouchDispatcher * >(DATA_PTR(mrb_self));
      obj_self->setDispatchEvents(bDispatchEvents);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDispatcher#setDispatchEvents");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDispatcher_setPriority(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nPriority;
    mrb_value pDelegate;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "io", &nPriority, &pDelegate)) {
      cocos2d::CCTouchDispatcher *obj_self = static_cast< cocos2d::CCTouchDispatcher * >(DATA_PTR(mrb_self));
      obj_self->setPriority(nPriority, static_cast< cocos2d::CCTouchDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCTouchDelegate, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDispatcher#setPriority");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDispatcher_touches(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTouches;
    mrb_value pEvent;
    mrb_int uIndex;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooi", &pTouches, &pEvent, &uIndex)) {
      cocos2d::CCTouchDispatcher *obj_self = static_cast< cocos2d::CCTouchDispatcher * >(DATA_PTR(mrb_self));
      obj_self->touches(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, pTouches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)), uIndex);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDispatcher#touches");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDispatcher_touchesBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &touches, &pEvent)) {
      cocos2d::CCTouchDispatcher *obj_self = static_cast< cocos2d::CCTouchDispatcher * >(DATA_PTR(mrb_self));
      obj_self->touchesBegan(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, touches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDispatcher#touchesBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDispatcher_touchesCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &touches, &pEvent)) {
      cocos2d::CCTouchDispatcher *obj_self = static_cast< cocos2d::CCTouchDispatcher * >(DATA_PTR(mrb_self));
      obj_self->touchesCancelled(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, touches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDispatcher#touchesCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDispatcher_touchesEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &touches, &pEvent)) {
      cocos2d::CCTouchDispatcher *obj_self = static_cast< cocos2d::CCTouchDispatcher * >(DATA_PTR(mrb_self));
      obj_self->touchesEnded(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, touches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDispatcher#touchesEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchDispatcher_touchesMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &touches, &pEvent)) {
      cocos2d::CCTouchDispatcher *obj_self = static_cast< cocos2d::CCTouchDispatcher * >(DATA_PTR(mrb_self));
      obj_self->touchesMoved(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, touches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchDispatcher#touchesMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchHandler_getDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouchHandler *obj_self = static_cast< cocos2d::CCTouchHandler * >(DATA_PTR(mrb_self));
      class cocos2d::CCTouchDelegate * res = obj_self->getDelegate();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      /* XXX: class implrements *Delegate or *Protocol, must be a subclass of CCObject. */
      ccobj_res = dynamic_cast< cocos2d::CCObject * >(res);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTouchDelegate,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchHandler#getDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchHandler_getEnabledSelectors(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouchHandler *obj_self = static_cast< cocos2d::CCTouchHandler * >(DATA_PTR(mrb_self));
      int res = obj_self->getEnabledSelectors();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchHandler#getEnabledSelectors");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchHandler_getPriority(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouchHandler *obj_self = static_cast< cocos2d::CCTouchHandler * >(DATA_PTR(mrb_self));
      int res = obj_self->getPriority();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchHandler#getPriority");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchHandler_handlerWithDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    mrb_int nPriority;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &pDelegate, &nPriority)) {
      class cocos2d::CCTouchHandler * res = cocos2d::CCTouchHandler::handlerWithDelegate(static_cast< cocos2d::CCTouchDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCTouchDelegate, NULL)), nPriority);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCTouchHandler,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchHandler::handlerWithDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchHandler_initWithDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    mrb_int nPriority;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &pDelegate, &nPriority)) {
      cocos2d::CCTouchHandler *obj_self = static_cast< cocos2d::CCTouchHandler * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDelegate(static_cast< cocos2d::CCTouchDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCTouchDelegate, NULL)), nPriority);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchHandler#initWithDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchHandler_setDelegate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pDelegate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pDelegate)) {
      cocos2d::CCTouchHandler *obj_self = static_cast< cocos2d::CCTouchHandler * >(DATA_PTR(mrb_self));
      obj_self->setDelegate(static_cast< cocos2d::CCTouchDelegate * >(cc_mrb_data_get_ptr(mrb, pDelegate, &mrb_type_cocos2d_CCTouchDelegate, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchHandler#setDelegate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchHandler_setEnalbedSelectors(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nValue;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nValue)) {
      cocos2d::CCTouchHandler *obj_self = static_cast< cocos2d::CCTouchHandler * >(DATA_PTR(mrb_self));
      obj_self->setEnalbedSelectors(nValue);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchHandler#setEnalbedSelectors");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchHandler_setPriority(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int nPriority;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &nPriority)) {
      cocos2d::CCTouchHandler *obj_self = static_cast< cocos2d::CCTouchHandler * >(DATA_PTR(mrb_self));
      obj_self->setPriority(nPriority);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchHandler#setPriority");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchHandler_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTouchHandler;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTouchHandler * res = new cocos2d::CCTouchHandler();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchHandler#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchScriptHandlerEntry_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value nHandler;
    mrb_bool bIsMultiTouches;
    mrb_int nPriority;
    mrb_bool bSwallowsTouches;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "obib", &nHandler, &bIsMultiTouches, &nPriority, &bSwallowsTouches)) {
      class cocos2d::CCTouchScriptHandlerEntry * res = cocos2d::CCTouchScriptHandlerEntry::create(cc_mrb_proc_keep(mrb, nHandler), bIsMultiTouches, nPriority, bSwallowsTouches);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      //cc_mrb_proc_keep(mrb, nHandler);
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTouchScriptHandlerEntry,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchScriptHandlerEntry::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchScriptHandlerEntry_getPriority(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouchScriptHandlerEntry *obj_self = static_cast< cocos2d::CCTouchScriptHandlerEntry * >(DATA_PTR(mrb_self));
      int res = obj_self->getPriority();
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchScriptHandlerEntry#getPriority");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchScriptHandlerEntry_getSwallowsTouches(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouchScriptHandlerEntry *obj_self = static_cast< cocos2d::CCTouchScriptHandlerEntry * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getSwallowsTouches();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchScriptHandlerEntry#getSwallowsTouches");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTouchScriptHandlerEntry_isMultiTouches(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTouchScriptHandlerEntry *obj_self = static_cast< cocos2d::CCTouchScriptHandlerEntry * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->isMultiTouches();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTouchScriptHandlerEntry#isMultiTouches");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionCrossFade_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionCrossFade;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionCrossFade * res = new cocos2d::CCTransitionCrossFade();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionCrossFade#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionCrossFade_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionCrossFade * res = cocos2d::CCTransitionCrossFade::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionCrossFade,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionCrossFade::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionCrossFade_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionCrossFade *obj_self = static_cast< cocos2d::CCTransitionCrossFade * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionCrossFade#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionCrossFade_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionCrossFade *obj_self = static_cast< cocos2d::CCTransitionCrossFade * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionCrossFade#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionCrossFade_onExit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionCrossFade *obj_self = static_cast< cocos2d::CCTransitionCrossFade * >(DATA_PTR(mrb_self));
      obj_self->onExit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionCrossFade#onExit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFade_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionFade;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionFade * res = new cocos2d::CCTransitionFade();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFade#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFade_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value scene;
    mrb_value color;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "foo", &duration, &scene, &color)) {
      class cocos2d::CCTransitionFade * res = cocos2d::CCTransitionFade::create(duration, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)), *(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionFade,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_float duration;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &duration, &scene)) {
      class cocos2d::CCTransitionFade * res = cocos2d::CCTransitionFade::create(duration, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionFade,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFade::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFade_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    mrb_value color;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "foo", &t, &scene, &color)) {
      cocos2d::CCTransitionFade *obj_self = static_cast< cocos2d::CCTransitionFade * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)), *(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      cocos2d::CCTransitionFade *obj_self = static_cast< cocos2d::CCTransitionFade * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFade#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFade_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionFade *obj_self = static_cast< cocos2d::CCTransitionFade * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFade#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFade_onExit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionFade *obj_self = static_cast< cocos2d::CCTransitionFade * >(DATA_PTR(mrb_self));
      obj_self->onExit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFade#onExit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFadeBL_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionFadeBL;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionFadeBL * res = new cocos2d::CCTransitionFadeBL();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFadeBL#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFadeBL_actionWithSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value size;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &size)) {
      cocos2d::CCTransitionFadeBL *obj_self = static_cast< cocos2d::CCTransitionFadeBL * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->actionWithSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, size, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFadeBL#actionWithSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFadeBL_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionFadeBL * res = cocos2d::CCTransitionFadeBL::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionFadeBL,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFadeBL::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFadeDown_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionFadeDown;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionFadeDown * res = new cocos2d::CCTransitionFadeDown();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFadeDown#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFadeDown_actionWithSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value size;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &size)) {
      cocos2d::CCTransitionFadeDown *obj_self = static_cast< cocos2d::CCTransitionFadeDown * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->actionWithSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, size, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFadeDown#actionWithSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFadeDown_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionFadeDown * res = cocos2d::CCTransitionFadeDown::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionFadeDown,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFadeDown::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFadeTR_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionFadeTR;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionFadeTR * res = new cocos2d::CCTransitionFadeTR();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFadeTR#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFadeTR_actionWithSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value size;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &size)) {
      cocos2d::CCTransitionFadeTR *obj_self = static_cast< cocos2d::CCTransitionFadeTR * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->actionWithSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, size, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFadeTR#actionWithSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFadeTR_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionFadeTR * res = cocos2d::CCTransitionFadeTR::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionFadeTR,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFadeTR::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFadeTR_easeActionWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value action;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &action)) {
      cocos2d::CCTransitionFadeTR *obj_self = static_cast< cocos2d::CCTransitionFadeTR * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->easeActionWithAction(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, action, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFadeTR#easeActionWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFadeTR_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionFadeTR *obj_self = static_cast< cocos2d::CCTransitionFadeTR * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFadeTR#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFadeUp_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionFadeUp;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionFadeUp * res = new cocos2d::CCTransitionFadeUp();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFadeUp#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFadeUp_actionWithSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value size;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &size)) {
      cocos2d::CCTransitionFadeUp *obj_self = static_cast< cocos2d::CCTransitionFadeUp * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->actionWithSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, size, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFadeUp#actionWithSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFadeUp_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionFadeUp * res = cocos2d::CCTransitionFadeUp::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionFadeUp,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFadeUp::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFlipAngular_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionFlipAngular;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionFlipAngular * res = new cocos2d::CCTransitionFlipAngular();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFlipAngular#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFlipAngular_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value s;
    mrb_int o;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "foi", &t, &s, &o)) {
      class cocos2d::CCTransitionFlipAngular * res = cocos2d::CCTransitionFlipAngular::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, s, &mrb_type_cocos2d_CCScene, NULL)), (tOrientation)o);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionFlipAngular,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_float t;
    mrb_value s;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &s)) {
      class cocos2d::CCTransitionFlipAngular * res = cocos2d::CCTransitionFlipAngular::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, s, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionFlipAngular,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFlipAngular::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFlipAngular_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionFlipAngular *obj_self = static_cast< cocos2d::CCTransitionFlipAngular * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFlipAngular#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFlipX_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionFlipX;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionFlipX * res = new cocos2d::CCTransitionFlipX();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFlipX#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFlipX_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value s;
    mrb_int o;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "foi", &t, &s, &o)) {
      class cocos2d::CCTransitionFlipX * res = cocos2d::CCTransitionFlipX::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, s, &mrb_type_cocos2d_CCScene, NULL)), (tOrientation)o);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionFlipX,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_float t;
    mrb_value s;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &s)) {
      class cocos2d::CCTransitionFlipX * res = cocos2d::CCTransitionFlipX::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, s, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionFlipX,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFlipX::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFlipX_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionFlipX *obj_self = static_cast< cocos2d::CCTransitionFlipX * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFlipX#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFlipY_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionFlipY;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionFlipY * res = new cocos2d::CCTransitionFlipY();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFlipY#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFlipY_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value s;
    mrb_int o;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "foi", &t, &s, &o)) {
      class cocos2d::CCTransitionFlipY * res = cocos2d::CCTransitionFlipY::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, s, &mrb_type_cocos2d_CCScene, NULL)), (tOrientation)o);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionFlipY,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_float t;
    mrb_value s;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &s)) {
      class cocos2d::CCTransitionFlipY * res = cocos2d::CCTransitionFlipY::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, s, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionFlipY,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFlipY::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionFlipY_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionFlipY *obj_self = static_cast< cocos2d::CCTransitionFlipY * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionFlipY#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionJumpZoom_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionJumpZoom;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionJumpZoom * res = new cocos2d::CCTransitionJumpZoom();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionJumpZoom#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionJumpZoom_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionJumpZoom * res = cocos2d::CCTransitionJumpZoom::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionJumpZoom,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionJumpZoom::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionJumpZoom_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionJumpZoom *obj_self = static_cast< cocos2d::CCTransitionJumpZoom * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionJumpZoom#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionMoveInB_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionMoveInB;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionMoveInB * res = new cocos2d::CCTransitionMoveInB();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionMoveInB#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionMoveInB_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionMoveInB * res = cocos2d::CCTransitionMoveInB::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionMoveInB,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionMoveInB::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionMoveInB_initScenes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionMoveInB *obj_self = static_cast< cocos2d::CCTransitionMoveInB * >(DATA_PTR(mrb_self));
      obj_self->initScenes();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionMoveInB#initScenes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionMoveInL_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionMoveInL;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionMoveInL * res = new cocos2d::CCTransitionMoveInL();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionMoveInL#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionMoveInL_action(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionMoveInL *obj_self = static_cast< cocos2d::CCTransitionMoveInL * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->action();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionMoveInL#action");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionMoveInL_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionMoveInL * res = cocos2d::CCTransitionMoveInL::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionMoveInL,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionMoveInL::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionMoveInL_easeActionWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value action;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &action)) {
      cocos2d::CCTransitionMoveInL *obj_self = static_cast< cocos2d::CCTransitionMoveInL * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->easeActionWithAction(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, action, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionMoveInL#easeActionWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionMoveInL_initScenes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionMoveInL *obj_self = static_cast< cocos2d::CCTransitionMoveInL * >(DATA_PTR(mrb_self));
      obj_self->initScenes();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionMoveInL#initScenes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionMoveInL_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionMoveInL *obj_self = static_cast< cocos2d::CCTransitionMoveInL * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionMoveInL#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionMoveInR_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionMoveInR;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionMoveInR * res = new cocos2d::CCTransitionMoveInR();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionMoveInR#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionMoveInR_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionMoveInR * res = cocos2d::CCTransitionMoveInR::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionMoveInR,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionMoveInR::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionMoveInR_initScenes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionMoveInR *obj_self = static_cast< cocos2d::CCTransitionMoveInR * >(DATA_PTR(mrb_self));
      obj_self->initScenes();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionMoveInR#initScenes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionMoveInT_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionMoveInT;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionMoveInT * res = new cocos2d::CCTransitionMoveInT();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionMoveInT#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionMoveInT_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionMoveInT * res = cocos2d::CCTransitionMoveInT::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionMoveInT,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionMoveInT::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionMoveInT_initScenes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionMoveInT *obj_self = static_cast< cocos2d::CCTransitionMoveInT * >(DATA_PTR(mrb_self));
      obj_self->initScenes();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionMoveInT#initScenes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionPageTurn_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionPageTurn;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionPageTurn * res = new cocos2d::CCTransitionPageTurn();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionPageTurn#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionPageTurn_actionWithSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value vector;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &vector)) {
      cocos2d::CCTransitionPageTurn *obj_self = static_cast< cocos2d::CCTransitionPageTurn * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->actionWithSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, vector, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionPageTurn#actionWithSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionPageTurn_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    mrb_bool backwards;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fob", &t, &scene, &backwards)) {
      class cocos2d::CCTransitionPageTurn * res = cocos2d::CCTransitionPageTurn::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)), backwards);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionPageTurn,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionPageTurn::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionPageTurn_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    mrb_bool backwards;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fob", &t, &scene, &backwards)) {
      cocos2d::CCTransitionPageTurn *obj_self = static_cast< cocos2d::CCTransitionPageTurn * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)), backwards);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionPageTurn#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionPageTurn_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionPageTurn *obj_self = static_cast< cocos2d::CCTransitionPageTurn * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionPageTurn#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgress_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionProgress;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionProgress * res = new cocos2d::CCTransitionProgress();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgress#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgress_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionProgress * res = cocos2d::CCTransitionProgress::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionProgress,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgress::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgress_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionProgress *obj_self = static_cast< cocos2d::CCTransitionProgress * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgress#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgress_onExit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionProgress *obj_self = static_cast< cocos2d::CCTransitionProgress * >(DATA_PTR(mrb_self));
      obj_self->onExit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgress#onExit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgressHorizontal_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionProgressHorizontal * res = cocos2d::CCTransitionProgressHorizontal::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionProgressHorizontal,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgressHorizontal::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgressHorizontal_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionProgressHorizontal;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionProgressHorizontal * res = new cocos2d::CCTransitionProgressHorizontal();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgressHorizontal#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgressInOut_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionProgressInOut * res = cocos2d::CCTransitionProgressInOut::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionProgressInOut,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgressInOut::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgressInOut_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionProgressInOut;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionProgressInOut * res = new cocos2d::CCTransitionProgressInOut();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgressInOut#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgressOutIn_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionProgressOutIn * res = cocos2d::CCTransitionProgressOutIn::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionProgressOutIn,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgressOutIn::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgressOutIn_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionProgressOutIn;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionProgressOutIn * res = new cocos2d::CCTransitionProgressOutIn();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgressOutIn#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgressRadialCCW_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionProgressRadialCCW * res = cocos2d::CCTransitionProgressRadialCCW::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionProgressRadialCCW,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgressRadialCCW::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgressRadialCCW_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionProgressRadialCCW;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionProgressRadialCCW * res = new cocos2d::CCTransitionProgressRadialCCW();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgressRadialCCW#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgressRadialCW_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionProgressRadialCW * res = cocos2d::CCTransitionProgressRadialCW::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionProgressRadialCW,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgressRadialCW::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgressRadialCW_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionProgressRadialCW;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionProgressRadialCW * res = new cocos2d::CCTransitionProgressRadialCW();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgressRadialCW#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgressVertical_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionProgressVertical * res = cocos2d::CCTransitionProgressVertical::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionProgressVertical,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgressVertical::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionProgressVertical_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionProgressVertical;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionProgressVertical * res = new cocos2d::CCTransitionProgressVertical();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionProgressVertical#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionRotoZoom_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionRotoZoom;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionRotoZoom * res = new cocos2d::CCTransitionRotoZoom();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionRotoZoom#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionRotoZoom_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionRotoZoom * res = cocos2d::CCTransitionRotoZoom::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionRotoZoom,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionRotoZoom::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionRotoZoom_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionRotoZoom *obj_self = static_cast< cocos2d::CCTransitionRotoZoom * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionRotoZoom#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionScene_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionScene;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionScene * res = new cocos2d::CCTransitionScene();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionScene#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionScene_cleanup(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionScene *obj_self = static_cast< cocos2d::CCTransitionScene * >(DATA_PTR(mrb_self));
      obj_self->cleanup();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionScene#cleanup");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionScene_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionScene * res = cocos2d::CCTransitionScene::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionScene,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionScene::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionScene_draw(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionScene *obj_self = static_cast< cocos2d::CCTransitionScene * >(DATA_PTR(mrb_self));
      obj_self->draw();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionScene#draw");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionScene_finish(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionScene *obj_self = static_cast< cocos2d::CCTransitionScene * >(DATA_PTR(mrb_self));
      obj_self->finish();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionScene#finish");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionScene_hideOutShowIn(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionScene *obj_self = static_cast< cocos2d::CCTransitionScene * >(DATA_PTR(mrb_self));
      obj_self->hideOutShowIn();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionScene#hideOutShowIn");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionScene_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      cocos2d::CCTransitionScene *obj_self = static_cast< cocos2d::CCTransitionScene * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionScene#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionScene_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionScene *obj_self = static_cast< cocos2d::CCTransitionScene * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionScene#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionScene_onExit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionScene *obj_self = static_cast< cocos2d::CCTransitionScene * >(DATA_PTR(mrb_self));
      obj_self->onExit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionScene#onExit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSceneOriented_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionSceneOriented;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionSceneOriented * res = new cocos2d::CCTransitionSceneOriented();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSceneOriented#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSceneOriented_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    mrb_int orientation;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "foi", &t, &scene, &orientation)) {
      class cocos2d::CCTransitionSceneOriented * res = cocos2d::CCTransitionSceneOriented::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)), (tOrientation)orientation);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionSceneOriented,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSceneOriented::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSceneOriented_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    mrb_int orientation;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "foi", &t, &scene, &orientation)) {
      cocos2d::CCTransitionSceneOriented *obj_self = static_cast< cocos2d::CCTransitionSceneOriented * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)), (tOrientation)orientation);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSceneOriented#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionShrinkGrow_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionShrinkGrow;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionShrinkGrow * res = new cocos2d::CCTransitionShrinkGrow();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionShrinkGrow#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionShrinkGrow_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionShrinkGrow * res = cocos2d::CCTransitionShrinkGrow::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionShrinkGrow,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionShrinkGrow::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionShrinkGrow_easeActionWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value action;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &action)) {
      cocos2d::CCTransitionShrinkGrow *obj_self = static_cast< cocos2d::CCTransitionShrinkGrow * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->easeActionWithAction(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, action, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionShrinkGrow#easeActionWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionShrinkGrow_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionShrinkGrow *obj_self = static_cast< cocos2d::CCTransitionShrinkGrow * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionShrinkGrow#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInB_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionSlideInB;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionSlideInB * res = new cocos2d::CCTransitionSlideInB();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInB#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInB_action(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionSlideInB *obj_self = static_cast< cocos2d::CCTransitionSlideInB * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->action();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInB#action");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInB_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionSlideInB * res = cocos2d::CCTransitionSlideInB::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionSlideInB,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInB::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInB_initScenes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionSlideInB *obj_self = static_cast< cocos2d::CCTransitionSlideInB * >(DATA_PTR(mrb_self));
      obj_self->initScenes();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInB#initScenes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInL_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionSlideInL;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionSlideInL * res = new cocos2d::CCTransitionSlideInL();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInL#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInL_action(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionSlideInL *obj_self = static_cast< cocos2d::CCTransitionSlideInL * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->action();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInL#action");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInL_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionSlideInL * res = cocos2d::CCTransitionSlideInL::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionSlideInL,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInL::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInL_easeActionWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value action;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &action)) {
      cocos2d::CCTransitionSlideInL *obj_self = static_cast< cocos2d::CCTransitionSlideInL * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->easeActionWithAction(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, action, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInL#easeActionWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInL_initScenes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionSlideInL *obj_self = static_cast< cocos2d::CCTransitionSlideInL * >(DATA_PTR(mrb_self));
      obj_self->initScenes();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInL#initScenes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInL_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionSlideInL *obj_self = static_cast< cocos2d::CCTransitionSlideInL * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInL#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInR_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionSlideInR;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionSlideInR * res = new cocos2d::CCTransitionSlideInR();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInR#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInR_action(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionSlideInR *obj_self = static_cast< cocos2d::CCTransitionSlideInR * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->action();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInR#action");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInR_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionSlideInR * res = cocos2d::CCTransitionSlideInR::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionSlideInR,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInR::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInR_initScenes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionSlideInR *obj_self = static_cast< cocos2d::CCTransitionSlideInR * >(DATA_PTR(mrb_self));
      obj_self->initScenes();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInR#initScenes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInT_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionSlideInT;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionSlideInT * res = new cocos2d::CCTransitionSlideInT();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInT#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInT_action(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionSlideInT *obj_self = static_cast< cocos2d::CCTransitionSlideInT * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->action();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInT#action");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInT_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionSlideInT * res = cocos2d::CCTransitionSlideInT::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionSlideInT,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInT::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSlideInT_initScenes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionSlideInT *obj_self = static_cast< cocos2d::CCTransitionSlideInT * >(DATA_PTR(mrb_self));
      obj_self->initScenes();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSlideInT#initScenes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSplitCols_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionSplitCols;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionSplitCols * res = new cocos2d::CCTransitionSplitCols();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSplitCols#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSplitCols_action(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionSplitCols *obj_self = static_cast< cocos2d::CCTransitionSplitCols * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->action();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSplitCols#action");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSplitCols_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionSplitCols * res = cocos2d::CCTransitionSplitCols::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionSplitCols,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSplitCols::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSplitCols_easeActionWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value action;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &action)) {
      cocos2d::CCTransitionSplitCols *obj_self = static_cast< cocos2d::CCTransitionSplitCols * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->easeActionWithAction(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, action, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSplitCols#easeActionWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSplitCols_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionSplitCols *obj_self = static_cast< cocos2d::CCTransitionSplitCols * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSplitCols#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSplitRows_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionSplitRows;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionSplitRows * res = new cocos2d::CCTransitionSplitRows();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSplitRows#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSplitRows_action(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionSplitRows *obj_self = static_cast< cocos2d::CCTransitionSplitRows * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->action();
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSplitRows#action");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionSplitRows_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionSplitRows * res = cocos2d::CCTransitionSplitRows::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionSplitRows,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionSplitRows::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionTurnOffTiles_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionTurnOffTiles;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionTurnOffTiles * res = new cocos2d::CCTransitionTurnOffTiles();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionTurnOffTiles#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionTurnOffTiles_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value scene;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &scene)) {
      class cocos2d::CCTransitionTurnOffTiles * res = cocos2d::CCTransitionTurnOffTiles::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, scene, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionTurnOffTiles,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionTurnOffTiles::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionTurnOffTiles_easeActionWithAction(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value action;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &action)) {
      cocos2d::CCTransitionTurnOffTiles *obj_self = static_cast< cocos2d::CCTransitionTurnOffTiles * >(DATA_PTR(mrb_self));
      class cocos2d::CCActionInterval * res = obj_self->easeActionWithAction(static_cast< cocos2d::CCActionInterval * >(cc_mrb_data_get_ptr(mrb, action, &mrb_type_cocos2d_CCActionInterval, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCActionInterval,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionTurnOffTiles#easeActionWithAction");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionTurnOffTiles_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionTurnOffTiles *obj_self = static_cast< cocos2d::CCTransitionTurnOffTiles * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionTurnOffTiles#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionZoomFlipAngular_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionZoomFlipAngular;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionZoomFlipAngular * res = new cocos2d::CCTransitionZoomFlipAngular();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionZoomFlipAngular#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionZoomFlipAngular_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value s;
    mrb_int o;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "foi", &t, &s, &o)) {
      class cocos2d::CCTransitionZoomFlipAngular * res = cocos2d::CCTransitionZoomFlipAngular::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, s, &mrb_type_cocos2d_CCScene, NULL)), (tOrientation)o);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionZoomFlipAngular,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_float t;
    mrb_value s;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &s)) {
      class cocos2d::CCTransitionZoomFlipAngular * res = cocos2d::CCTransitionZoomFlipAngular::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, s, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionZoomFlipAngular,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionZoomFlipAngular::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionZoomFlipAngular_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionZoomFlipAngular *obj_self = static_cast< cocos2d::CCTransitionZoomFlipAngular * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionZoomFlipAngular#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionZoomFlipX_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionZoomFlipX;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionZoomFlipX * res = new cocos2d::CCTransitionZoomFlipX();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionZoomFlipX#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionZoomFlipX_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value s;
    mrb_int o;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "foi", &t, &s, &o)) {
      class cocos2d::CCTransitionZoomFlipX * res = cocos2d::CCTransitionZoomFlipX::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, s, &mrb_type_cocos2d_CCScene, NULL)), (tOrientation)o);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionZoomFlipX,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_float t;
    mrb_value s;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &s)) {
      class cocos2d::CCTransitionZoomFlipX * res = cocos2d::CCTransitionZoomFlipX::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, s, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionZoomFlipX,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionZoomFlipX::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionZoomFlipX_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionZoomFlipX *obj_self = static_cast< cocos2d::CCTransitionZoomFlipX * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionZoomFlipX#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionZoomFlipY_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTransitionZoomFlipY;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTransitionZoomFlipY * res = new cocos2d::CCTransitionZoomFlipY();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionZoomFlipY#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionZoomFlipY_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float t;
    mrb_value s;
    mrb_int o;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "foi", &t, &s, &o)) {
      class cocos2d::CCTransitionZoomFlipY * res = cocos2d::CCTransitionZoomFlipY::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, s, &mrb_type_cocos2d_CCScene, NULL)), (tOrientation)o);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionZoomFlipY,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_float t;
    mrb_value s;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &t, &s)) {
      class cocos2d::CCTransitionZoomFlipY * res = cocos2d::CCTransitionZoomFlipY::create(t, static_cast< cocos2d::CCScene * >(cc_mrb_data_get_ptr(mrb, s, &mrb_type_cocos2d_CCScene, NULL)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTransitionZoomFlipY,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionZoomFlipY::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTransitionZoomFlipY_onEnter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTransitionZoomFlipY *obj_self = static_cast< cocos2d::CCTransitionZoomFlipY * >(DATA_PTR(mrb_self));
      obj_self->onEnter();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTransitionZoomFlipY#onEnter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTurnOffTiles_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCTurnOffTiles *obj_self = static_cast< cocos2d::CCTurnOffTiles * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTurnOffTiles#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTurnOffTiles_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "fo", &duration, &gridSize)) {
      class cocos2d::CCTurnOffTiles * res = cocos2d::CCTurnOffTiles::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTurnOffTiles,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int seed;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "foi", &duration, &gridSize, &seed)) {
      class cocos2d::CCTurnOffTiles * res = cocos2d::CCTurnOffTiles::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), seed);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTurnOffTiles,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTurnOffTiles::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTurnOffTiles_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int seed;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "foi", &duration, &gridSize, &seed)) {
      cocos2d::CCTurnOffTiles *obj_self = static_cast< cocos2d::CCTurnOffTiles * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), seed);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTurnOffTiles#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTurnOffTiles_shuffle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pArray;
    mrb_int nLen;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Ai", &pArray, &nLen)) {
      unsigned int cxx_pArray[1]; cc_mrb_ary_conv_to_c_array(mrb, pArray, reinterpret_cast< unsigned int * >(cxx_pArray), 1);
      cocos2d::CCTurnOffTiles *obj_self = static_cast< cocos2d::CCTurnOffTiles * >(DATA_PTR(mrb_self));
      obj_self->shuffle(cxx_pArray, nLen);
      cc_mrb_ary_conv_from_c_array(mrb, pArray, reinterpret_cast< unsigned int * >(cxx_pArray), 1);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTurnOffTiles#shuffle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTurnOffTiles_startWithTarget(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pTarget;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pTarget)) {
      cocos2d::CCTurnOffTiles *obj_self = static_cast< cocos2d::CCTurnOffTiles * >(DATA_PTR(mrb_self));
      obj_self->startWithTarget(static_cast< cocos2d::CCNode * >(cc_mrb_data_get_ptr(mrb, pTarget, &mrb_type_cocos2d_CCNode, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTurnOffTiles#startWithTarget");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTurnOffTiles_turnOffTile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pos)) {
      cocos2d::CCTurnOffTiles *obj_self = static_cast< cocos2d::CCTurnOffTiles * >(DATA_PTR(mrb_self));
      obj_self->turnOffTile(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTurnOffTiles#turnOffTile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTurnOffTiles_turnOnTile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pos;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pos)) {
      cocos2d::CCTurnOffTiles *obj_self = static_cast< cocos2d::CCTurnOffTiles * >(DATA_PTR(mrb_self));
      obj_self->turnOnTile(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTurnOffTiles#turnOnTile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTurnOffTiles_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCTurnOffTiles *obj_self = static_cast< cocos2d::CCTurnOffTiles * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTurnOffTiles#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTurnOffTiles_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTurnOffTiles;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTurnOffTiles * res = new cocos2d::CCTurnOffTiles();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTurnOffTiles#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTwirl_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCTwirl *obj_self = static_cast< cocos2d::CCTwirl * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTwirl#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTwirl_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_value position;
    mrb_int twirls;
    mrb_float amplitude;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "fooif", &duration, &gridSize, &position, &twirls, &amplitude)) {
      class cocos2d::CCTwirl * res = cocos2d::CCTwirl::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), twirls, amplitude);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCTwirl,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTwirl::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTwirl_getAmplitude(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTwirl *obj_self = static_cast< cocos2d::CCTwirl * >(DATA_PTR(mrb_self));
      float res = obj_self->getAmplitude();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTwirl#getAmplitude");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTwirl_getAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTwirl *obj_self = static_cast< cocos2d::CCTwirl * >(DATA_PTR(mrb_self));
      float res = obj_self->getAmplitudeRate();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTwirl#getAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTwirl_getPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCTwirl *obj_self = static_cast< cocos2d::CCTwirl * >(DATA_PTR(mrb_self));
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = obj_self->getPosition();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       const_cast< cocos2d::CCPoint * >(res)));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTwirl#getPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTwirl_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_value position;
    mrb_int twirls;
    mrb_float amplitude;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "fooif", &duration, &gridSize, &position, &twirls, &amplitude)) {
      cocos2d::CCTwirl *obj_self = static_cast< cocos2d::CCTwirl * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), twirls, amplitude);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTwirl#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTwirl_setAmplitude(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fAmplitude;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fAmplitude)) {
      cocos2d::CCTwirl *obj_self = static_cast< cocos2d::CCTwirl * >(DATA_PTR(mrb_self));
      obj_self->setAmplitude(fAmplitude);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTwirl#setAmplitude");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTwirl_setAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fAmplitudeRate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fAmplitudeRate)) {
      cocos2d::CCTwirl *obj_self = static_cast< cocos2d::CCTwirl * >(DATA_PTR(mrb_self));
      obj_self->setAmplitudeRate(fAmplitudeRate);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTwirl#setAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTwirl_setPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value position;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &position)) {
      cocos2d::CCTwirl *obj_self = static_cast< cocos2d::CCTwirl * >(DATA_PTR(mrb_self));
      obj_self->setPosition(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, position, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTwirl#setPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTwirl_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCTwirl *obj_self = static_cast< cocos2d::CCTwirl * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTwirl#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCTwirl_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCTwirl;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCTwirl * res = new cocos2d::CCTwirl();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCTwirl#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCUserDefault_flush(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      obj_self->flush();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCUserDefault#flush");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCUserDefault_getBoolForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pKey;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pKey)) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getBoolForKey(RSTRING_PTR(pKey));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value pKey;
    mrb_bool defaultValue;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sb", &pKey, &defaultValue)) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->getBoolForKey(RSTRING_PTR(pKey), defaultValue);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCUserDefault#getBoolForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCUserDefault_getDoubleForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pKey;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pKey)) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      double res = obj_self->getDoubleForKey(RSTRING_PTR(pKey));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  {
    mrb_value pKey;
    mrb_float defaultValue;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sf", &pKey, &defaultValue)) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      double res = obj_self->getDoubleForKey(RSTRING_PTR(pKey), defaultValue);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCUserDefault#getDoubleForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCUserDefault_getFloatForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pKey;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pKey)) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      float res = obj_self->getFloatForKey(RSTRING_PTR(pKey));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  {
    mrb_value pKey;
    mrb_float defaultValue;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sf", &pKey, &defaultValue)) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      float res = obj_self->getFloatForKey(RSTRING_PTR(pKey), defaultValue);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCUserDefault#getFloatForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCUserDefault_getIntegerForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pKey;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pKey)) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      int res = obj_self->getIntegerForKey(RSTRING_PTR(pKey));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  {
    mrb_value pKey;
    mrb_int defaultValue;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &pKey, &defaultValue)) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      int res = obj_self->getIntegerForKey(RSTRING_PTR(pKey), defaultValue);
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCUserDefault#getIntegerForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCUserDefault_getStringForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pKey;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &pKey)) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getStringForKey(RSTRING_PTR(pKey));
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  {
    mrb_value pKey;
    mrb_value defaultValue;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &pKey, &defaultValue)) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      std::string res = obj_self->getStringForKey(RSTRING_PTR(pKey), RSTRING_PTR(defaultValue));
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCUserDefault#getStringForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCUserDefault_getXMLFilePath(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      std::string res = cocos2d::CCUserDefault::getXMLFilePath();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCUserDefault::getXMLFilePath");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCUserDefault_isXMLFileExist(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      _Bool res = cocos2d::CCUserDefault::isXMLFileExist();
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCUserDefault::isXMLFileExist");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCUserDefault_purgeSharedUserDefault(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCUserDefault::purgeSharedUserDefault();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCUserDefault::purgeSharedUserDefault");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCUserDefault_setBoolForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pKey;
    mrb_bool value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sb", &pKey, &value)) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      obj_self->setBoolForKey(RSTRING_PTR(pKey), value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCUserDefault#setBoolForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCUserDefault_setDoubleForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pKey;
    mrb_float value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sf", &pKey, &value)) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      obj_self->setDoubleForKey(RSTRING_PTR(pKey), value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCUserDefault#setDoubleForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCUserDefault_setFloatForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pKey;
    mrb_float value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Sf", &pKey, &value)) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      obj_self->setFloatForKey(RSTRING_PTR(pKey), value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCUserDefault#setFloatForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCUserDefault_setIntegerForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pKey;
    mrb_int value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &pKey, &value)) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      obj_self->setIntegerForKey(RSTRING_PTR(pKey), value);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCUserDefault#setIntegerForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCUserDefault_setStringForKey(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pKey;
    mrb_value value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "SS", &pKey, &value)) {
      cocos2d::CCUserDefault *obj_self = static_cast< cocos2d::CCUserDefault * >(DATA_PTR(mrb_self));
      obj_self->setStringForKey(RSTRING_PTR(pKey), RSTRING_PTR(value));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCUserDefault#setStringForKey");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCUserDefault_sharedUserDefault(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      class cocos2d::CCUserDefault * res = cocos2d::CCUserDefault::sharedUserDefault();
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCUserDefault"),
                       &mrb_no_free_type_cocos2d_CCUserDefault,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCUserDefault::sharedUserDefault");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCWaves *obj_self = static_cast< cocos2d::CCWaves * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int waves;
    mrb_float amplitude;
    mrb_bool horizontal;
    mrb_bool vertical;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "foifbb", &duration, &gridSize, &waves, &amplitude, &horizontal, &vertical)) {
      class cocos2d::CCWaves * res = cocos2d::CCWaves::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), waves, amplitude, horizontal, vertical);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCWaves,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves_getAmplitude(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCWaves *obj_self = static_cast< cocos2d::CCWaves * >(DATA_PTR(mrb_self));
      float res = obj_self->getAmplitude();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves#getAmplitude");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves_getAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCWaves *obj_self = static_cast< cocos2d::CCWaves * >(DATA_PTR(mrb_self));
      float res = obj_self->getAmplitudeRate();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves#getAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int waves;
    mrb_float amplitude;
    mrb_bool horizontal;
    mrb_bool vertical;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "foifbb", &duration, &gridSize, &waves, &amplitude, &horizontal, &vertical)) {
      cocos2d::CCWaves *obj_self = static_cast< cocos2d::CCWaves * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), waves, amplitude, horizontal, vertical);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves_setAmplitude(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fAmplitude;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fAmplitude)) {
      cocos2d::CCWaves *obj_self = static_cast< cocos2d::CCWaves * >(DATA_PTR(mrb_self));
      obj_self->setAmplitude(fAmplitude);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves#setAmplitude");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves_setAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fAmplitudeRate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fAmplitudeRate)) {
      cocos2d::CCWaves *obj_self = static_cast< cocos2d::CCWaves * >(DATA_PTR(mrb_self));
      obj_self->setAmplitudeRate(fAmplitudeRate);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves#setAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCWaves *obj_self = static_cast< cocos2d::CCWaves * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCWaves;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCWaves * res = new cocos2d::CCWaves();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves3D_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCWaves3D *obj_self = static_cast< cocos2d::CCWaves3D * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves3D#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves3D_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int waves;
    mrb_float amplitude;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foif", &duration, &gridSize, &waves, &amplitude)) {
      class cocos2d::CCWaves3D * res = cocos2d::CCWaves3D::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), waves, amplitude);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCWaves3D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves3D::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves3D_getAmplitude(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCWaves3D *obj_self = static_cast< cocos2d::CCWaves3D * >(DATA_PTR(mrb_self));
      float res = obj_self->getAmplitude();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves3D#getAmplitude");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves3D_getAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCWaves3D *obj_self = static_cast< cocos2d::CCWaves3D * >(DATA_PTR(mrb_self));
      float res = obj_self->getAmplitudeRate();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves3D#getAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves3D_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int waves;
    mrb_float amplitude;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foif", &duration, &gridSize, &waves, &amplitude)) {
      cocos2d::CCWaves3D *obj_self = static_cast< cocos2d::CCWaves3D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), waves, amplitude);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves3D#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves3D_setAmplitude(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fAmplitude;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fAmplitude)) {
      cocos2d::CCWaves3D *obj_self = static_cast< cocos2d::CCWaves3D * >(DATA_PTR(mrb_self));
      obj_self->setAmplitude(fAmplitude);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves3D#setAmplitude");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves3D_setAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fAmplitudeRate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fAmplitudeRate)) {
      cocos2d::CCWaves3D *obj_self = static_cast< cocos2d::CCWaves3D * >(DATA_PTR(mrb_self));
      obj_self->setAmplitudeRate(fAmplitudeRate);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves3D#setAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves3D_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCWaves3D *obj_self = static_cast< cocos2d::CCWaves3D * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves3D#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWaves3D_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCWaves3D;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCWaves3D * res = new cocos2d::CCWaves3D();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWaves3D#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWavesTiles3D_copyWithZone(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pZone;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pZone)) {
      cocos2d::CCWavesTiles3D *obj_self = static_cast< cocos2d::CCWavesTiles3D * >(DATA_PTR(mrb_self));
      class cocos2d::CCObject * res = obj_self->copyWithZone(static_cast< cocos2d::CCZone * >(cc_mrb_data_get_ptr(mrb, pZone, &mrb_type_cocos2d_CCZone, &mrb_no_free_type_cocos2d_CCZone)));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCObject,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWavesTiles3D#copyWithZone");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWavesTiles3D_create(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int waves;
    mrb_float amplitude;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foif", &duration, &gridSize, &waves, &amplitude)) {
      class cocos2d::CCWavesTiles3D * res = cocos2d::CCWavesTiles3D::create(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), waves, amplitude);
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       mrb_class_ptr(mrb_self),
                       &mrb_type_cocos2d_CCWavesTiles3D,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWavesTiles3D::create");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWavesTiles3D_getAmplitude(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCWavesTiles3D *obj_self = static_cast< cocos2d::CCWavesTiles3D * >(DATA_PTR(mrb_self));
      float res = obj_self->getAmplitude();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWavesTiles3D#getAmplitude");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWavesTiles3D_getAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::CCWavesTiles3D *obj_self = static_cast< cocos2d::CCWavesTiles3D * >(DATA_PTR(mrb_self));
      float res = obj_self->getAmplitudeRate();
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWavesTiles3D#getAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWavesTiles3D_initWithDuration(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float duration;
    mrb_value gridSize;
    mrb_int waves;
    mrb_float amplitude;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "foif", &duration, &gridSize, &waves, &amplitude)) {
      cocos2d::CCWavesTiles3D *obj_self = static_cast< cocos2d::CCWavesTiles3D * >(DATA_PTR(mrb_self));
      _Bool res = obj_self->initWithDuration(duration, *(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, gridSize, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), waves, amplitude);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWavesTiles3D#initWithDuration");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWavesTiles3D_setAmplitude(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fAmplitude;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fAmplitude)) {
      cocos2d::CCWavesTiles3D *obj_self = static_cast< cocos2d::CCWavesTiles3D * >(DATA_PTR(mrb_self));
      obj_self->setAmplitude(fAmplitude);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWavesTiles3D#setAmplitude");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWavesTiles3D_setAmplitudeRate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float fAmplitudeRate;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &fAmplitudeRate)) {
      cocos2d::CCWavesTiles3D *obj_self = static_cast< cocos2d::CCWavesTiles3D * >(DATA_PTR(mrb_self));
      obj_self->setAmplitudeRate(fAmplitudeRate);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWavesTiles3D#setAmplitudeRate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWavesTiles3D_update(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float time;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &time)) {
      cocos2d::CCWavesTiles3D *obj_self = static_cast< cocos2d::CCWavesTiles3D * >(DATA_PTR(mrb_self));
      obj_self->update(time);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWavesTiles3D#update");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCWavesTiles3D_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCWavesTiles3D;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::CCWavesTiles3D * res = new cocos2d::CCWavesTiles3D();
      DATA_PTR(mrb_self) = res;
      cc_mrb_value_register(mrb, res, mrb_self);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCWavesTiles3D#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCZone_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value pObject;
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_CCZone;
    DATA_PTR(mrb_self) = NULL;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &pObject)) {
      cocos2d::CCZone * res = new cocos2d::CCZone(static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, pObject, &mrb_type_cocos2d_CCObject, NULL)));
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCZone#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_CCZone__get_m_pCopyObject(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::CCZone *obj_self = static_cast< cocos2d::CCZone * >(DATA_PTR(mrb_self));
  class cocos2d::CCObject * res = obj_self->m_pCopyObject;
  if (!res) {
    return mrb_nil_value();
  }
  res->retain();
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCObject"),
                       &mrb_type_cocos2d_CCObject,
                       res));
}

static mrb_value
mrb_cocos2d_CCZone__set_m_pCopyObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_pCopyObject;
  if (1 == mrb_get_args(mrb, "o", &m_pCopyObject)) {
    static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, m_pCopyObject, &mrb_type_cocos2d_CCObject, NULL))->retain();
    cocos2d::CCZone *obj_self = static_cast< cocos2d::CCZone * >(DATA_PTR(mrb_self));
    if (obj_self->m_pCopyObject) { obj_self->m_pCopyObject->release(); }
    obj_self->m_pCopyObject = static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, m_pCopyObject, &mrb_type_cocos2d_CCObject, NULL));
    return m_pCopyObject;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::CCZone#m_pCopyObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_CC_GL_ALL(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CC_GL_ALL;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_CC_PVRMIPMAP_MAX(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::CC_PVRMIPMAP_MAX;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_ConfigurationBoolean(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::ConfigurationBoolean;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_ConfigurationDouble(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::ConfigurationDouble;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_ConfigurationError(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::ConfigurationError;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_ConfigurationInt(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::ConfigurationInt;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_ConfigurationString(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::ConfigurationString;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_EGLTouchDelegate_touchesBegan(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &touches, &pEvent)) {
      cocos2d::EGLTouchDelegate *obj_self = static_cast< cocos2d::EGLTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->touchesBegan(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, touches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::EGLTouchDelegate#touchesBegan");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_EGLTouchDelegate_touchesCancelled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &touches, &pEvent)) {
      cocos2d::EGLTouchDelegate *obj_self = static_cast< cocos2d::EGLTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->touchesCancelled(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, touches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::EGLTouchDelegate#touchesCancelled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_EGLTouchDelegate_touchesEnded(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &touches, &pEvent)) {
      cocos2d::EGLTouchDelegate *obj_self = static_cast< cocos2d::EGLTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->touchesEnded(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, touches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::EGLTouchDelegate#touchesEnded");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_EGLTouchDelegate_touchesMoved(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value touches;
    mrb_value pEvent;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &touches, &pEvent)) {
      cocos2d::EGLTouchDelegate *obj_self = static_cast< cocos2d::EGLTouchDelegate * >(DATA_PTR(mrb_self));
      obj_self->touchesMoved(static_cast< cocos2d::CCSet * >(cc_mrb_data_get_ptr(mrb, touches, &mrb_type_cocos2d_CCSet, NULL)), static_cast< cocos2d::CCEvent * >(cc_mrb_data_get_ptr(mrb, pEvent, &mrb_type_cocos2d_CCEvent, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::EGLTouchDelegate#touchesMoved");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_FNTConfigLoadFile(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value file;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &file)) {
      class cocos2d::CCBMFontConfiguration * res = cocos2d::FNTConfigLoadFile(RSTRING_PTR(file));
      if (!res) {
        return mrb_nil_value();
      }
      cocos2d::CCObject *ccobj_res;
      ccobj_res = res;
      mrb_value mrb_res = cc_mrb_value_retrieve(mrb, ccobj_res);
      if (mrb_nil_p(mrb_res)) {
        mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get_by_cxx_class(mrb, ccobj_res),
                       &mrb_type_cocos2d_CCBMFontConfiguration,
                       res));
        cc_mrb_value_register(mrb, ccobj_res, mrb_res);
        ccobj_res->retain();
      }
      CCAssert(DATA_PTR(mrb_res) == ccobj_res, "");
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::FNTConfigLoadFile");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_FNTConfigRemoveCache(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::FNTConfigRemoveCache();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::FNTConfigRemoveCache");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_TMXLayerAttribBase64(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::TMXLayerAttribBase64;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_TMXLayerAttribGzip(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::TMXLayerAttribGzip;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_TMXLayerAttribNone(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::TMXLayerAttribNone;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_TMXLayerAttribZlib(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::TMXLayerAttribZlib;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_TMXPropertyLayer(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::TMXPropertyLayer;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_TMXPropertyMap(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::TMXPropertyMap;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_TMXPropertyNone(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::TMXPropertyNone;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_TMXPropertyObject(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::TMXPropertyObject;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_TMXPropertyObjectGroup(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::TMXPropertyObjectGroup;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_TMXPropertyTile(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::TMXPropertyTile;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__BMFontDef__get_charID(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_BMFontDef *obj_self = static_cast< cocos2d::_BMFontDef * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->charID;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__BMFontDef__set_charID(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int charID;
  if (1 == mrb_get_args(mrb, "i", &charID)) {
    cocos2d::_BMFontDef *obj_self = static_cast< cocos2d::_BMFontDef * >(DATA_PTR(mrb_self));
    
    obj_self->charID = charID;
    return mrb_fixnum_value(charID);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_BMFontDef#charID");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__BMFontDef__get_rect(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_BMFontDef *obj_self = static_cast< cocos2d::_BMFontDef * >(DATA_PTR(mrb_self));
  class cocos2d::CCRect *res = &obj_self->rect;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCRect"),
                       &mrb_no_free_type_cocos2d_CCRect,
                       res));
}

static mrb_value
mrb_cocos2d__BMFontDef__set_rect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value rect;
  if (1 == mrb_get_args(mrb, "o", &rect)) {
    cocos2d::_BMFontDef *obj_self = static_cast< cocos2d::_BMFontDef * >(DATA_PTR(mrb_self));
    
    obj_self->rect = *(static_cast< cocos2d::CCRect * >(cc_mrb_data_get_ptr(mrb, rect, &mrb_type_cocos2d_CCRect, &mrb_no_free_type_cocos2d_CCRect)));
    return rect;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_BMFontDef#rect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__BMFontDef__get_xAdvance(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_BMFontDef *obj_self = static_cast< cocos2d::_BMFontDef * >(DATA_PTR(mrb_self));
  short res = obj_self->xAdvance;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__BMFontDef__set_xAdvance(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int xAdvance;
  if (1 == mrb_get_args(mrb, "i", &xAdvance)) {
    cocos2d::_BMFontDef *obj_self = static_cast< cocos2d::_BMFontDef * >(DATA_PTR(mrb_self));
    
    obj_self->xAdvance = xAdvance;
    return mrb_fixnum_value(xAdvance);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_BMFontDef#xAdvance");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__BMFontDef__get_xOffset(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_BMFontDef *obj_self = static_cast< cocos2d::_BMFontDef * >(DATA_PTR(mrb_self));
  short res = obj_self->xOffset;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__BMFontDef__set_xOffset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int xOffset;
  if (1 == mrb_get_args(mrb, "i", &xOffset)) {
    cocos2d::_BMFontDef *obj_self = static_cast< cocos2d::_BMFontDef * >(DATA_PTR(mrb_self));
    
    obj_self->xOffset = xOffset;
    return mrb_fixnum_value(xOffset);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_BMFontDef#xOffset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__BMFontDef__get_yOffset(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_BMFontDef *obj_self = static_cast< cocos2d::_BMFontDef * >(DATA_PTR(mrb_self));
  short res = obj_self->yOffset;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__BMFontDef__set_yOffset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int yOffset;
  if (1 == mrb_get_args(mrb, "i", &yOffset)) {
    cocos2d::_BMFontDef *obj_self = static_cast< cocos2d::_BMFontDef * >(DATA_PTR(mrb_self));
    
    obj_self->yOffset = yOffset;
    return mrb_fixnum_value(yOffset);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_BMFontDef#yOffset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__BMFontDef_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__BMFontDef;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_BMFontDef * res = new cocos2d::_BMFontDef();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_BMFontDef#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__BMFontPadding__get_bottom(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_BMFontPadding *obj_self = static_cast< cocos2d::_BMFontPadding * >(DATA_PTR(mrb_self));
  int res = obj_self->bottom;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__BMFontPadding__set_bottom(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int bottom;
  if (1 == mrb_get_args(mrb, "i", &bottom)) {
    cocos2d::_BMFontPadding *obj_self = static_cast< cocos2d::_BMFontPadding * >(DATA_PTR(mrb_self));
    
    obj_self->bottom = bottom;
    return mrb_fixnum_value(bottom);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_BMFontPadding#bottom");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__BMFontPadding__get_left(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_BMFontPadding *obj_self = static_cast< cocos2d::_BMFontPadding * >(DATA_PTR(mrb_self));
  int res = obj_self->left;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__BMFontPadding__set_left(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int left;
  if (1 == mrb_get_args(mrb, "i", &left)) {
    cocos2d::_BMFontPadding *obj_self = static_cast< cocos2d::_BMFontPadding * >(DATA_PTR(mrb_self));
    
    obj_self->left = left;
    return mrb_fixnum_value(left);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_BMFontPadding#left");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__BMFontPadding__get_right(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_BMFontPadding *obj_self = static_cast< cocos2d::_BMFontPadding * >(DATA_PTR(mrb_self));
  int res = obj_self->right;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__BMFontPadding__set_right(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int right;
  if (1 == mrb_get_args(mrb, "i", &right)) {
    cocos2d::_BMFontPadding *obj_self = static_cast< cocos2d::_BMFontPadding * >(DATA_PTR(mrb_self));
    
    obj_self->right = right;
    return mrb_fixnum_value(right);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_BMFontPadding#right");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__BMFontPadding__get_top(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_BMFontPadding *obj_self = static_cast< cocos2d::_BMFontPadding * >(DATA_PTR(mrb_self));
  int res = obj_self->top;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__BMFontPadding__set_top(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int top;
  if (1 == mrb_get_args(mrb, "i", &top)) {
    cocos2d::_BMFontPadding *obj_self = static_cast< cocos2d::_BMFontPadding * >(DATA_PTR(mrb_self));
    
    obj_self->top = top;
    return mrb_fixnum_value(top);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_BMFontPadding#top");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__BMFontPadding_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__BMFontPadding;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_BMFontPadding * res = new cocos2d::_BMFontPadding();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_BMFontPadding#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__FontDefHashElement__get_fontDef(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_FontDefHashElement *obj_self = static_cast< cocos2d::_FontDefHashElement * >(DATA_PTR(mrb_self));
  struct cocos2d::_BMFontDef *res = &obj_self->fontDef;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_BMFontDef"),
                       &mrb_no_free_type_cocos2d__BMFontDef,
                       res));
}

static mrb_value
mrb_cocos2d__FontDefHashElement__set_fontDef(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value fontDef;
  if (1 == mrb_get_args(mrb, "o", &fontDef)) {
    cocos2d::_FontDefHashElement *obj_self = static_cast< cocos2d::_FontDefHashElement * >(DATA_PTR(mrb_self));
    
    obj_self->fontDef = *(static_cast< struct cocos2d::_BMFontDef * >(cc_mrb_data_get_ptr(mrb, fontDef, &mrb_type_cocos2d__BMFontDef, &mrb_no_free_type_cocos2d__BMFontDef)));
    return fontDef;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_FontDefHashElement#fontDef");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__FontDefHashElement__get_hh(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_FontDefHashElement *obj_self = static_cast< cocos2d::_FontDefHashElement * >(DATA_PTR(mrb_self));
  struct UT_hash_handle *res = &obj_self->hh;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "UT_hash_handle"),
                       &mrb_no_free_type_UT_hash_handle,
                       res));
}

static mrb_value
mrb_cocos2d__FontDefHashElement__set_hh(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value hh;
  if (1 == mrb_get_args(mrb, "o", &hh)) {
    cocos2d::_FontDefHashElement *obj_self = static_cast< cocos2d::_FontDefHashElement * >(DATA_PTR(mrb_self));
    
    obj_self->hh = *(static_cast< struct UT_hash_handle * >(cc_mrb_data_get_ptr(mrb, hh, &mrb_type_UT_hash_handle, &mrb_no_free_type_UT_hash_handle)));
    return hh;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_FontDefHashElement#hh");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__FontDefHashElement__get_key(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_FontDefHashElement *obj_self = static_cast< cocos2d::_FontDefHashElement * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->key;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__FontDefHashElement__set_key(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int key;
  if (1 == mrb_get_args(mrb, "i", &key)) {
    cocos2d::_FontDefHashElement *obj_self = static_cast< cocos2d::_FontDefHashElement * >(DATA_PTR(mrb_self));
    
    obj_self->key = key;
    return mrb_fixnum_value(key);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_FontDefHashElement#key");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__FontDefHashElement_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__FontDefHashElement;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_FontDefHashElement * res = new cocos2d::_FontDefHashElement();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_FontDefHashElement#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__KerningHashElement__get_amount(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_KerningHashElement *obj_self = static_cast< cocos2d::_KerningHashElement * >(DATA_PTR(mrb_self));
  int res = obj_self->amount;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__KerningHashElement__set_amount(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int amount;
  if (1 == mrb_get_args(mrb, "i", &amount)) {
    cocos2d::_KerningHashElement *obj_self = static_cast< cocos2d::_KerningHashElement * >(DATA_PTR(mrb_self));
    
    obj_self->amount = amount;
    return mrb_fixnum_value(amount);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_KerningHashElement#amount");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__KerningHashElement__get_hh(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_KerningHashElement *obj_self = static_cast< cocos2d::_KerningHashElement * >(DATA_PTR(mrb_self));
  struct UT_hash_handle *res = &obj_self->hh;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "UT_hash_handle"),
                       &mrb_no_free_type_UT_hash_handle,
                       res));
}

static mrb_value
mrb_cocos2d__KerningHashElement__set_hh(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value hh;
  if (1 == mrb_get_args(mrb, "o", &hh)) {
    cocos2d::_KerningHashElement *obj_self = static_cast< cocos2d::_KerningHashElement * >(DATA_PTR(mrb_self));
    
    obj_self->hh = *(static_cast< struct UT_hash_handle * >(cc_mrb_data_get_ptr(mrb, hh, &mrb_type_UT_hash_handle, &mrb_no_free_type_UT_hash_handle)));
    return hh;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_KerningHashElement#hh");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__KerningHashElement__get_key(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_KerningHashElement *obj_self = static_cast< cocos2d::_KerningHashElement * >(DATA_PTR(mrb_self));
  int res = obj_self->key;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__KerningHashElement__set_key(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int key;
  if (1 == mrb_get_args(mrb, "i", &key)) {
    cocos2d::_KerningHashElement *obj_self = static_cast< cocos2d::_KerningHashElement * >(DATA_PTR(mrb_self));
    
    obj_self->key = key;
    return mrb_fixnum_value(key);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_KerningHashElement#key");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__KerningHashElement_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__KerningHashElement;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_KerningHashElement * res = new cocos2d::_KerningHashElement();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_KerningHashElement#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d___CCAffineTransformMake(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float a;
    mrb_float b;
    mrb_float c;
    mrb_float d;
    mrb_float tx;
    mrb_float ty;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "ffffff", &a, &b, &c, &d, &tx, &ty)) {
      struct cocos2d::CCAffineTransform *res = new struct cocos2d::CCAffineTransform(); *res = cocos2d::__CCAffineTransformMake(a, b, c, d, tx, ty);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform"),
                       &mrb_type_cocos2d_CCAffineTransform,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::__CCAffineTransformMake");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d___CCPointApplyAffineTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value point;
    mrb_value t;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &point, &t)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::__CCPointApplyAffineTransform(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, point, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const struct cocos2d::CCAffineTransform * >(cc_mrb_data_get_ptr(mrb, t, &mrb_type_cocos2d_CCAffineTransform, &mrb_no_free_type_cocos2d_CCAffineTransform))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::__CCPointApplyAffineTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d___CCSizeApplyAffineTransform(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value size;
    mrb_value t;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &size, &t)) {
      class cocos2d::CCSize *res = new class cocos2d::CCSize(); *res = cocos2d::__CCSizeApplyAffineTransform(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, size, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))), *(static_cast< const struct cocos2d::CCAffineTransform * >(cc_mrb_data_get_ptr(mrb, t, &mrb_type_cocos2d_CCAffineTransform, &mrb_no_free_type_cocos2d_CCAffineTransform))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_type_cocos2d_CCSize,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::__CCSizeApplyAffineTransform");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccArray__get_max(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccArray *obj_self = static_cast< cocos2d::_ccArray * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->max;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccArray__set_max(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int max;
  if (1 == mrb_get_args(mrb, "i", &max)) {
    cocos2d::_ccArray *obj_self = static_cast< cocos2d::_ccArray * >(DATA_PTR(mrb_self));
    
    obj_self->max = max;
    return mrb_fixnum_value(max);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccArray#max");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccArray__get_num(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccArray *obj_self = static_cast< cocos2d::_ccArray * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->num;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccArray__set_num(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int num;
  if (1 == mrb_get_args(mrb, "i", &num)) {
    cocos2d::_ccArray *obj_self = static_cast< cocos2d::_ccArray * >(DATA_PTR(mrb_self));
    
    obj_self->num = num;
    return mrb_fixnum_value(num);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccArray#num");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccArray_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccArray;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccArray * res = new cocos2d::_ccArray();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccArray#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccBezierConfig__get_controlPoint_1(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccBezierConfig *obj_self = static_cast< cocos2d::_ccBezierConfig * >(DATA_PTR(mrb_self));
  class cocos2d::CCPoint *res = &obj_self->controlPoint_1;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_no_free_type_cocos2d_CCPoint,
                       res));
}

static mrb_value
mrb_cocos2d__ccBezierConfig__set_controlPoint_1(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value controlPoint_1;
  if (1 == mrb_get_args(mrb, "o", &controlPoint_1)) {
    cocos2d::_ccBezierConfig *obj_self = static_cast< cocos2d::_ccBezierConfig * >(DATA_PTR(mrb_self));
    
    obj_self->controlPoint_1 = *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, controlPoint_1, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint)));
    return controlPoint_1;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccBezierConfig#controlPoint_1");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccBezierConfig__get_controlPoint_2(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccBezierConfig *obj_self = static_cast< cocos2d::_ccBezierConfig * >(DATA_PTR(mrb_self));
  class cocos2d::CCPoint *res = &obj_self->controlPoint_2;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_no_free_type_cocos2d_CCPoint,
                       res));
}

static mrb_value
mrb_cocos2d__ccBezierConfig__set_controlPoint_2(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value controlPoint_2;
  if (1 == mrb_get_args(mrb, "o", &controlPoint_2)) {
    cocos2d::_ccBezierConfig *obj_self = static_cast< cocos2d::_ccBezierConfig * >(DATA_PTR(mrb_self));
    
    obj_self->controlPoint_2 = *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, controlPoint_2, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint)));
    return controlPoint_2;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccBezierConfig#controlPoint_2");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccBezierConfig__get_endPosition(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccBezierConfig *obj_self = static_cast< cocos2d::_ccBezierConfig * >(DATA_PTR(mrb_self));
  class cocos2d::CCPoint *res = &obj_self->endPosition;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_no_free_type_cocos2d_CCPoint,
                       res));
}

static mrb_value
mrb_cocos2d__ccBezierConfig__set_endPosition(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value endPosition;
  if (1 == mrb_get_args(mrb, "o", &endPosition)) {
    cocos2d::_ccBezierConfig *obj_self = static_cast< cocos2d::_ccBezierConfig * >(DATA_PTR(mrb_self));
    
    obj_self->endPosition = *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, endPosition, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint)));
    return endPosition;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccBezierConfig#endPosition");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccBezierConfig_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccBezierConfig;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccBezierConfig * res = new cocos2d::_ccBezierConfig();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccBezierConfig#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccBlendFunc__get_dst(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccBlendFunc *obj_self = static_cast< cocos2d::_ccBlendFunc * >(DATA_PTR(mrb_self));
  GLenum res = obj_self->dst;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccBlendFunc__set_dst(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int dst;
  if (1 == mrb_get_args(mrb, "i", &dst)) {
    cocos2d::_ccBlendFunc *obj_self = static_cast< cocos2d::_ccBlendFunc * >(DATA_PTR(mrb_self));
    
    obj_self->dst = dst;
    return mrb_fixnum_value(dst);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccBlendFunc#dst");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccBlendFunc__get_src(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccBlendFunc *obj_self = static_cast< cocos2d::_ccBlendFunc * >(DATA_PTR(mrb_self));
  GLenum res = obj_self->src;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccBlendFunc__set_src(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int src;
  if (1 == mrb_get_args(mrb, "i", &src)) {
    cocos2d::_ccBlendFunc *obj_self = static_cast< cocos2d::_ccBlendFunc * >(DATA_PTR(mrb_self));
    
    obj_self->src = src;
    return mrb_fixnum_value(src);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccBlendFunc#src");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccBlendFunc_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccBlendFunc;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccBlendFunc * res = new cocos2d::_ccBlendFunc();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccBlendFunc#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccCArray__get_arr(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccCArray *obj_self = static_cast< cocos2d::_ccCArray * >(DATA_PTR(mrb_self));
  void ** res = obj_self->arr;
  return mrb_obj_value(res) /* TODO: handle as array. */ ;
}

static mrb_value
mrb_cocos2d__ccCArray__set_arr(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value arr;
  if (1 == mrb_get_args(mrb, "o", &arr)) {
    cocos2d::_ccCArray *obj_self = static_cast< cocos2d::_ccCArray * >(DATA_PTR(mrb_self));
    
    obj_self->arr = static_cast< void ** >(DATA_PTR(arr));
    return arr;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccCArray#arr");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccCArray__get_max(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccCArray *obj_self = static_cast< cocos2d::_ccCArray * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->max;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccCArray__set_max(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int max;
  if (1 == mrb_get_args(mrb, "i", &max)) {
    cocos2d::_ccCArray *obj_self = static_cast< cocos2d::_ccCArray * >(DATA_PTR(mrb_self));
    
    obj_self->max = max;
    return mrb_fixnum_value(max);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccCArray#max");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccCArray__get_num(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccCArray *obj_self = static_cast< cocos2d::_ccCArray * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->num;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccCArray__set_num(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int num;
  if (1 == mrb_get_args(mrb, "i", &num)) {
    cocos2d::_ccCArray *obj_self = static_cast< cocos2d::_ccCArray * >(DATA_PTR(mrb_self));
    
    obj_self->num = num;
    return mrb_fixnum_value(num);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccCArray#num");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccCArray_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccCArray;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccCArray * res = new cocos2d::_ccCArray();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccCArray#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccColor3B__get_b(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccColor3B *obj_self = static_cast< cocos2d::_ccColor3B * >(DATA_PTR(mrb_self));
  GLubyte res = obj_self->b;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccColor3B__set_b(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int b;
  if (1 == mrb_get_args(mrb, "i", &b)) {
    cocos2d::_ccColor3B *obj_self = static_cast< cocos2d::_ccColor3B * >(DATA_PTR(mrb_self));
    
    obj_self->b = b;
    return mrb_fixnum_value(b);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccColor3B#b");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccColor3B__get_g(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccColor3B *obj_self = static_cast< cocos2d::_ccColor3B * >(DATA_PTR(mrb_self));
  GLubyte res = obj_self->g;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccColor3B__set_g(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int g;
  if (1 == mrb_get_args(mrb, "i", &g)) {
    cocos2d::_ccColor3B *obj_self = static_cast< cocos2d::_ccColor3B * >(DATA_PTR(mrb_self));
    
    obj_self->g = g;
    return mrb_fixnum_value(g);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccColor3B#g");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccColor3B__get_r(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccColor3B *obj_self = static_cast< cocos2d::_ccColor3B * >(DATA_PTR(mrb_self));
  GLubyte res = obj_self->r;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccColor3B__set_r(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int r;
  if (1 == mrb_get_args(mrb, "i", &r)) {
    cocos2d::_ccColor3B *obj_self = static_cast< cocos2d::_ccColor3B * >(DATA_PTR(mrb_self));
    
    obj_self->r = r;
    return mrb_fixnum_value(r);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccColor3B#r");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccColor3B_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccColor3B;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccColor3B * res = new cocos2d::_ccColor3B();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccColor3B#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccColor4B__get_a(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccColor4B *obj_self = static_cast< cocos2d::_ccColor4B * >(DATA_PTR(mrb_self));
  GLubyte res = obj_self->a;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccColor4B__set_a(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int a;
  if (1 == mrb_get_args(mrb, "i", &a)) {
    cocos2d::_ccColor4B *obj_self = static_cast< cocos2d::_ccColor4B * >(DATA_PTR(mrb_self));
    
    obj_self->a = a;
    return mrb_fixnum_value(a);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccColor4B#a");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccColor4B__get_b(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccColor4B *obj_self = static_cast< cocos2d::_ccColor4B * >(DATA_PTR(mrb_self));
  GLubyte res = obj_self->b;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccColor4B__set_b(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int b;
  if (1 == mrb_get_args(mrb, "i", &b)) {
    cocos2d::_ccColor4B *obj_self = static_cast< cocos2d::_ccColor4B * >(DATA_PTR(mrb_self));
    
    obj_self->b = b;
    return mrb_fixnum_value(b);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccColor4B#b");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccColor4B__get_g(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccColor4B *obj_self = static_cast< cocos2d::_ccColor4B * >(DATA_PTR(mrb_self));
  GLubyte res = obj_self->g;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccColor4B__set_g(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int g;
  if (1 == mrb_get_args(mrb, "i", &g)) {
    cocos2d::_ccColor4B *obj_self = static_cast< cocos2d::_ccColor4B * >(DATA_PTR(mrb_self));
    
    obj_self->g = g;
    return mrb_fixnum_value(g);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccColor4B#g");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccColor4B__get_r(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccColor4B *obj_self = static_cast< cocos2d::_ccColor4B * >(DATA_PTR(mrb_self));
  GLubyte res = obj_self->r;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccColor4B__set_r(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int r;
  if (1 == mrb_get_args(mrb, "i", &r)) {
    cocos2d::_ccColor4B *obj_self = static_cast< cocos2d::_ccColor4B * >(DATA_PTR(mrb_self));
    
    obj_self->r = r;
    return mrb_fixnum_value(r);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccColor4B#r");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccColor4B_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccColor4B;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccColor4B * res = new cocos2d::_ccColor4B();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccColor4B#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccColor4F__get_a(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccColor4F *obj_self = static_cast< cocos2d::_ccColor4F * >(DATA_PTR(mrb_self));
  GLfloat res = obj_self->a;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d__ccColor4F__set_a(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float a;
  if (1 == mrb_get_args(mrb, "f", &a)) {
    cocos2d::_ccColor4F *obj_self = static_cast< cocos2d::_ccColor4F * >(DATA_PTR(mrb_self));
    
    obj_self->a = a;
    return mrb_float_value(mrb, a);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccColor4F#a");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccColor4F__get_b(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccColor4F *obj_self = static_cast< cocos2d::_ccColor4F * >(DATA_PTR(mrb_self));
  GLfloat res = obj_self->b;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d__ccColor4F__set_b(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float b;
  if (1 == mrb_get_args(mrb, "f", &b)) {
    cocos2d::_ccColor4F *obj_self = static_cast< cocos2d::_ccColor4F * >(DATA_PTR(mrb_self));
    
    obj_self->b = b;
    return mrb_float_value(mrb, b);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccColor4F#b");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccColor4F__get_g(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccColor4F *obj_self = static_cast< cocos2d::_ccColor4F * >(DATA_PTR(mrb_self));
  GLfloat res = obj_self->g;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d__ccColor4F__set_g(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float g;
  if (1 == mrb_get_args(mrb, "f", &g)) {
    cocos2d::_ccColor4F *obj_self = static_cast< cocos2d::_ccColor4F * >(DATA_PTR(mrb_self));
    
    obj_self->g = g;
    return mrb_float_value(mrb, g);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccColor4F#g");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccColor4F__get_r(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccColor4F *obj_self = static_cast< cocos2d::_ccColor4F * >(DATA_PTR(mrb_self));
  GLfloat res = obj_self->r;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d__ccColor4F__set_r(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float r;
  if (1 == mrb_get_args(mrb, "f", &r)) {
    cocos2d::_ccColor4F *obj_self = static_cast< cocos2d::_ccColor4F * >(DATA_PTR(mrb_self));
    
    obj_self->r = r;
    return mrb_float_value(mrb, r);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccColor4F#r");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccColor4F_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccColor4F;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccColor4F * res = new cocos2d::_ccColor4F();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccColor4F#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontDefinition_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccFontDefinition;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccFontDefinition * res = new cocos2d::_ccFontDefinition();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontDefinition#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontDefinition__get_m_alignment(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
  cocos2d::CCTextAlignment res = obj_self->m_alignment;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccFontDefinition__set_m_alignment(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_alignment;
  if (1 == mrb_get_args(mrb, "i", &m_alignment)) {
    cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
    
    obj_self->m_alignment = (cocos2d::CCTextAlignment)m_alignment;
    return mrb_fixnum_value(m_alignment);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontDefinition#m_alignment");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontDefinition__get_m_dimensions(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
  class cocos2d::CCSize *res = &obj_self->m_dimensions;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_no_free_type_cocos2d_CCSize,
                       res));
}

static mrb_value
mrb_cocos2d__ccFontDefinition__set_m_dimensions(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_dimensions;
  if (1 == mrb_get_args(mrb, "o", &m_dimensions)) {
    cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
    
    obj_self->m_dimensions = *(static_cast< cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, m_dimensions, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize)));
    return m_dimensions;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontDefinition#m_dimensions");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontDefinition__get_m_fontFillColor(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccColor3B *res = &obj_self->m_fontFillColor;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_no_free_type_cocos2d__ccColor3B,
                       res));
}

static mrb_value
mrb_cocos2d__ccFontDefinition__set_m_fontFillColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_fontFillColor;
  if (1 == mrb_get_args(mrb, "o", &m_fontFillColor)) {
    cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
    
    obj_self->m_fontFillColor = *(static_cast< struct cocos2d::_ccColor3B * >(cc_mrb_data_get_ptr(mrb, m_fontFillColor, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B)));
    return m_fontFillColor;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontDefinition#m_fontFillColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontDefinition__get_m_fontName(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
  std::string res = obj_self->m_fontName;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__ccFontDefinition__set_m_fontName(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_fontName;
  if (1 == mrb_get_args(mrb, "S", &m_fontName)) {
    cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
    
    obj_self->m_fontName = RSTRING_PTR(m_fontName);
    return m_fontName;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontDefinition#m_fontName");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontDefinition__get_m_fontSize(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
  int res = obj_self->m_fontSize;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccFontDefinition__set_m_fontSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_fontSize;
  if (1 == mrb_get_args(mrb, "i", &m_fontSize)) {
    cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
    
    obj_self->m_fontSize = m_fontSize;
    return mrb_fixnum_value(m_fontSize);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontDefinition#m_fontSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontDefinition__get_m_shadow(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccFontShadow *res = &obj_self->m_shadow;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccFontShadow"),
                       &mrb_no_free_type_cocos2d__ccFontShadow,
                       res));
}

static mrb_value
mrb_cocos2d__ccFontDefinition__set_m_shadow(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_shadow;
  if (1 == mrb_get_args(mrb, "o", &m_shadow)) {
    cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
    
    obj_self->m_shadow = *(static_cast< struct cocos2d::_ccFontShadow * >(cc_mrb_data_get_ptr(mrb, m_shadow, &mrb_type_cocos2d__ccFontShadow, &mrb_no_free_type_cocos2d__ccFontShadow)));
    return m_shadow;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontDefinition#m_shadow");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontDefinition__get_m_stroke(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccFontStroke *res = &obj_self->m_stroke;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccFontStroke"),
                       &mrb_no_free_type_cocos2d__ccFontStroke,
                       res));
}

static mrb_value
mrb_cocos2d__ccFontDefinition__set_m_stroke(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_stroke;
  if (1 == mrb_get_args(mrb, "o", &m_stroke)) {
    cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
    
    obj_self->m_stroke = *(static_cast< struct cocos2d::_ccFontStroke * >(cc_mrb_data_get_ptr(mrb, m_stroke, &mrb_type_cocos2d__ccFontStroke, &mrb_no_free_type_cocos2d__ccFontStroke)));
    return m_stroke;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontDefinition#m_stroke");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontDefinition__get_m_vertAlignment(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
  cocos2d::CCVerticalTextAlignment res = obj_self->m_vertAlignment;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccFontDefinition__set_m_vertAlignment(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_vertAlignment;
  if (1 == mrb_get_args(mrb, "i", &m_vertAlignment)) {
    cocos2d::_ccFontDefinition *obj_self = static_cast< cocos2d::_ccFontDefinition * >(DATA_PTR(mrb_self));
    
    obj_self->m_vertAlignment = (cocos2d::CCVerticalTextAlignment)m_vertAlignment;
    return mrb_fixnum_value(m_vertAlignment);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontDefinition#m_vertAlignment");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontShadow_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccFontShadow;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccFontShadow * res = new cocos2d::_ccFontShadow();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontShadow#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontShadow__get_m_shadowBlur(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccFontShadow *obj_self = static_cast< cocos2d::_ccFontShadow * >(DATA_PTR(mrb_self));
  float res = obj_self->m_shadowBlur;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d__ccFontShadow__set_m_shadowBlur(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float m_shadowBlur;
  if (1 == mrb_get_args(mrb, "f", &m_shadowBlur)) {
    cocos2d::_ccFontShadow *obj_self = static_cast< cocos2d::_ccFontShadow * >(DATA_PTR(mrb_self));
    
    obj_self->m_shadowBlur = m_shadowBlur;
    return mrb_float_value(mrb, m_shadowBlur);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontShadow#m_shadowBlur");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontShadow__get_m_shadowEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccFontShadow *obj_self = static_cast< cocos2d::_ccFontShadow * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_shadowEnabled;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d__ccFontShadow__set_m_shadowEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_shadowEnabled;
  if (1 == mrb_get_args(mrb, "b", &m_shadowEnabled)) {
    cocos2d::_ccFontShadow *obj_self = static_cast< cocos2d::_ccFontShadow * >(DATA_PTR(mrb_self));
    
    obj_self->m_shadowEnabled = m_shadowEnabled;
    return mrb_bool_value(m_shadowEnabled);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontShadow#m_shadowEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontShadow__get_m_shadowOffset(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccFontShadow *obj_self = static_cast< cocos2d::_ccFontShadow * >(DATA_PTR(mrb_self));
  class cocos2d::CCSize *res = &obj_self->m_shadowOffset;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_no_free_type_cocos2d_CCSize,
                       res));
}

static mrb_value
mrb_cocos2d__ccFontShadow__set_m_shadowOffset(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_shadowOffset;
  if (1 == mrb_get_args(mrb, "o", &m_shadowOffset)) {
    cocos2d::_ccFontShadow *obj_self = static_cast< cocos2d::_ccFontShadow * >(DATA_PTR(mrb_self));
    
    obj_self->m_shadowOffset = *(static_cast< cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, m_shadowOffset, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize)));
    return m_shadowOffset;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontShadow#m_shadowOffset");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontShadow__get_m_shadowOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccFontShadow *obj_self = static_cast< cocos2d::_ccFontShadow * >(DATA_PTR(mrb_self));
  float res = obj_self->m_shadowOpacity;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d__ccFontShadow__set_m_shadowOpacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float m_shadowOpacity;
  if (1 == mrb_get_args(mrb, "f", &m_shadowOpacity)) {
    cocos2d::_ccFontShadow *obj_self = static_cast< cocos2d::_ccFontShadow * >(DATA_PTR(mrb_self));
    
    obj_self->m_shadowOpacity = m_shadowOpacity;
    return mrb_float_value(mrb, m_shadowOpacity);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontShadow#m_shadowOpacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontStroke_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccFontStroke;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccFontStroke * res = new cocos2d::_ccFontStroke();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontStroke#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontStroke__get_m_strokeColor(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccFontStroke *obj_self = static_cast< cocos2d::_ccFontStroke * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccColor3B *res = &obj_self->m_strokeColor;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_no_free_type_cocos2d__ccColor3B,
                       res));
}

static mrb_value
mrb_cocos2d__ccFontStroke__set_m_strokeColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value m_strokeColor;
  if (1 == mrb_get_args(mrb, "o", &m_strokeColor)) {
    cocos2d::_ccFontStroke *obj_self = static_cast< cocos2d::_ccFontStroke * >(DATA_PTR(mrb_self));
    
    obj_self->m_strokeColor = *(static_cast< struct cocos2d::_ccColor3B * >(cc_mrb_data_get_ptr(mrb, m_strokeColor, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B)));
    return m_strokeColor;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontStroke#m_strokeColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontStroke__get_m_strokeEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccFontStroke *obj_self = static_cast< cocos2d::_ccFontStroke * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->m_strokeEnabled;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d__ccFontStroke__set_m_strokeEnabled(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool m_strokeEnabled;
  if (1 == mrb_get_args(mrb, "b", &m_strokeEnabled)) {
    cocos2d::_ccFontStroke *obj_self = static_cast< cocos2d::_ccFontStroke * >(DATA_PTR(mrb_self));
    
    obj_self->m_strokeEnabled = m_strokeEnabled;
    return mrb_bool_value(m_strokeEnabled);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontStroke#m_strokeEnabled");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccFontStroke__get_m_strokeSize(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccFontStroke *obj_self = static_cast< cocos2d::_ccFontStroke * >(DATA_PTR(mrb_self));
  float res = obj_self->m_strokeSize;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d__ccFontStroke__set_m_strokeSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float m_strokeSize;
  if (1 == mrb_get_args(mrb, "f", &m_strokeSize)) {
    cocos2d::_ccFontStroke *obj_self = static_cast< cocos2d::_ccFontStroke * >(DATA_PTR(mrb_self));
    
    obj_self->m_strokeSize = m_strokeSize;
    return mrb_float_value(mrb, m_strokeSize);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccFontStroke#m_strokeSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccPVRTexturePixelFormatInfo__get_alpha(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccPVRTexturePixelFormatInfo *obj_self = static_cast< cocos2d::_ccPVRTexturePixelFormatInfo * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->alpha;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d__ccPVRTexturePixelFormatInfo__set_alpha(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool alpha;
  if (1 == mrb_get_args(mrb, "b", &alpha)) {
    cocos2d::_ccPVRTexturePixelFormatInfo *obj_self = static_cast< cocos2d::_ccPVRTexturePixelFormatInfo * >(DATA_PTR(mrb_self));
    
    obj_self->alpha = alpha;
    return mrb_bool_value(alpha);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccPVRTexturePixelFormatInfo#alpha");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccPVRTexturePixelFormatInfo__get_bpp(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccPVRTexturePixelFormatInfo *obj_self = static_cast< cocos2d::_ccPVRTexturePixelFormatInfo * >(DATA_PTR(mrb_self));
  uint32_t res = obj_self->bpp;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccPVRTexturePixelFormatInfo__set_bpp(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int bpp;
  if (1 == mrb_get_args(mrb, "i", &bpp)) {
    cocos2d::_ccPVRTexturePixelFormatInfo *obj_self = static_cast< cocos2d::_ccPVRTexturePixelFormatInfo * >(DATA_PTR(mrb_self));
    
    obj_self->bpp = bpp;
    return mrb_fixnum_value(bpp);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccPVRTexturePixelFormatInfo#bpp");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccPVRTexturePixelFormatInfo__get_ccPixelFormat(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccPVRTexturePixelFormatInfo *obj_self = static_cast< cocos2d::_ccPVRTexturePixelFormatInfo * >(DATA_PTR(mrb_self));
  cocos2d::CCTexture2DPixelFormat res = obj_self->ccPixelFormat;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccPVRTexturePixelFormatInfo__set_ccPixelFormat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int ccPixelFormat;
  if (1 == mrb_get_args(mrb, "i", &ccPixelFormat)) {
    cocos2d::_ccPVRTexturePixelFormatInfo *obj_self = static_cast< cocos2d::_ccPVRTexturePixelFormatInfo * >(DATA_PTR(mrb_self));
    
    obj_self->ccPixelFormat = (cocos2d::CCTexture2DPixelFormat)ccPixelFormat;
    return mrb_fixnum_value(ccPixelFormat);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccPVRTexturePixelFormatInfo#ccPixelFormat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccPVRTexturePixelFormatInfo__get_compressed(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccPVRTexturePixelFormatInfo *obj_self = static_cast< cocos2d::_ccPVRTexturePixelFormatInfo * >(DATA_PTR(mrb_self));
  _Bool res = obj_self->compressed;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d__ccPVRTexturePixelFormatInfo__set_compressed(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool compressed;
  if (1 == mrb_get_args(mrb, "b", &compressed)) {
    cocos2d::_ccPVRTexturePixelFormatInfo *obj_self = static_cast< cocos2d::_ccPVRTexturePixelFormatInfo * >(DATA_PTR(mrb_self));
    
    obj_self->compressed = compressed;
    return mrb_bool_value(compressed);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccPVRTexturePixelFormatInfo#compressed");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccPVRTexturePixelFormatInfo__get_format(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccPVRTexturePixelFormatInfo *obj_self = static_cast< cocos2d::_ccPVRTexturePixelFormatInfo * >(DATA_PTR(mrb_self));
  GLenum res = obj_self->format;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccPVRTexturePixelFormatInfo__set_format(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int format;
  if (1 == mrb_get_args(mrb, "i", &format)) {
    cocos2d::_ccPVRTexturePixelFormatInfo *obj_self = static_cast< cocos2d::_ccPVRTexturePixelFormatInfo * >(DATA_PTR(mrb_self));
    
    obj_self->format = format;
    return mrb_fixnum_value(format);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccPVRTexturePixelFormatInfo#format");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccPVRTexturePixelFormatInfo__get_internalFormat(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccPVRTexturePixelFormatInfo *obj_self = static_cast< cocos2d::_ccPVRTexturePixelFormatInfo * >(DATA_PTR(mrb_self));
  GLenum res = obj_self->internalFormat;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccPVRTexturePixelFormatInfo__set_internalFormat(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int internalFormat;
  if (1 == mrb_get_args(mrb, "i", &internalFormat)) {
    cocos2d::_ccPVRTexturePixelFormatInfo *obj_self = static_cast< cocos2d::_ccPVRTexturePixelFormatInfo * >(DATA_PTR(mrb_self));
    
    obj_self->internalFormat = internalFormat;
    return mrb_fixnum_value(internalFormat);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccPVRTexturePixelFormatInfo#internalFormat");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccPVRTexturePixelFormatInfo__get_type(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccPVRTexturePixelFormatInfo *obj_self = static_cast< cocos2d::_ccPVRTexturePixelFormatInfo * >(DATA_PTR(mrb_self));
  GLenum res = obj_self->type;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccPVRTexturePixelFormatInfo__set_type(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int type;
  if (1 == mrb_get_args(mrb, "i", &type)) {
    cocos2d::_ccPVRTexturePixelFormatInfo *obj_self = static_cast< cocos2d::_ccPVRTexturePixelFormatInfo * >(DATA_PTR(mrb_self));
    
    obj_self->type = type;
    return mrb_fixnum_value(type);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccPVRTexturePixelFormatInfo#type");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccPVRTexturePixelFormatInfo_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccPVRTexturePixelFormatInfo;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccPVRTexturePixelFormatInfo * res = new cocos2d::_ccPVRTexturePixelFormatInfo();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccPVRTexturePixelFormatInfo#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccPointSprite__get_color(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccPointSprite *obj_self = static_cast< cocos2d::_ccPointSprite * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccColor4B *res = &obj_self->color;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4B"),
                       &mrb_no_free_type_cocos2d__ccColor4B,
                       res));
}

static mrb_value
mrb_cocos2d__ccPointSprite__set_color(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value color;
  if (1 == mrb_get_args(mrb, "o", &color)) {
    cocos2d::_ccPointSprite *obj_self = static_cast< cocos2d::_ccPointSprite * >(DATA_PTR(mrb_self));
    
    obj_self->color = *(static_cast< struct cocos2d::_ccColor4B * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B)));
    return color;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccPointSprite#color");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccPointSprite__get_pos(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccPointSprite *obj_self = static_cast< cocos2d::_ccPointSprite * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccVertex2F *res = &obj_self->pos;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex2F"),
                       &mrb_no_free_type_cocos2d__ccVertex2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccPointSprite__set_pos(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value pos;
  if (1 == mrb_get_args(mrb, "o", &pos)) {
    cocos2d::_ccPointSprite *obj_self = static_cast< cocos2d::_ccPointSprite * >(DATA_PTR(mrb_self));
    
    obj_self->pos = *(static_cast< struct cocos2d::_ccVertex2F * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d__ccVertex2F, &mrb_no_free_type_cocos2d__ccVertex2F)));
    return pos;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccPointSprite#pos");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccPointSprite__get_size(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccPointSprite *obj_self = static_cast< cocos2d::_ccPointSprite * >(DATA_PTR(mrb_self));
  GLfloat res = obj_self->size;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d__ccPointSprite__set_size(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float size;
  if (1 == mrb_get_args(mrb, "f", &size)) {
    cocos2d::_ccPointSprite *obj_self = static_cast< cocos2d::_ccPointSprite * >(DATA_PTR(mrb_self));
    
    obj_self->size = size;
    return mrb_float_value(mrb, size);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccPointSprite#size");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccPointSprite_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccPointSprite;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccPointSprite * res = new cocos2d::_ccPointSprite();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccPointSprite#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccQuad2__get_bl(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccQuad2 *obj_self = static_cast< cocos2d::_ccQuad2 * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccVertex2F *res = &obj_self->bl;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex2F"),
                       &mrb_no_free_type_cocos2d__ccVertex2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccQuad2__set_bl(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value bl;
  if (1 == mrb_get_args(mrb, "o", &bl)) {
    cocos2d::_ccQuad2 *obj_self = static_cast< cocos2d::_ccQuad2 * >(DATA_PTR(mrb_self));
    
    obj_self->bl = *(static_cast< struct cocos2d::_ccVertex2F * >(cc_mrb_data_get_ptr(mrb, bl, &mrb_type_cocos2d__ccVertex2F, &mrb_no_free_type_cocos2d__ccVertex2F)));
    return bl;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccQuad2#bl");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccQuad2__get_br(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccQuad2 *obj_self = static_cast< cocos2d::_ccQuad2 * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccVertex2F *res = &obj_self->br;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex2F"),
                       &mrb_no_free_type_cocos2d__ccVertex2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccQuad2__set_br(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value br;
  if (1 == mrb_get_args(mrb, "o", &br)) {
    cocos2d::_ccQuad2 *obj_self = static_cast< cocos2d::_ccQuad2 * >(DATA_PTR(mrb_self));
    
    obj_self->br = *(static_cast< struct cocos2d::_ccVertex2F * >(cc_mrb_data_get_ptr(mrb, br, &mrb_type_cocos2d__ccVertex2F, &mrb_no_free_type_cocos2d__ccVertex2F)));
    return br;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccQuad2#br");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccQuad2__get_tl(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccQuad2 *obj_self = static_cast< cocos2d::_ccQuad2 * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccVertex2F *res = &obj_self->tl;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex2F"),
                       &mrb_no_free_type_cocos2d__ccVertex2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccQuad2__set_tl(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value tl;
  if (1 == mrb_get_args(mrb, "o", &tl)) {
    cocos2d::_ccQuad2 *obj_self = static_cast< cocos2d::_ccQuad2 * >(DATA_PTR(mrb_self));
    
    obj_self->tl = *(static_cast< struct cocos2d::_ccVertex2F * >(cc_mrb_data_get_ptr(mrb, tl, &mrb_type_cocos2d__ccVertex2F, &mrb_no_free_type_cocos2d__ccVertex2F)));
    return tl;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccQuad2#tl");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccQuad2__get_tr(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccQuad2 *obj_self = static_cast< cocos2d::_ccQuad2 * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccVertex2F *res = &obj_self->tr;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex2F"),
                       &mrb_no_free_type_cocos2d__ccVertex2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccQuad2__set_tr(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value tr;
  if (1 == mrb_get_args(mrb, "o", &tr)) {
    cocos2d::_ccQuad2 *obj_self = static_cast< cocos2d::_ccQuad2 * >(DATA_PTR(mrb_self));
    
    obj_self->tr = *(static_cast< struct cocos2d::_ccVertex2F * >(cc_mrb_data_get_ptr(mrb, tr, &mrb_type_cocos2d__ccVertex2F, &mrb_no_free_type_cocos2d__ccVertex2F)));
    return tr;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccQuad2#tr");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccQuad2_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccQuad2;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccQuad2 * res = new cocos2d::_ccQuad2();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccQuad2#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccQuad3__get_bl(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccQuad3 *obj_self = static_cast< cocos2d::_ccQuad3 * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccVertex3F *res = &obj_self->bl;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex3F"),
                       &mrb_no_free_type_cocos2d__ccVertex3F,
                       res));
}

static mrb_value
mrb_cocos2d__ccQuad3__set_bl(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value bl;
  if (1 == mrb_get_args(mrb, "o", &bl)) {
    cocos2d::_ccQuad3 *obj_self = static_cast< cocos2d::_ccQuad3 * >(DATA_PTR(mrb_self));
    
    obj_self->bl = *(static_cast< struct cocos2d::_ccVertex3F * >(cc_mrb_data_get_ptr(mrb, bl, &mrb_type_cocos2d__ccVertex3F, &mrb_no_free_type_cocos2d__ccVertex3F)));
    return bl;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccQuad3#bl");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccQuad3__get_br(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccQuad3 *obj_self = static_cast< cocos2d::_ccQuad3 * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccVertex3F *res = &obj_self->br;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex3F"),
                       &mrb_no_free_type_cocos2d__ccVertex3F,
                       res));
}

static mrb_value
mrb_cocos2d__ccQuad3__set_br(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value br;
  if (1 == mrb_get_args(mrb, "o", &br)) {
    cocos2d::_ccQuad3 *obj_self = static_cast< cocos2d::_ccQuad3 * >(DATA_PTR(mrb_self));
    
    obj_self->br = *(static_cast< struct cocos2d::_ccVertex3F * >(cc_mrb_data_get_ptr(mrb, br, &mrb_type_cocos2d__ccVertex3F, &mrb_no_free_type_cocos2d__ccVertex3F)));
    return br;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccQuad3#br");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccQuad3__get_tl(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccQuad3 *obj_self = static_cast< cocos2d::_ccQuad3 * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccVertex3F *res = &obj_self->tl;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex3F"),
                       &mrb_no_free_type_cocos2d__ccVertex3F,
                       res));
}

static mrb_value
mrb_cocos2d__ccQuad3__set_tl(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value tl;
  if (1 == mrb_get_args(mrb, "o", &tl)) {
    cocos2d::_ccQuad3 *obj_self = static_cast< cocos2d::_ccQuad3 * >(DATA_PTR(mrb_self));
    
    obj_self->tl = *(static_cast< struct cocos2d::_ccVertex3F * >(cc_mrb_data_get_ptr(mrb, tl, &mrb_type_cocos2d__ccVertex3F, &mrb_no_free_type_cocos2d__ccVertex3F)));
    return tl;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccQuad3#tl");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccQuad3__get_tr(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccQuad3 *obj_self = static_cast< cocos2d::_ccQuad3 * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccVertex3F *res = &obj_self->tr;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex3F"),
                       &mrb_no_free_type_cocos2d__ccVertex3F,
                       res));
}

static mrb_value
mrb_cocos2d__ccQuad3__set_tr(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value tr;
  if (1 == mrb_get_args(mrb, "o", &tr)) {
    cocos2d::_ccQuad3 *obj_self = static_cast< cocos2d::_ccQuad3 * >(DATA_PTR(mrb_self));
    
    obj_self->tr = *(static_cast< struct cocos2d::_ccVertex3F * >(cc_mrb_data_get_ptr(mrb, tr, &mrb_type_cocos2d__ccVertex3F, &mrb_no_free_type_cocos2d__ccVertex3F)));
    return tr;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccQuad3#tr");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccQuad3_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccQuad3;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccQuad3 * res = new cocos2d::_ccQuad3();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccQuad3#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccT2F_Quad__get_bl(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccT2F_Quad *obj_self = static_cast< cocos2d::_ccT2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccTex2F *res = &obj_self->bl;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccTex2F"),
                       &mrb_no_free_type_cocos2d__ccTex2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccT2F_Quad__set_bl(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value bl;
  if (1 == mrb_get_args(mrb, "o", &bl)) {
    cocos2d::_ccT2F_Quad *obj_self = static_cast< cocos2d::_ccT2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->bl = *(static_cast< struct cocos2d::_ccTex2F * >(cc_mrb_data_get_ptr(mrb, bl, &mrb_type_cocos2d__ccTex2F, &mrb_no_free_type_cocos2d__ccTex2F)));
    return bl;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccT2F_Quad#bl");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccT2F_Quad__get_br(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccT2F_Quad *obj_self = static_cast< cocos2d::_ccT2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccTex2F *res = &obj_self->br;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccTex2F"),
                       &mrb_no_free_type_cocos2d__ccTex2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccT2F_Quad__set_br(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value br;
  if (1 == mrb_get_args(mrb, "o", &br)) {
    cocos2d::_ccT2F_Quad *obj_self = static_cast< cocos2d::_ccT2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->br = *(static_cast< struct cocos2d::_ccTex2F * >(cc_mrb_data_get_ptr(mrb, br, &mrb_type_cocos2d__ccTex2F, &mrb_no_free_type_cocos2d__ccTex2F)));
    return br;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccT2F_Quad#br");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccT2F_Quad__get_tl(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccT2F_Quad *obj_self = static_cast< cocos2d::_ccT2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccTex2F *res = &obj_self->tl;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccTex2F"),
                       &mrb_no_free_type_cocos2d__ccTex2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccT2F_Quad__set_tl(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value tl;
  if (1 == mrb_get_args(mrb, "o", &tl)) {
    cocos2d::_ccT2F_Quad *obj_self = static_cast< cocos2d::_ccT2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->tl = *(static_cast< struct cocos2d::_ccTex2F * >(cc_mrb_data_get_ptr(mrb, tl, &mrb_type_cocos2d__ccTex2F, &mrb_no_free_type_cocos2d__ccTex2F)));
    return tl;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccT2F_Quad#tl");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccT2F_Quad__get_tr(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccT2F_Quad *obj_self = static_cast< cocos2d::_ccT2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccTex2F *res = &obj_self->tr;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccTex2F"),
                       &mrb_no_free_type_cocos2d__ccTex2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccT2F_Quad__set_tr(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value tr;
  if (1 == mrb_get_args(mrb, "o", &tr)) {
    cocos2d::_ccT2F_Quad *obj_self = static_cast< cocos2d::_ccT2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->tr = *(static_cast< struct cocos2d::_ccTex2F * >(cc_mrb_data_get_ptr(mrb, tr, &mrb_type_cocos2d__ccTex2F, &mrb_no_free_type_cocos2d__ccTex2F)));
    return tr;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccT2F_Quad#tr");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccT2F_Quad_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccT2F_Quad;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccT2F_Quad * res = new cocos2d::_ccT2F_Quad();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccT2F_Quad#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccTex2F__get_u(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccTex2F *obj_self = static_cast< cocos2d::_ccTex2F * >(DATA_PTR(mrb_self));
  GLfloat res = obj_self->u;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d__ccTex2F__set_u(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float u;
  if (1 == mrb_get_args(mrb, "f", &u)) {
    cocos2d::_ccTex2F *obj_self = static_cast< cocos2d::_ccTex2F * >(DATA_PTR(mrb_self));
    
    obj_self->u = u;
    return mrb_float_value(mrb, u);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccTex2F#u");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccTex2F__get_v(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccTex2F *obj_self = static_cast< cocos2d::_ccTex2F * >(DATA_PTR(mrb_self));
  GLfloat res = obj_self->v;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d__ccTex2F__set_v(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float v;
  if (1 == mrb_get_args(mrb, "f", &v)) {
    cocos2d::_ccTex2F *obj_self = static_cast< cocos2d::_ccTex2F * >(DATA_PTR(mrb_self));
    
    obj_self->v = v;
    return mrb_float_value(mrb, v);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccTex2F#v");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccTex2F_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccTex2F;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccTex2F * res = new cocos2d::_ccTex2F();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccTex2F#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccTexParams__get_magFilter(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccTexParams *obj_self = static_cast< cocos2d::_ccTexParams * >(DATA_PTR(mrb_self));
  GLuint res = obj_self->magFilter;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccTexParams__set_magFilter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int magFilter;
  if (1 == mrb_get_args(mrb, "i", &magFilter)) {
    cocos2d::_ccTexParams *obj_self = static_cast< cocos2d::_ccTexParams * >(DATA_PTR(mrb_self));
    
    obj_self->magFilter = magFilter;
    return mrb_fixnum_value(magFilter);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccTexParams#magFilter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccTexParams__get_minFilter(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccTexParams *obj_self = static_cast< cocos2d::_ccTexParams * >(DATA_PTR(mrb_self));
  GLuint res = obj_self->minFilter;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccTexParams__set_minFilter(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int minFilter;
  if (1 == mrb_get_args(mrb, "i", &minFilter)) {
    cocos2d::_ccTexParams *obj_self = static_cast< cocos2d::_ccTexParams * >(DATA_PTR(mrb_self));
    
    obj_self->minFilter = minFilter;
    return mrb_fixnum_value(minFilter);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccTexParams#minFilter");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccTexParams__get_wrapS(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccTexParams *obj_self = static_cast< cocos2d::_ccTexParams * >(DATA_PTR(mrb_self));
  GLuint res = obj_self->wrapS;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccTexParams__set_wrapS(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int wrapS;
  if (1 == mrb_get_args(mrb, "i", &wrapS)) {
    cocos2d::_ccTexParams *obj_self = static_cast< cocos2d::_ccTexParams * >(DATA_PTR(mrb_self));
    
    obj_self->wrapS = wrapS;
    return mrb_fixnum_value(wrapS);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccTexParams#wrapS");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccTexParams__get_wrapT(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccTexParams *obj_self = static_cast< cocos2d::_ccTexParams * >(DATA_PTR(mrb_self));
  GLuint res = obj_self->wrapT;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__ccTexParams__set_wrapT(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int wrapT;
  if (1 == mrb_get_args(mrb, "i", &wrapT)) {
    cocos2d::_ccTexParams *obj_self = static_cast< cocos2d::_ccTexParams * >(DATA_PTR(mrb_self));
    
    obj_self->wrapT = wrapT;
    return mrb_fixnum_value(wrapT);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccTexParams#wrapT");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccTexParams_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccTexParams;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccTexParams * res = new cocos2d::_ccTexParams();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccTexParams#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F__get_colors(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4B_T2F *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccColor4B *res = &obj_self->colors;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4B"),
                       &mrb_no_free_type_cocos2d__ccColor4B,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F__set_colors(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value colors;
  if (1 == mrb_get_args(mrb, "o", &colors)) {
    cocos2d::_ccV2F_C4B_T2F *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F * >(DATA_PTR(mrb_self));
    
    obj_self->colors = *(static_cast< struct cocos2d::_ccColor4B * >(cc_mrb_data_get_ptr(mrb, colors, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B)));
    return colors;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4B_T2F#colors");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F__get_texCoords(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4B_T2F *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccTex2F *res = &obj_self->texCoords;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccTex2F"),
                       &mrb_no_free_type_cocos2d__ccTex2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F__set_texCoords(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value texCoords;
  if (1 == mrb_get_args(mrb, "o", &texCoords)) {
    cocos2d::_ccV2F_C4B_T2F *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F * >(DATA_PTR(mrb_self));
    
    obj_self->texCoords = *(static_cast< struct cocos2d::_ccTex2F * >(cc_mrb_data_get_ptr(mrb, texCoords, &mrb_type_cocos2d__ccTex2F, &mrb_no_free_type_cocos2d__ccTex2F)));
    return texCoords;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4B_T2F#texCoords");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F__get_vertices(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4B_T2F *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccVertex2F *res = &obj_self->vertices;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex2F"),
                       &mrb_no_free_type_cocos2d__ccVertex2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F__set_vertices(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value vertices;
  if (1 == mrb_get_args(mrb, "o", &vertices)) {
    cocos2d::_ccV2F_C4B_T2F *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F * >(DATA_PTR(mrb_self));
    
    obj_self->vertices = *(static_cast< struct cocos2d::_ccVertex2F * >(cc_mrb_data_get_ptr(mrb, vertices, &mrb_type_cocos2d__ccVertex2F, &mrb_no_free_type_cocos2d__ccVertex2F)));
    return vertices;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4B_T2F#vertices");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccV2F_C4B_T2F;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccV2F_C4B_T2F * res = new cocos2d::_ccV2F_C4B_T2F();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4B_T2F#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Quad__get_bl(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccV2F_C4B_T2F *res = &obj_self->bl;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4B_T2F"),
                       &mrb_no_free_type_cocos2d__ccV2F_C4B_T2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Quad__set_bl(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value bl;
  if (1 == mrb_get_args(mrb, "o", &bl)) {
    cocos2d::_ccV2F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->bl = *(static_cast< struct cocos2d::_ccV2F_C4B_T2F * >(cc_mrb_data_get_ptr(mrb, bl, &mrb_type_cocos2d__ccV2F_C4B_T2F, &mrb_no_free_type_cocos2d__ccV2F_C4B_T2F)));
    return bl;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4B_T2F_Quad#bl");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Quad__get_br(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccV2F_C4B_T2F *res = &obj_self->br;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4B_T2F"),
                       &mrb_no_free_type_cocos2d__ccV2F_C4B_T2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Quad__set_br(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value br;
  if (1 == mrb_get_args(mrb, "o", &br)) {
    cocos2d::_ccV2F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->br = *(static_cast< struct cocos2d::_ccV2F_C4B_T2F * >(cc_mrb_data_get_ptr(mrb, br, &mrb_type_cocos2d__ccV2F_C4B_T2F, &mrb_no_free_type_cocos2d__ccV2F_C4B_T2F)));
    return br;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4B_T2F_Quad#br");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Quad__get_tl(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccV2F_C4B_T2F *res = &obj_self->tl;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4B_T2F"),
                       &mrb_no_free_type_cocos2d__ccV2F_C4B_T2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Quad__set_tl(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value tl;
  if (1 == mrb_get_args(mrb, "o", &tl)) {
    cocos2d::_ccV2F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->tl = *(static_cast< struct cocos2d::_ccV2F_C4B_T2F * >(cc_mrb_data_get_ptr(mrb, tl, &mrb_type_cocos2d__ccV2F_C4B_T2F, &mrb_no_free_type_cocos2d__ccV2F_C4B_T2F)));
    return tl;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4B_T2F_Quad#tl");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Quad__get_tr(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccV2F_C4B_T2F *res = &obj_self->tr;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4B_T2F"),
                       &mrb_no_free_type_cocos2d__ccV2F_C4B_T2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Quad__set_tr(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value tr;
  if (1 == mrb_get_args(mrb, "o", &tr)) {
    cocos2d::_ccV2F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->tr = *(static_cast< struct cocos2d::_ccV2F_C4B_T2F * >(cc_mrb_data_get_ptr(mrb, tr, &mrb_type_cocos2d__ccV2F_C4B_T2F, &mrb_no_free_type_cocos2d__ccV2F_C4B_T2F)));
    return tr;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4B_T2F_Quad#tr");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Quad_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccV2F_C4B_T2F_Quad;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccV2F_C4B_T2F_Quad * res = new cocos2d::_ccV2F_C4B_T2F_Quad();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4B_T2F_Quad#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Triangle__get_a(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4B_T2F_Triangle *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F_Triangle * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccV2F_C4B_T2F *res = &obj_self->a;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4B_T2F"),
                       &mrb_no_free_type_cocos2d__ccV2F_C4B_T2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Triangle__set_a(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value a;
  if (1 == mrb_get_args(mrb, "o", &a)) {
    cocos2d::_ccV2F_C4B_T2F_Triangle *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F_Triangle * >(DATA_PTR(mrb_self));
    
    obj_self->a = *(static_cast< struct cocos2d::_ccV2F_C4B_T2F * >(cc_mrb_data_get_ptr(mrb, a, &mrb_type_cocos2d__ccV2F_C4B_T2F, &mrb_no_free_type_cocos2d__ccV2F_C4B_T2F)));
    return a;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4B_T2F_Triangle#a");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Triangle__get_b(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4B_T2F_Triangle *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F_Triangle * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccV2F_C4B_T2F *res = &obj_self->b;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4B_T2F"),
                       &mrb_no_free_type_cocos2d__ccV2F_C4B_T2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Triangle__set_b(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value b;
  if (1 == mrb_get_args(mrb, "o", &b)) {
    cocos2d::_ccV2F_C4B_T2F_Triangle *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F_Triangle * >(DATA_PTR(mrb_self));
    
    obj_self->b = *(static_cast< struct cocos2d::_ccV2F_C4B_T2F * >(cc_mrb_data_get_ptr(mrb, b, &mrb_type_cocos2d__ccV2F_C4B_T2F, &mrb_no_free_type_cocos2d__ccV2F_C4B_T2F)));
    return b;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4B_T2F_Triangle#b");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Triangle__get_c(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4B_T2F_Triangle *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F_Triangle * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccV2F_C4B_T2F *res = &obj_self->c;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4B_T2F"),
                       &mrb_no_free_type_cocos2d__ccV2F_C4B_T2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Triangle__set_c(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value c;
  if (1 == mrb_get_args(mrb, "o", &c)) {
    cocos2d::_ccV2F_C4B_T2F_Triangle *obj_self = static_cast< cocos2d::_ccV2F_C4B_T2F_Triangle * >(DATA_PTR(mrb_self));
    
    obj_self->c = *(static_cast< struct cocos2d::_ccV2F_C4B_T2F * >(cc_mrb_data_get_ptr(mrb, c, &mrb_type_cocos2d__ccV2F_C4B_T2F, &mrb_no_free_type_cocos2d__ccV2F_C4B_T2F)));
    return c;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4B_T2F_Triangle#c");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4B_T2F_Triangle_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccV2F_C4B_T2F_Triangle;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccV2F_C4B_T2F_Triangle * res = new cocos2d::_ccV2F_C4B_T2F_Triangle();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4B_T2F_Triangle#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F__get_colors(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4F_T2F *obj_self = static_cast< cocos2d::_ccV2F_C4F_T2F * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccColor4F *res = &obj_self->colors;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4F"),
                       &mrb_no_free_type_cocos2d__ccColor4F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F__set_colors(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value colors;
  if (1 == mrb_get_args(mrb, "o", &colors)) {
    cocos2d::_ccV2F_C4F_T2F *obj_self = static_cast< cocos2d::_ccV2F_C4F_T2F * >(DATA_PTR(mrb_self));
    
    obj_self->colors = *(static_cast< struct cocos2d::_ccColor4F * >(cc_mrb_data_get_ptr(mrb, colors, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F)));
    return colors;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4F_T2F#colors");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F__get_texCoords(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4F_T2F *obj_self = static_cast< cocos2d::_ccV2F_C4F_T2F * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccTex2F *res = &obj_self->texCoords;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccTex2F"),
                       &mrb_no_free_type_cocos2d__ccTex2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F__set_texCoords(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value texCoords;
  if (1 == mrb_get_args(mrb, "o", &texCoords)) {
    cocos2d::_ccV2F_C4F_T2F *obj_self = static_cast< cocos2d::_ccV2F_C4F_T2F * >(DATA_PTR(mrb_self));
    
    obj_self->texCoords = *(static_cast< struct cocos2d::_ccTex2F * >(cc_mrb_data_get_ptr(mrb, texCoords, &mrb_type_cocos2d__ccTex2F, &mrb_no_free_type_cocos2d__ccTex2F)));
    return texCoords;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4F_T2F#texCoords");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F__get_vertices(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4F_T2F *obj_self = static_cast< cocos2d::_ccV2F_C4F_T2F * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccVertex2F *res = &obj_self->vertices;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex2F"),
                       &mrb_no_free_type_cocos2d__ccVertex2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F__set_vertices(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value vertices;
  if (1 == mrb_get_args(mrb, "o", &vertices)) {
    cocos2d::_ccV2F_C4F_T2F *obj_self = static_cast< cocos2d::_ccV2F_C4F_T2F * >(DATA_PTR(mrb_self));
    
    obj_self->vertices = *(static_cast< struct cocos2d::_ccVertex2F * >(cc_mrb_data_get_ptr(mrb, vertices, &mrb_type_cocos2d__ccVertex2F, &mrb_no_free_type_cocos2d__ccVertex2F)));
    return vertices;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4F_T2F#vertices");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccV2F_C4F_T2F;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccV2F_C4F_T2F * res = new cocos2d::_ccV2F_C4F_T2F();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4F_T2F#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F_Quad__get_bl(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4F_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4F_T2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccV2F_C4F_T2F *res = &obj_self->bl;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4F_T2F"),
                       &mrb_no_free_type_cocos2d__ccV2F_C4F_T2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F_Quad__set_bl(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value bl;
  if (1 == mrb_get_args(mrb, "o", &bl)) {
    cocos2d::_ccV2F_C4F_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4F_T2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->bl = *(static_cast< struct cocos2d::_ccV2F_C4F_T2F * >(cc_mrb_data_get_ptr(mrb, bl, &mrb_type_cocos2d__ccV2F_C4F_T2F, &mrb_no_free_type_cocos2d__ccV2F_C4F_T2F)));
    return bl;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4F_T2F_Quad#bl");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F_Quad__get_br(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4F_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4F_T2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccV2F_C4F_T2F *res = &obj_self->br;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4F_T2F"),
                       &mrb_no_free_type_cocos2d__ccV2F_C4F_T2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F_Quad__set_br(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value br;
  if (1 == mrb_get_args(mrb, "o", &br)) {
    cocos2d::_ccV2F_C4F_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4F_T2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->br = *(static_cast< struct cocos2d::_ccV2F_C4F_T2F * >(cc_mrb_data_get_ptr(mrb, br, &mrb_type_cocos2d__ccV2F_C4F_T2F, &mrb_no_free_type_cocos2d__ccV2F_C4F_T2F)));
    return br;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4F_T2F_Quad#br");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F_Quad__get_tl(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4F_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4F_T2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccV2F_C4F_T2F *res = &obj_self->tl;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4F_T2F"),
                       &mrb_no_free_type_cocos2d__ccV2F_C4F_T2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F_Quad__set_tl(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value tl;
  if (1 == mrb_get_args(mrb, "o", &tl)) {
    cocos2d::_ccV2F_C4F_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4F_T2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->tl = *(static_cast< struct cocos2d::_ccV2F_C4F_T2F * >(cc_mrb_data_get_ptr(mrb, tl, &mrb_type_cocos2d__ccV2F_C4F_T2F, &mrb_no_free_type_cocos2d__ccV2F_C4F_T2F)));
    return tl;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4F_T2F_Quad#tl");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F_Quad__get_tr(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV2F_C4F_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4F_T2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccV2F_C4F_T2F *res = &obj_self->tr;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4F_T2F"),
                       &mrb_no_free_type_cocos2d__ccV2F_C4F_T2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F_Quad__set_tr(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value tr;
  if (1 == mrb_get_args(mrb, "o", &tr)) {
    cocos2d::_ccV2F_C4F_T2F_Quad *obj_self = static_cast< cocos2d::_ccV2F_C4F_T2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->tr = *(static_cast< struct cocos2d::_ccV2F_C4F_T2F * >(cc_mrb_data_get_ptr(mrb, tr, &mrb_type_cocos2d__ccV2F_C4F_T2F, &mrb_no_free_type_cocos2d__ccV2F_C4F_T2F)));
    return tr;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4F_T2F_Quad#tr");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV2F_C4F_T2F_Quad_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccV2F_C4F_T2F_Quad;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccV2F_C4F_T2F_Quad * res = new cocos2d::_ccV2F_C4F_T2F_Quad();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV2F_C4F_T2F_Quad#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F__get_colors(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV3F_C4B_T2F *obj_self = static_cast< cocos2d::_ccV3F_C4B_T2F * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccColor4B *res = &obj_self->colors;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4B"),
                       &mrb_no_free_type_cocos2d__ccColor4B,
                       res));
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F__set_colors(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value colors;
  if (1 == mrb_get_args(mrb, "o", &colors)) {
    cocos2d::_ccV3F_C4B_T2F *obj_self = static_cast< cocos2d::_ccV3F_C4B_T2F * >(DATA_PTR(mrb_self));
    
    obj_self->colors = *(static_cast< struct cocos2d::_ccColor4B * >(cc_mrb_data_get_ptr(mrb, colors, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B)));
    return colors;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV3F_C4B_T2F#colors");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F__get_texCoords(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV3F_C4B_T2F *obj_self = static_cast< cocos2d::_ccV3F_C4B_T2F * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccTex2F *res = &obj_self->texCoords;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccTex2F"),
                       &mrb_no_free_type_cocos2d__ccTex2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F__set_texCoords(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value texCoords;
  if (1 == mrb_get_args(mrb, "o", &texCoords)) {
    cocos2d::_ccV3F_C4B_T2F *obj_self = static_cast< cocos2d::_ccV3F_C4B_T2F * >(DATA_PTR(mrb_self));
    
    obj_self->texCoords = *(static_cast< struct cocos2d::_ccTex2F * >(cc_mrb_data_get_ptr(mrb, texCoords, &mrb_type_cocos2d__ccTex2F, &mrb_no_free_type_cocos2d__ccTex2F)));
    return texCoords;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV3F_C4B_T2F#texCoords");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F__get_vertices(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV3F_C4B_T2F *obj_self = static_cast< cocos2d::_ccV3F_C4B_T2F * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccVertex3F *res = &obj_self->vertices;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex3F"),
                       &mrb_no_free_type_cocos2d__ccVertex3F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F__set_vertices(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value vertices;
  if (1 == mrb_get_args(mrb, "o", &vertices)) {
    cocos2d::_ccV3F_C4B_T2F *obj_self = static_cast< cocos2d::_ccV3F_C4B_T2F * >(DATA_PTR(mrb_self));
    
    obj_self->vertices = *(static_cast< struct cocos2d::_ccVertex3F * >(cc_mrb_data_get_ptr(mrb, vertices, &mrb_type_cocos2d__ccVertex3F, &mrb_no_free_type_cocos2d__ccVertex3F)));
    return vertices;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV3F_C4B_T2F#vertices");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccV3F_C4B_T2F;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccV3F_C4B_T2F * res = new cocos2d::_ccV3F_C4B_T2F();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV3F_C4B_T2F#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F_Quad__get_bl(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV3F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV3F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccV3F_C4B_T2F *res = &obj_self->bl;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV3F_C4B_T2F"),
                       &mrb_no_free_type_cocos2d__ccV3F_C4B_T2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F_Quad__set_bl(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value bl;
  if (1 == mrb_get_args(mrb, "o", &bl)) {
    cocos2d::_ccV3F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV3F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->bl = *(static_cast< struct cocos2d::_ccV3F_C4B_T2F * >(cc_mrb_data_get_ptr(mrb, bl, &mrb_type_cocos2d__ccV3F_C4B_T2F, &mrb_no_free_type_cocos2d__ccV3F_C4B_T2F)));
    return bl;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV3F_C4B_T2F_Quad#bl");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F_Quad__get_br(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV3F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV3F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccV3F_C4B_T2F *res = &obj_self->br;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV3F_C4B_T2F"),
                       &mrb_no_free_type_cocos2d__ccV3F_C4B_T2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F_Quad__set_br(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value br;
  if (1 == mrb_get_args(mrb, "o", &br)) {
    cocos2d::_ccV3F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV3F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->br = *(static_cast< struct cocos2d::_ccV3F_C4B_T2F * >(cc_mrb_data_get_ptr(mrb, br, &mrb_type_cocos2d__ccV3F_C4B_T2F, &mrb_no_free_type_cocos2d__ccV3F_C4B_T2F)));
    return br;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV3F_C4B_T2F_Quad#br");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F_Quad__get_tl(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV3F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV3F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccV3F_C4B_T2F *res = &obj_self->tl;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV3F_C4B_T2F"),
                       &mrb_no_free_type_cocos2d__ccV3F_C4B_T2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F_Quad__set_tl(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value tl;
  if (1 == mrb_get_args(mrb, "o", &tl)) {
    cocos2d::_ccV3F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV3F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->tl = *(static_cast< struct cocos2d::_ccV3F_C4B_T2F * >(cc_mrb_data_get_ptr(mrb, tl, &mrb_type_cocos2d__ccV3F_C4B_T2F, &mrb_no_free_type_cocos2d__ccV3F_C4B_T2F)));
    return tl;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV3F_C4B_T2F_Quad#tl");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F_Quad__get_tr(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccV3F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV3F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccV3F_C4B_T2F *res = &obj_self->tr;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccV3F_C4B_T2F"),
                       &mrb_no_free_type_cocos2d__ccV3F_C4B_T2F,
                       res));
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F_Quad__set_tr(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value tr;
  if (1 == mrb_get_args(mrb, "o", &tr)) {
    cocos2d::_ccV3F_C4B_T2F_Quad *obj_self = static_cast< cocos2d::_ccV3F_C4B_T2F_Quad * >(DATA_PTR(mrb_self));
    
    obj_self->tr = *(static_cast< struct cocos2d::_ccV3F_C4B_T2F * >(cc_mrb_data_get_ptr(mrb, tr, &mrb_type_cocos2d__ccV3F_C4B_T2F, &mrb_no_free_type_cocos2d__ccV3F_C4B_T2F)));
    return tr;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV3F_C4B_T2F_Quad#tr");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccV3F_C4B_T2F_Quad_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccV3F_C4B_T2F_Quad;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccV3F_C4B_T2F_Quad * res = new cocos2d::_ccV3F_C4B_T2F_Quad();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccV3F_C4B_T2F_Quad#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccVertex2F__get_x(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccVertex2F *obj_self = static_cast< cocos2d::_ccVertex2F * >(DATA_PTR(mrb_self));
  GLfloat res = obj_self->x;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d__ccVertex2F__set_x(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float x;
  if (1 == mrb_get_args(mrb, "f", &x)) {
    cocos2d::_ccVertex2F *obj_self = static_cast< cocos2d::_ccVertex2F * >(DATA_PTR(mrb_self));
    
    obj_self->x = x;
    return mrb_float_value(mrb, x);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccVertex2F#x");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccVertex2F__get_y(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccVertex2F *obj_self = static_cast< cocos2d::_ccVertex2F * >(DATA_PTR(mrb_self));
  GLfloat res = obj_self->y;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d__ccVertex2F__set_y(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float y;
  if (1 == mrb_get_args(mrb, "f", &y)) {
    cocos2d::_ccVertex2F *obj_self = static_cast< cocos2d::_ccVertex2F * >(DATA_PTR(mrb_self));
    
    obj_self->y = y;
    return mrb_float_value(mrb, y);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccVertex2F#y");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccVertex2F_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccVertex2F;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccVertex2F * res = new cocos2d::_ccVertex2F();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccVertex2F#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccVertex3F__get_x(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccVertex3F *obj_self = static_cast< cocos2d::_ccVertex3F * >(DATA_PTR(mrb_self));
  GLfloat res = obj_self->x;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d__ccVertex3F__set_x(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float x;
  if (1 == mrb_get_args(mrb, "f", &x)) {
    cocos2d::_ccVertex3F *obj_self = static_cast< cocos2d::_ccVertex3F * >(DATA_PTR(mrb_self));
    
    obj_self->x = x;
    return mrb_float_value(mrb, x);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccVertex3F#x");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccVertex3F__get_y(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccVertex3F *obj_self = static_cast< cocos2d::_ccVertex3F * >(DATA_PTR(mrb_self));
  GLfloat res = obj_self->y;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d__ccVertex3F__set_y(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float y;
  if (1 == mrb_get_args(mrb, "f", &y)) {
    cocos2d::_ccVertex3F *obj_self = static_cast< cocos2d::_ccVertex3F * >(DATA_PTR(mrb_self));
    
    obj_self->y = y;
    return mrb_float_value(mrb, y);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccVertex3F#y");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccVertex3F__get_z(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::_ccVertex3F *obj_self = static_cast< cocos2d::_ccVertex3F * >(DATA_PTR(mrb_self));
  GLfloat res = obj_self->z;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d__ccVertex3F__set_z(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float z;
  if (1 == mrb_get_args(mrb, "f", &z)) {
    cocos2d::_ccVertex3F *obj_self = static_cast< cocos2d::_ccVertex3F * >(DATA_PTR(mrb_self));
    
    obj_self->z = z;
    return mrb_float_value(mrb, z);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccVertex3F#z");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__ccVertex3F_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d__ccVertex3F;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::_ccVertex3F * res = new cocos2d::_ccVertex3F();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::_ccVertex3F#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccAnimationFrameData__get_delay(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::ccAnimationFrameData *obj_self = static_cast< cocos2d::ccAnimationFrameData * >(DATA_PTR(mrb_self));
  float res = obj_self->delay;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_ccAnimationFrameData__set_delay(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float delay;
  if (1 == mrb_get_args(mrb, "f", &delay)) {
    cocos2d::ccAnimationFrameData *obj_self = static_cast< cocos2d::ccAnimationFrameData * >(DATA_PTR(mrb_self));
    
    obj_self->delay = delay;
    return mrb_float_value(mrb, delay);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccAnimationFrameData#delay");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccAnimationFrameData__get_size(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::ccAnimationFrameData *obj_self = static_cast< cocos2d::ccAnimationFrameData * >(DATA_PTR(mrb_self));
  class cocos2d::CCSize *res = &obj_self->size;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCSize"),
                       &mrb_no_free_type_cocos2d_CCSize,
                       res));
}

static mrb_value
mrb_cocos2d_ccAnimationFrameData__set_size(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value size;
  if (1 == mrb_get_args(mrb, "o", &size)) {
    cocos2d::ccAnimationFrameData *obj_self = static_cast< cocos2d::ccAnimationFrameData * >(DATA_PTR(mrb_self));
    
    obj_self->size = *(static_cast< cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, size, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize)));
    return size;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccAnimationFrameData#size");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccAnimationFrameData__get_texCoords(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::ccAnimationFrameData *obj_self = static_cast< cocos2d::ccAnimationFrameData * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccT2F_Quad *res = &obj_self->texCoords;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccT2F_Quad"),
                       &mrb_no_free_type_cocos2d__ccT2F_Quad,
                       res));
}

static mrb_value
mrb_cocos2d_ccAnimationFrameData__set_texCoords(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value texCoords;
  if (1 == mrb_get_args(mrb, "o", &texCoords)) {
    cocos2d::ccAnimationFrameData *obj_self = static_cast< cocos2d::ccAnimationFrameData * >(DATA_PTR(mrb_self));
    
    obj_self->texCoords = *(static_cast< struct cocos2d::_ccT2F_Quad * >(cc_mrb_data_get_ptr(mrb, texCoords, &mrb_type_cocos2d__ccT2F_Quad, &mrb_no_free_type_cocos2d__ccT2F_Quad)));
    return texCoords;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccAnimationFrameData#texCoords");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccAnimationFrameData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_ccAnimationFrameData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::ccAnimationFrameData * res = new cocos2d::ccAnimationFrameData();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccAnimationFrameData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayAppendArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value plusArr;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &plusArr)) {
      cocos2d::ccArrayAppendArray(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)), static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, plusArr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayAppendArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayAppendArrayWithResize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value plusArr;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &plusArr)) {
      cocos2d::ccArrayAppendArrayWithResize(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)), static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, plusArr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayAppendArrayWithResize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayAppendObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value object;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &object)) {
      cocos2d::ccArrayAppendObject(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayAppendObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayAppendObjectWithResize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value object;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &object)) {
      cocos2d::ccArrayAppendObjectWithResize(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayAppendObjectWithResize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayContainsObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value object;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &object)) {
      _Bool res = cocos2d::ccArrayContainsObject(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayContainsObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayDoubleCapacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &arr)) {
      cocos2d::ccArrayDoubleCapacity(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayDoubleCapacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayEnsureExtraCapacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_int extra;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &arr, &extra)) {
      cocos2d::ccArrayEnsureExtraCapacity(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)), extra);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayEnsureExtraCapacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayFastRemoveObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value object;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &object)) {
      cocos2d::ccArrayFastRemoveObject(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayFastRemoveObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayFastRemoveObjectAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_int index;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &arr, &index)) {
      cocos2d::ccArrayFastRemoveObjectAtIndex(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)), index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayFastRemoveObjectAtIndex");
  return mrb_nil_value();
}
static mrb_value
mrb_cocos2d_ccArrayFree(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &arr)) {
      ccArray *a = static_cast<ccArray *>(DATA_PTR(arr));
      cocos2d::ccArrayFree(a);
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "Cocos2d::ccArrayFree");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayFullRemoveArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value minusArr;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &minusArr)) {
      cocos2d::ccArrayFullRemoveArray(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)), static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, minusArr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayFullRemoveArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayGetIndexOfObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value object;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &object)) {
      unsigned int res = cocos2d::ccArrayGetIndexOfObject(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object, &mrb_type_cocos2d_CCObject, NULL)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayGetIndexOfObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayInsertObjectAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value object;
    mrb_int index;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooi", &arr, &object, &index)) {
      cocos2d::ccArrayInsertObjectAtIndex(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object, &mrb_type_cocos2d_CCObject, NULL)), index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayInsertObjectAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayNew(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int capacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &capacity)) {
      ccArray * res = cocos2d::ccArrayNew(capacity);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccArray"),
                       &mrb_type_cocos2d__ccArray,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayNew");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayRemoveAllObjects(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &arr)) {
      cocos2d::ccArrayRemoveAllObjects(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayRemoveAllObjects");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayRemoveArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value minusArr;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &minusArr)) {
      cocos2d::ccArrayRemoveArray(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)), static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, minusArr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayRemoveArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayRemoveObject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value object;
    mrb_bool bReleaseObj;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oob", &arr, &object, &bReleaseObj)) {
      cocos2d::ccArrayRemoveObject(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)), static_cast< cocos2d::CCObject * >(cc_mrb_data_get_ptr(mrb, object, &mrb_type_cocos2d_CCObject, NULL)), bReleaseObj);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayRemoveObject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayRemoveObjectAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_int index;
    mrb_bool bReleaseObj;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oib", &arr, &index, &bReleaseObj)) {
      cocos2d::ccArrayRemoveObjectAtIndex(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)), index, bReleaseObj);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayRemoveObjectAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArrayShrink(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &arr)) {
      cocos2d::ccArrayShrink(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArrayShrink");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccArraySwapObjectsAtIndexes(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_int index1;
    mrb_int index2;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oii", &arr, &index1, &index2)) {
      cocos2d::ccArraySwapObjectsAtIndexes(static_cast< ccArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccArray, &mrb_no_free_type_cocos2d__ccArray)), index1, index2);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccArraySwapObjectsAtIndexes");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccBLACK(mrb_state *mrb, mrb_value mrb_self)
{
  const struct cocos2d::_ccColor3B *res = &cocos2d::ccBLACK;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_no_free_type_cocos2d__ccColor3B,
                       const_cast< struct cocos2d::_ccColor3B * >(res)));
}

static mrb_value
mrb_cocos2d__get_ccBLUE(mrb_state *mrb, mrb_value mrb_self)
{
  const struct cocos2d::_ccColor3B *res = &cocos2d::ccBLUE;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_no_free_type_cocos2d__ccColor3B,
                       const_cast< struct cocos2d::_ccColor3B * >(res)));
}

static mrb_value
mrb_cocos2d_ccCArrayAppendArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value plusArr;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &plusArr)) {
      cocos2d::ccCArrayAppendArray(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)), static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, plusArr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayAppendArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayAppendArrayWithResize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value plusArr;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &plusArr)) {
      cocos2d::ccCArrayAppendArrayWithResize(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)), static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, plusArr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayAppendArrayWithResize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayAppendValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &value)) {
      cocos2d::ccCArrayAppendValue(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)), static_cast< void * >(DATA_PTR(value)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayAppendValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayAppendValueWithResize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &value)) {
      cocos2d::ccCArrayAppendValueWithResize(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)), static_cast< void * >(DATA_PTR(value)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayAppendValueWithResize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayContainsValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &value)) {
      _Bool res = cocos2d::ccCArrayContainsValue(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)), static_cast< void * >(DATA_PTR(value)));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayContainsValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayDoubleCapacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &arr)) {
      cocos2d::ccCArrayDoubleCapacity(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayDoubleCapacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayEnsureExtraCapacity(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_int extra;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &arr, &extra)) {
      cocos2d::ccCArrayEnsureExtraCapacity(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)), extra);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayEnsureExtraCapacity");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayFastRemoveValueAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_int index;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &arr, &index)) {
      cocos2d::ccCArrayFastRemoveValueAtIndex(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)), index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayFastRemoveValueAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayFree(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &arr)) {
      cocos2d::ccCArrayFree(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayFree");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayFullRemoveArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value minusArr;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &minusArr)) {
      cocos2d::ccCArrayFullRemoveArray(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)), static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, minusArr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayFullRemoveArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayGetIndexOfValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &value)) {
      unsigned int res = cocos2d::ccCArrayGetIndexOfValue(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)), static_cast< void * >(DATA_PTR(value)));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayGetIndexOfValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayInsertValueAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value value;
    mrb_int index;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooi", &arr, &value, &index)) {
      cocos2d::ccCArrayInsertValueAtIndex(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)), static_cast< void * >(DATA_PTR(value)), index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayInsertValueAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayNew(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int capacity;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &capacity)) {
      ccCArray * res = cocos2d::ccCArrayNew(capacity);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccCArray"),
                       &mrb_type_cocos2d__ccCArray,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayNew");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayRemoveAllValues(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &arr)) {
      cocos2d::ccCArrayRemoveAllValues(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayRemoveAllValues");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayRemoveArray(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value minusArr;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &minusArr)) {
      cocos2d::ccCArrayRemoveArray(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)), static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, minusArr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayRemoveArray");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayRemoveValue(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_value value;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &arr, &value)) {
      cocos2d::ccCArrayRemoveValue(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)), static_cast< void * >(DATA_PTR(value)));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayRemoveValue");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCArrayRemoveValueAtIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arr;
    mrb_int index;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &arr, &index)) {
      cocos2d::ccCArrayRemoveValueAtIndex(static_cast< ccCArray * >(cc_mrb_data_get_ptr(mrb, arr, &mrb_type_cocos2d__ccCArray, &mrb_no_free_type_cocos2d__ccCArray)), index);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCArrayRemoveValueAtIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccCardinalSplineAt(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value p0;
    mrb_value p1;
    mrb_value p2;
    mrb_value p3;
    mrb_float tension;
    mrb_float t;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "ooooff", &p0, &p1, &p2, &p3, &tension, &t)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccCardinalSplineAt(*(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, p0, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, p1, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, p2, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, p3, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), tension, t);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccCardinalSplineAt");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccDrawCardinalSpline(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value config;
    mrb_float tension;
    mrb_int segments;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ofi", &config, &tension, &segments)) {
      cocos2d::ccDrawCardinalSpline(static_cast< cocos2d::CCPointArray * >(cc_mrb_data_get_ptr(mrb, config, &mrb_type_cocos2d_CCPointArray, NULL)), tension, segments);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawCardinalSpline");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccDrawCatmullRom(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value arrayOfControlPoints;
    mrb_int segments;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oi", &arrayOfControlPoints, &segments)) {
      cocos2d::ccDrawCatmullRom(static_cast< cocos2d::CCPointArray * >(cc_mrb_data_get_ptr(mrb, arrayOfControlPoints, &mrb_type_cocos2d_CCPointArray, NULL)), segments);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawCatmullRom");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccDrawCircle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value center;
    mrb_float radius;
    mrb_float angle;
    mrb_int segments;
    mrb_bool drawLineToCenter;
    mrb_float scaleX;
    mrb_float scaleY;
    if (7 == _argc_ && 7 == mrb_get_args(mrb, "offibff", &center, &radius, &angle, &segments, &drawLineToCenter, &scaleX, &scaleY)) {
      cocos2d::ccDrawCircle(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, center, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), radius, angle, segments, drawLineToCenter, scaleX, scaleY);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  {
    mrb_value center;
    mrb_float radius;
    mrb_float angle;
    mrb_int segments;
    mrb_bool drawLineToCenter;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "offib", &center, &radius, &angle, &segments, &drawLineToCenter)) {
      cocos2d::ccDrawCircle(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, center, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), radius, angle, segments, drawLineToCenter);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawCircle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccDrawColor4B(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int r;
    mrb_int g;
    mrb_int b;
    mrb_int a;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "iiii", &r, &g, &b, &a)) {
      cocos2d::ccDrawColor4B(r, g, b, a);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawColor4B");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccDrawColor4F(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float r;
    mrb_float g;
    mrb_float b;
    mrb_float a;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &r, &g, &b, &a)) {
      cocos2d::ccDrawColor4F(r, g, b, a);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawColor4F");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccDrawCubicBezier(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value origin;
    mrb_value control1;
    mrb_value control2;
    mrb_value destination;
    mrb_int segments;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "ooooi", &origin, &control1, &control2, &destination, &segments)) {
      cocos2d::ccDrawCubicBezier(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, origin, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, control1, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, control2, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, destination, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), segments);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawCubicBezier");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccDrawFree(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::ccDrawFree();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawFree");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccDrawInit(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::ccDrawInit();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawInit");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccDrawLine(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value origin;
    mrb_value destination;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &origin, &destination)) {
      cocos2d::ccDrawLine(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, origin, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, destination, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawLine");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccDrawPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value point;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &point)) {
      cocos2d::ccDrawPoint(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, point, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawPoint");
  return mrb_nil_value();
}

/* XXX */
static mrb_value
mrb_cocos2d_ccDrawPoints(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value points;
    mrb_int numberOfPoints;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Ai", &points, &numberOfPoints)) {
      CCPoint *cxx_points = new CCPoint[numberOfPoints];
      cc_mrb_ary_conv_to_c_array(mrb, points, cxx_points, numberOfPoints);
      cocos2d::ccDrawPoints(cxx_points, numberOfPoints);
      delete[] cxx_points;
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawPoints");
  return mrb_nil_value();
}

/* XXX */
static mrb_value
mrb_cocos2d_ccDrawPoly(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value vertices;
    mrb_int numOfVertices;
    mrb_bool closePolygon;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "Aib", &vertices, &numOfVertices, &closePolygon)) {
      CCPoint * cxx_vertices = new CCPoint[numOfVertices];
      cc_mrb_ary_conv_to_c_array(mrb, vertices, cxx_vertices, numOfVertices);
      cocos2d::ccDrawPoly(cxx_vertices, numOfVertices, closePolygon);
      delete[] cxx_vertices;
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawPoly");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccDrawQuadBezier(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value origin;
    mrb_value control;
    mrb_value destination;
    mrb_int segments;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oooi", &origin, &control, &destination, &segments)) {
      cocos2d::ccDrawQuadBezier(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, origin, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, control, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, destination, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), segments);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawQuadBezier");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccDrawRect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value origin;
    mrb_value destination;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &origin, &destination)) {
      cocos2d::ccDrawRect(*(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, origin, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, destination, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawRect");
  return mrb_nil_value();
}

/* XXX */
static mrb_value
mrb_cocos2d_ccDrawSolidPoly(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value poli;
    mrb_int numberOfPoints;
    mrb_value color;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oio", &poli, &numberOfPoints, &color)) {
      CCPoint *cxx_poli = new CCPoint[numberOfPoints];
      cocos2d::ccDrawSolidPoly(cxx_poli, numberOfPoints, *(static_cast< ccColor4F * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F))));
      delete[] cxx_poli;
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawSolidPoly");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccDrawSolidRect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value origin;
    mrb_value destination;
    mrb_value color;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &origin, &destination, &color)) {
      cocos2d::ccDrawSolidRect(*(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, origin, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, destination, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< ccColor4F * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F))));
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccDrawSolidRect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccExSwitchMask_frag(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccExSwitchMask_frag;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccExSwitchMask_frag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccExSwitchMask_frag;
  if (1 == mrb_get_args(mrb, "S", &ccExSwitchMask_frag)) {
    
    cocos2d::ccExSwitchMask_frag = RSTRING_PTR(ccExSwitchMask_frag);
    return ccExSwitchMask_frag;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccExSwitchMask_frag=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccGLBindTexture2D(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int textureId;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &textureId)) {
      cocos2d::ccGLBindTexture2D(textureId);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccGLBindTexture2D");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccGLBindTexture2DN(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int textureUnit;
    mrb_int textureId;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ii", &textureUnit, &textureId)) {
      cocos2d::ccGLBindTexture2DN(textureUnit, textureId);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccGLBindTexture2DN");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccGLBindVAO(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int vaoId;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &vaoId)) {
      cocos2d::ccGLBindVAO(vaoId);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccGLBindVAO");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccGLBlendFunc(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int sfactor;
    mrb_int dfactor;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ii", &sfactor, &dfactor)) {
      cocos2d::ccGLBlendFunc(sfactor, dfactor);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccGLBlendFunc");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccGLBlendResetToCache(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::ccGLBlendResetToCache();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccGLBlendResetToCache");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccGLDeleteProgram(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int program;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &program)) {
      cocos2d::ccGLDeleteProgram(program);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccGLDeleteProgram");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccGLDeleteTexture(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int textureId;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &textureId)) {
      cocos2d::ccGLDeleteTexture(textureId);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccGLDeleteTexture");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccGLDeleteTextureN(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int textureUnit;
    mrb_int textureId;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ii", &textureUnit, &textureId)) {
      cocos2d::ccGLDeleteTextureN(textureUnit, textureId);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccGLDeleteTextureN");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccGLEnable(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int flags;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &flags)) {
      cocos2d::ccGLEnable((ccGLServerState)flags);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccGLEnable");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccGLEnableVertexAttribs(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int flags;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &flags)) {
      cocos2d::ccGLEnableVertexAttribs(flags);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccGLEnableVertexAttribs");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccGLInvalidateStateCache(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::ccGLInvalidateStateCache();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccGLInvalidateStateCache");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccGLUseProgram(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int program;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &program)) {
      cocos2d::ccGLUseProgram(program);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccGLUseProgram");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccGRAY(mrb_state *mrb, mrb_value mrb_self)
{
  const struct cocos2d::_ccColor3B *res = &cocos2d::ccGRAY;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_no_free_type_cocos2d__ccColor3B,
                       const_cast< struct cocos2d::_ccColor3B * >(res)));
}

static mrb_value
mrb_cocos2d__get_ccGREEN(mrb_state *mrb, mrb_value mrb_self)
{
  const struct cocos2d::_ccColor3B *res = &cocos2d::ccGREEN;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_no_free_type_cocos2d__ccColor3B,
                       const_cast< struct cocos2d::_ccColor3B * >(res)));
}

static mrb_value
mrb_cocos2d__get_ccMAGENTA(mrb_state *mrb, mrb_value mrb_self)
{
  const struct cocos2d::_ccColor3B *res = &cocos2d::ccMAGENTA;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_no_free_type_cocos2d__ccColor3B,
                       const_cast< struct cocos2d::_ccColor3B * >(res)));
}

static mrb_value
mrb_cocos2d__get_ccORANGE(mrb_state *mrb, mrb_value mrb_self)
{
  const struct cocos2d::_ccColor3B *res = &cocos2d::ccORANGE;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_no_free_type_cocos2d__ccColor3B,
                       const_cast< struct cocos2d::_ccColor3B * >(res)));
}

static mrb_value
mrb_cocos2d_ccPointSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float pointSize;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &pointSize)) {
      cocos2d::ccPointSize(pointSize);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPointSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccPositionColorLengthTexture_frag(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccPositionColorLengthTexture_frag;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccPositionColorLengthTexture_frag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccPositionColorLengthTexture_frag;
  if (1 == mrb_get_args(mrb, "S", &ccPositionColorLengthTexture_frag)) {
    
    cocos2d::ccPositionColorLengthTexture_frag = RSTRING_PTR(ccPositionColorLengthTexture_frag);
    return ccPositionColorLengthTexture_frag;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPositionColorLengthTexture_frag=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccPositionColorLengthTexture_vert(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccPositionColorLengthTexture_vert;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccPositionColorLengthTexture_vert(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccPositionColorLengthTexture_vert;
  if (1 == mrb_get_args(mrb, "S", &ccPositionColorLengthTexture_vert)) {
    
    cocos2d::ccPositionColorLengthTexture_vert = RSTRING_PTR(ccPositionColorLengthTexture_vert);
    return ccPositionColorLengthTexture_vert;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPositionColorLengthTexture_vert=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccPositionColor_frag(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccPositionColor_frag;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccPositionColor_frag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccPositionColor_frag;
  if (1 == mrb_get_args(mrb, "S", &ccPositionColor_frag)) {
    
    cocos2d::ccPositionColor_frag = RSTRING_PTR(ccPositionColor_frag);
    return ccPositionColor_frag;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPositionColor_frag=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccPositionColor_vert(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccPositionColor_vert;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccPositionColor_vert(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccPositionColor_vert;
  if (1 == mrb_get_args(mrb, "S", &ccPositionColor_vert)) {
    
    cocos2d::ccPositionColor_vert = RSTRING_PTR(ccPositionColor_vert);
    return ccPositionColor_vert;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPositionColor_vert=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccPositionTextureA8Color_frag(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccPositionTextureA8Color_frag;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccPositionTextureA8Color_frag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccPositionTextureA8Color_frag;
  if (1 == mrb_get_args(mrb, "S", &ccPositionTextureA8Color_frag)) {
    
    cocos2d::ccPositionTextureA8Color_frag = RSTRING_PTR(ccPositionTextureA8Color_frag);
    return ccPositionTextureA8Color_frag;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPositionTextureA8Color_frag=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccPositionTextureA8Color_vert(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccPositionTextureA8Color_vert;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccPositionTextureA8Color_vert(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccPositionTextureA8Color_vert;
  if (1 == mrb_get_args(mrb, "S", &ccPositionTextureA8Color_vert)) {
    
    cocos2d::ccPositionTextureA8Color_vert = RSTRING_PTR(ccPositionTextureA8Color_vert);
    return ccPositionTextureA8Color_vert;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPositionTextureA8Color_vert=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccPositionTextureColorAlphaTest_frag(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccPositionTextureColorAlphaTest_frag;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccPositionTextureColorAlphaTest_frag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccPositionTextureColorAlphaTest_frag;
  if (1 == mrb_get_args(mrb, "S", &ccPositionTextureColorAlphaTest_frag)) {
    
    cocos2d::ccPositionTextureColorAlphaTest_frag = RSTRING_PTR(ccPositionTextureColorAlphaTest_frag);
    return ccPositionTextureColorAlphaTest_frag;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPositionTextureColorAlphaTest_frag=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccPositionTextureColor_frag(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccPositionTextureColor_frag;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccPositionTextureColor_frag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccPositionTextureColor_frag;
  if (1 == mrb_get_args(mrb, "S", &ccPositionTextureColor_frag)) {
    
    cocos2d::ccPositionTextureColor_frag = RSTRING_PTR(ccPositionTextureColor_frag);
    return ccPositionTextureColor_frag;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPositionTextureColor_frag=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccPositionTextureColor_vert(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccPositionTextureColor_vert;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccPositionTextureColor_vert(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccPositionTextureColor_vert;
  if (1 == mrb_get_args(mrb, "S", &ccPositionTextureColor_vert)) {
    
    cocos2d::ccPositionTextureColor_vert = RSTRING_PTR(ccPositionTextureColor_vert);
    return ccPositionTextureColor_vert;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPositionTextureColor_vert=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccPositionTexture_frag(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccPositionTexture_frag;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccPositionTexture_frag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccPositionTexture_frag;
  if (1 == mrb_get_args(mrb, "S", &ccPositionTexture_frag)) {
    
    cocos2d::ccPositionTexture_frag = RSTRING_PTR(ccPositionTexture_frag);
    return ccPositionTexture_frag;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPositionTexture_frag=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccPositionTexture_uColor_frag(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccPositionTexture_uColor_frag;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccPositionTexture_uColor_frag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccPositionTexture_uColor_frag;
  if (1 == mrb_get_args(mrb, "S", &ccPositionTexture_uColor_frag)) {
    
    cocos2d::ccPositionTexture_uColor_frag = RSTRING_PTR(ccPositionTexture_uColor_frag);
    return ccPositionTexture_uColor_frag;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPositionTexture_uColor_frag=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccPositionTexture_uColor_vert(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccPositionTexture_uColor_vert;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccPositionTexture_uColor_vert(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccPositionTexture_uColor_vert;
  if (1 == mrb_get_args(mrb, "S", &ccPositionTexture_uColor_vert)) {
    
    cocos2d::ccPositionTexture_uColor_vert = RSTRING_PTR(ccPositionTexture_uColor_vert);
    return ccPositionTexture_uColor_vert;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPositionTexture_uColor_vert=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccPositionTexture_vert(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccPositionTexture_vert;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccPositionTexture_vert(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccPositionTexture_vert;
  if (1 == mrb_get_args(mrb, "S", &ccPositionTexture_vert)) {
    
    cocos2d::ccPositionTexture_vert = RSTRING_PTR(ccPositionTexture_vert);
    return ccPositionTexture_vert;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPositionTexture_vert=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccPosition_uColor_frag(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccPosition_uColor_frag;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccPosition_uColor_frag(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccPosition_uColor_frag;
  if (1 == mrb_get_args(mrb, "S", &ccPosition_uColor_frag)) {
    
    cocos2d::ccPosition_uColor_frag = RSTRING_PTR(ccPosition_uColor_frag);
    return ccPosition_uColor_frag;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPosition_uColor_frag=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccPosition_uColor_vert(mrb_state *mrb, mrb_value mrb_self)
{
  std::string res = cocos2d::ccPosition_uColor_vert;
  return mrb_str_new_cstr(mrb, res.c_str());
}

static mrb_value
mrb_cocos2d__set_ccPosition_uColor_vert(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value ccPosition_uColor_vert;
  if (1 == mrb_get_args(mrb, "S", &ccPosition_uColor_vert)) {
    
    cocos2d::ccPosition_uColor_vert = RSTRING_PTR(ccPosition_uColor_vert);
    return ccPosition_uColor_vert;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccPosition_uColor_vert=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccRED(mrb_state *mrb, mrb_value mrb_self)
{
  const struct cocos2d::_ccColor3B *res = &cocos2d::ccRED;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_no_free_type_cocos2d__ccColor3B,
                       const_cast< struct cocos2d::_ccColor3B * >(res)));
}

static mrb_value
mrb_cocos2d_ccSetProjectionMatrixDirty(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      cocos2d::ccSetProjectionMatrixDirty();
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccSetProjectionMatrixDirty");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccTouchHandlerHelperData__get_m_type(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::ccTouchHandlerHelperData *obj_self = static_cast< cocos2d::ccTouchHandlerHelperData * >(DATA_PTR(mrb_self));
  int res = obj_self->m_type;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_ccTouchHandlerHelperData__set_m_type(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int m_type;
  if (1 == mrb_get_args(mrb, "i", &m_type)) {
    cocos2d::ccTouchHandlerHelperData *obj_self = static_cast< cocos2d::ccTouchHandlerHelperData * >(DATA_PTR(mrb_self));
    
    obj_self->m_type = m_type;
    return mrb_fixnum_value(m_type);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccTouchHandlerHelperData#m_type");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccTouchHandlerHelperData_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_ccTouchHandlerHelperData;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::ccTouchHandlerHelperData * res = new cocos2d::ccTouchHandlerHelperData();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccTouchHandlerHelperData#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccTouchMax(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::ccTouchMax;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_ccTouchSelectorAllBits(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::ccTouchSelectorAllBits;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_ccTouchSelectorBeganBit(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::ccTouchSelectorBeganBit;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_ccTouchSelectorCancelledBit(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::ccTouchSelectorCancelledBit;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_ccTouchSelectorEndedBit(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::ccTouchSelectorEndedBit;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_ccTouchSelectorMovedBit(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::ccTouchSelectorMovedBit;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_ccVertexLineIntersect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float Ax;
    mrb_float Ay;
    mrb_float Bx;
    mrb_float By;
    mrb_float Cx;
    mrb_float Cy;
    mrb_float Dx;
    mrb_float Dy;
    mrb_value T;
    if (9 == _argc_ && 9 == mrb_get_args(mrb, "ffffffffA", &Ax, &Ay, &Bx, &By, &Cx, &Cy, &Dx, &Dy, &T)) {
      float cxx_T[1]; cc_mrb_ary_conv_to_c_array(mrb, T, reinterpret_cast< float * >(cxx_T), 1);
      _Bool res = cocos2d::ccVertexLineIntersect(Ax, Ay, Bx, By, Cx, Cy, Dx, Dy, cxx_T);
      cc_mrb_ary_conv_from_c_array(mrb, T, reinterpret_cast< float * >(cxx_T), 1);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccVertexLineIntersect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccVertexLineToPolygon(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value points;
    mrb_float stroke;
    mrb_value vertices;
    mrb_int offset;
    mrb_int nuPoints;
    if (5 == _argc_ && 5 == mrb_get_args(mrb, "ofoii", &points, &stroke, &vertices, &offset, &nuPoints)) {
      cocos2d::ccVertexLineToPolygon(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, points, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint)), stroke, static_cast< ccVertex2F * >(cc_mrb_data_get_ptr(mrb, vertices, &mrb_type_cocos2d__ccVertex2F, &mrb_no_free_type_cocos2d__ccVertex2F)), offset, nuPoints);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccVertexLineToPolygon");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_ccWHITE(mrb_state *mrb, mrb_value mrb_self)
{
  const struct cocos2d::_ccColor3B *res = &cocos2d::ccWHITE;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_no_free_type_cocos2d__ccColor3B,
                       const_cast< struct cocos2d::_ccColor3B * >(res)));
}

static mrb_value
mrb_cocos2d__get_ccYELLOW(mrb_state *mrb, mrb_value mrb_self)
{
  const struct cocos2d::_ccColor3B *res = &cocos2d::ccYELLOW;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_no_free_type_cocos2d__ccColor3B,
                       const_cast< struct cocos2d::_ccColor3B * >(res)));
}

static mrb_value
mrb_cocos2d_cc_timeval__get_tv_sec(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::cc_timeval *obj_self = static_cast< cocos2d::cc_timeval * >(DATA_PTR(mrb_self));
  long res = obj_self->tv_sec;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_cc_timeval__set_tv_sec(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int tv_sec;
  if (1 == mrb_get_args(mrb, "i", &tv_sec)) {
    cocos2d::cc_timeval *obj_self = static_cast< cocos2d::cc_timeval * >(DATA_PTR(mrb_self));
    
    obj_self->tv_sec = tv_sec;
    return mrb_fixnum_value(tv_sec);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::cc_timeval#tv_sec");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_cc_timeval__get_tv_usec(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::cc_timeval *obj_self = static_cast< cocos2d::cc_timeval * >(DATA_PTR(mrb_self));
  int res = obj_self->tv_usec;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_cc_timeval__set_tv_usec(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int tv_usec;
  if (1 == mrb_get_args(mrb, "i", &tv_usec)) {
    cocos2d::cc_timeval *obj_self = static_cast< cocos2d::cc_timeval * >(DATA_PTR(mrb_self));
    
    obj_self->tv_usec = tv_usec;
    return mrb_fixnum_value(tv_usec);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::cc_timeval#tv_usec");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_cc_timeval_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_cc_timeval;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::cc_timeval * res = new cocos2d::cc_timeval();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::cc_timeval#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_cc_utf16_to_utf8(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value str;
    mrb_int len;
    mrb_value items_read;
    mrb_value items_written;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "AiAA", &str, &len, &items_read, &items_written)) {
      unsigned short cxx_str[1]; cc_mrb_ary_conv_to_c_array(mrb, str, reinterpret_cast< unsigned short * >(cxx_str), 1);
      long cxx_items_read[1]; cc_mrb_ary_conv_to_c_array(mrb, items_read, reinterpret_cast< long * >(cxx_items_read), 1);
      long cxx_items_written[1]; cc_mrb_ary_conv_to_c_array(mrb, items_written, reinterpret_cast< long * >(cxx_items_written), 1);
      std::string res = cocos2d::cc_utf16_to_utf8(cxx_str, len, cxx_items_read, cxx_items_written);
      cc_mrb_ary_conv_from_c_array(mrb, str, reinterpret_cast< unsigned short * >(cxx_str), 1);
      cc_mrb_ary_conv_from_c_array(mrb, items_read, reinterpret_cast< long * >(cxx_items_read), 1);
      cc_mrb_ary_conv_from_c_array(mrb, items_written, reinterpret_cast< long * >(cxx_items_written), 1);
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::cc_utf16_to_utf8");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_cc_utf16_vec_from_utf16_str(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value str;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "A", &str)) {
      unsigned short cxx_str[1]; cc_mrb_ary_conv_to_c_array(mrb, str, reinterpret_cast< unsigned short * >(cxx_str), 1);
      std::vector<unsigned short> res = cocos2d::cc_utf16_vec_from_utf16_str(cxx_str);
      cc_mrb_ary_conv_from_c_array(mrb, str, reinterpret_cast< unsigned short * >(cxx_str), 1);
      mrb_value mrb_res = cc_mrb_ary_conv_from(mrb, mrb_ary_new(mrb), res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::cc_utf16_vec_from_utf16_str");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_cc_utf8_find_last_not_char(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value str;
    mrb_int c;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Ai", &str, &c)) {
      std::vector<unsigned short> cxx_str; cc_mrb_ary_conv_to(mrb, str, cxx_str);
      unsigned int res = cocos2d::cc_utf8_find_last_not_char(cxx_str, c);
      cc_mrb_ary_conv_from(mrb, str, cxx_str);
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::cc_utf8_find_last_not_char");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_cc_utf8_strlen(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value p;
    mrb_int max;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "Si", &p, &max)) {
      long res = cocos2d::cc_utf8_strlen(RSTRING_PTR(p), max);
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::cc_utf8_strlen");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_cc_utf8_to_utf16(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value str_old;
    mrb_int length;
    mrb_value rUtf16Size;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "SiA", &str_old, &length, &rUtf16Size)) {
      int cxx_rUtf16Size[1]; cc_mrb_ary_conv_to_c_array(mrb, rUtf16Size, reinterpret_cast< int * >(cxx_rUtf16Size), 1);
      unsigned short *res = cocos2d::cc_utf8_to_utf16(RSTRING_PTR(str_old), length, cxx_rUtf16Size);
      cc_mrb_ary_conv_from_c_array(mrb, rUtf16Size, reinterpret_cast< int * >(cxx_rUtf16Size), 1);
      mrb_value mrb_res = cc_mrb_ary_conv_from_c_array(mrb, mrb_ary_new_capa(mrb, 1), reinterpret_cast< unsigned short * >(res), 1);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::cc_utf8_to_utf16");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_cc_utf8_trim_ws(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value str;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "A", &str)) {
      std::vector<unsigned short> * cxx_str; cc_mrb_ary_conv_to(mrb, str, cxx_str);
      cocos2d::cc_utf8_trim_ws(cxx_str);
      cc_mrb_ary_conv_from(mrb, str, cxx_str);
      mrb_value mrb_res = mrb_self;
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::cc_utf8_trim_ws");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_cc_wcslen(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value str;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "A", &str)) {
      unsigned short cxx_str[1]; cc_mrb_ary_conv_to_c_array(mrb, str, reinterpret_cast< unsigned short * >(cxx_str), 1);
      int res = cocos2d::cc_wcslen(cxx_str);
      cc_mrb_ary_conv_from_c_array(mrb, str, reinterpret_cast< unsigned short * >(cxx_str), 1);
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::cc_wcslen");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccc3(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int r;
    mrb_int g;
    mrb_int b;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "iii", &r, &g, &b)) {
      ccColor3B *res = new ccColor3B(); *res = cocos2d::ccc3(r, g, b);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B"),
                       &mrb_type_cocos2d__ccColor3B,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccc3");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccc3BEqual(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value col1;
    mrb_value col2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &col1, &col2)) {
      _Bool res = cocos2d::ccc3BEqual(*(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, col1, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))), *(static_cast< const ccColor3B * >(cc_mrb_data_get_ptr(mrb, col2, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccc3BEqual");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccc4(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int r;
    mrb_int g;
    mrb_int b;
    mrb_int o;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "iiii", &r, &g, &b, &o)) {
      ccColor4B *res = new ccColor4B(); *res = cocos2d::ccc4(r, g, b, o);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4B"),
                       &mrb_type_cocos2d__ccColor4B,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccc4");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccc4BFromccc4F(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value c;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &c)) {
      ccColor4B *res = new ccColor4B(); *res = cocos2d::ccc4BFromccc4F(*(static_cast< ccColor4F * >(cc_mrb_data_get_ptr(mrb, c, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4B"),
                       &mrb_type_cocos2d__ccColor4B,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccc4BFromccc4F");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccc4FEqual(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value a;
    mrb_value b;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &a, &b)) {
      _Bool res = cocos2d::ccc4FEqual(*(static_cast< ccColor4F * >(cc_mrb_data_get_ptr(mrb, a, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F))), *(static_cast< ccColor4F * >(cc_mrb_data_get_ptr(mrb, b, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccc4FEqual");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccc4FFromccc3B(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value c;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &c)) {
      ccColor4F *res = new ccColor4F(); *res = cocos2d::ccc4FFromccc3B(*(static_cast< ccColor3B * >(cc_mrb_data_get_ptr(mrb, c, &mrb_type_cocos2d__ccColor3B, &mrb_no_free_type_cocos2d__ccColor3B))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4F"),
                       &mrb_type_cocos2d__ccColor4F,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccc4FFromccc3B");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccc4FFromccc4B(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value c;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &c)) {
      ccColor4F *res = new ccColor4F(); *res = cocos2d::ccc4FFromccc4B(*(static_cast< ccColor4B * >(cc_mrb_data_get_ptr(mrb, c, &mrb_type_cocos2d__ccColor4B, &mrb_no_free_type_cocos2d__ccColor4B))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4F"),
                       &mrb_type_cocos2d__ccColor4F,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccc4FFromccc4B");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccc4f(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float r;
    mrb_float g;
    mrb_float b;
    mrb_float a;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "ffff", &r, &g, &b, &a)) {
      ccColor4F *res = new ccColor4F(); *res = cocos2d::ccc4f(r, g, b, a);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4F"),
                       &mrb_type_cocos2d__ccColor4F,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccc4f");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpAdd(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v1;
    mrb_value v2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &v1, &v2)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpAdd(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v1, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v2, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpAdd");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpAngle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value a;
    mrb_value b;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &a, &b)) {
      float res = cocos2d::ccpAngle(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, a, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, b, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpAngle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpAngleSigned(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value a;
    mrb_value b;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &a, &b)) {
      float res = cocos2d::ccpAngleSigned(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, a, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, b, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpAngleSigned");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpClamp(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value p;
    mrb_value from;
    mrb_value to;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "ooo", &p, &from, &to)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpClamp(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, p, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, from, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, to, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpClamp");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpCompMult(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value a;
    mrb_value b;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &a, &b)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpCompMult(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, a, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, b, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpCompMult");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpCompOp(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value p;
    mrb_value opFunc;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &p, &opFunc)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpCompOp(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, p, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), _cast_as_func< float (*)(float) >(DATA_PTR(opFunc)));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpCompOp");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpCross(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v1;
    mrb_value v2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &v1, &v2)) {
      float res = cocos2d::ccpCross(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v1, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v2, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpCross");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpDistance(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v1;
    mrb_value v2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &v1, &v2)) {
      float res = cocos2d::ccpDistance(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v1, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v2, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpDistance");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpDistanceSQ(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value p1;
    mrb_value p2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &p1, &p2)) {
      float res = cocos2d::ccpDistanceSQ(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, p1, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, p2, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpDistanceSQ");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpDot(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v1;
    mrb_value v2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &v1, &v2)) {
      float res = cocos2d::ccpDot(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v1, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v2, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpDot");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpForAngle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float a;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "f", &a)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpForAngle(a);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpForAngle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpFromSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value s;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &s)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpFromSize(*(static_cast< const class cocos2d::CCSize * >(cc_mrb_data_get_ptr(mrb, s, &mrb_type_cocos2d_CCSize, &mrb_no_free_type_cocos2d_CCSize))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpFromSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpFuzzyEqual(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value a;
    mrb_value b;
    mrb_float variance;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oof", &a, &b, &variance)) {
      _Bool res = cocos2d::ccpFuzzyEqual(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, a, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, b, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), variance);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpFuzzyEqual");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpIntersectPoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value A;
    mrb_value B;
    mrb_value C;
    mrb_value D;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oooo", &A, &B, &C, &D)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpIntersectPoint(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, A, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, B, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, C, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, D, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpIntersectPoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpLength(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &v)) {
      float res = cocos2d::ccpLength(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpLength");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpLengthSQ(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &v)) {
      float res = cocos2d::ccpLengthSQ(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpLengthSQ");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpLerp(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value a;
    mrb_value b;
    mrb_float alpha;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oof", &a, &b, &alpha)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpLerp(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, a, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, b, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), alpha);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpLerp");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpLineIntersect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value p1;
    mrb_value p2;
    mrb_value p3;
    mrb_value p4;
    mrb_value s;
    mrb_value t;
    if (6 == _argc_ && 6 == mrb_get_args(mrb, "ooooAA", &p1, &p2, &p3, &p4, &s, &t)) {
      float cxx_s[1]; cc_mrb_ary_conv_to_c_array(mrb, s, reinterpret_cast< float * >(cxx_s), 1);
      float cxx_t[1]; cc_mrb_ary_conv_to_c_array(mrb, t, reinterpret_cast< float * >(cxx_t), 1);
      _Bool res = cocos2d::ccpLineIntersect(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, p1, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, p2, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, p3, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, p4, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), cxx_s, cxx_t);
      cc_mrb_ary_conv_from_c_array(mrb, s, reinterpret_cast< float * >(cxx_s), 1);
      cc_mrb_ary_conv_from_c_array(mrb, t, reinterpret_cast< float * >(cxx_t), 1);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpLineIntersect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpMidpoint(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v1;
    mrb_value v2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &v1, &v2)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpMidpoint(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v1, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v2, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpMidpoint");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpMult(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v;
    mrb_float s;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "of", &v, &s)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpMult(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), s);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpMult");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpNeg(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &v)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpNeg(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpNeg");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpNormalize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &v)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpNormalize(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpNormalize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpPerp(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &v)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpPerp(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpPerp");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpProject(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v1;
    mrb_value v2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &v1, &v2)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpProject(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v1, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v2, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpProject");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpRPerp(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &v)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpRPerp(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpRPerp");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpRotate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v1;
    mrb_value v2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &v1, &v2)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpRotate(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v1, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v2, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpRotate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpRotateByAngle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v;
    mrb_value pivot;
    mrb_float angle;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "oof", &v, &pivot, &angle)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpRotateByAngle(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pivot, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), angle);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpRotateByAngle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpSegmentIntersect(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value A;
    mrb_value B;
    mrb_value C;
    mrb_value D;
    if (4 == _argc_ && 4 == mrb_get_args(mrb, "oooo", &A, &B, &C, &D)) {
      _Bool res = cocos2d::ccpSegmentIntersect(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, A, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, B, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, C, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, D, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpSegmentIntersect");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpSub(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v1;
    mrb_value v2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &v1, &v2)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpSub(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v1, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v2, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpSub");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpToAngle(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "o", &v)) {
      float res = cocos2d::ccpToAngle(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpToAngle");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_ccpUnrotate(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value v1;
    mrb_value v2;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "oo", &v1, &v2)) {
      class cocos2d::CCPoint *res = new class cocos2d::CCPoint(); *res = cocos2d::ccpUnrotate(*(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v1, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))), *(static_cast< const class cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, v2, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint))));
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_type_cocos2d_CCPoint,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::ccpUnrotate");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_clampf(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float value;
    mrb_float min_inclusive;
    mrb_float max_inclusive;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &value, &min_inclusive, &max_inclusive)) {
      float res = cocos2d::clampf(value, min_inclusive, max_inclusive);
      mrb_value mrb_res = mrb_float_value(mrb, res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::clampf");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_cocos2dVersion(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    if (0 == _argc_) {
      std::string res = cocos2d::cocos2dVersion();
      mrb_value mrb_res = mrb_str_new_cstr(mrb, res.c_str());
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::cocos2dVersion");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_getHashCodeByString(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_value key;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "S", &key)) {
      unsigned int res = cocos2d::getHashCodeByString(RSTRING_PTR(key));
      mrb_value mrb_res = mrb_fixnum_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::getHashCodeByString");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_isspace_unicode(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_int ch;
    if (1 == _argc_ && 1 == mrb_get_args(mrb, "i", &ch)) {
      _Bool res = cocos2d::isspace_unicode(ch);
      mrb_value mrb_res = mrb_bool_value(res);
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::isspace_unicode");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_kCCActionTagInvalid(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCActionTagInvalid;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCBlendFuncDisable(mrb_state *mrb, mrb_value mrb_self)
{
  const struct cocos2d::_ccBlendFunc *res = &cocos2d::kCCBlendFuncDisable;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccBlendFunc"),
                       &mrb_no_free_type_cocos2d__ccBlendFunc,
                       const_cast< struct cocos2d::_ccBlendFunc * >(res)));
}

static mrb_value
mrb_cocos2d__get_kCCDirectorProjection2D(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCDirectorProjection2D;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCDirectorProjection3D(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCDirectorProjection3D;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCDirectorProjectionCustom(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCDirectorProjectionCustom;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCDirectorProjectionDefault(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCDirectorProjectionDefault;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCFlipedAll(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCFlipedAll;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCFlippedMask(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCFlippedMask;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCImageFormatJPEG(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCImageFormatJPEG;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCImageFormatPNG(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCImageFormatPNG;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCLabelAutomaticWidth(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCLabelAutomaticWidth;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCMenuHandlerPriority(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCMenuHandlerPriority;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCMenuStateTrackingTouch(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCMenuStateTrackingTouch;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCMenuStateWaiting(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCMenuStateWaiting;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCNodeOnCleanup(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCNodeOnCleanup;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCNodeOnEnter(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCNodeOnEnter;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCNodeOnEnterTransitionDidFinish(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCNodeOnEnterTransitionDidFinish;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCNodeOnExit(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCNodeOnExit;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCNodeOnExitTransitionDidStart(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCNodeOnExitTransitionDidStart;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCNodeTagInvalid(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCNodeTagInvalid;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCParticleDurationInfinity(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCParticleDurationInfinity;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCParticleModeGravity(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCParticleModeGravity;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCParticleModeRadius(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCParticleModeRadius;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCParticleStartRadiusEqualToEndRadius(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCParticleStartRadiusEqualToEndRadius;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCParticleStartSizeEqualToEndSize(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCParticleStartSizeEqualToEndSize;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCPositionTypeFree(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCPositionTypeFree;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCPositionTypeGrouped(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCPositionTypeGrouped;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCPositionTypeRelative(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCPositionTypeRelative;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCProfilerCategoryBatchSprite(mrb_state *mrb, mrb_value mrb_self)
{
  _Bool res = cocos2d::kCCProfilerCategoryBatchSprite;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d__set_kCCProfilerCategoryBatchSprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool kCCProfilerCategoryBatchSprite;
  if (1 == mrb_get_args(mrb, "b", &kCCProfilerCategoryBatchSprite)) {
    
    cocos2d::kCCProfilerCategoryBatchSprite = kCCProfilerCategoryBatchSprite;
    return mrb_bool_value(kCCProfilerCategoryBatchSprite);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::kCCProfilerCategoryBatchSprite=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_kCCProfilerCategoryParticles(mrb_state *mrb, mrb_value mrb_self)
{
  _Bool res = cocos2d::kCCProfilerCategoryParticles;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d__set_kCCProfilerCategoryParticles(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool kCCProfilerCategoryParticles;
  if (1 == mrb_get_args(mrb, "b", &kCCProfilerCategoryParticles)) {
    
    cocos2d::kCCProfilerCategoryParticles = kCCProfilerCategoryParticles;
    return mrb_bool_value(kCCProfilerCategoryParticles);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::kCCProfilerCategoryParticles=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_kCCProfilerCategorySprite(mrb_state *mrb, mrb_value mrb_self)
{
  _Bool res = cocos2d::kCCProfilerCategorySprite;
  return mrb_bool_value(res);
}

static mrb_value
mrb_cocos2d__set_kCCProfilerCategorySprite(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_bool kCCProfilerCategorySprite;
  if (1 == mrb_get_args(mrb, "b", &kCCProfilerCategorySprite)) {
    
    cocos2d::kCCProfilerCategorySprite = kCCProfilerCategorySprite;
    return mrb_bool_value(kCCProfilerCategorySprite);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::kCCProfilerCategorySprite=");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d__get_kCCProgressTimerTypeBar(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCProgressTimerTypeBar;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCProgressTimerTypeRadial(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCProgressTimerTypeRadial;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTMXTileDiagonalFlag(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTMXTileDiagonalFlag;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTMXTileHorizontalFlag(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTMXTileHorizontalFlag;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTMXTileVerticalFlag(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTMXTileVerticalFlag;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTextAlignmentCenter(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTextAlignmentCenter;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTextAlignmentLeft(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTextAlignmentLeft;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTextAlignmentRight(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTextAlignmentRight;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTexture2DPixelFormat_A8(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTexture2DPixelFormat_A8;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTexture2DPixelFormat_AI88(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTexture2DPixelFormat_AI88;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTexture2DPixelFormat_Default(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTexture2DPixelFormat_Default;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTexture2DPixelFormat_I8(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTexture2DPixelFormat_I8;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTexture2DPixelFormat_PVRTC2(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTexture2DPixelFormat_PVRTC2;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTexture2DPixelFormat_PVRTC4(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTexture2DPixelFormat_PVRTC4;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTexture2DPixelFormat_RGB565(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTexture2DPixelFormat_RGB565;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTexture2DPixelFormat_RGB5A1(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTexture2DPixelFormat_RGB5A1;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTexture2DPixelFormat_RGB888(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTexture2DPixelFormat_RGB888;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTexture2DPixelFormat_RGBA4444(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTexture2DPixelFormat_RGBA4444;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTexture2DPixelFormat_RGBA8888(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTexture2DPixelFormat_RGBA8888;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTouchesAllAtOnce(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTouchesAllAtOnce;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTouchesOneByOne(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTouchesOneByOne;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTransitionOrientationDownOver(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTransitionOrientationDownOver;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTransitionOrientationLeftOver(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTransitionOrientationLeftOver;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTransitionOrientationRightOver(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTransitionOrientationRightOver;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCTransitionOrientationUpOver(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCTransitionOrientationUpOver;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCUniformCosTime(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCUniformCosTime;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCUniformMVMatrix(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCUniformMVMatrix;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCUniformMVPMatrix(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCUniformMVPMatrix;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCUniformPMatrix(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCUniformPMatrix;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCUniformRandom01(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCUniformRandom01;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCUniformSampler(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCUniformSampler;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCUniformSinTime(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCUniformSinTime;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCUniformTime(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCUniformTime;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCUniform_MAX(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCUniform_MAX;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCVertexAttribFlag_Color(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCVertexAttribFlag_Color;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCVertexAttribFlag_None(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCVertexAttribFlag_None;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCVertexAttribFlag_PosColorTex(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCVertexAttribFlag_PosColorTex;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCVertexAttribFlag_Position(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCVertexAttribFlag_Position;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCVertexAttribFlag_TexCoords(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCVertexAttribFlag_TexCoords;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCVertexAttrib_Color(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCVertexAttrib_Color;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCVertexAttrib_MAX(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCVertexAttrib_MAX;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCVertexAttrib_Position(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCVertexAttrib_Position;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCVertexAttrib_TexCoords(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCVertexAttrib_TexCoords;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCVerticalTextAlignmentBottom(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCVerticalTextAlignmentBottom;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCVerticalTextAlignmentCenter(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCVerticalTextAlignmentCenter;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kCCVerticalTextAlignmentTop(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kCCVerticalTextAlignmentTop;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kLanguageArabic(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kLanguageArabic;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kLanguageChinese(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kLanguageChinese;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kLanguageEnglish(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kLanguageEnglish;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kLanguageFrench(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kLanguageFrench;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kLanguageGerman(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kLanguageGerman;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kLanguageHungarian(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kLanguageHungarian;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kLanguageItalian(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kLanguageItalian;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kLanguageJapanese(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kLanguageJapanese;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kLanguageKorean(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kLanguageKorean;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kLanguagePortuguese(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kLanguagePortuguese;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kLanguageRussian(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kLanguageRussian;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kLanguageSpanish(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kLanguageSpanish;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kMaxLogLen(mrb_state *mrb, mrb_value mrb_self)
{
  const int res = cocos2d::kMaxLogLen;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kParticleDurationInfinity(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kParticleDurationInfinity;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kParticleStartSizeEqualToEndSize(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kParticleStartSizeEqualToEndSize;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kPositionTypeFree(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kPositionTypeFree;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kPositionTypeGrouped(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kPositionTypeGrouped;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kScriptTypeJavascript(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kScriptTypeJavascript;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kScriptTypeLua(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kScriptTypeLua;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kScriptTypeMRuby(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kScriptTypeMRuby;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kScriptTypeNone(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kScriptTypeNone;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTargetAndroid(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTargetAndroid;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTargetBlackBerry(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTargetBlackBerry;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTargetEmscripten(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTargetEmscripten;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTargetIpad(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTargetIpad;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTargetIphone(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTargetIphone;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTargetLinux(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTargetLinux;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTargetMacOS(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTargetMacOS;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTargetNaCl(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTargetNaCl;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTargetTizen(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTargetTizen;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTargetWindows(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTargetWindows;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTexture2DPixelFormat_A8(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTexture2DPixelFormat_A8;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTexture2DPixelFormat_Default(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTexture2DPixelFormat_Default;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTexture2DPixelFormat_RGB565(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTexture2DPixelFormat_RGB565;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTexture2DPixelFormat_RGB5A1(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTexture2DPixelFormat_RGB5A1;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTexture2DPixelFormat_RGB888(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTexture2DPixelFormat_RGB888;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTexture2DPixelFormat_RGBA4444(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTexture2DPixelFormat_RGBA4444;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTexture2DPixelFormat_RGBA8888(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTexture2DPixelFormat_RGBA8888;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTypeBackClicked(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTypeBackClicked;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d__get_kTypeMenuClicked(mrb_state *mrb, mrb_value mrb_self)
{
  int res = cocos2d::kTypeMenuClicked;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_sCCParticle__get_atlasIndex(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
  unsigned int res = obj_self->atlasIndex;
  return mrb_fixnum_value(res);
}

static mrb_value
mrb_cocos2d_sCCParticle__set_atlasIndex(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_int atlasIndex;
  if (1 == mrb_get_args(mrb, "i", &atlasIndex)) {
    cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
    
    obj_self->atlasIndex = atlasIndex;
    return mrb_fixnum_value(atlasIndex);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::sCCParticle#atlasIndex");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_sCCParticle__get_color(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccColor4F *res = &obj_self->color;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4F"),
                       &mrb_no_free_type_cocos2d__ccColor4F,
                       res));
}

static mrb_value
mrb_cocos2d_sCCParticle__set_color(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value color;
  if (1 == mrb_get_args(mrb, "o", &color)) {
    cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
    
    obj_self->color = *(static_cast< struct cocos2d::_ccColor4F * >(cc_mrb_data_get_ptr(mrb, color, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F)));
    return color;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::sCCParticle#color");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_sCCParticle__get_deltaColor(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
  struct cocos2d::_ccColor4F *res = &obj_self->deltaColor;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4F"),
                       &mrb_no_free_type_cocos2d__ccColor4F,
                       res));
}

static mrb_value
mrb_cocos2d_sCCParticle__set_deltaColor(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value deltaColor;
  if (1 == mrb_get_args(mrb, "o", &deltaColor)) {
    cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
    
    obj_self->deltaColor = *(static_cast< struct cocos2d::_ccColor4F * >(cc_mrb_data_get_ptr(mrb, deltaColor, &mrb_type_cocos2d__ccColor4F, &mrb_no_free_type_cocos2d__ccColor4F)));
    return deltaColor;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::sCCParticle#deltaColor");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_sCCParticle__get_deltaRotation(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
  float res = obj_self->deltaRotation;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_sCCParticle__set_deltaRotation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float deltaRotation;
  if (1 == mrb_get_args(mrb, "f", &deltaRotation)) {
    cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
    
    obj_self->deltaRotation = deltaRotation;
    return mrb_float_value(mrb, deltaRotation);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::sCCParticle#deltaRotation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_sCCParticle__get_deltaSize(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
  float res = obj_self->deltaSize;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_sCCParticle__set_deltaSize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float deltaSize;
  if (1 == mrb_get_args(mrb, "f", &deltaSize)) {
    cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
    
    obj_self->deltaSize = deltaSize;
    return mrb_float_value(mrb, deltaSize);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::sCCParticle#deltaSize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_sCCParticle__get_pos(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
  class cocos2d::CCPoint *res = &obj_self->pos;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_no_free_type_cocos2d_CCPoint,
                       res));
}

static mrb_value
mrb_cocos2d_sCCParticle__set_pos(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value pos;
  if (1 == mrb_get_args(mrb, "o", &pos)) {
    cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
    
    obj_self->pos = *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, pos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint)));
    return pos;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::sCCParticle#pos");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_sCCParticle__get_rotation(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
  float res = obj_self->rotation;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_sCCParticle__set_rotation(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float rotation;
  if (1 == mrb_get_args(mrb, "f", &rotation)) {
    cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
    
    obj_self->rotation = rotation;
    return mrb_float_value(mrb, rotation);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::sCCParticle#rotation");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_sCCParticle__get_size(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
  float res = obj_self->size;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_sCCParticle__set_size(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float size;
  if (1 == mrb_get_args(mrb, "f", &size)) {
    cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
    
    obj_self->size = size;
    return mrb_float_value(mrb, size);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::sCCParticle#size");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_sCCParticle__get_startPos(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
  class cocos2d::CCPoint *res = &obj_self->startPos;
  return mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CCPoint"),
                       &mrb_no_free_type_cocos2d_CCPoint,
                       res));
}

static mrb_value
mrb_cocos2d_sCCParticle__set_startPos(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value startPos;
  if (1 == mrb_get_args(mrb, "o", &startPos)) {
    cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
    
    obj_self->startPos = *(static_cast< cocos2d::CCPoint * >(cc_mrb_data_get_ptr(mrb, startPos, &mrb_type_cocos2d_CCPoint, &mrb_no_free_type_cocos2d_CCPoint)));
    return startPos;
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::sCCParticle#startPos");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_sCCParticle__get_timeToLive(mrb_state *mrb, mrb_value mrb_self)
{
  cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
  float res = obj_self->timeToLive;
  return mrb_float_value(mrb, res);
}

static mrb_value
mrb_cocos2d_sCCParticle__set_timeToLive(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_float timeToLive;
  if (1 == mrb_get_args(mrb, "f", &timeToLive)) {
    cocos2d::sCCParticle *obj_self = static_cast< cocos2d::sCCParticle * >(DATA_PTR(mrb_self));
    
    obj_self->timeToLive = timeToLive;
    return mrb_float_value(mrb, timeToLive);
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::sCCParticle#timeToLive");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_sCCParticle_initialize(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    DATA_TYPE(mrb_self) = &mrb_type_cocos2d_sCCParticle;
    DATA_PTR(mrb_self) = NULL;
    if (0 == _argc_) {
      cocos2d::sCCParticle * res = new cocos2d::sCCParticle();
      DATA_PTR(mrb_self) = res;
      return mrb_self;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::sCCParticle#initialize");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_tex2(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float u;
    mrb_float v;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &u, &v)) {
      ccTex2F *res = new ccTex2F(); *res = cocos2d::tex2(u, v);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccTex2F"),
                       &mrb_type_cocos2d__ccTex2F,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::tex2");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_vertex2(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float x;
    mrb_float y;
    if (2 == _argc_ && 2 == mrb_get_args(mrb, "ff", &x, &y)) {
      ccVertex2F *res = new ccVertex2F(); *res = cocos2d::vertex2(x, y);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex2F"),
                       &mrb_type_cocos2d__ccVertex2F,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::vertex2");
  return mrb_nil_value();
}

static mrb_value
mrb_cocos2d_vertex3(mrb_state *mrb, mrb_value mrb_self)
{
  mrb_value *_argv_;
  int _argc_;
  mrb_get_args(mrb, "*", &_argv_, &_argc_);
  {
    mrb_float x;
    mrb_float y;
    mrb_float z;
    if (3 == _argc_ && 3 == mrb_get_args(mrb, "fff", &x, &y, &z)) {
      ccVertex3F *res = new ccVertex3F(); *res = cocos2d::vertex3(x, y, z);
      mrb_value mrb_res = mrb_obj_value(Data_Wrap_Struct(
                       mrb,
                       cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex3F"),
                       &mrb_type_cocos2d__ccVertex3F,
                       res));
      return mrb_res;
    }
  }
  mrb_raise(mrb, E_ARGUMENT_ERROR, "cocos2d::vertex3");
  return mrb_nil_value();
}

void
mrb_init_UT_hash_bucket(mrb_state *mrb)
{
  struct RClass *rc = NULL;
  struct RClass *cur_rc = NULL;
  struct RClass *base_rc = NULL;


  /* base_rc = mrb->object_class; */
  rc = _define_class_UT_hash_bucket(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "UT_hash_bucket");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "count", mrb_UT_hash_bucket__get_count, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "count=", mrb_UT_hash_bucket__set_count, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "expand_mult", mrb_UT_hash_bucket__get_expand_mult, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "expand_mult=", mrb_UT_hash_bucket__set_expand_mult, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "hh_head", mrb_UT_hash_bucket__get_hh_head, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hh_head=", mrb_UT_hash_bucket__set_hh_head, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_UT_hash_bucket_initialize, MRB_ARGS_NONE());
  DONE;
}

void
mrb_init_UT_hash_handle(mrb_state *mrb)
{
  struct RClass *rc = NULL;
  struct RClass *cur_rc = NULL;
  struct RClass *base_rc = NULL;


  /* base_rc = mrb->object_class; */
  rc = _define_class_UT_hash_handle(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "UT_hash_handle");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "hashv", mrb_UT_hash_handle__get_hashv, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hashv=", mrb_UT_hash_handle__set_hashv, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "hh_next", mrb_UT_hash_handle__get_hh_next, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hh_next=", mrb_UT_hash_handle__set_hh_next, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "hh_prev", mrb_UT_hash_handle__get_hh_prev, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hh_prev=", mrb_UT_hash_handle__set_hh_prev, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "key", mrb_UT_hash_handle__get_key, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "key=", mrb_UT_hash_handle__set_key, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "keylen", mrb_UT_hash_handle__get_keylen, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "keylen=", mrb_UT_hash_handle__set_keylen, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "next", mrb_UT_hash_handle__get_next, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "next=", mrb_UT_hash_handle__set_next, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "prev", mrb_UT_hash_handle__get_prev, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "prev=", mrb_UT_hash_handle__set_prev, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tbl", mrb_UT_hash_handle__get_tbl, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tbl=", mrb_UT_hash_handle__set_tbl, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_UT_hash_handle_initialize, MRB_ARGS_NONE());
  DONE;
}

void
mrb_init_UT_hash_table(mrb_state *mrb)
{
  struct RClass *rc = NULL;
  struct RClass *cur_rc = NULL;
  struct RClass *base_rc = NULL;


  /* base_rc = mrb->object_class; */
  rc = _define_class_UT_hash_table(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "UT_hash_table");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "buckets", mrb_UT_hash_table__get_buckets, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "buckets=", mrb_UT_hash_table__set_buckets, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "hho", mrb_UT_hash_table__get_hho, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hho=", mrb_UT_hash_table__set_hho, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "ideal_chain_maxlen", mrb_UT_hash_table__get_ideal_chain_maxlen, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "ideal_chain_maxlen=", mrb_UT_hash_table__set_ideal_chain_maxlen, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "ineff_expands", mrb_UT_hash_table__get_ineff_expands, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "ineff_expands=", mrb_UT_hash_table__set_ineff_expands, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "log2_num_buckets", mrb_UT_hash_table__get_log2_num_buckets, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "log2_num_buckets=", mrb_UT_hash_table__set_log2_num_buckets, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "noexpand", mrb_UT_hash_table__get_noexpand, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "noexpand=", mrb_UT_hash_table__set_noexpand, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "nonideal_items", mrb_UT_hash_table__get_nonideal_items, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "nonideal_items=", mrb_UT_hash_table__set_nonideal_items, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "num_buckets", mrb_UT_hash_table__get_num_buckets, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "num_buckets=", mrb_UT_hash_table__set_num_buckets, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "num_items", mrb_UT_hash_table__get_num_items, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "num_items=", mrb_UT_hash_table__set_num_items, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "signature", mrb_UT_hash_table__get_signature, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "signature=", mrb_UT_hash_table__set_signature, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tail", mrb_UT_hash_table__get_tail, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tail=", mrb_UT_hash_table__set_tail, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_UT_hash_table_initialize, MRB_ARGS_NONE());
  DONE;
}

void
mrb_init_cocos2d(mrb_state *mrb)
{
  struct RClass *rc = NULL;
  struct RClass *cur_rc = NULL;
  struct RClass *base_rc = NULL;


  rc = _define_class_cocos2d(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCAccelAmplitude(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAccelAmplitude");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCAccelAmplitude_cleanup, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCAccelAmplitude_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getRate", mrb_cocos2d_CCAccelAmplitude_getRate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithAction", mrb_cocos2d_CCAccelAmplitude_initWithAction, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCAccelAmplitude_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setRate", mrb_cocos2d_CCAccelAmplitude_setRate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCAccelAmplitude_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCAccelAmplitude_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCAccelAmplitude_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCAccelDeccelAmplitude(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAccelDeccelAmplitude");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCAccelDeccelAmplitude_cleanup, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCAccelDeccelAmplitude_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getRate", mrb_cocos2d_CCAccelDeccelAmplitude_getRate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithAction", mrb_cocos2d_CCAccelDeccelAmplitude_initWithAction, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCAccelDeccelAmplitude_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setRate", mrb_cocos2d_CCAccelDeccelAmplitude_setRate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCAccelDeccelAmplitude_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCAccelDeccelAmplitude_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCAccelDeccelAmplitude_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCAcceleration(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAcceleration");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "timestamp", mrb_cocos2d_CCAcceleration__get_timestamp, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "timestamp=", mrb_cocos2d_CCAcceleration__set_timestamp, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "x", mrb_cocos2d_CCAcceleration__get_x, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "x=", mrb_cocos2d_CCAcceleration__set_x, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "y", mrb_cocos2d_CCAcceleration__get_y, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "y=", mrb_cocos2d_CCAcceleration__set_y, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "z", mrb_cocos2d_CCAcceleration__get_z, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "z=", mrb_cocos2d_CCAcceleration__set_z, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCAcceleration_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCAccelerometer(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAccelerometer");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCAccelerometer_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAccelerometerInterval", mrb_cocos2d_CCAccelerometer_setAccelerometerInterval, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDelegate", mrb_cocos2d_CCAccelerometer_setDelegate, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCAccelerometerDelegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAccelerometerDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "didAccelerate", mrb_cocos2d_CCAccelerometerDelegate_didAccelerate, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCAction(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAction");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCAction_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCAction_cleanup, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCAction_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCAction_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "description", mrb_cocos2d_CCAction_description, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOriginalTarget", mrb_cocos2d_CCAction_getOriginalTarget, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTag", mrb_cocos2d_CCAction_getTag, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTarget", mrb_cocos2d_CCAction_getTarget, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isDone", mrb_cocos2d_CCAction_isDone, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setOriginalTarget", mrb_cocos2d_CCAction_setOriginalTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTag", mrb_cocos2d_CCAction_setTag, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTarget", mrb_cocos2d_CCAction_setTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCAction_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "step", mrb_cocos2d_CCAction_step, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stop", mrb_cocos2d_CCAction_stop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCAction_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCActionCamera(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionCamera");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCActionCamera_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCActionCamera_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCActionCamera_startWithTarget, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCActionEase(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCActionEase_cleanup, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCActionEase_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCActionEase_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getInnerAction", mrb_cocos2d_CCActionEase_getInnerAction, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithAction", mrb_cocos2d_CCActionEase_initWithAction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCActionEase_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCActionEase_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stop", mrb_cocos2d_CCActionEase_stop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCActionEase_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCActionEase_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFiniteTimeAction") == 0) {
    _define_class_cocos2d_CCFiniteTimeAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFiniteTimeAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCActionInstant(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCActionInstant_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCActionInstant_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isDone", mrb_cocos2d_CCActionInstant_isDone, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCActionInstant_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "step", mrb_cocos2d_CCActionInstant_step, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCActionInstant_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFiniteTimeAction") == 0) {
    _define_class_cocos2d_CCFiniteTimeAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFiniteTimeAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCActionInterval(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCActionInterval_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCActionInterval_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getAmplitudeRate", mrb_cocos2d_CCActionInterval_getAmplitudeRate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getElapsed", mrb_cocos2d_CCActionInterval_getElapsed, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCActionInterval_initWithDuration, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isDone", mrb_cocos2d_CCActionInterval_isDone, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCActionInterval_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAmplitudeRate", mrb_cocos2d_CCActionInterval_setAmplitudeRate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCActionInterval_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "step", mrb_cocos2d_CCActionInterval_step, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCActionInterval_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCActionManager(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionManager");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCActionManager_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addAction", mrb_cocos2d_CCActionManager_addAction, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "getActionByTag", mrb_cocos2d_CCActionManager_getActionByTag, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "numberOfRunningActionsInTarget", mrb_cocos2d_CCActionManager_numberOfRunningActionsInTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "pauseAllRunningActions", mrb_cocos2d_CCActionManager_pauseAllRunningActions, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pauseTarget", mrb_cocos2d_CCActionManager_pauseTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeAction", mrb_cocos2d_CCActionManager_removeAction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeActionByTag", mrb_cocos2d_CCActionManager_removeActionByTag, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "removeAllActions", mrb_cocos2d_CCActionManager_removeAllActions, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeAllActionsFromTarget", mrb_cocos2d_CCActionManager_removeAllActionsFromTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "resumeTarget", mrb_cocos2d_CCActionManager_resumeTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "resumeTargets", mrb_cocos2d_CCActionManager_resumeTargets, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCActionTween(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionTween");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCActionTween_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCActionTween_initWithDuration, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "m_fDelta", mrb_cocos2d_CCActionTween__get_m_fDelta, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_fDelta=", mrb_cocos2d_CCActionTween__set_m_fDelta, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_fFrom", mrb_cocos2d_CCActionTween__get_m_fFrom, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_fFrom=", mrb_cocos2d_CCActionTween__set_m_fFrom, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_fTo", mrb_cocos2d_CCActionTween__get_m_fTo, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_fTo=", mrb_cocos2d_CCActionTween__set_m_fTo, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_strKey", mrb_cocos2d_CCActionTween__get_m_strKey, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_strKey=", mrb_cocos2d_CCActionTween__set_m_strKey, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCActionTween_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCActionTween_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCActionTween_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCActionTween_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCActionTweenDelegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionTweenDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "updateTweenAction", mrb_cocos2d_CCActionTweenDelegate_updateTweenAction, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCAffineTransform(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAffineTransform");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "a", mrb_cocos2d_CCAffineTransform__get_a, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "a=", mrb_cocos2d_CCAffineTransform__set_a, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "b", mrb_cocos2d_CCAffineTransform__get_b, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "b=", mrb_cocos2d_CCAffineTransform__set_b, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "c", mrb_cocos2d_CCAffineTransform__get_c, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "c=", mrb_cocos2d_CCAffineTransform__set_c, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "d", mrb_cocos2d_CCAffineTransform__get_d, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "d=", mrb_cocos2d_CCAffineTransform__set_d, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tx", mrb_cocos2d_CCAffineTransform__get_tx, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tx=", mrb_cocos2d_CCAffineTransform__set_tx, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "ty", mrb_cocos2d_CCAffineTransform__get_ty, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "ty=", mrb_cocos2d_CCAffineTransform__set_ty, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCAffineTransform_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "CCAffineTransformConcat", mrb_cocos2d_CCAffineTransformConcat, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "CCAffineTransformEqualToTransform", mrb_cocos2d_CCAffineTransformEqualToTransform, MRB_ARGS_REQ(2));
  mrb_define_const(mrb, cur_rc, "CCAffineTransformIdentity", mrb_cocos2d__get_CCAffineTransformIdentity(mrb, mrb_obj_value(cur_rc)));
  mrb_define_module_function(mrb, cur_rc, "CCAffineTransformInvert", mrb_cocos2d_CCAffineTransformInvert, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "CCAffineTransformMakeIdentity", mrb_cocos2d_CCAffineTransformMakeIdentity, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "CCAffineTransformRotate", mrb_cocos2d_CCAffineTransformRotate, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "CCAffineTransformScale", mrb_cocos2d_CCAffineTransformScale, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "CCAffineTransformTranslate", mrb_cocos2d_CCAffineTransformTranslate, MRB_ARGS_REQ(3));

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCAnimate(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAnimate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCAnimate_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCAnimate_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCAnimate_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getAnimation", mrb_cocos2d_CCAnimate_getAnimation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithAnimation", mrb_cocos2d_CCAnimate_initWithAnimation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCAnimate_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAnimation", mrb_cocos2d_CCAnimate_setAnimation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCAnimate_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stop", mrb_cocos2d_CCAnimate_stop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCAnimate_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCAnimation(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAnimation");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCAnimation_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addSpriteFrame", mrb_cocos2d_CCAnimation_addSpriteFrame, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addSpriteFrameWithFileName", mrb_cocos2d_CCAnimation_addSpriteFrameWithFileName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addSpriteFrameWithTexture", mrb_cocos2d_CCAnimation_addSpriteFrameWithTexture, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCAnimation_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCAnimation_create, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "createWithSpriteFrames", mrb_cocos2d_CCAnimation_createWithSpriteFrames, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getDelayPerUnit", mrb_cocos2d_CCAnimation_getDelayPerUnit, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDuration", mrb_cocos2d_CCAnimation_getDuration, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getFrames", mrb_cocos2d_CCAnimation_getFrames, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getLoops", mrb_cocos2d_CCAnimation_getLoops, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRestoreOriginalFrame", mrb_cocos2d_CCAnimation_getRestoreOriginalFrame, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTotalDelayUnits", mrb_cocos2d_CCAnimation_getTotalDelayUnits, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCAnimation_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithAnimationFrames", mrb_cocos2d_CCAnimation_initWithAnimationFrames, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "initWithSpriteFrames", mrb_cocos2d_CCAnimation_initWithSpriteFrames, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setDelayPerUnit", mrb_cocos2d_CCAnimation_setDelayPerUnit, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setFrames", mrb_cocos2d_CCAnimation_setFrames, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setLoops", mrb_cocos2d_CCAnimation_setLoops, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRestoreOriginalFrame", mrb_cocos2d_CCAnimation_setRestoreOriginalFrame, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCAnimationCache(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAnimationCache");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCAnimationCache_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addAnimation", mrb_cocos2d_CCAnimationCache_addAnimation, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "addAnimationsWithDictionary", mrb_cocos2d_CCAnimationCache_addAnimationsWithDictionary, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addAnimationsWithFile", mrb_cocos2d_CCAnimationCache_addAnimationsWithFile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "animationByName", mrb_cocos2d_CCAnimationCache_animationByName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCAnimationCache_init, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "purgeSharedAnimationCache", mrb_cocos2d_CCAnimationCache_purgeSharedAnimationCache, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeAnimationByName", mrb_cocos2d_CCAnimationCache_removeAnimationByName, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "sharedAnimationCache", mrb_cocos2d_CCAnimationCache_sharedAnimationCache, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCAnimationFrame(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAnimationFrame");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCAnimationFrame_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCAnimationFrame_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getDelayUnits", mrb_cocos2d_CCAnimationFrame_getDelayUnits, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSpriteFrame", mrb_cocos2d_CCAnimationFrame_getSpriteFrame, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getUserInfo", mrb_cocos2d_CCAnimationFrame_getUserInfo, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithSpriteFrame", mrb_cocos2d_CCAnimationFrame_initWithSpriteFrame, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setDelayUnits", mrb_cocos2d_CCAnimationFrame_setDelayUnits, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSpriteFrame", mrb_cocos2d_CCAnimationFrame_setSpriteFrame, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setUserInfo", mrb_cocos2d_CCAnimationFrame_setUserInfo, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCApplicationProtocol") == 0) {
    _define_class_cocos2d_CCApplicationProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCApplication(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCApplicationProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCApplication");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "getCurrentLanguage", mrb_cocos2d_CCApplication_getCurrentLanguage, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTargetPlatform", mrb_cocos2d_CCApplication_getTargetPlatform, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "run", mrb_cocos2d_CCApplication_run, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAnimationInterval", mrb_cocos2d_CCApplication_setAnimationInterval, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "sharedApplication", mrb_cocos2d_CCApplication_sharedApplication, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCApplicationProtocol(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCApplicationProtocol");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "applicationDidEnterBackground", mrb_cocos2d_CCApplicationProtocol_applicationDidEnterBackground, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "applicationDidFinishLaunching", mrb_cocos2d_CCApplicationProtocol_applicationDidFinishLaunching, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "applicationWillEnterForeground", mrb_cocos2d_CCApplicationProtocol_applicationWillEnterForeground, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCurrentLanguage", mrb_cocos2d_CCApplicationProtocol_getCurrentLanguage, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTargetPlatform", mrb_cocos2d_CCApplicationProtocol_getTargetPlatform, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAnimationInterval", mrb_cocos2d_CCApplicationProtocol_setAnimationInterval, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCArray(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCArray");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCArray_initialize, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "acceptVisitor", mrb_cocos2d_CCArray_acceptVisitor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addObject", mrb_cocos2d_CCArray_addObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addObjectsFromArray", mrb_cocos2d_CCArray_addObjectsFromArray, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "capacity", mrb_cocos2d_CCArray_capacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "containsObject", mrb_cocos2d_CCArray_containsObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCArray_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "count", mrb_cocos2d_CCArray_count, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCArray_create, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "createWithArray", mrb_cocos2d_CCArray_createWithArray, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithCapacity", mrb_cocos2d_CCArray_createWithCapacity, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithContentsOfFile", mrb_cocos2d_CCArray_createWithContentsOfFile, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithContentsOfFileThreadSafe", mrb_cocos2d_CCArray_createWithContentsOfFileThreadSafe, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithObject", mrb_cocos2d_CCArray_createWithObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "data", mrb_cocos2d_CCArray__get_data, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "data=", mrb_cocos2d_CCArray__set_data, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "exchangeObject", mrb_cocos2d_CCArray_exchangeObject, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "exchangeObjectAtIndex", mrb_cocos2d_CCArray_exchangeObjectAtIndex, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "fastRemoveObject", mrb_cocos2d_CCArray_fastRemoveObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "fastRemoveObjectAtIndex", mrb_cocos2d_CCArray_fastRemoveObjectAtIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "indexOfObject", mrb_cocos2d_CCArray_indexOfObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCArray_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithArray", mrb_cocos2d_CCArray_initWithArray, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithCapacity", mrb_cocos2d_CCArray_initWithCapacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithObject", mrb_cocos2d_CCArray_initWithObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithObjects", mrb_cocos2d_CCArray_initWithObjects, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "insertObject", mrb_cocos2d_CCArray_insertObject, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "isEqualToArray", mrb_cocos2d_CCArray_isEqualToArray, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "lastObject", mrb_cocos2d_CCArray_lastObject, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "objectAtIndex", mrb_cocos2d_CCArray_objectAtIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "randomObject", mrb_cocos2d_CCArray_randomObject, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reduceMemoryFootprint", mrb_cocos2d_CCArray_reduceMemoryFootprint, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeAllObjects", mrb_cocos2d_CCArray_removeAllObjects, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeLastObject", mrb_cocos2d_CCArray_removeLastObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeObject", mrb_cocos2d_CCArray_removeObject, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "removeObjectAtIndex", mrb_cocos2d_CCArray_removeObjectAtIndex, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "removeObjectsInArray", mrb_cocos2d_CCArray_removeObjectsInArray, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "replaceObjectAtIndex", mrb_cocos2d_CCArray_replaceObjectAtIndex, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "reverseObjects", mrb_cocos2d_CCArray_reverseObjects, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNodeRGBA") == 0) {
    _define_class_cocos2d_CCNodeRGBA(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextureProtocol") == 0) {
    _define_class_cocos2d_CCTextureProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCAtlasNode(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextureProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAtlasNode");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCAtlasNode_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCAtlasNode_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_CCAtlasNode_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBlendFunc", mrb_cocos2d_CCAtlasNode_getBlendFunc, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getColor", mrb_cocos2d_CCAtlasNode_getColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getQuadsToDraw", mrb_cocos2d_CCAtlasNode_getQuadsToDraw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTexture", mrb_cocos2d_CCAtlasNode_getTexture, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTextureAtlas", mrb_cocos2d_CCAtlasNode_getTextureAtlas, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTexture", mrb_cocos2d_CCAtlasNode_initWithTexture, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "initWithTileFile", mrb_cocos2d_CCAtlasNode_initWithTileFile, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_CCAtlasNode_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bIgnoreContentScaleFactor", mrb_cocos2d_CCAtlasNode__get_m_bIgnoreContentScaleFactor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bIgnoreContentScaleFactor=", mrb_cocos2d_CCAtlasNode__set_m_bIgnoreContentScaleFactor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_bIsOpacityModifyRGB", mrb_cocos2d_CCAtlasNode__get_m_bIsOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bIsOpacityModifyRGB=", mrb_cocos2d_CCAtlasNode__set_m_bIsOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_nUniformColor", mrb_cocos2d_CCAtlasNode__get_m_nUniformColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_nUniformColor=", mrb_cocos2d_CCAtlasNode__set_m_nUniformColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBlendFunc", mrb_cocos2d_CCAtlasNode_setBlendFunc, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setColor", mrb_cocos2d_CCAtlasNode_setColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacity", mrb_cocos2d_CCAtlasNode_setOpacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_CCAtlasNode_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setQuadsToDraw", mrb_cocos2d_CCAtlasNode_setQuadsToDraw, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTexture", mrb_cocos2d_CCAtlasNode_setTexture, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTextureAtlas", mrb_cocos2d_CCAtlasNode_setTextureAtlas, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateAtlasValues", mrb_cocos2d_CCAtlasNode_updateAtlasValues, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCAutoreleasePool(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAutoreleasePool");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCAutoreleasePool_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addObject", mrb_cocos2d_CCAutoreleasePool_addObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "clear", mrb_cocos2d_CCAutoreleasePool_clear, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeObject", mrb_cocos2d_CCAutoreleasePool_removeObject, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCBMFontConfiguration(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCBMFontConfiguration");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCBMFontConfiguration_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCBMFontConfiguration_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "description", mrb_cocos2d_CCBMFontConfiguration_description, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAtlasName", mrb_cocos2d_CCBMFontConfiguration_getAtlasName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCharacterSet", mrb_cocos2d_CCBMFontConfiguration_getCharacterSet, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithFNTfile", mrb_cocos2d_CCBMFontConfiguration_initWithFNTfile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_nCommonHeight", mrb_cocos2d_CCBMFontConfiguration__get_m_nCommonHeight, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_nCommonHeight=", mrb_cocos2d_CCBMFontConfiguration__set_m_nCommonHeight, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pCharacterSet", mrb_cocos2d_CCBMFontConfiguration__get_m_pCharacterSet, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pCharacterSet=", mrb_cocos2d_CCBMFontConfiguration__set_m_pCharacterSet, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pFontDefDictionary", mrb_cocos2d_CCBMFontConfiguration__get_m_pFontDefDictionary, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pFontDefDictionary=", mrb_cocos2d_CCBMFontConfiguration__set_m_pFontDefDictionary, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pKerningDictionary", mrb_cocos2d_CCBMFontConfiguration__get_m_pKerningDictionary, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pKerningDictionary=", mrb_cocos2d_CCBMFontConfiguration__set_m_pKerningDictionary, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_sAtlasName", mrb_cocos2d_CCBMFontConfiguration__get_m_sAtlasName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_sAtlasName=", mrb_cocos2d_CCBMFontConfiguration__set_m_sAtlasName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_tPadding", mrb_cocos2d_CCBMFontConfiguration__get_m_tPadding, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_tPadding=", mrb_cocos2d_CCBMFontConfiguration__set_m_tPadding, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAtlasName", mrb_cocos2d_CCBMFontConfiguration_setAtlasName, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCBezierBy(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCBezierBy");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCBezierBy_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCBezierBy_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCBezierBy_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCBezierBy_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCBezierBy_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCBezierBy_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCBezierBy_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCBezierBy") == 0) {
    _define_class_cocos2d_CCBezierBy(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCBezierBy"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCBezierTo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCBezierTo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCBezierTo_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCBezierTo_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCBezierTo_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCBezierTo_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCBezierTo_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCBlendProtocol(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCBlendProtocol");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "getBlendFunc", mrb_cocos2d_CCBlendProtocol_getBlendFunc, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setBlendFunc", mrb_cocos2d_CCBlendProtocol_setBlendFunc, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCBlink(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCBlink");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCBlink_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCBlink_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCBlink_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCBlink_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCBlink_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stop", mrb_cocos2d_CCBlink_stop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCBlink_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCBlink_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCBool(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCBool");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCBool_initialize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "acceptVisitor", mrb_cocos2d_CCBool_acceptVisitor, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCBool_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getValue", mrb_cocos2d_CCBool_getValue, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCCallFunc(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCallFunc");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCCallFunc_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCCallFunc_cleanup, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCCallFunc_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCCallFunc_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "execute", mrb_cocos2d_CCCallFunc_execute, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getScriptHandler", mrb_cocos2d_CCCallFunc_getScriptHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTargetCallback", mrb_cocos2d_CCCallFunc_getTargetCallback, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTarget", mrb_cocos2d_CCCallFunc_initWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeScriptHandler", mrb_cocos2d_CCCallFunc_removeScriptHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setTargetCallback", mrb_cocos2d_CCCallFunc_setTargetCallback, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCCallFunc_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCallFunc") == 0) {
    _define_class_cocos2d_CCCallFunc(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::TypeInfo") == 0) {
    _define_class_cocos2d_TypeInfo(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCallFunc"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCCallFuncN(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::TypeInfo");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCallFuncN");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCCallFuncN_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCCallFuncN_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCCallFuncN_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "execute", mrb_cocos2d_CCCallFuncN_execute, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getClassTypeInfo", mrb_cocos2d_CCCallFuncN_getClassTypeInfo, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTarget", mrb_cocos2d_CCCallFuncN_initWithTarget, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCallFuncN") == 0) {
    _define_class_cocos2d_CCCallFuncN(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCallFuncN"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCCallFuncND(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCallFuncND");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCCallFuncND_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCCallFuncND_create, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "execute", mrb_cocos2d_CCCallFuncND_execute, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getClassTypeInfo", mrb_cocos2d_CCCallFuncND_getClassTypeInfo, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTarget", mrb_cocos2d_CCCallFuncND_initWithTarget, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCCallFuncND_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCallFunc") == 0) {
    _define_class_cocos2d_CCCallFunc(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::TypeInfo") == 0) {
    _define_class_cocos2d_TypeInfo(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCallFunc"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCCallFuncO(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::TypeInfo");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCallFuncO");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCCallFuncO_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCCallFuncO_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCCallFuncO_create, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "execute", mrb_cocos2d_CCCallFuncO_execute, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getClassTypeInfo", mrb_cocos2d_CCCallFuncO_getClassTypeInfo, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getObject", mrb_cocos2d_CCCallFuncO_getObject, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTarget", mrb_cocos2d_CCCallFuncO_initWithTarget, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setObject", mrb_cocos2d_CCCallFuncO_setObject, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCCamera(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCamera");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "description", mrb_cocos2d_CCCamera_description, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCenterXYZ", mrb_cocos2d_CCCamera_getCenterXYZ, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "getEyeXYZ", mrb_cocos2d_CCCamera_getEyeXYZ, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "getUpXYZ", mrb_cocos2d_CCCamera_getUpXYZ, MRB_ARGS_REQ(3));
  mrb_define_class_method(mrb, cur_rc, "getZEye", mrb_cocos2d_CCCamera_getZEye, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCCamera_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isDirty", mrb_cocos2d_CCCamera_isDirty, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "locate", mrb_cocos2d_CCCamera_locate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "restore", mrb_cocos2d_CCCamera_restore, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setCenterXYZ", mrb_cocos2d_CCCamera_setCenterXYZ, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setDirty", mrb_cocos2d_CCCamera_setDirty, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEyeXYZ", mrb_cocos2d_CCCamera_setEyeXYZ, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setUpXYZ", mrb_cocos2d_CCCamera_setUpXYZ, MRB_ARGS_REQ(3));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCardinalSplineTo") == 0) {
    _define_class_cocos2d_CCCardinalSplineTo(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCardinalSplineTo"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCCardinalSplineBy(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCardinalSplineBy");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCCardinalSplineBy_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCCardinalSplineBy_create, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCCardinalSplineBy_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCCardinalSplineBy_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updatePosition", mrb_cocos2d_CCCardinalSplineBy_updatePosition, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCCardinalSplineTo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCardinalSplineTo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCCardinalSplineTo_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCCardinalSplineTo_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCCardinalSplineTo_create, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "getPoints", mrb_cocos2d_CCCardinalSplineTo_getPoints, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCCardinalSplineTo_initWithDuration, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCCardinalSplineTo_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setPoints", mrb_cocos2d_CCCardinalSplineTo_setPoints, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCCardinalSplineTo_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCCardinalSplineTo_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updatePosition", mrb_cocos2d_CCCardinalSplineTo_updatePosition, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCardinalSplineBy") == 0) {
    _define_class_cocos2d_CCCardinalSplineBy(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCardinalSplineBy"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCCatmullRomBy(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCatmullRomBy");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCCatmullRomBy_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCCatmullRomBy_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCCatmullRomBy_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCardinalSplineTo") == 0) {
    _define_class_cocos2d_CCCardinalSplineTo(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCardinalSplineTo"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCCatmullRomTo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCatmullRomTo");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCCatmullRomTo_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCCatmullRomTo_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCCatmullRomTo_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCClippingNode(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCClippingNode");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCClippingNode_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getAlphaThreshold", mrb_cocos2d_CCClippingNode_getAlphaThreshold, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStencil", mrb_cocos2d_CCClippingNode_getStencil, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCClippingNode_init, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "isInverted", mrb_cocos2d_CCClippingNode_isInverted, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCClippingNode_onEnter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onEnterTransitionDidFinish", mrb_cocos2d_CCClippingNode_onEnterTransitionDidFinish, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onExit", mrb_cocos2d_CCClippingNode_onExit, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onExitTransitionDidStart", mrb_cocos2d_CCClippingNode_onExitTransitionDidStart, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAlphaThreshold", mrb_cocos2d_CCClippingNode_setAlphaThreshold, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setInverted", mrb_cocos2d_CCClippingNode_setInverted, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setStencil", mrb_cocos2d_CCClippingNode_setStencil, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "visit", mrb_cocos2d_CCClippingNode_visit, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCComponent(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCComponent");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCComponent_create, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "createWithName", mrb_cocos2d_CCComponent_createWithName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getName", mrb_cocos2d_CCComponent_getName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOwner", mrb_cocos2d_CCComponent_getOwner, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCComponent_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithName", mrb_cocos2d_CCComponent_initWithName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isEnabled", mrb_cocos2d_CCComponent_isEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCComponent_onEnter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onExit", mrb_cocos2d_CCComponent_onExit, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "serialize", mrb_cocos2d_CCComponent_serialize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_CCComponent_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOwner", mrb_cocos2d_CCComponent_setOwner, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCComponent_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCComponentContainer(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCComponentContainer");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "add", mrb_cocos2d_CCComponentContainer_add, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "get", mrb_cocos2d_CCComponentContainer_get, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isEmpty", mrb_cocos2d_CCComponentContainer_isEmpty, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "remove", mrb_cocos2d_CCComponentContainer_remove, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeAll", mrb_cocos2d_CCComponentContainer_removeAll, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "visit", mrb_cocos2d_CCComponentContainer_visit, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCConfiguration(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCConfiguration");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "checkForGLExtension", mrb_cocos2d_CCConfiguration_checkForGLExtension, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "dumpInfo", mrb_cocos2d_CCConfiguration_dumpInfo, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "gatherGPUInfo", mrb_cocos2d_CCConfiguration_gatherGPUInfo, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBool", mrb_cocos2d_CCConfiguration_getBool, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getCString", mrb_cocos2d_CCConfiguration_getCString, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getMaxModelviewStackDepth", mrb_cocos2d_CCConfiguration_getMaxModelviewStackDepth, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMaxTextureSize", mrb_cocos2d_CCConfiguration_getMaxTextureSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMaxTextureUnits", mrb_cocos2d_CCConfiguration_getMaxTextureUnits, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getNumber", mrb_cocos2d_CCConfiguration_getNumber, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getObject", mrb_cocos2d_CCConfiguration_getObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCConfiguration_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "loadConfigFile", mrb_cocos2d_CCConfiguration_loadConfigFile, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "purgeConfiguration", mrb_cocos2d_CCConfiguration_purgeConfiguration, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setObject", mrb_cocos2d_CCConfiguration_setObject, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "sharedConfiguration", mrb_cocos2d_CCConfiguration_sharedConfiguration, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "supportsBGRA8888", mrb_cocos2d_CCConfiguration_supportsBGRA8888, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "supportsDiscardFramebuffer", mrb_cocos2d_CCConfiguration_supportsDiscardFramebuffer, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "supportsNPOT", mrb_cocos2d_CCConfiguration_supportsNPOT, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "supportsPVRTC", mrb_cocos2d_CCConfiguration_supportsPVRTC, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "supportsShareableVAO", mrb_cocos2d_CCConfiguration_supportsShareableVAO, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCDeccelAmplitude(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCDeccelAmplitude");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCDeccelAmplitude_cleanup, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCDeccelAmplitude_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getRate", mrb_cocos2d_CCDeccelAmplitude_getRate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithAction", mrb_cocos2d_CCDeccelAmplitude_initWithAction, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCDeccelAmplitude_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setRate", mrb_cocos2d_CCDeccelAmplitude_setRate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCDeccelAmplitude_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCDeccelAmplitude_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCDeccelAmplitude_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCDelayTime(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCDelayTime");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCDelayTime_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCDelayTime_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCDelayTime_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCDelayTime_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCDelayTime_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCDevice(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCDevice");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "getDPI", mrb_cocos2d_CCDevice_getDPI, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCDictElement(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCDictElement");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "getIntKey", mrb_cocos2d_CCDictElement_getIntKey, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getObject", mrb_cocos2d_CCDictElement_getObject, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStrKey", mrb_cocos2d_CCDictElement_getStrKey, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hh", mrb_cocos2d_CCDictElement__get_hh, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hh=", mrb_cocos2d_CCDictElement__set_hh, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCDictionary(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCDictionary");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCDictionary_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "acceptVisitor", mrb_cocos2d_CCDictionary_acceptVisitor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "allKeys", mrb_cocos2d_CCDictionary_allKeys, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "allKeysForObject", mrb_cocos2d_CCDictionary_allKeysForObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCDictionary_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "count", mrb_cocos2d_CCDictionary_count, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCDictionary_create, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "createWithContentsOfFile", mrb_cocos2d_CCDictionary_createWithContentsOfFile, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithContentsOfFileThreadSafe", mrb_cocos2d_CCDictionary_createWithContentsOfFileThreadSafe, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithDictionary", mrb_cocos2d_CCDictionary_createWithDictionary, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pElements", mrb_cocos2d_CCDictionary__get_m_pElements, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pElements=", mrb_cocos2d_CCDictionary__set_m_pElements, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "objectForKey", mrb_cocos2d_CCDictionary_objectForKey, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "randomObject", mrb_cocos2d_CCDictionary_randomObject, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeAllObjects", mrb_cocos2d_CCDictionary_removeAllObjects, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeObjectForElememt", mrb_cocos2d_CCDictionary_removeObjectForElememt, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeObjectForKey", mrb_cocos2d_CCDictionary_removeObjectForKey, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "removeObjectsForKeys", mrb_cocos2d_CCDictionary_removeObjectsForKeys, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setObject", mrb_cocos2d_CCDictionary_setObject, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "valueForKey", mrb_cocos2d_CCDictionary_valueForKey, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "writeToFile", mrb_cocos2d_CCDictionary_writeToFile, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::TypeInfo") == 0) {
    _define_class_cocos2d_TypeInfo(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCDirector(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::TypeInfo");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCDirector");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "convertToGL", mrb_cocos2d_CCDirector_convertToGL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "convertToUI", mrb_cocos2d_CCDirector_convertToUI, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "drawScene", mrb_cocos2d_CCDirector_drawScene, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "end", mrb_cocos2d_CCDirector_end, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAccelerometer", mrb_cocos2d_CCDirector_getAccelerometer, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getActionManager", mrb_cocos2d_CCDirector_getActionManager, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAnimationInterval", mrb_cocos2d_CCDirector_getAnimationInterval, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getClassTypeInfo", mrb_cocos2d_CCDirector_getClassTypeInfo, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getContentScaleFactor", mrb_cocos2d_CCDirector_getContentScaleFactor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDelegate", mrb_cocos2d_CCDirector_getDelegate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDeltaTime", mrb_cocos2d_CCDirector_getDeltaTime, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getKeypadDispatcher", mrb_cocos2d_CCDirector_getKeypadDispatcher, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getNotificationNode", mrb_cocos2d_CCDirector_getNotificationNode, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOpenGLView", mrb_cocos2d_CCDirector_getOpenGLView, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getProjection", mrb_cocos2d_CCDirector_getProjection, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRunningScene", mrb_cocos2d_CCDirector_getRunningScene, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getScheduler", mrb_cocos2d_CCDirector_getScheduler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSecondsPerFrame", mrb_cocos2d_CCDirector_getSecondsPerFrame, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTotalFrames", mrb_cocos2d_CCDirector_getTotalFrames, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTouchDispatcher", mrb_cocos2d_CCDirector_getTouchDispatcher, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getVisibleOrigin", mrb_cocos2d_CCDirector_getVisibleOrigin, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getVisibleSize", mrb_cocos2d_CCDirector_getVisibleSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getWinSize", mrb_cocos2d_CCDirector_getWinSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getWinSizeInPixels", mrb_cocos2d_CCDirector_getWinSizeInPixels, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getZEye", mrb_cocos2d_CCDirector_getZEye, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCDirector_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isDisplayStats", mrb_cocos2d_CCDirector_isDisplayStats, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isNextDeltaTimeZero", mrb_cocos2d_CCDirector_isNextDeltaTimeZero, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isPaused", mrb_cocos2d_CCDirector_isPaused, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isSendCleanupToScene", mrb_cocos2d_CCDirector_isSendCleanupToScene, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "mainLoop", mrb_cocos2d_CCDirector_mainLoop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pause", mrb_cocos2d_CCDirector_pause, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "popScene", mrb_cocos2d_CCDirector_popScene, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "popToRootScene", mrb_cocos2d_CCDirector_popToRootScene, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "popToSceneStackLevel", mrb_cocos2d_CCDirector_popToSceneStackLevel, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "purgeCachedData", mrb_cocos2d_CCDirector_purgeCachedData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pushScene", mrb_cocos2d_CCDirector_pushScene, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "replaceScene", mrb_cocos2d_CCDirector_replaceScene, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "resume", mrb_cocos2d_CCDirector_resume, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "runWithScene", mrb_cocos2d_CCDirector_runWithScene, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAccelerometer", mrb_cocos2d_CCDirector_setAccelerometer, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setActionManager", mrb_cocos2d_CCDirector_setActionManager, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAlphaBlending", mrb_cocos2d_CCDirector_setAlphaBlending, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAnimationInterval", mrb_cocos2d_CCDirector_setAnimationInterval, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setContentScaleFactor", mrb_cocos2d_CCDirector_setContentScaleFactor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDefaultValues", mrb_cocos2d_CCDirector_setDefaultValues, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setDelegate", mrb_cocos2d_CCDirector_setDelegate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDepthTest", mrb_cocos2d_CCDirector_setDepthTest, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDisplayStats", mrb_cocos2d_CCDirector_setDisplayStats, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setGLDefaultValues", mrb_cocos2d_CCDirector_setGLDefaultValues, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setKeypadDispatcher", mrb_cocos2d_CCDirector_setKeypadDispatcher, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setNextDeltaTimeZero", mrb_cocos2d_CCDirector_setNextDeltaTimeZero, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setNotificationNode", mrb_cocos2d_CCDirector_setNotificationNode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpenGLView", mrb_cocos2d_CCDirector_setOpenGLView, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setProjection", mrb_cocos2d_CCDirector_setProjection, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setScheduler", mrb_cocos2d_CCDirector_setScheduler, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTouchDispatcher", mrb_cocos2d_CCDirector_setTouchDispatcher, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setViewport", mrb_cocos2d_CCDirector_setViewport, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "sharedDirector", mrb_cocos2d_CCDirector_sharedDirector, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startAnimation", mrb_cocos2d_CCDirector_startAnimation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "stopAnimation", mrb_cocos2d_CCDirector_stopAnimation, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCDirectorDelegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCDirectorDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "updateProjection", mrb_cocos2d_CCDirectorDelegate_updateProjection, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCDirector") == 0) {
    _define_class_cocos2d_CCDirector(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCDirector"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCDisplayLinkDirector(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCDisplayLinkDirector");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCDisplayLinkDirector_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "mainLoop", mrb_cocos2d_CCDisplayLinkDirector_mainLoop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAnimationInterval", mrb_cocos2d_CCDisplayLinkDirector_setAnimationInterval, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startAnimation", mrb_cocos2d_CCDisplayLinkDirector_startAnimation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "stopAnimation", mrb_cocos2d_CCDisplayLinkDirector_stopAnimation, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCDouble(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCDouble");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCDouble_initialize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "acceptVisitor", mrb_cocos2d_CCDouble_acceptVisitor, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCDouble_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getValue", mrb_cocos2d_CCDouble_getValue, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCDrawNode(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCDrawNode");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCDrawNode_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "clear", mrb_cocos2d_CCDrawNode_clear, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCDrawNode_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_CCDrawNode_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "drawDot", mrb_cocos2d_CCDrawNode_drawDot, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "drawPolygon", mrb_cocos2d_CCDrawNode_drawPolygon, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, cur_rc, "drawSegment", mrb_cocos2d_CCDrawNode_drawSegment, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "getBlendFunc", mrb_cocos2d_CCDrawNode_getBlendFunc, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCDrawNode_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setBlendFunc", mrb_cocos2d_CCDrawNode_setBlendFunc, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEGLViewProtocol") == 0) {
    _define_class_cocos2d_CCEGLViewProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEGLViewProtocol"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEGLView(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEGLView");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "end", mrb_cocos2d_CCEGLView_end, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isOpenGLReady", mrb_cocos2d_CCEGLView_isOpenGLReady, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setContentScaleFactor", mrb_cocos2d_CCEGLView_setContentScaleFactor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setIMEKeyboardState", mrb_cocos2d_CCEGLView_setIMEKeyboardState, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "sharedOpenGLView", mrb_cocos2d_CCEGLView_sharedOpenGLView, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "swapBuffers", mrb_cocos2d_CCEGLView_swapBuffers, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCEGLViewProtocol(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEGLViewProtocol");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "end", mrb_cocos2d_CCEGLViewProtocol_end, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDesignResolutionSize", mrb_cocos2d_CCEGLViewProtocol_getDesignResolutionSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getFrameSize", mrb_cocos2d_CCEGLViewProtocol_getFrameSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getScaleX", mrb_cocos2d_CCEGLViewProtocol_getScaleX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getScaleY", mrb_cocos2d_CCEGLViewProtocol_getScaleY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getScissorRect", mrb_cocos2d_CCEGLViewProtocol_getScissorRect, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getViewName", mrb_cocos2d_CCEGLViewProtocol_getViewName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getViewPortRect", mrb_cocos2d_CCEGLViewProtocol_getViewPortRect, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getVisibleOrigin", mrb_cocos2d_CCEGLViewProtocol_getVisibleOrigin, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getVisibleSize", mrb_cocos2d_CCEGLViewProtocol_getVisibleSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "handleTouchesBegin", mrb_cocos2d_CCEGLViewProtocol_handleTouchesBegin, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "handleTouchesCancel", mrb_cocos2d_CCEGLViewProtocol_handleTouchesCancel, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "handleTouchesEnd", mrb_cocos2d_CCEGLViewProtocol_handleTouchesEnd, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "handleTouchesMove", mrb_cocos2d_CCEGLViewProtocol_handleTouchesMove, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "isOpenGLReady", mrb_cocos2d_CCEGLViewProtocol_isOpenGLReady, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isScissorEnabled", mrb_cocos2d_CCEGLViewProtocol_isScissorEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setDesignResolutionSize", mrb_cocos2d_CCEGLViewProtocol_setDesignResolutionSize, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setFrameSize", mrb_cocos2d_CCEGLViewProtocol_setFrameSize, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setIMEKeyboardState", mrb_cocos2d_CCEGLViewProtocol_setIMEKeyboardState, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setScissorInPoints", mrb_cocos2d_CCEGLViewProtocol_setScissorInPoints, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "setTouchDelegate", mrb_cocos2d_CCEGLViewProtocol_setTouchDelegate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setViewName", mrb_cocos2d_CCEGLViewProtocol_setViewName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setViewPortInPoints", mrb_cocos2d_CCEGLViewProtocol_setViewPortInPoints, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "swapBuffers", mrb_cocos2d_CCEGLViewProtocol_swapBuffers, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseBackIn(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseBackIn");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseBackIn_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseBackIn_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseBackIn_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseBackIn_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseBackIn_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseBackInOut(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseBackInOut");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseBackInOut_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseBackInOut_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseBackInOut_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseBackInOut_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseBackInOut_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseBackOut(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseBackOut");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseBackOut_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseBackOut_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseBackOut_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseBackOut_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseBackOut_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseBounce(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseBounce");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "bounceTime", mrb_cocos2d_CCEaseBounce_bounceTime, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseBounce_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseBounce_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseBounce_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseBounce_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseBounce") == 0) {
    _define_class_cocos2d_CCEaseBounce(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseBounce"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseBounceIn(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseBounceIn");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseBounceIn_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseBounceIn_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseBounceIn_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseBounceIn_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseBounceIn_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseBounce") == 0) {
    _define_class_cocos2d_CCEaseBounce(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseBounce"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseBounceInOut(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseBounceInOut");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseBounceInOut_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseBounceInOut_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseBounceInOut_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseBounceInOut_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseBounceInOut_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseBounce") == 0) {
    _define_class_cocos2d_CCEaseBounce(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseBounce"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseBounceOut(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseBounceOut");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseBounceOut_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseBounceOut_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseBounceOut_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseBounceOut_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseBounceOut_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseElastic(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseElastic");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseElastic_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseElastic_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getPeriod", mrb_cocos2d_CCEaseElastic_getPeriod, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithAction", mrb_cocos2d_CCEaseElastic_initWithAction, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseElastic_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setPeriod", mrb_cocos2d_CCEaseElastic_setPeriod, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseElastic_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseElastic") == 0) {
    _define_class_cocos2d_CCEaseElastic(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseElastic"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseElasticIn(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseElasticIn");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseElasticIn_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseElasticIn_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseElasticIn_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseElasticIn_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseElasticIn_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseElastic") == 0) {
    _define_class_cocos2d_CCEaseElastic(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseElastic"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseElasticInOut(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseElasticInOut");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseElasticInOut_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseElasticInOut_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseElasticInOut_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseElasticInOut_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseElasticInOut_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseElastic") == 0) {
    _define_class_cocos2d_CCEaseElastic(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseElastic"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseElasticOut(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseElasticOut");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseElasticOut_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseElasticOut_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseElasticOut_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseElasticOut_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseElasticOut_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseExponentialIn(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseExponentialIn");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseExponentialIn_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseExponentialIn_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseExponentialIn_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseExponentialIn_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseExponentialIn_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseExponentialInOut(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseExponentialInOut");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseExponentialInOut_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseExponentialInOut_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseExponentialInOut_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseExponentialInOut_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseExponentialInOut_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseExponentialOut(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseExponentialOut");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseExponentialOut_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseExponentialOut_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseExponentialOut_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseExponentialOut_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseExponentialOut_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseRateAction") == 0) {
    _define_class_cocos2d_CCEaseRateAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseRateAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseIn(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseIn");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseIn_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseIn_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseIn_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseIn_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseIn_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseRateAction") == 0) {
    _define_class_cocos2d_CCEaseRateAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseRateAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseInOut(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseInOut");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseInOut_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseInOut_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseInOut_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseInOut_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseInOut_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCEaseRateAction") == 0) {
    _define_class_cocos2d_CCEaseRateAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseRateAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseOut(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseOut");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseOut_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseOut_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseOut_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseOut_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseOut_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseRateAction(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseRateAction");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseRateAction_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseRateAction_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getRate", mrb_cocos2d_CCEaseRateAction_getRate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithAction", mrb_cocos2d_CCEaseRateAction_initWithAction, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseRateAction_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setRate", mrb_cocos2d_CCEaseRateAction_setRate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseRateAction_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseSineIn(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseSineIn");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseSineIn_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseSineIn_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseSineIn_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseSineIn_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseSineIn_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseSineInOut(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseSineInOut");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseSineInOut_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseSineInOut_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseSineInOut_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseSineInOut_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseSineInOut_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionEase") == 0) {
    _define_class_cocos2d_CCActionEase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionEase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEaseSineOut(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEaseSineOut");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCEaseSineOut_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCEaseSineOut_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCEaseSineOut_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCEaseSineOut_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEaseSineOut_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCEvent(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCEvent");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCEvent_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCFadeIn(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFadeIn");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCFadeIn_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCFadeIn_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCFadeIn_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCFadeIn_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCFadeIn_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCFadeOut(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFadeOut");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCFadeOut_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCFadeOut_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCFadeOut_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCFadeOut_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCFadeOut_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFadeOutTRTiles") == 0) {
    _define_class_cocos2d_CCFadeOutTRTiles(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFadeOutTRTiles"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCFadeOutBLTiles(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFadeOutBLTiles");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCFadeOutBLTiles_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "testFunc", mrb_cocos2d_CCFadeOutBLTiles_testFunc, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCFadeOutBLTiles_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFadeOutUpTiles") == 0) {
    _define_class_cocos2d_CCFadeOutUpTiles(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFadeOutUpTiles"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCFadeOutDownTiles(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFadeOutDownTiles");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCFadeOutDownTiles_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "testFunc", mrb_cocos2d_CCFadeOutDownTiles_testFunc, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCFadeOutDownTiles_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCFadeOutTRTiles(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFadeOutTRTiles");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCFadeOutTRTiles_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "testFunc", mrb_cocos2d_CCFadeOutTRTiles_testFunc, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "transformTile", mrb_cocos2d_CCFadeOutTRTiles_transformTile, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "turnOffTile", mrb_cocos2d_CCFadeOutTRTiles_turnOffTile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "turnOnTile", mrb_cocos2d_CCFadeOutTRTiles_turnOnTile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCFadeOutTRTiles_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCFadeOutTRTiles_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFadeOutTRTiles") == 0) {
    _define_class_cocos2d_CCFadeOutTRTiles(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFadeOutTRTiles"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCFadeOutUpTiles(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFadeOutUpTiles");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCFadeOutUpTiles_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "testFunc", mrb_cocos2d_CCFadeOutUpTiles_testFunc, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "transformTile", mrb_cocos2d_CCFadeOutUpTiles_transformTile, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCFadeOutUpTiles_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCFadeTo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFadeTo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCFadeTo_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCFadeTo_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCFadeTo_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCFadeTo_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCFadeTo_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCFadeTo_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::TypeInfo") == 0) {
    _define_class_cocos2d_TypeInfo(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::TypeInfo"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCFileUtils(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFileUtils");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "addSearchPath", mrb_cocos2d_CCFileUtils_addSearchPath, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addSearchResolutionsOrder", mrb_cocos2d_CCFileUtils_addSearchResolutionsOrder, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "fullPathForFilename", mrb_cocos2d_CCFileUtils_fullPathForFilename, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "fullPathFromRelativeFile", mrb_cocos2d_CCFileUtils_fullPathFromRelativeFile, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getClassTypeInfo", mrb_cocos2d_CCFileUtils_getClassTypeInfo, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getFileData", mrb_cocos2d_CCFileUtils_getFileData, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "getFileDataFromZip", mrb_cocos2d_CCFileUtils_getFileDataFromZip, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "getSearchPaths", mrb_cocos2d_CCFileUtils_getSearchPaths, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSearchResolutionsOrder", mrb_cocos2d_CCFileUtils_getSearchResolutionsOrder, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getWritablePath", mrb_cocos2d_CCFileUtils_getWritablePath, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isAbsolutePath", mrb_cocos2d_CCFileUtils_isAbsolutePath, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isFileExist", mrb_cocos2d_CCFileUtils_isFileExist, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isPopupNotify", mrb_cocos2d_CCFileUtils_isPopupNotify, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "loadFilenameLookupDictionaryFromFile", mrb_cocos2d_CCFileUtils_loadFilenameLookupDictionaryFromFile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "purgeCachedEntries", mrb_cocos2d_CCFileUtils_purgeCachedEntries, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "purgeFileUtils", mrb_cocos2d_CCFileUtils_purgeFileUtils, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setFilenameLookupDictionary", mrb_cocos2d_CCFileUtils_setFilenameLookupDictionary, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPopupNotify", mrb_cocos2d_CCFileUtils_setPopupNotify, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSearchPaths", mrb_cocos2d_CCFileUtils_setSearchPaths, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSearchResolutionsOrder", mrb_cocos2d_CCFileUtils_setSearchResolutionsOrder, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "sharedFileUtils", mrb_cocos2d_CCFileUtils_sharedFileUtils, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAction") == 0) {
    _define_class_cocos2d_CCAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCFiniteTimeAction(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFiniteTimeAction");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCFiniteTimeAction_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDuration", mrb_cocos2d_CCFiniteTimeAction_getDuration, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCFiniteTimeAction_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setDuration", mrb_cocos2d_CCFiniteTimeAction_setDuration, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCFlipX(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFlipX");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCFlipX_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCFlipX_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCFlipX_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithFlipX", mrb_cocos2d_CCFlipX_initWithFlipX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCFlipX_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCFlipX_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCFlipX3D(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFlipX3D");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCFlipX3D_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCFlipX3D_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCFlipX3D_initWithDuration, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithSize", mrb_cocos2d_CCFlipX3D_initWithSize, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCFlipX3D_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCFlipX3D_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCFlipY(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFlipY");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCFlipY_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCFlipY_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCFlipY_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithFlipY", mrb_cocos2d_CCFlipY_initWithFlipY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCFlipY_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCFlipY_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCFlipX3D") == 0) {
    _define_class_cocos2d_CCFlipX3D(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFlipX3D"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCFlipY3D(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFlipY3D");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCFlipY3D_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCFlipY3D_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCFlipY3D_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCFlipY3D_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCFloat(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFloat");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCFloat_initialize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "acceptVisitor", mrb_cocos2d_CCFloat_acceptVisitor, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCFloat_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getValue", mrb_cocos2d_CCFloat_getValue, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAction") == 0) {
    _define_class_cocos2d_CCAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCFollow(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCFollow");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCFollow_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCFollow_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCFollow_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithTarget", mrb_cocos2d_CCFollow_initWithTarget, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "isBoundarySet", mrb_cocos2d_CCFollow_isBoundarySet, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isDone", mrb_cocos2d_CCFollow_isDone, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setBoudarySet", mrb_cocos2d_CCFollow_setBoudarySet, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "step", mrb_cocos2d_CCFollow_step, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stop", mrb_cocos2d_CCFollow_stop, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCGLProgram(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGLProgram");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCGLProgram_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addAttribute", mrb_cocos2d_CCGLProgram_addAttribute, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "fragmentShaderLog", mrb_cocos2d_CCGLProgram_fragmentShaderLog, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getProgram", mrb_cocos2d_CCGLProgram_getProgram, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getUniformLocationForName", mrb_cocos2d_CCGLProgram_getUniformLocationForName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithVertexShaderByteArray", mrb_cocos2d_CCGLProgram_initWithVertexShaderByteArray, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithVertexShaderFilename", mrb_cocos2d_CCGLProgram_initWithVertexShaderFilename, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "link", mrb_cocos2d_CCGLProgram_link, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "programLog", mrb_cocos2d_CCGLProgram_programLog, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reset", mrb_cocos2d_CCGLProgram_reset, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setUniformLocationWith1f", mrb_cocos2d_CCGLProgram_setUniformLocationWith1f, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setUniformLocationWith1i", mrb_cocos2d_CCGLProgram_setUniformLocationWith1i, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setUniformLocationWith2f", mrb_cocos2d_CCGLProgram_setUniformLocationWith2f, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setUniformLocationWith2fv", mrb_cocos2d_CCGLProgram_setUniformLocationWith2fv, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setUniformLocationWith2i", mrb_cocos2d_CCGLProgram_setUniformLocationWith2i, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setUniformLocationWith2iv", mrb_cocos2d_CCGLProgram_setUniformLocationWith2iv, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setUniformLocationWith3f", mrb_cocos2d_CCGLProgram_setUniformLocationWith3f, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "setUniformLocationWith3fv", mrb_cocos2d_CCGLProgram_setUniformLocationWith3fv, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setUniformLocationWith3i", mrb_cocos2d_CCGLProgram_setUniformLocationWith3i, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "setUniformLocationWith3iv", mrb_cocos2d_CCGLProgram_setUniformLocationWith3iv, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setUniformLocationWith4f", mrb_cocos2d_CCGLProgram_setUniformLocationWith4f, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, cur_rc, "setUniformLocationWith4fv", mrb_cocos2d_CCGLProgram_setUniformLocationWith4fv, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setUniformLocationWith4i", mrb_cocos2d_CCGLProgram_setUniformLocationWith4i, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, cur_rc, "setUniformLocationWith4iv", mrb_cocos2d_CCGLProgram_setUniformLocationWith4iv, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setUniformLocationWithMatrix4fv", mrb_cocos2d_CCGLProgram_setUniformLocationWithMatrix4fv, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setUniformsForBuiltins", mrb_cocos2d_CCGLProgram_setUniformsForBuiltins, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "updateUniforms", mrb_cocos2d_CCGLProgram_updateUniforms, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "use", mrb_cocos2d_CCGLProgram_use, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "vertexShaderLog", mrb_cocos2d_CCGLProgram_vertexShaderLog, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCGrabber(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrabber");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCGrabber_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "afterRender", mrb_cocos2d_CCGrabber_afterRender, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "beforeRender", mrb_cocos2d_CCGrabber_beforeRender, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "grab", mrb_cocos2d_CCGrabber_grab, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGridBase") == 0) {
    _define_class_cocos2d_CCGridBase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGridBase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCGrid3D(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3D");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCGrid3D_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "blit", mrb_cocos2d_CCGrid3D_blit, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "calculateVertexPoints", mrb_cocos2d_CCGrid3D_calculateVertexPoints, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCGrid3D_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "originalVertex", mrb_cocos2d_CCGrid3D_originalVertex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reuse", mrb_cocos2d_CCGrid3D_reuse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setVertex", mrb_cocos2d_CCGrid3D_setVertex, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "vertex", mrb_cocos2d_CCGrid3D_vertex, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGridAction") == 0) {
    _define_class_cocos2d_CCGridAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGridAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCGrid3DAction(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "getGrid", mrb_cocos2d_CCGrid3DAction_getGrid, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "originalVertex", mrb_cocos2d_CCGrid3DAction_originalVertex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setVertex", mrb_cocos2d_CCGrid3DAction_setVertex, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "vertex", mrb_cocos2d_CCGrid3DAction_vertex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCGrid3DAction_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCGridAction(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGridAction");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCGridAction_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCGridAction_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getGrid", mrb_cocos2d_CCGridAction_getGrid, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCGridAction_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCGridAction_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCGridAction_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCGridAction_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCGridBase(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGridBase");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "afterDraw", mrb_cocos2d_CCGridBase_afterDraw, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "beforeDraw", mrb_cocos2d_CCGridBase_beforeDraw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "blit", mrb_cocos2d_CCGridBase_blit, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "calculateVertexPoints", mrb_cocos2d_CCGridBase_calculateVertexPoints, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCGridBase_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getGridSize", mrb_cocos2d_CCGridBase_getGridSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getReuseGrid", mrb_cocos2d_CCGridBase_getReuseGrid, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStep", mrb_cocos2d_CCGridBase_getStep, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithSize", mrb_cocos2d_CCGridBase_initWithSize, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "isActive", mrb_cocos2d_CCGridBase_isActive, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isTextureFlipped", mrb_cocos2d_CCGridBase_isTextureFlipped, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reuse", mrb_cocos2d_CCGridBase_reuse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "set2DProjection", mrb_cocos2d_CCGridBase_set2DProjection, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setActive", mrb_cocos2d_CCGridBase_setActive, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setGridSize", mrb_cocos2d_CCGridBase_setGridSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setReuseGrid", mrb_cocos2d_CCGridBase_setReuseGrid, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setStep", mrb_cocos2d_CCGridBase_setStep, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTextureFlipped", mrb_cocos2d_CCGridBase_setTextureFlipped, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCGridBase_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCHide(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCHide");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCHide_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCHide_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCHide_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCHide_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCHide_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCIMEDelegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCIMEDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "attachWithIME", mrb_cocos2d_CCIMEDelegate_attachWithIME, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "detachWithIME", mrb_cocos2d_CCIMEDelegate_detachWithIME, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCIMEDispatcher(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCIMEDispatcher");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "dispatchDeleteBackward", mrb_cocos2d_CCIMEDispatcher_dispatchDeleteBackward, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "dispatchInsertText", mrb_cocos2d_CCIMEDispatcher_dispatchInsertText, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "dispatchKeyboardDidHide", mrb_cocos2d_CCIMEDispatcher_dispatchKeyboardDidHide, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "dispatchKeyboardDidShow", mrb_cocos2d_CCIMEDispatcher_dispatchKeyboardDidShow, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "dispatchKeyboardWillHide", mrb_cocos2d_CCIMEDispatcher_dispatchKeyboardWillHide, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "dispatchKeyboardWillShow", mrb_cocos2d_CCIMEDispatcher_dispatchKeyboardWillShow, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getContentText", mrb_cocos2d_CCIMEDispatcher_getContentText, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "sharedDispatcher", mrb_cocos2d_CCIMEDispatcher_sharedDispatcher, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCIMEKeyboardNotificationInfo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCIMEKeyboardNotificationInfo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "begin", mrb_cocos2d_CCIMEKeyboardNotificationInfo__get_begin, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "begin=", mrb_cocos2d_CCIMEKeyboardNotificationInfo__set_begin, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "duration", mrb_cocos2d_CCIMEKeyboardNotificationInfo__get_duration, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "duration=", mrb_cocos2d_CCIMEKeyboardNotificationInfo__set_duration, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "end", mrb_cocos2d_CCIMEKeyboardNotificationInfo__get_end, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "end=", mrb_cocos2d_CCIMEKeyboardNotificationInfo__set_end, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCIMEKeyboardNotificationInfo_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCImage(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCImage");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "getBitsPerComponent", mrb_cocos2d_CCImage_getBitsPerComponent, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getData", mrb_cocos2d_CCImage_getData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDataLen", mrb_cocos2d_CCImage_getDataLen, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getHeight", mrb_cocos2d_CCImage_getHeight, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getWidth", mrb_cocos2d_CCImage_getWidth, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hasAlpha", mrb_cocos2d_CCImage_hasAlpha, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithImageData", mrb_cocos2d_CCImage_initWithImageData, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, cur_rc, "initWithImageFile", mrb_cocos2d_CCImage_initWithImageFile, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithImageFileThreadSafe", mrb_cocos2d_CCImage_initWithImageFileThreadSafe, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithString", mrb_cocos2d_CCImage_initWithString, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, cur_rc, "initWithStringShadowStroke", mrb_cocos2d_CCImage_initWithStringShadowStroke, MRB_ARGS_REQ(19));
  mrb_define_method(mrb, cur_rc, "isPremultipliedAlpha", mrb_cocos2d_CCImage_isPremultipliedAlpha, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kAlignBottom", mrb_cocos2d_CCImage__get_kAlignBottom, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kAlignBottomLeft", mrb_cocos2d_CCImage__get_kAlignBottomLeft, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kAlignBottomRight", mrb_cocos2d_CCImage__get_kAlignBottomRight, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kAlignCenter", mrb_cocos2d_CCImage__get_kAlignCenter, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kAlignLeft", mrb_cocos2d_CCImage__get_kAlignLeft, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kAlignRight", mrb_cocos2d_CCImage__get_kAlignRight, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kAlignTop", mrb_cocos2d_CCImage__get_kAlignTop, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kAlignTopLeft", mrb_cocos2d_CCImage__get_kAlignTopLeft, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kAlignTopRight", mrb_cocos2d_CCImage__get_kAlignTopRight, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kFmtJpg", mrb_cocos2d_CCImage__get_kFmtJpg, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kFmtPng", mrb_cocos2d_CCImage__get_kFmtPng, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kFmtRawData", mrb_cocos2d_CCImage__get_kFmtRawData, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kFmtTiff", mrb_cocos2d_CCImage__get_kFmtTiff, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kFmtUnKnown", mrb_cocos2d_CCImage__get_kFmtUnKnown, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "kFmtWebp", mrb_cocos2d_CCImage__get_kFmtWebp, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "saveToFile", mrb_cocos2d_CCImage_saveToFile, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCInteger(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCInteger");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCInteger_initialize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "acceptVisitor", mrb_cocos2d_CCInteger_acceptVisitor, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCInteger_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getValue", mrb_cocos2d_CCInteger_getValue, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCJumpBy(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCJumpBy");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCJumpBy_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCJumpBy_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCJumpBy_initWithDuration, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCJumpBy_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCJumpBy_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCJumpBy_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCJumpBy_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCJumpTiles3D(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCJumpTiles3D");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCJumpTiles3D_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCJumpTiles3D_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "getAmplitude", mrb_cocos2d_CCJumpTiles3D_getAmplitude, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAmplitudeRate", mrb_cocos2d_CCJumpTiles3D_getAmplitudeRate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCJumpTiles3D_initWithDuration, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "setAmplitude", mrb_cocos2d_CCJumpTiles3D_setAmplitude, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAmplitudeRate", mrb_cocos2d_CCJumpTiles3D_setAmplitudeRate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCJumpTiles3D_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCJumpTiles3D_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCJumpBy") == 0) {
    _define_class_cocos2d_CCJumpBy(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCJumpBy"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCJumpTo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCJumpTo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCJumpTo_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCJumpTo_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCJumpTo_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCJumpTo_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCKeypadDelegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCKeypadDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "keyBackClicked", mrb_cocos2d_CCKeypadDelegate_keyBackClicked, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "keyMenuClicked", mrb_cocos2d_CCKeypadDelegate_keyMenuClicked, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCKeypadDispatcher(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCKeypadDispatcher");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCKeypadDispatcher_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addDelegate", mrb_cocos2d_CCKeypadDispatcher_addDelegate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "dispatchKeypadMSG", mrb_cocos2d_CCKeypadDispatcher_dispatchKeypadMSG, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "forceAddDelegate", mrb_cocos2d_CCKeypadDispatcher_forceAddDelegate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "forceRemoveDelegate", mrb_cocos2d_CCKeypadDispatcher_forceRemoveDelegate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeDelegate", mrb_cocos2d_CCKeypadDispatcher_removeDelegate, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCKeypadHandler(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCKeypadHandler");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "getDelegate", mrb_cocos2d_CCKeypadHandler_getDelegate, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "handlerWithDelegate", mrb_cocos2d_CCKeypadHandler_handlerWithDelegate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithDelegate", mrb_cocos2d_CCKeypadHandler_initWithDelegate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDelegate", mrb_cocos2d_CCKeypadHandler_setDelegate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCKeypadHandler_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAtlasNode") == 0) {
    _define_class_cocos2d_CCAtlasNode(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLabelProtocol") == 0) {
    _define_class_cocos2d_CCLabelProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAtlasNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCLabelAtlas(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLabelProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLabelAtlas");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCLabelAtlas_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCLabelAtlas_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getString", mrb_cocos2d_CCLabelAtlas_getString, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithString", mrb_cocos2d_CCLabelAtlas_initWithString, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "setString", mrb_cocos2d_CCLabelAtlas_setString, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateAtlasValues", mrb_cocos2d_CCLabelAtlas_updateAtlasValues, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSpriteBatchNode") == 0) {
    _define_class_cocos2d_CCSpriteBatchNode(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLabelProtocol") == 0) {
    _define_class_cocos2d_CCLabelProtocol(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCRGBAProtocol") == 0) {
    _define_class_cocos2d_CCRGBAProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSpriteBatchNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCLabelBMFont(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLabelProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCRGBAProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLabelBMFont");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCLabelBMFont_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCLabelBMFont_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "createFontChars", mrb_cocos2d_CCLabelBMFont_createFontChars, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getColor", mrb_cocos2d_CCLabelBMFont_getColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDisplayedColor", mrb_cocos2d_CCLabelBMFont_getDisplayedColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDisplayedOpacity", mrb_cocos2d_CCLabelBMFont_getDisplayedOpacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getFntFile", mrb_cocos2d_CCLabelBMFont_getFntFile, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOpacity", mrb_cocos2d_CCLabelBMFont_getOpacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getString", mrb_cocos2d_CCLabelBMFont_getString, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCLabelBMFont_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithString", mrb_cocos2d_CCLabelBMFont_initWithString, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, cur_rc, "isCascadeColorEnabled", mrb_cocos2d_CCLabelBMFont_isCascadeColorEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isCascadeOpacityEnabled", mrb_cocos2d_CCLabelBMFont_isCascadeOpacityEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_CCLabelBMFont_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "purgeCachedData", mrb_cocos2d_CCLabelBMFont_purgeCachedData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAlignment", mrb_cocos2d_CCLabelBMFont_setAlignment, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAnchorPoint", mrb_cocos2d_CCLabelBMFont_setAnchorPoint, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setCString", mrb_cocos2d_CCLabelBMFont_setCString, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setCascadeColorEnabled", mrb_cocos2d_CCLabelBMFont_setCascadeColorEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setCascadeOpacityEnabled", mrb_cocos2d_CCLabelBMFont_setCascadeOpacityEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setColor", mrb_cocos2d_CCLabelBMFont_setColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setFntFile", mrb_cocos2d_CCLabelBMFont_setFntFile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setLineBreakWithoutSpace", mrb_cocos2d_CCLabelBMFont_setLineBreakWithoutSpace, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacity", mrb_cocos2d_CCLabelBMFont_setOpacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_CCLabelBMFont_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setScale", mrb_cocos2d_CCLabelBMFont_setScale, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setScaleX", mrb_cocos2d_CCLabelBMFont_setScaleX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setScaleY", mrb_cocos2d_CCLabelBMFont_setScaleY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setString", mrb_cocos2d_CCLabelBMFont_setString, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "setWidth", mrb_cocos2d_CCLabelBMFont_setWidth, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateDisplayedColor", mrb_cocos2d_CCLabelBMFont_updateDisplayedColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateDisplayedOpacity", mrb_cocos2d_CCLabelBMFont_updateDisplayedOpacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateLabel", mrb_cocos2d_CCLabelBMFont_updateLabel, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCLabelProtocol(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLabelProtocol");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "getString", mrb_cocos2d_CCLabelProtocol_getString, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setString", mrb_cocos2d_CCLabelProtocol_setString, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSprite") == 0) {
    _define_class_cocos2d_CCSprite(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLabelProtocol") == 0) {
    _define_class_cocos2d_CCLabelProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSprite"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCLabelTTF(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLabelProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLabelTTF");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCLabelTTF_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCLabelTTF_create, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "createWithFontDefinition", mrb_cocos2d_CCLabelTTF_createWithFontDefinition, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "description", mrb_cocos2d_CCLabelTTF_description, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "disableShadow", mrb_cocos2d_CCLabelTTF_disableShadow, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "disableStroke", mrb_cocos2d_CCLabelTTF_disableStroke, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "enableShadow", mrb_cocos2d_CCLabelTTF_enableShadow, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "enableStroke", mrb_cocos2d_CCLabelTTF_enableStroke, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "getDimensions", mrb_cocos2d_CCLabelTTF_getDimensions, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getFontName", mrb_cocos2d_CCLabelTTF_getFontName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getFontSize", mrb_cocos2d_CCLabelTTF_getFontSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getHorizontalAlignment", mrb_cocos2d_CCLabelTTF_getHorizontalAlignment, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getString", mrb_cocos2d_CCLabelTTF_getString, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTextDefinition", mrb_cocos2d_CCLabelTTF_getTextDefinition, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getVerticalAlignment", mrb_cocos2d_CCLabelTTF_getVerticalAlignment, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCLabelTTF_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithString", mrb_cocos2d_CCLabelTTF_initWithString, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "initWithStringAndTextDefinition", mrb_cocos2d_CCLabelTTF_initWithStringAndTextDefinition, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setDimensions", mrb_cocos2d_CCLabelTTF_setDimensions, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setFontFillColor", mrb_cocos2d_CCLabelTTF_setFontFillColor, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setFontName", mrb_cocos2d_CCLabelTTF_setFontName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setFontSize", mrb_cocos2d_CCLabelTTF_setFontSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setHorizontalAlignment", mrb_cocos2d_CCLabelTTF_setHorizontalAlignment, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setString", mrb_cocos2d_CCLabelTTF_setString, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTextDefinition", mrb_cocos2d_CCLabelTTF_setTextDefinition, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setVerticalAlignment", mrb_cocos2d_CCLabelTTF_setVerticalAlignment, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTouchDelegate") == 0) {
    _define_class_cocos2d_CCTouchDelegate(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAccelerometerDelegate") == 0) {
    _define_class_cocos2d_CCAccelerometerDelegate(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCKeypadDelegate") == 0) {
    _define_class_cocos2d_CCKeypadDelegate(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCLayer(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTouchDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAccelerometerDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCKeypadDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayer");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCLayer_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "ccTouchBegan", mrb_cocos2d_CCLayer_ccTouchBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchCancelled", mrb_cocos2d_CCLayer_ccTouchCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchEnded", mrb_cocos2d_CCLayer_ccTouchEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchMoved", mrb_cocos2d_CCLayer_ccTouchMoved, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesBegan", mrb_cocos2d_CCLayer_ccTouchesBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesCancelled", mrb_cocos2d_CCLayer_ccTouchesCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesEnded", mrb_cocos2d_CCLayer_ccTouchesEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesMoved", mrb_cocos2d_CCLayer_ccTouchesMoved, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCLayer_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "didAccelerate", mrb_cocos2d_CCLayer_didAccelerate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getScriptAccelerateHandlerEntry", mrb_cocos2d_CCLayer_getScriptAccelerateHandlerEntry, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getScriptKeypadHandlerEntry", mrb_cocos2d_CCLayer_getScriptKeypadHandlerEntry, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getScriptTouchHandlerEntry", mrb_cocos2d_CCLayer_getScriptTouchHandlerEntry, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTouchMode", mrb_cocos2d_CCLayer_getTouchMode, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTouchPriority", mrb_cocos2d_CCLayer_getTouchPriority, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCLayer_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isAccelerometerEnabled", mrb_cocos2d_CCLayer_isAccelerometerEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isKeypadEnabled", mrb_cocos2d_CCLayer_isKeypadEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isTouchEnabled", mrb_cocos2d_CCLayer_isTouchEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "keyBackClicked", mrb_cocos2d_CCLayer_keyBackClicked, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "keyMenuClicked", mrb_cocos2d_CCLayer_keyMenuClicked, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCLayer_onEnter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onEnterTransitionDidFinish", mrb_cocos2d_CCLayer_onEnterTransitionDidFinish, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onExit", mrb_cocos2d_CCLayer_onExit, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "registerScriptAccelerateHandler", mrb_cocos2d_CCLayer_registerScriptAccelerateHandler, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "registerScriptKeypadHandler", mrb_cocos2d_CCLayer_registerScriptKeypadHandler, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "registerScriptTouchHandler", mrb_cocos2d_CCLayer_registerScriptTouchHandler, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "registerWithTouchDispatcher", mrb_cocos2d_CCLayer_registerWithTouchDispatcher, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAccelerometerEnabled", mrb_cocos2d_CCLayer_setAccelerometerEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAccelerometerInterval", mrb_cocos2d_CCLayer_setAccelerometerInterval, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setKeypadEnabled", mrb_cocos2d_CCLayer_setKeypadEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTouchEnabled", mrb_cocos2d_CCLayer_setTouchEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTouchMode", mrb_cocos2d_CCLayer_setTouchMode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTouchPriority", mrb_cocos2d_CCLayer_setTouchPriority, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "unregisterScriptAccelerateHandler", mrb_cocos2d_CCLayer_unregisterScriptAccelerateHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "unregisterScriptKeypadHandler", mrb_cocos2d_CCLayer_unregisterScriptKeypadHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "unregisterScriptTouchHandler", mrb_cocos2d_CCLayer_unregisterScriptTouchHandler, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayerRGBA") == 0) {
    _define_class_cocos2d_CCLayerRGBA(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCBlendProtocol") == 0) {
    _define_class_cocos2d_CCBlendProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayerRGBA"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCLayerColor(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCBlendProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayerColor");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCLayerColor_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "changeHeight", mrb_cocos2d_CCLayerColor_changeHeight, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "changeWidth", mrb_cocos2d_CCLayerColor_changeWidth, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "changeWidthAndHeight", mrb_cocos2d_CCLayerColor_changeWidthAndHeight, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCLayerColor_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_CCLayerColor_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBlendFunc", mrb_cocos2d_CCLayerColor_getBlendFunc, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCLayerColor_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithColor", mrb_cocos2d_CCLayerColor_initWithColor, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_CCLayerColor_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setBlendFunc", mrb_cocos2d_CCLayerColor_setBlendFunc, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setColor", mrb_cocos2d_CCLayerColor_setColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setContentSize", mrb_cocos2d_CCLayerColor_setContentSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacity", mrb_cocos2d_CCLayerColor_setOpacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_CCLayerColor_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayerColor") == 0) {
    _define_class_cocos2d_CCLayerColor(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayerColor"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCLayerGradient(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayerGradient");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCLayerGradient_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getEndColor", mrb_cocos2d_CCLayerGradient_getEndColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getEndOpacity", mrb_cocos2d_CCLayerGradient_getEndOpacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStartColor", mrb_cocos2d_CCLayerGradient_getStartColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStartOpacity", mrb_cocos2d_CCLayerGradient_getStartOpacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getVector", mrb_cocos2d_CCLayerGradient_getVector, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCLayerGradient_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithColor", mrb_cocos2d_CCLayerGradient_initWithColor, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "isCompressedInterpolation", mrb_cocos2d_CCLayerGradient_isCompressedInterpolation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setCompressedInterpolation", mrb_cocos2d_CCLayerGradient_setCompressedInterpolation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEndColor", mrb_cocos2d_CCLayerGradient_setEndColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEndOpacity", mrb_cocos2d_CCLayerGradient_setEndOpacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setStartColor", mrb_cocos2d_CCLayerGradient_setStartColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setStartOpacity", mrb_cocos2d_CCLayerGradient_setStartOpacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setVector", mrb_cocos2d_CCLayerGradient_setVector, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCLayerGradient_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayer") == 0) {
    _define_class_cocos2d_CCLayer(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayer"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCLayerMultiplex(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayerMultiplex");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCLayerMultiplex_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addLayer", mrb_cocos2d_CCLayerMultiplex_addLayer, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCLayerMultiplex_cleanup, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCLayerMultiplex_create, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "createWithArray", mrb_cocos2d_CCLayerMultiplex_createWithArray, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithLayer", mrb_cocos2d_CCLayerMultiplex_createWithLayer, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithArray", mrb_cocos2d_CCLayerMultiplex_initWithArray, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithLayers", mrb_cocos2d_CCLayerMultiplex_initWithLayers, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "switchTo", mrb_cocos2d_CCLayerMultiplex_switchTo, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "switchToAndReleaseMe", mrb_cocos2d_CCLayerMultiplex_switchToAndReleaseMe, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayer") == 0) {
    _define_class_cocos2d_CCLayer(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCRGBAProtocol") == 0) {
    _define_class_cocos2d_CCRGBAProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayer"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCLayerRGBA(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCRGBAProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayerRGBA");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCLayerRGBA_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCLayerRGBA_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getColor", mrb_cocos2d_CCLayerRGBA_getColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDisplayedColor", mrb_cocos2d_CCLayerRGBA_getDisplayedColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDisplayedOpacity", mrb_cocos2d_CCLayerRGBA_getDisplayedOpacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOpacity", mrb_cocos2d_CCLayerRGBA_getOpacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCLayerRGBA_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isCascadeColorEnabled", mrb_cocos2d_CCLayerRGBA_isCascadeColorEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isCascadeOpacityEnabled", mrb_cocos2d_CCLayerRGBA_isCascadeOpacityEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_CCLayerRGBA_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setCascadeColorEnabled", mrb_cocos2d_CCLayerRGBA_setCascadeColorEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setCascadeOpacityEnabled", mrb_cocos2d_CCLayerRGBA_setCascadeOpacityEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setColor", mrb_cocos2d_CCLayerRGBA_setColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacity", mrb_cocos2d_CCLayerRGBA_setOpacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_CCLayerRGBA_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateDisplayedColor", mrb_cocos2d_CCLayerRGBA_updateDisplayedColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateDisplayedOpacity", mrb_cocos2d_CCLayerRGBA_updateDisplayedOpacity, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCLens3D(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLens3D");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCLens3D_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCLens3D_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "getLensEffect", mrb_cocos2d_CCLens3D_getLensEffect, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPosition", mrb_cocos2d_CCLens3D_getPosition, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCLens3D_initWithDuration, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "setConcave", mrb_cocos2d_CCLens3D_setConcave, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setLensEffect", mrb_cocos2d_CCLens3D_setLensEffect, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPosition", mrb_cocos2d_CCLens3D_setPosition, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCLens3D_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCLens3D_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCLiquid(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLiquid");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCLiquid_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCLiquid_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "getAmplitude", mrb_cocos2d_CCLiquid_getAmplitude, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAmplitudeRate", mrb_cocos2d_CCLiquid_getAmplitudeRate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCLiquid_initWithDuration, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "setAmplitude", mrb_cocos2d_CCLiquid_setAmplitude, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAmplitudeRate", mrb_cocos2d_CCLiquid_setAmplitudeRate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCLiquid_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCLiquid_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "CCLog", mrb_cocos2d_CCLog, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "CCLuaLog", mrb_cocos2d_CCLuaLog, MRB_ARGS_REQ(1));

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLayerRGBA") == 0) {
    _define_class_cocos2d_CCLayerRGBA(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLayerRGBA"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCMenu(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenu");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCMenu_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addChild", mrb_cocos2d_CCMenu_addChild, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "alignItemsHorizontally", mrb_cocos2d_CCMenu_alignItemsHorizontally, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "alignItemsHorizontallyWithPadding", mrb_cocos2d_CCMenu_alignItemsHorizontallyWithPadding, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "alignItemsInColumns", mrb_cocos2d_CCMenu_alignItemsInColumns, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "alignItemsInColumnsWithArray", mrb_cocos2d_CCMenu_alignItemsInColumnsWithArray, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "alignItemsInRows", mrb_cocos2d_CCMenu_alignItemsInRows, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "alignItemsInRowsWithArray", mrb_cocos2d_CCMenu_alignItemsInRowsWithArray, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "alignItemsVertically", mrb_cocos2d_CCMenu_alignItemsVertically, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "alignItemsVerticallyWithPadding", mrb_cocos2d_CCMenu_alignItemsVerticallyWithPadding, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "ccTouchBegan", mrb_cocos2d_CCMenu_ccTouchBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchCancelled", mrb_cocos2d_CCMenu_ccTouchCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchEnded", mrb_cocos2d_CCMenu_ccTouchEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchMoved", mrb_cocos2d_CCMenu_ccTouchMoved, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCMenu_create, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "createWithArray", mrb_cocos2d_CCMenu_createWithArray, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithItem", mrb_cocos2d_CCMenu_createWithItem, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithItems", mrb_cocos2d_CCMenu_createWithItems, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCMenu_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithArray", mrb_cocos2d_CCMenu_initWithArray, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isEnabled", mrb_cocos2d_CCMenu_isEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_CCMenu_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onExit", mrb_cocos2d_CCMenu_onExit, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "registerWithTouchDispatcher", mrb_cocos2d_CCMenu_registerWithTouchDispatcher, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeChild", mrb_cocos2d_CCMenu_removeChild, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_CCMenu_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setHandlerPriority", mrb_cocos2d_CCMenu_setHandlerPriority, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_CCMenu_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNodeRGBA") == 0) {
    _define_class_cocos2d_CCNodeRGBA(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCMenuItem(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItem");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCMenuItem_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "activate", mrb_cocos2d_CCMenuItem_activate, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCMenuItem_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getScriptTapHandler", mrb_cocos2d_CCMenuItem_getScriptTapHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTarget", mrb_cocos2d_CCMenuItem_initWithTarget, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "isEnabled", mrb_cocos2d_CCMenuItem_isEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_CCMenuItem_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isSelected", mrb_cocos2d_CCMenuItem_isSelected, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "rect", mrb_cocos2d_CCMenuItem_rect, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "registerScriptTapHandler", mrb_cocos2d_CCMenuItem_registerScriptTapHandler, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "selected", mrb_cocos2d_CCMenuItem_selected, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_CCMenuItem_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_CCMenuItem_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTarget", mrb_cocos2d_CCMenuItem_setTarget, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "unregisterScriptTapHandler", mrb_cocos2d_CCMenuItem_unregisterScriptTapHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "unselected", mrb_cocos2d_CCMenuItem_unselected, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItemLabel") == 0) {
    _define_class_cocos2d_CCMenuItemLabel(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemLabel"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCMenuItemAtlasFont(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemAtlasFont");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCMenuItemAtlasFont_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCMenuItemAtlasFont_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "initWithString", mrb_cocos2d_CCMenuItemAtlasFont_initWithString, MRB_ARGS_REQ(7));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItemLabel") == 0) {
    _define_class_cocos2d_CCMenuItemLabel(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemLabel"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCMenuItemFont(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemFont");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCMenuItemFont_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCMenuItemFont_create, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "fontName", mrb_cocos2d_CCMenuItemFont_fontName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "fontNameObj", mrb_cocos2d_CCMenuItemFont_fontNameObj, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "fontSize", mrb_cocos2d_CCMenuItemFont_fontSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "fontSizeObj", mrb_cocos2d_CCMenuItemFont_fontSizeObj, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithString", mrb_cocos2d_CCMenuItemFont_initWithString, MRB_ARGS_REQ(3));
  mrb_define_class_method(mrb, cur_rc, "setFontName", mrb_cocos2d_CCMenuItemFont_setFontName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setFontNameObj", mrb_cocos2d_CCMenuItemFont_setFontNameObj, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "setFontSize", mrb_cocos2d_CCMenuItemFont_setFontSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setFontSizeObj", mrb_cocos2d_CCMenuItemFont_setFontSizeObj, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItemSprite") == 0) {
    _define_class_cocos2d_CCMenuItemSprite(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemSprite"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCMenuItemImage(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemImage");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCMenuItemImage_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCMenuItemImage_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCMenuItemImage_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithNormalImage", mrb_cocos2d_CCMenuItemImage_initWithNormalImage, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, cur_rc, "setDisabledSpriteFrame", mrb_cocos2d_CCMenuItemImage_setDisabledSpriteFrame, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setNormalSpriteFrame", mrb_cocos2d_CCMenuItemImage_setNormalSpriteFrame, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSelectedSpriteFrame", mrb_cocos2d_CCMenuItemImage_setSelectedSpriteFrame, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItem") == 0) {
    _define_class_cocos2d_CCMenuItem(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItem"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCMenuItemLabel(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemLabel");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCMenuItemLabel_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "activate", mrb_cocos2d_CCMenuItemLabel_activate, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCMenuItemLabel_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getDisabledColor", mrb_cocos2d_CCMenuItemLabel_getDisabledColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getLabel", mrb_cocos2d_CCMenuItemLabel_getLabel, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithLabel", mrb_cocos2d_CCMenuItemLabel_initWithLabel, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "selected", mrb_cocos2d_CCMenuItemLabel_selected, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setDisabledColor", mrb_cocos2d_CCMenuItemLabel_setDisabledColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_CCMenuItemLabel_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setLabel", mrb_cocos2d_CCMenuItemLabel_setLabel, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setString", mrb_cocos2d_CCMenuItemLabel_setString, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "unselected", mrb_cocos2d_CCMenuItemLabel_unselected, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItem") == 0) {
    _define_class_cocos2d_CCMenuItem(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItem"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCMenuItemSprite(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemSprite");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCMenuItemSprite_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCMenuItemSprite_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getDisabledImage", mrb_cocos2d_CCMenuItemSprite_getDisabledImage, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getNormalImage", mrb_cocos2d_CCMenuItemSprite_getNormalImage, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSelectedImage", mrb_cocos2d_CCMenuItemSprite_getSelectedImage, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithNormalSprite", mrb_cocos2d_CCMenuItemSprite_initWithNormalSprite, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_CCMenuItemSprite_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "selected", mrb_cocos2d_CCMenuItemSprite_selected, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setDisabledImage", mrb_cocos2d_CCMenuItemSprite_setDisabledImage, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_CCMenuItemSprite_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setNormalImage", mrb_cocos2d_CCMenuItemSprite_setNormalImage, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_CCMenuItemSprite_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSelectedImage", mrb_cocos2d_CCMenuItemSprite_setSelectedImage, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "unselected", mrb_cocos2d_CCMenuItemSprite_unselected, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMenuItem") == 0) {
    _define_class_cocos2d_CCMenuItem(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItem"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCMenuItemToggle(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMenuItemToggle");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCMenuItemToggle_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "activate", mrb_cocos2d_CCMenuItemToggle_activate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addSubItem", mrb_cocos2d_CCMenuItemToggle_addSubItem, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCMenuItemToggle_create, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "createWithTarget", mrb_cocos2d_CCMenuItemToggle_createWithTarget, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getSelectedIndex", mrb_cocos2d_CCMenuItemToggle_getSelectedIndex, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSubItems", mrb_cocos2d_CCMenuItemToggle_getSubItems, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithItem", mrb_cocos2d_CCMenuItemToggle_initWithItem, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithTarget", mrb_cocos2d_CCMenuItemToggle_initWithTarget, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_CCMenuItemToggle_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "selected", mrb_cocos2d_CCMenuItemToggle_selected, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "selectedItem", mrb_cocos2d_CCMenuItemToggle_selectedItem, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setEnabled", mrb_cocos2d_CCMenuItemToggle_setEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_CCMenuItemToggle_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSelectedIndex", mrb_cocos2d_CCMenuItemToggle_setSelectedIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSubItems", mrb_cocos2d_CCMenuItemToggle_setSubItems, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "unselected", mrb_cocos2d_CCMenuItemToggle_unselected, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "CCMessageBox", mrb_cocos2d_CCMessageBox, MRB_ARGS_REQ(2));

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNodeRGBA") == 0) {
    _define_class_cocos2d_CCNodeRGBA(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextureProtocol") == 0) {
    _define_class_cocos2d_CCTextureProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCMotionStreak(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextureProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMotionStreak");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCMotionStreak_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCMotionStreak_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_CCMotionStreak_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBlendFunc", mrb_cocos2d_CCMotionStreak_getBlendFunc, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOpacity", mrb_cocos2d_CCMotionStreak_getOpacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTexture", mrb_cocos2d_CCMotionStreak_getTexture, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithFade", mrb_cocos2d_CCMotionStreak_initWithFade, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "isFastMode", mrb_cocos2d_CCMotionStreak_isFastMode, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_CCMotionStreak_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isStartingPositionInitialized", mrb_cocos2d_CCMotionStreak_isStartingPositionInitialized, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reset", mrb_cocos2d_CCMotionStreak_reset, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setBlendFunc", mrb_cocos2d_CCMotionStreak_setBlendFunc, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setFastMode", mrb_cocos2d_CCMotionStreak_setFastMode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacity", mrb_cocos2d_CCMotionStreak_setOpacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_CCMotionStreak_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPosition", mrb_cocos2d_CCMotionStreak_setPosition, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setStartingPositionInitialized", mrb_cocos2d_CCMotionStreak_setStartingPositionInitialized, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTexture", mrb_cocos2d_CCMotionStreak_setTexture, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tintWithColor", mrb_cocos2d_CCMotionStreak_tintWithColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCMotionStreak_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCMoveBy(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMoveBy");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCMoveBy_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCMoveBy_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCMoveBy_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCMoveBy_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCMoveBy_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCMoveBy_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCMoveBy_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCMoveBy") == 0) {
    _define_class_cocos2d_CCMoveBy(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMoveBy"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCMoveTo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCMoveTo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCMoveTo_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCMoveTo_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCMoveTo_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCMoveTo_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCMoveTo_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCNode(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCNode_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "_setZOrder", mrb_cocos2d_CCNode__setZOrder, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addChild", mrb_cocos2d_CCNode_addChild, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "addComponent", mrb_cocos2d_CCNode_addComponent, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "boundingBox", mrb_cocos2d_CCNode_boundingBox, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCNode_cleanup, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "convertToNodeSpace", mrb_cocos2d_CCNode_convertToNodeSpace, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "convertToNodeSpaceAR", mrb_cocos2d_CCNode_convertToNodeSpaceAR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "convertToWorldSpace", mrb_cocos2d_CCNode_convertToWorldSpace, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "convertToWorldSpaceAR", mrb_cocos2d_CCNode_convertToWorldSpaceAR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "convertTouchToNodeSpace", mrb_cocos2d_CCNode_convertTouchToNodeSpace, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "convertTouchToNodeSpaceAR", mrb_cocos2d_CCNode_convertTouchToNodeSpaceAR, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCNode_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "description", mrb_cocos2d_CCNode_description, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_CCNode_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getActionByTag", mrb_cocos2d_CCNode_getActionByTag, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getActionManager", mrb_cocos2d_CCNode_getActionManager, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAnchorPoint", mrb_cocos2d_CCNode_getAnchorPoint, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAnchorPointInPoints", mrb_cocos2d_CCNode_getAnchorPointInPoints, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCamera", mrb_cocos2d_CCNode_getCamera, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getChildByTag", mrb_cocos2d_CCNode_getChildByTag, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getChildren", mrb_cocos2d_CCNode_getChildren, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getChildrenCount", mrb_cocos2d_CCNode_getChildrenCount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getComponent", mrb_cocos2d_CCNode_getComponent, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getContentSize", mrb_cocos2d_CCNode_getContentSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getGLServerState", mrb_cocos2d_CCNode_getGLServerState, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getGrid", mrb_cocos2d_CCNode_getGrid, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOrderOfArrival", mrb_cocos2d_CCNode_getOrderOfArrival, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getParent", mrb_cocos2d_CCNode_getParent, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPosition", mrb_cocos2d_CCNode_getPosition, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getPositionX", mrb_cocos2d_CCNode_getPositionX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPositionY", mrb_cocos2d_CCNode_getPositionY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRotation", mrb_cocos2d_CCNode_getRotation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRotationX", mrb_cocos2d_CCNode_getRotationX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRotationY", mrb_cocos2d_CCNode_getRotationY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getScale", mrb_cocos2d_CCNode_getScale, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getScaleX", mrb_cocos2d_CCNode_getScaleX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getScaleY", mrb_cocos2d_CCNode_getScaleY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getScheduler", mrb_cocos2d_CCNode_getScheduler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getScriptHandler", mrb_cocos2d_CCNode_getScriptHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getShaderProgram", mrb_cocos2d_CCNode_getShaderProgram, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSkewX", mrb_cocos2d_CCNode_getSkewX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSkewY", mrb_cocos2d_CCNode_getSkewY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTag", mrb_cocos2d_CCNode_getTag, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getUserData", mrb_cocos2d_CCNode_getUserData, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getUserObject", mrb_cocos2d_CCNode_getUserObject, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getVertexZ", mrb_cocos2d_CCNode_getVertexZ, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getZOrder", mrb_cocos2d_CCNode_getZOrder, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "ignoreAnchorPointForPosition", mrb_cocos2d_CCNode_ignoreAnchorPointForPosition, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCNode_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isIgnoreAnchorPointForPosition", mrb_cocos2d_CCNode_isIgnoreAnchorPointForPosition, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isRunning", mrb_cocos2d_CCNode_isRunning, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isVisible", mrb_cocos2d_CCNode_isVisible, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "nodeToParentTransform", mrb_cocos2d_CCNode_nodeToParentTransform, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "nodeToWorldTransform", mrb_cocos2d_CCNode_nodeToWorldTransform, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "numberOfRunningActions", mrb_cocos2d_CCNode_numberOfRunningActions, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCNode_onEnter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onEnterTransitionDidFinish", mrb_cocos2d_CCNode_onEnterTransitionDidFinish, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onExit", mrb_cocos2d_CCNode_onExit, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onExitTransitionDidStart", mrb_cocos2d_CCNode_onExitTransitionDidStart, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "parentToNodeTransform", mrb_cocos2d_CCNode_parentToNodeTransform, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pauseSchedulerAndActions", mrb_cocos2d_CCNode_pauseSchedulerAndActions, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "registerScriptHandler", mrb_cocos2d_CCNode_registerScriptHandler, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeAllChildren", mrb_cocos2d_CCNode_removeAllChildren, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeAllChildrenWithCleanup", mrb_cocos2d_CCNode_removeAllChildrenWithCleanup, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeAllComponents", mrb_cocos2d_CCNode_removeAllComponents, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeChild", mrb_cocos2d_CCNode_removeChild, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "removeChildByTag", mrb_cocos2d_CCNode_removeChildByTag, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "removeComponent", mrb_cocos2d_CCNode_removeComponent, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeFromParent", mrb_cocos2d_CCNode_removeFromParent, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeFromParentAndCleanup", mrb_cocos2d_CCNode_removeFromParentAndCleanup, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reorderChild", mrb_cocos2d_CCNode_reorderChild, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "resumeSchedulerAndActions", mrb_cocos2d_CCNode_resumeSchedulerAndActions, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "runAction", mrb_cocos2d_CCNode_runAction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "schedule", mrb_cocos2d_CCNode_schedule, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "scheduleOnce", mrb_cocos2d_CCNode_scheduleOnce, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "scheduleUpdate", mrb_cocos2d_CCNode_scheduleUpdate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "scheduleUpdateWithPriority", mrb_cocos2d_CCNode_scheduleUpdateWithPriority, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "scheduleUpdateWithPriorityLua", mrb_cocos2d_CCNode_scheduleUpdateWithPriorityLua, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setActionManager", mrb_cocos2d_CCNode_setActionManager, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAdditionalTransform", mrb_cocos2d_CCNode_setAdditionalTransform, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAnchorPoint", mrb_cocos2d_CCNode_setAnchorPoint, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setContentSize", mrb_cocos2d_CCNode_setContentSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setGLServerState", mrb_cocos2d_CCNode_setGLServerState, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setGrid", mrb_cocos2d_CCNode_setGrid, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOrderOfArrival", mrb_cocos2d_CCNode_setOrderOfArrival, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setParent", mrb_cocos2d_CCNode_setParent, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPosition", mrb_cocos2d_CCNode_setPosition, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "setPositionX", mrb_cocos2d_CCNode_setPositionX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPositionY", mrb_cocos2d_CCNode_setPositionY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRotation", mrb_cocos2d_CCNode_setRotation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRotationX", mrb_cocos2d_CCNode_setRotationX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRotationY", mrb_cocos2d_CCNode_setRotationY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setScale", mrb_cocos2d_CCNode_setScale, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setScaleX", mrb_cocos2d_CCNode_setScaleX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setScaleY", mrb_cocos2d_CCNode_setScaleY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setScheduler", mrb_cocos2d_CCNode_setScheduler, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setShaderProgram", mrb_cocos2d_CCNode_setShaderProgram, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSkewX", mrb_cocos2d_CCNode_setSkewX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSkewY", mrb_cocos2d_CCNode_setSkewY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTag", mrb_cocos2d_CCNode_setTag, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setUserData", mrb_cocos2d_CCNode_setUserData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setUserObject", mrb_cocos2d_CCNode_setUserObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setVertexZ", mrb_cocos2d_CCNode_setVertexZ, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setVisible", mrb_cocos2d_CCNode_setVisible, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setZOrder", mrb_cocos2d_CCNode_setZOrder, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "sortAllChildren", mrb_cocos2d_CCNode_sortAllChildren, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "stopAction", mrb_cocos2d_CCNode_stopAction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stopActionByTag", mrb_cocos2d_CCNode_stopActionByTag, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stopAllActions", mrb_cocos2d_CCNode_stopAllActions, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "transform", mrb_cocos2d_CCNode_transform, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "transformAncestors", mrb_cocos2d_CCNode_transformAncestors, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "unregisterScriptHandler", mrb_cocos2d_CCNode_unregisterScriptHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "unschedule", mrb_cocos2d_CCNode_unschedule, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "unscheduleAllSelectors", mrb_cocos2d_CCNode_unscheduleAllSelectors, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "unscheduleUpdate", mrb_cocos2d_CCNode_unscheduleUpdate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCNode_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateTransform", mrb_cocos2d_CCNode_updateTransform, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "visit", mrb_cocos2d_CCNode_visit, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "worldToNodeTransform", mrb_cocos2d_CCNode_worldToNodeTransform, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCRGBAProtocol") == 0) {
    _define_class_cocos2d_CCRGBAProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCNodeRGBA(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCRGBAProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCNodeRGBA_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getColor", mrb_cocos2d_CCNodeRGBA_getColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDisplayedColor", mrb_cocos2d_CCNodeRGBA_getDisplayedColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDisplayedOpacity", mrb_cocos2d_CCNodeRGBA_getDisplayedOpacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOpacity", mrb_cocos2d_CCNodeRGBA_getOpacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCNodeRGBA_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isCascadeColorEnabled", mrb_cocos2d_CCNodeRGBA_isCascadeColorEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isCascadeOpacityEnabled", mrb_cocos2d_CCNodeRGBA_isCascadeOpacityEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_CCNodeRGBA_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setCascadeColorEnabled", mrb_cocos2d_CCNodeRGBA_setCascadeColorEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setCascadeOpacityEnabled", mrb_cocos2d_CCNodeRGBA_setCascadeOpacityEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setColor", mrb_cocos2d_CCNodeRGBA_setColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacity", mrb_cocos2d_CCNodeRGBA_setOpacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_CCNodeRGBA_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateDisplayedColor", mrb_cocos2d_CCNodeRGBA_updateDisplayedColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateDisplayedOpacity", mrb_cocos2d_CCNodeRGBA_updateDisplayedOpacity, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCNotificationCenter(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNotificationCenter");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCNotificationCenter_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addObserver", mrb_cocos2d_CCNotificationCenter_addObserver, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "getObserverHandlerByName", mrb_cocos2d_CCNotificationCenter_getObserverHandlerByName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getScriptHandler", mrb_cocos2d_CCNotificationCenter_getScriptHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "postNotification", mrb_cocos2d_CCNotificationCenter_postNotification, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "purgeNotificationCenter", mrb_cocos2d_CCNotificationCenter_purgeNotificationCenter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "registerScriptObserver", mrb_cocos2d_CCNotificationCenter_registerScriptObserver, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "removeAllObservers", mrb_cocos2d_CCNotificationCenter_removeAllObservers, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeObserver", mrb_cocos2d_CCNotificationCenter_removeObserver, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "sharedNotificationCenter", mrb_cocos2d_CCNotificationCenter_sharedNotificationCenter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "unregisterScriptObserver", mrb_cocos2d_CCNotificationCenter_unregisterScriptObserver, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCNotificationObserver(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNotificationObserver");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCNotificationObserver_initialize, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "getHandler", mrb_cocos2d_CCNotificationObserver_getHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getName", mrb_cocos2d_CCNotificationObserver_getName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getObject", mrb_cocos2d_CCNotificationObserver_getObject, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTarget", mrb_cocos2d_CCNotificationObserver_getTarget, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "performSelector", mrb_cocos2d_CCNotificationObserver_performSelector, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeHandler", mrb_cocos2d_CCNotificationObserver_removeHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setHandler", mrb_cocos2d_CCNotificationObserver_setHandler, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCCopying") == 0) {
    _define_class_cocos2d_CCCopying(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCCopying"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCObject(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCObject_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "acceptVisitor", mrb_cocos2d_CCObject_acceptVisitor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "autoReleaseCount", mrb_cocos2d_CCObject_autoReleaseCount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "autorelease", mrb_cocos2d_CCObject_autorelease, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copy", mrb_cocos2d_CCObject_copy, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isEqual", mrb_cocos2d_CCObject_isEqual, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isSingleReference", mrb_cocos2d_CCObject_isSingleReference, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_nLuaID", mrb_cocos2d_CCObject__get_m_nLuaID, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_nLuaID=", mrb_cocos2d_CCObject__set_m_nLuaID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_uID", mrb_cocos2d_CCObject__get_m_uID, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_uID=", mrb_cocos2d_CCObject__set_m_uID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "release", mrb_cocos2d_CCObject_release, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "retain", mrb_cocos2d_CCObject_retain, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "retainCount", mrb_cocos2d_CCObject_retainCount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCObject_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionCamera") == 0) {
    _define_class_cocos2d_CCActionCamera(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionCamera"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCOrbitCamera(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCOrbitCamera");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCOrbitCamera_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCOrbitCamera_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCOrbitCamera_create, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCOrbitCamera_initWithDuration, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, cur_rc, "sphericalRadius", mrb_cocos2d_CCOrbitCamera_sphericalRadius, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCOrbitCamera_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCOrbitCamera_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCPVRMipmap(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCPVRMipmap");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "address", mrb_cocos2d_CCPVRMipmap__get_address, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "address=", mrb_cocos2d_CCPVRMipmap__set_address, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "len", mrb_cocos2d_CCPVRMipmap__get_len, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "len=", mrb_cocos2d_CCPVRMipmap__set_len, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCPVRMipmap_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCPageTurn3D(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCPageTurn3D");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCPageTurn3D_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCPageTurn3D_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCPageTurn3D_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCParallaxNode(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParallaxNode");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCParallaxNode_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addChild", mrb_cocos2d_CCParallaxNode_addChild, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCParallaxNode_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getParallaxArray", mrb_cocos2d_CCParallaxNode_getParallaxArray, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeAllChildrenWithCleanup", mrb_cocos2d_CCParallaxNode_removeAllChildrenWithCleanup, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeChild", mrb_cocos2d_CCParallaxNode_removeChild, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setParallaxArray", mrb_cocos2d_CCParallaxNode_setParallaxArray, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "visit", mrb_cocos2d_CCParallaxNode_visit, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextureProtocol") == 0) {
    _define_class_cocos2d_CCTextureProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCParticleBatchNode(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextureProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleBatchNode");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCParticleBatchNode_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addChild", mrb_cocos2d_CCParticleBatchNode_addChild, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCParticleBatchNode_create, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "createWithTexture", mrb_cocos2d_CCParticleBatchNode_createWithTexture, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "disableParticle", mrb_cocos2d_CCParticleBatchNode_disableParticle, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_CCParticleBatchNode_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBlendFunc", mrb_cocos2d_CCParticleBatchNode_getBlendFunc, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTexture", mrb_cocos2d_CCParticleBatchNode_getTexture, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTextureAtlas", mrb_cocos2d_CCParticleBatchNode_getTextureAtlas, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithFile", mrb_cocos2d_CCParticleBatchNode_initWithFile, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithTexture", mrb_cocos2d_CCParticleBatchNode_initWithTexture, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "insertChild", mrb_cocos2d_CCParticleBatchNode_insertChild, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "removeAllChildrenWithCleanup", mrb_cocos2d_CCParticleBatchNode_removeAllChildrenWithCleanup, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeChild", mrb_cocos2d_CCParticleBatchNode_removeChild, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "removeChildAtIndex", mrb_cocos2d_CCParticleBatchNode_removeChildAtIndex, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reorderChild", mrb_cocos2d_CCParticleBatchNode_reorderChild, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setBlendFunc", mrb_cocos2d_CCParticleBatchNode_setBlendFunc, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTexture", mrb_cocos2d_CCParticleBatchNode_setTexture, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTextureAtlas", mrb_cocos2d_CCParticleBatchNode_setTextureAtlas, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "visit", mrb_cocos2d_CCParticleBatchNode_visit, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCParticleExplosion(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleExplosion");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCParticleExplosion_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCParticleExplosion_create, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "createWithTotalParticles", mrb_cocos2d_CCParticleExplosion_createWithTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCParticleExplosion_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTotalParticles", mrb_cocos2d_CCParticleExplosion_initWithTotalParticles, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCParticleFire(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleFire");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCParticleFire_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCParticleFire_create, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "createWithTotalParticles", mrb_cocos2d_CCParticleFire_createWithTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCParticleFire_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTotalParticles", mrb_cocos2d_CCParticleFire_initWithTotalParticles, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCParticleFireworks(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleFireworks");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCParticleFireworks_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCParticleFireworks_create, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "createWithTotalParticles", mrb_cocos2d_CCParticleFireworks_createWithTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCParticleFireworks_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTotalParticles", mrb_cocos2d_CCParticleFireworks_initWithTotalParticles, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCParticleFlower(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleFlower");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCParticleFlower_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCParticleFlower_create, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "createWithTotalParticles", mrb_cocos2d_CCParticleFlower_createWithTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCParticleFlower_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTotalParticles", mrb_cocos2d_CCParticleFlower_initWithTotalParticles, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCParticleGalaxy(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleGalaxy");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCParticleGalaxy_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCParticleGalaxy_create, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "createWithTotalParticles", mrb_cocos2d_CCParticleGalaxy_createWithTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCParticleGalaxy_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTotalParticles", mrb_cocos2d_CCParticleGalaxy_initWithTotalParticles, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCParticleMeteor(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleMeteor");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCParticleMeteor_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCParticleMeteor_create, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "createWithTotalParticles", mrb_cocos2d_CCParticleMeteor_createWithTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCParticleMeteor_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTotalParticles", mrb_cocos2d_CCParticleMeteor_initWithTotalParticles, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCParticleRain(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleRain");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCParticleRain_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCParticleRain_create, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "createWithTotalParticles", mrb_cocos2d_CCParticleRain_createWithTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCParticleRain_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTotalParticles", mrb_cocos2d_CCParticleRain_initWithTotalParticles, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCParticleSmoke(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSmoke");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCParticleSmoke_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCParticleSmoke_create, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "createWithTotalParticles", mrb_cocos2d_CCParticleSmoke_createWithTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCParticleSmoke_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTotalParticles", mrb_cocos2d_CCParticleSmoke_initWithTotalParticles, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCParticleSnow(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSnow");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCParticleSnow_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCParticleSnow_create, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "createWithTotalParticles", mrb_cocos2d_CCParticleSnow_createWithTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCParticleSnow_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTotalParticles", mrb_cocos2d_CCParticleSnow_initWithTotalParticles, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCParticleSpiral(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSpiral");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCParticleSpiral_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCParticleSpiral_create, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "createWithTotalParticles", mrb_cocos2d_CCParticleSpiral_createWithTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCParticleSpiral_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTotalParticles", mrb_cocos2d_CCParticleSpiral_initWithTotalParticles, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystemQuad") == 0) {
    _define_class_cocos2d_CCParticleSystemQuad(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCParticleSun(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSun");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCParticleSun_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCParticleSun_create, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "createWithTotalParticles", mrb_cocos2d_CCParticleSun_createWithTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCParticleSun_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTotalParticles", mrb_cocos2d_CCParticleSun_initWithTotalParticles, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextureProtocol") == 0) {
    _define_class_cocos2d_CCTextureProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCParticleSystem(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextureProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystem");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCParticleSystem_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addParticle", mrb_cocos2d_CCParticleSystem_addParticle, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCParticleSystem_create, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithTotalParticles", mrb_cocos2d_CCParticleSystem_createWithTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getAngle", mrb_cocos2d_CCParticleSystem_getAngle, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAngleVar", mrb_cocos2d_CCParticleSystem_getAngleVar, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAtlasIndex", mrb_cocos2d_CCParticleSystem_getAtlasIndex, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBatchNode", mrb_cocos2d_CCParticleSystem_getBatchNode, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBlendFunc", mrb_cocos2d_CCParticleSystem_getBlendFunc, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDuration", mrb_cocos2d_CCParticleSystem_getDuration, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getEmissionRate", mrb_cocos2d_CCParticleSystem_getEmissionRate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getEmitterMode", mrb_cocos2d_CCParticleSystem_getEmitterMode, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getEndColor", mrb_cocos2d_CCParticleSystem_getEndColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getEndColorVar", mrb_cocos2d_CCParticleSystem_getEndColorVar, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getEndRadius", mrb_cocos2d_CCParticleSystem_getEndRadius, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getEndRadiusVar", mrb_cocos2d_CCParticleSystem_getEndRadiusVar, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getEndSize", mrb_cocos2d_CCParticleSystem_getEndSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getEndSizeVar", mrb_cocos2d_CCParticleSystem_getEndSizeVar, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getEndSpin", mrb_cocos2d_CCParticleSystem_getEndSpin, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getEndSpinVar", mrb_cocos2d_CCParticleSystem_getEndSpinVar, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getGravity", mrb_cocos2d_CCParticleSystem_getGravity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getLife", mrb_cocos2d_CCParticleSystem_getLife, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getLifeVar", mrb_cocos2d_CCParticleSystem_getLifeVar, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOpacityModifyRGB", mrb_cocos2d_CCParticleSystem_getOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getParticleCount", mrb_cocos2d_CCParticleSystem_getParticleCount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPosVar", mrb_cocos2d_CCParticleSystem_getPosVar, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPositionType", mrb_cocos2d_CCParticleSystem_getPositionType, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRadialAccel", mrb_cocos2d_CCParticleSystem_getRadialAccel, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRadialAccelVar", mrb_cocos2d_CCParticleSystem_getRadialAccelVar, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRotatePerSecond", mrb_cocos2d_CCParticleSystem_getRotatePerSecond, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRotatePerSecondVar", mrb_cocos2d_CCParticleSystem_getRotatePerSecondVar, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRotationIsDir", mrb_cocos2d_CCParticleSystem_getRotationIsDir, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSourcePosition", mrb_cocos2d_CCParticleSystem_getSourcePosition, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSpeed", mrb_cocos2d_CCParticleSystem_getSpeed, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSpeedVar", mrb_cocos2d_CCParticleSystem_getSpeedVar, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStartColor", mrb_cocos2d_CCParticleSystem_getStartColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStartColorVar", mrb_cocos2d_CCParticleSystem_getStartColorVar, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStartRadius", mrb_cocos2d_CCParticleSystem_getStartRadius, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStartRadiusVar", mrb_cocos2d_CCParticleSystem_getStartRadiusVar, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStartSize", mrb_cocos2d_CCParticleSystem_getStartSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStartSizeVar", mrb_cocos2d_CCParticleSystem_getStartSizeVar, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStartSpin", mrb_cocos2d_CCParticleSystem_getStartSpin, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStartSpinVar", mrb_cocos2d_CCParticleSystem_getStartSpinVar, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTangentialAccel", mrb_cocos2d_CCParticleSystem_getTangentialAccel, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTangentialAccelVar", mrb_cocos2d_CCParticleSystem_getTangentialAccelVar, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTexture", mrb_cocos2d_CCParticleSystem_getTexture, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTotalParticles", mrb_cocos2d_CCParticleSystem_getTotalParticles, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCParticleSystem_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initParticle", mrb_cocos2d_CCParticleSystem_initParticle, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithDictionary", mrb_cocos2d_CCParticleSystem_initWithDictionary, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "initWithFile", mrb_cocos2d_CCParticleSystem_initWithFile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithTotalParticles", mrb_cocos2d_CCParticleSystem_initWithTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isActive", mrb_cocos2d_CCParticleSystem_isActive, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isAutoRemoveOnFinish", mrb_cocos2d_CCParticleSystem_isAutoRemoveOnFinish, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isBlendAdditive", mrb_cocos2d_CCParticleSystem_isBlendAdditive, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isFull", mrb_cocos2d_CCParticleSystem_isFull, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bIsActive", mrb_cocos2d_CCParticleSystem__get_m_bIsActive, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bIsActive=", mrb_cocos2d_CCParticleSystem__set_m_bIsActive, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_bIsBlendAdditive", mrb_cocos2d_CCParticleSystem__get_m_bIsBlendAdditive, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bIsBlendAdditive=", mrb_cocos2d_CCParticleSystem__set_m_bIsBlendAdditive, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_bTransformSystemDirty", mrb_cocos2d_CCParticleSystem__get_m_bTransformSystemDirty, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bTransformSystemDirty=", mrb_cocos2d_CCParticleSystem__set_m_bTransformSystemDirty, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_uAllocatedParticles", mrb_cocos2d_CCParticleSystem__get_m_uAllocatedParticles, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_uAllocatedParticles=", mrb_cocos2d_CCParticleSystem__set_m_uAllocatedParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "postStep", mrb_cocos2d_CCParticleSystem_postStep, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "resetSystem", mrb_cocos2d_CCParticleSystem_resetSystem, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAngle", mrb_cocos2d_CCParticleSystem_setAngle, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAngleVar", mrb_cocos2d_CCParticleSystem_setAngleVar, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAtlasIndex", mrb_cocos2d_CCParticleSystem_setAtlasIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAutoRemoveOnFinish", mrb_cocos2d_CCParticleSystem_setAutoRemoveOnFinish, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBatchNode", mrb_cocos2d_CCParticleSystem_setBatchNode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBlendAdditive", mrb_cocos2d_CCParticleSystem_setBlendAdditive, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBlendFunc", mrb_cocos2d_CCParticleSystem_setBlendFunc, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDuration", mrb_cocos2d_CCParticleSystem_setDuration, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEmissionRate", mrb_cocos2d_CCParticleSystem_setEmissionRate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEmitterMode", mrb_cocos2d_CCParticleSystem_setEmitterMode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEndColor", mrb_cocos2d_CCParticleSystem_setEndColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEndColorVar", mrb_cocos2d_CCParticleSystem_setEndColorVar, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEndRadius", mrb_cocos2d_CCParticleSystem_setEndRadius, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEndRadiusVar", mrb_cocos2d_CCParticleSystem_setEndRadiusVar, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEndSize", mrb_cocos2d_CCParticleSystem_setEndSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEndSizeVar", mrb_cocos2d_CCParticleSystem_setEndSizeVar, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEndSpin", mrb_cocos2d_CCParticleSystem_setEndSpin, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEndSpinVar", mrb_cocos2d_CCParticleSystem_setEndSpinVar, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setGravity", mrb_cocos2d_CCParticleSystem_setGravity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setLife", mrb_cocos2d_CCParticleSystem_setLife, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setLifeVar", mrb_cocos2d_CCParticleSystem_setLifeVar, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_CCParticleSystem_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPosVar", mrb_cocos2d_CCParticleSystem_setPosVar, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPositionType", mrb_cocos2d_CCParticleSystem_setPositionType, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRadialAccel", mrb_cocos2d_CCParticleSystem_setRadialAccel, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRadialAccelVar", mrb_cocos2d_CCParticleSystem_setRadialAccelVar, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRotatePerSecond", mrb_cocos2d_CCParticleSystem_setRotatePerSecond, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRotatePerSecondVar", mrb_cocos2d_CCParticleSystem_setRotatePerSecondVar, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRotation", mrb_cocos2d_CCParticleSystem_setRotation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRotationIsDir", mrb_cocos2d_CCParticleSystem_setRotationIsDir, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setScale", mrb_cocos2d_CCParticleSystem_setScale, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setScaleX", mrb_cocos2d_CCParticleSystem_setScaleX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setScaleY", mrb_cocos2d_CCParticleSystem_setScaleY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSourcePosition", mrb_cocos2d_CCParticleSystem_setSourcePosition, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSpeed", mrb_cocos2d_CCParticleSystem_setSpeed, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSpeedVar", mrb_cocos2d_CCParticleSystem_setSpeedVar, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setStartColor", mrb_cocos2d_CCParticleSystem_setStartColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setStartColorVar", mrb_cocos2d_CCParticleSystem_setStartColorVar, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setStartRadius", mrb_cocos2d_CCParticleSystem_setStartRadius, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setStartRadiusVar", mrb_cocos2d_CCParticleSystem_setStartRadiusVar, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setStartSize", mrb_cocos2d_CCParticleSystem_setStartSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setStartSizeVar", mrb_cocos2d_CCParticleSystem_setStartSizeVar, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setStartSpin", mrb_cocos2d_CCParticleSystem_setStartSpin, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setStartSpinVar", mrb_cocos2d_CCParticleSystem_setStartSpinVar, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTangentialAccel", mrb_cocos2d_CCParticleSystem_setTangentialAccel, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTangentialAccelVar", mrb_cocos2d_CCParticleSystem_setTangentialAccelVar, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTexture", mrb_cocos2d_CCParticleSystem_setTexture, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTotalParticles", mrb_cocos2d_CCParticleSystem_setTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stopSystem", mrb_cocos2d_CCParticleSystem_stopSystem, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCParticleSystem_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateQuadWithParticle", mrb_cocos2d_CCParticleSystem_updateQuadWithParticle, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "updateWithNoTime", mrb_cocos2d_CCParticleSystem_updateWithNoTime, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCParticleSystem") == 0) {
    _define_class_cocos2d_CCParticleSystem(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystem"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCParticleSystemQuad(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCParticleSystemQuad");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCParticleSystemQuad_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCParticleSystemQuad_create, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "createWithTotalParticles", mrb_cocos2d_CCParticleSystemQuad_createWithTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_CCParticleSystemQuad_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initIndices", mrb_cocos2d_CCParticleSystemQuad_initIndices, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initTexCoordsWithRect", mrb_cocos2d_CCParticleSystemQuad_initTexCoordsWithRect, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithTotalParticles", mrb_cocos2d_CCParticleSystemQuad_initWithTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "listenBackToForeground", mrb_cocos2d_CCParticleSystemQuad_listenBackToForeground, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "postStep", mrb_cocos2d_CCParticleSystemQuad_postStep, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setBatchNode", mrb_cocos2d_CCParticleSystemQuad_setBatchNode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDisplayFrame", mrb_cocos2d_CCParticleSystemQuad_setDisplayFrame, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTexture", mrb_cocos2d_CCParticleSystemQuad_setTexture, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTextureWithRect", mrb_cocos2d_CCParticleSystemQuad_setTextureWithRect, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setTotalParticles", mrb_cocos2d_CCParticleSystemQuad_setTotalParticles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateQuadWithParticle", mrb_cocos2d_CCParticleSystemQuad_updateQuadWithParticle, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCPlace(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCPlace");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCPlace_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCPlace_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCPlace_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithPosition", mrb_cocos2d_CCPlace_initWithPosition, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCPlace_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCPoint(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCPoint");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCPoint_initialize, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "cross", mrb_cocos2d_CCPoint_cross, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "dot", mrb_cocos2d_CCPoint_dot, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "equals", mrb_cocos2d_CCPoint_equals, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "forAngle", mrb_cocos2d_CCPoint_forAngle, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "fuzzyEquals", mrb_cocos2d_CCPoint_fuzzyEquals, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getAngle", mrb_cocos2d_CCPoint_getAngle, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getDistance", mrb_cocos2d_CCPoint_getDistance, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getDistanceSq", mrb_cocos2d_CCPoint_getDistanceSq, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getLength", mrb_cocos2d_CCPoint_getLength, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getLengthSq", mrb_cocos2d_CCPoint_getLengthSq, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPerp", mrb_cocos2d_CCPoint_getPerp, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRPerp", mrb_cocos2d_CCPoint_getRPerp, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "lerp", mrb_cocos2d_CCPoint_lerp, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "normalize", mrb_cocos2d_CCPoint_normalize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "operator*", mrb_cocos2d_CCPoint_mul, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "operator+", mrb_cocos2d_CCPoint_plus, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "operator-", mrb_cocos2d_CCPoint_minus, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "operator/", mrb_cocos2d_CCPoint_div, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "operator=", mrb_cocos2d_CCPoint_assign, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "project", mrb_cocos2d_CCPoint_project, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "rotate", mrb_cocos2d_CCPoint_rotate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "rotateByAngle", mrb_cocos2d_CCPoint_rotateByAngle, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setPoint", mrb_cocos2d_CCPoint_setPoint, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "unrotate", mrb_cocos2d_CCPoint_unrotate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "x", mrb_cocos2d_CCPoint__get_x, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "x=", mrb_cocos2d_CCPoint__set_x, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "y", mrb_cocos2d_CCPoint__get_y, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "y=", mrb_cocos2d_CCPoint__set_y, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCPointArray(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCPointArray");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCPointArray_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addControlPoint", mrb_cocos2d_CCPointArray_addControlPoint, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCPointArray_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "count", mrb_cocos2d_CCPointArray_count, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCPointArray_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getControlPointAtIndex", mrb_cocos2d_CCPointArray_getControlPointAtIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithCapacity", mrb_cocos2d_CCPointArray_initWithCapacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "insertControlPoint", mrb_cocos2d_CCPointArray_insertControlPoint, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "removeControlPointAtIndex", mrb_cocos2d_CCPointArray_removeControlPointAtIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "replaceControlPoint", mrb_cocos2d_CCPointArray_replaceControlPoint, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCPointArray_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reverseInline", mrb_cocos2d_CCPointArray_reverseInline, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setControlPoints", mrb_cocos2d_CCPointArray_setControlPoints, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "CCPointFromString", mrb_cocos2d_CCPointFromString, MRB_ARGS_REQ(1));
  mrb_define_const(mrb, cur_rc, "CCPointZero", mrb_cocos2d__get_CCPointZero(mrb, mrb_obj_value(cur_rc)));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCPoolManager(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCPoolManager");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCPoolManager_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addObject", mrb_cocos2d_CCPoolManager_addObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "finalize", mrb_cocos2d_CCPoolManager_finalize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pop", mrb_cocos2d_CCPoolManager_pop, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "purgePoolManager", mrb_cocos2d_CCPoolManager_purgePoolManager, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "push", mrb_cocos2d_CCPoolManager_push, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeObject", mrb_cocos2d_CCPoolManager_removeObject, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "sharedPoolManager", mrb_cocos2d_CCPoolManager_sharedPoolManager, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCDataVisitor") == 0) {
    _define_class_cocos2d_CCDataVisitor(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCDataVisitor"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCPrettyPrinter(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCPrettyPrinter");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCPrettyPrinter_initialize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "clear", mrb_cocos2d_CCPrettyPrinter_clear, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getResult", mrb_cocos2d_CCPrettyPrinter_getResult, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "visit", mrb_cocos2d_CCPrettyPrinter_visit, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "visitObject", mrb_cocos2d_CCPrettyPrinter_visitObject, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCProfiler(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCProfiler");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "createAndAddTimerWithName", mrb_cocos2d_CCProfiler_createAndAddTimerWithName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "displayTimers", mrb_cocos2d_CCProfiler_displayTimers, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCProfiler_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pActiveTimers", mrb_cocos2d_CCProfiler__get_m_pActiveTimers, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pActiveTimers=", mrb_cocos2d_CCProfiler__set_m_pActiveTimers, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "releaseAllTimers", mrb_cocos2d_CCProfiler_releaseAllTimers, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "releaseTimer", mrb_cocos2d_CCProfiler_releaseTimer, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "sharedProfiler", mrb_cocos2d_CCProfiler_sharedProfiler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCProfiler_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "CCProfilingBeginTimingBlock", mrb_cocos2d_CCProfilingBeginTimingBlock, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "CCProfilingEndTimingBlock", mrb_cocos2d_CCProfilingEndTimingBlock, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "CCProfilingResetTimingBlock", mrb_cocos2d_CCProfilingResetTimingBlock, MRB_ARGS_REQ(1));

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCProfilingTimer(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCProfilingTimer");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "description", mrb_cocos2d_CCProfilingTimer_description, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAverageTime", mrb_cocos2d_CCProfilingTimer_getAverageTime, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStartTime", mrb_cocos2d_CCProfilingTimer_getStartTime, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithName", mrb_cocos2d_CCProfilingTimer_initWithName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_NameStr", mrb_cocos2d_CCProfilingTimer__get_m_NameStr, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_NameStr=", mrb_cocos2d_CCProfilingTimer__set_m_NameStr, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_dAverageTime", mrb_cocos2d_CCProfilingTimer__get_m_dAverageTime, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_dAverageTime=", mrb_cocos2d_CCProfilingTimer__set_m_dAverageTime, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_sStartTime", mrb_cocos2d_CCProfilingTimer__get_m_sStartTime, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_sStartTime=", mrb_cocos2d_CCProfilingTimer__set_m_sStartTime, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "maxTime", mrb_cocos2d_CCProfilingTimer__get_maxTime, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "maxTime=", mrb_cocos2d_CCProfilingTimer__set_maxTime, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "minTime", mrb_cocos2d_CCProfilingTimer__get_minTime, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "minTime=", mrb_cocos2d_CCProfilingTimer__set_minTime, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "numberOfCalls", mrb_cocos2d_CCProfilingTimer__get_numberOfCalls, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "numberOfCalls=", mrb_cocos2d_CCProfilingTimer__set_numberOfCalls, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reset", mrb_cocos2d_CCProfilingTimer_reset, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAverageTime", mrb_cocos2d_CCProfilingTimer_setAverageTime, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "totalTime", mrb_cocos2d_CCProfilingTimer__get_totalTime, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "totalTime=", mrb_cocos2d_CCProfilingTimer__set_totalTime, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCProfilingTimer_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCProgressFromTo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCProgressFromTo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCProgressFromTo_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCProgressFromTo_create, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCProgressFromTo_initWithDuration, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCProgressFromTo_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCProgressFromTo_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCProgressFromTo_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCProgressFromTo_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNodeRGBA") == 0) {
    _define_class_cocos2d_CCNodeRGBA(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCProgressTimer(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCProgressTimer");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCProgressTimer_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCProgressTimer_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_CCProgressTimer_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBarChangeRate", mrb_cocos2d_CCProgressTimer_getBarChangeRate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMidpoint", mrb_cocos2d_CCProgressTimer_getMidpoint, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPercentage", mrb_cocos2d_CCProgressTimer_getPercentage, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSprite", mrb_cocos2d_CCProgressTimer_getSprite, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getType", mrb_cocos2d_CCProgressTimer_getType, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithSprite", mrb_cocos2d_CCProgressTimer_initWithSprite, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_CCProgressTimer_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isReverseDirection", mrb_cocos2d_CCProgressTimer_isReverseDirection, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bReverseDirection", mrb_cocos2d_CCProgressTimer__get_m_bReverseDirection, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bReverseDirection=", mrb_cocos2d_CCProgressTimer__set_m_bReverseDirection, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAnchorPoint", mrb_cocos2d_CCProgressTimer_setAnchorPoint, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBarChangeRate", mrb_cocos2d_CCProgressTimer_setBarChangeRate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMidpoint", mrb_cocos2d_CCProgressTimer_setMidpoint, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_CCProgressTimer_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPercentage", mrb_cocos2d_CCProgressTimer_setPercentage, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setReverseDirection", mrb_cocos2d_CCProgressTimer_setReverseDirection, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setReverseProgress", mrb_cocos2d_CCProgressTimer_setReverseProgress, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSprite", mrb_cocos2d_CCProgressTimer_setSprite, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setType", mrb_cocos2d_CCProgressTimer_setType, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCProgressTo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCProgressTo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCProgressTo_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCProgressTo_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCProgressTo_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCProgressTo_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCProgressTo_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCProgressTo_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCRGBAProtocol(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCRGBAProtocol");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "getColor", mrb_cocos2d_CCRGBAProtocol_getColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDisplayedColor", mrb_cocos2d_CCRGBAProtocol_getDisplayedColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDisplayedOpacity", mrb_cocos2d_CCRGBAProtocol_getDisplayedOpacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOpacity", mrb_cocos2d_CCRGBAProtocol_getOpacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isCascadeColorEnabled", mrb_cocos2d_CCRGBAProtocol_isCascadeColorEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isCascadeOpacityEnabled", mrb_cocos2d_CCRGBAProtocol_isCascadeOpacityEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_CCRGBAProtocol_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setCascadeColorEnabled", mrb_cocos2d_CCRGBAProtocol_setCascadeColorEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setCascadeOpacityEnabled", mrb_cocos2d_CCRGBAProtocol_setCascadeOpacityEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setColor", mrb_cocos2d_CCRGBAProtocol_setColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacity", mrb_cocos2d_CCRGBAProtocol_setOpacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_CCRGBAProtocol_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateDisplayedColor", mrb_cocos2d_CCRGBAProtocol_updateDisplayedColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateDisplayedOpacity", mrb_cocos2d_CCRGBAProtocol_updateDisplayedOpacity, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCRect(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCRect");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCRect_initialize, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "containsPoint", mrb_cocos2d_CCRect_containsPoint, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "equals", mrb_cocos2d_CCRect_equals, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getMaxX", mrb_cocos2d_CCRect_getMaxX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMaxY", mrb_cocos2d_CCRect_getMaxY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMidX", mrb_cocos2d_CCRect_getMidX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMidY", mrb_cocos2d_CCRect_getMidY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMinX", mrb_cocos2d_CCRect_getMinX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMinY", mrb_cocos2d_CCRect_getMinY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "intersectsRect", mrb_cocos2d_CCRect_intersectsRect, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "operator=", mrb_cocos2d_CCRect_assign, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "origin", mrb_cocos2d_CCRect__get_origin, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "origin=", mrb_cocos2d_CCRect__set_origin, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRect", mrb_cocos2d_CCRect_setRect, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "size", mrb_cocos2d_CCRect__get_size, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "size=", mrb_cocos2d_CCRect__set_size, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "CCRectApplyAffineTransform", mrb_cocos2d_CCRectApplyAffineTransform, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "CCRectFromString", mrb_cocos2d_CCRectFromString, MRB_ARGS_REQ(1));
  mrb_define_const(mrb, cur_rc, "CCRectZero", mrb_cocos2d__get_CCRectZero(mrb, mrb_obj_value(cur_rc)));

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCRemoveSelf(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCRemoveSelf");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCRemoveSelf_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCRemoveSelf_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCRemoveSelf_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCRemoveSelf_init, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCRemoveSelf_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCRemoveSelf_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCRenderTexture(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCRenderTexture");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCRenderTexture_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "begin", mrb_cocos2d_CCRenderTexture_begin, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "beginWithClear", mrb_cocos2d_CCRenderTexture_beginWithClear, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "clear", mrb_cocos2d_CCRenderTexture_clear, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "clearDepth", mrb_cocos2d_CCRenderTexture_clearDepth, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "clearStencil", mrb_cocos2d_CCRenderTexture_clearStencil, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCRenderTexture_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_CCRenderTexture_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "end", mrb_cocos2d_CCRenderTexture_end, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "endToLua", mrb_cocos2d_CCRenderTexture_endToLua, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getClearColor", mrb_cocos2d_CCRenderTexture_getClearColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getClearDepth", mrb_cocos2d_CCRenderTexture_getClearDepth, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getClearFlags", mrb_cocos2d_CCRenderTexture_getClearFlags, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getClearStencil", mrb_cocos2d_CCRenderTexture_getClearStencil, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSprite", mrb_cocos2d_CCRenderTexture_getSprite, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithWidthAndHeight", mrb_cocos2d_CCRenderTexture_initWithWidthAndHeight, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "isAutoDraw", mrb_cocos2d_CCRenderTexture_isAutoDraw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "listenToBackground", mrb_cocos2d_CCRenderTexture_listenToBackground, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "listenToForeground", mrb_cocos2d_CCRenderTexture_listenToForeground, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "newCCImage", mrb_cocos2d_CCRenderTexture_newCCImage, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "saveToFile", mrb_cocos2d_CCRenderTexture_saveToFile, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "setAutoDraw", mrb_cocos2d_CCRenderTexture_setAutoDraw, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setClearColor", mrb_cocos2d_CCRenderTexture_setClearColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setClearDepth", mrb_cocos2d_CCRenderTexture_setClearDepth, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setClearFlags", mrb_cocos2d_CCRenderTexture_setClearFlags, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setClearStencil", mrb_cocos2d_CCRenderTexture_setClearStencil, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSprite", mrb_cocos2d_CCRenderTexture_setSprite, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "visit", mrb_cocos2d_CCRenderTexture_visit, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCRepeat(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCRepeat");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCRepeat_cleanup, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCRepeat_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCRepeat_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getInnerAction", mrb_cocos2d_CCRepeat_getInnerAction, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithAction", mrb_cocos2d_CCRepeat_initWithAction, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "isDone", mrb_cocos2d_CCRepeat_isDone, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCRepeat_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setInnerAction", mrb_cocos2d_CCRepeat_setInnerAction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCRepeat_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stop", mrb_cocos2d_CCRepeat_stop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCRepeat_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCRepeat_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCRepeatForever(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCRepeatForever");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCRepeatForever_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCRepeatForever_cleanup, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCRepeatForever_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCRepeatForever_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getInnerAction", mrb_cocos2d_CCRepeatForever_getInnerAction, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithAction", mrb_cocos2d_CCRepeatForever_initWithAction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isDone", mrb_cocos2d_CCRepeatForever_isDone, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCRepeatForever_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setInnerAction", mrb_cocos2d_CCRepeatForever_setInnerAction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCRepeatForever_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "step", mrb_cocos2d_CCRepeatForever_step, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCReuseGrid(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCReuseGrid");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCReuseGrid_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithTimes", mrb_cocos2d_CCReuseGrid_initWithTimes, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCReuseGrid_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCReuseGrid_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCReverseTime(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCReverseTime");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCReverseTime_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCReverseTime_cleanup, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCReverseTime_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCReverseTime_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithAction", mrb_cocos2d_CCReverseTime_initWithAction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCReverseTime_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCReverseTime_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stop", mrb_cocos2d_CCReverseTime_stop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCReverseTime_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCRipple3D(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCRipple3D");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCRipple3D_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCRipple3D_create, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, cur_rc, "getAmplitude", mrb_cocos2d_CCRipple3D_getAmplitude, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAmplitudeRate", mrb_cocos2d_CCRipple3D_getAmplitudeRate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPosition", mrb_cocos2d_CCRipple3D_getPosition, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCRipple3D_initWithDuration, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, cur_rc, "setAmplitude", mrb_cocos2d_CCRipple3D_setAmplitude, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAmplitudeRate", mrb_cocos2d_CCRipple3D_setAmplitudeRate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPosition", mrb_cocos2d_CCRipple3D_setPosition, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCRipple3D_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCRipple3D_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCRotateBy(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCRotateBy");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCRotateBy_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCRotateBy_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCRotateBy_initWithDuration, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCRotateBy_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCRotateBy_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCRotateBy_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCRotateBy_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCRotateTo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCRotateTo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCRotateTo_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCRotateTo_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCRotateTo_initWithDuration, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCRotateTo_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCRotateTo_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCRotateTo_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCSAXParser(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSAXParser");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCSAXParser_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "endElement", mrb_cocos2d_CCSAXParser_endElement, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCSAXParser_init, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "parse", mrb_cocos2d_CCSAXParser_parse, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "setDelegator", mrb_cocos2d_CCSAXParser_setDelegator, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "startElement", mrb_cocos2d_CCSAXParser_startElement, MRB_ARGS_REQ(3));
  mrb_define_class_method(mrb, cur_rc, "textHandler", mrb_cocos2d_CCSAXParser_textHandler, MRB_ARGS_REQ(3));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCScaleTo") == 0) {
    _define_class_cocos2d_CCScaleTo(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCScaleTo"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCScaleBy(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCScaleBy");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCScaleBy_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCScaleBy_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCScaleBy_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCScaleBy_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCScaleBy_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCScaleTo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCScaleTo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCScaleTo_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCScaleTo_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCScaleTo_initWithDuration, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCScaleTo_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCScaleTo_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCScaleTo_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCScene(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCScene");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCScene_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCScene_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCScene_init, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCScheduler(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCScheduler");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCScheduler_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTimeScale", mrb_cocos2d_CCScheduler_getTimeScale, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isTargetPaused", mrb_cocos2d_CCScheduler_isTargetPaused, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "pauseAllTargets", mrb_cocos2d_CCScheduler_pauseAllTargets, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pauseAllTargetsWithMinPriority", mrb_cocos2d_CCScheduler_pauseAllTargetsWithMinPriority, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "pauseTarget", mrb_cocos2d_CCScheduler_pauseTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "resumeTarget", mrb_cocos2d_CCScheduler_resumeTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "resumeTargets", mrb_cocos2d_CCScheduler_resumeTargets, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "scheduleScriptFunc", mrb_cocos2d_CCScheduler_scheduleScriptFunc, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "scheduleSelector", mrb_cocos2d_CCScheduler_scheduleSelector, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "scheduleUpdateForTarget", mrb_cocos2d_CCScheduler_scheduleUpdateForTarget, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "setTimeScale", mrb_cocos2d_CCScheduler_setTimeScale, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "unscheduleAll", mrb_cocos2d_CCScheduler_unscheduleAll, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "unscheduleAllForTarget", mrb_cocos2d_CCScheduler_unscheduleAllForTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "unscheduleAllWithMinPriority", mrb_cocos2d_CCScheduler_unscheduleAllWithMinPriority, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "unscheduleScriptEntry", mrb_cocos2d_CCScheduler_unscheduleScriptEntry, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "unscheduleSelector", mrb_cocos2d_CCScheduler_unscheduleSelector, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "unscheduleUpdateForTarget", mrb_cocos2d_CCScheduler_unscheduleUpdateForTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCScheduler_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCScriptHandlerEntry") == 0) {
    _define_class_cocos2d_CCScriptHandlerEntry(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCScriptHandlerEntry"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCSchedulerScriptHandlerEntry(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSchedulerScriptHandlerEntry");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCSchedulerScriptHandlerEntry_create, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "getTimer", mrb_cocos2d_CCSchedulerScriptHandlerEntry_getTimer, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isMarkedForDeletion", mrb_cocos2d_CCSchedulerScriptHandlerEntry_isMarkedForDeletion, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isPaused", mrb_cocos2d_CCSchedulerScriptHandlerEntry_isPaused, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "markedForDeletion", mrb_cocos2d_CCSchedulerScriptHandlerEntry_markedForDeletion, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCScriptEngineManager(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCScriptEngineManager");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "getScriptEngine", mrb_cocos2d_CCScriptEngineManager_getScriptEngine, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "purgeSharedManager", mrb_cocos2d_CCScriptEngineManager_purgeSharedManager, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeScriptEngine", mrb_cocos2d_CCScriptEngineManager_removeScriptEngine, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "sharedManager", mrb_cocos2d_CCScriptEngineManager_sharedManager, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCScriptEngineProtocol(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCScriptEngineProtocol");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "executeAccelerometerEvent", mrb_cocos2d_CCScriptEngineProtocol_executeAccelerometerEvent, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "executeCallFuncActionEvent", mrb_cocos2d_CCScriptEngineProtocol_executeCallFuncActionEvent, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "executeEvent", mrb_cocos2d_CCScriptEngineProtocol_executeEvent, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "executeGlobalFunction", mrb_cocos2d_CCScriptEngineProtocol_executeGlobalFunction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "executeLayerKeypadEvent", mrb_cocos2d_CCScriptEngineProtocol_executeLayerKeypadEvent, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "executeLayerTouchEvent", mrb_cocos2d_CCScriptEngineProtocol_executeLayerTouchEvent, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "executeLayerTouchesEvent", mrb_cocos2d_CCScriptEngineProtocol_executeLayerTouchesEvent, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "executeMenuItemEvent", mrb_cocos2d_CCScriptEngineProtocol_executeMenuItemEvent, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "executeNodeEvent", mrb_cocos2d_CCScriptEngineProtocol_executeNodeEvent, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "executeNotificationEvent", mrb_cocos2d_CCScriptEngineProtocol_executeNotificationEvent, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "executeSchedule", mrb_cocos2d_CCScriptEngineProtocol_executeSchedule, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "executeScriptFile", mrb_cocos2d_CCScriptEngineProtocol_executeScriptFile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "executeString", mrb_cocos2d_CCScriptEngineProtocol_executeString, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getScriptType", mrb_cocos2d_CCScriptEngineProtocol_getScriptType, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "handleAssert", mrb_cocos2d_CCScriptEngineProtocol_handleAssert, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reallocateScriptHandler", mrb_cocos2d_CCScriptEngineProtocol_reallocateScriptHandler, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeScriptHandler", mrb_cocos2d_CCScriptEngineProtocol_removeScriptHandler, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeScriptObjectByCCObject", mrb_cocos2d_CCScriptEngineProtocol_removeScriptObjectByCCObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "willRemoveAction", mrb_cocos2d_CCScriptEngineProtocol_willRemoveAction, MRB_ARGS_REQ(3));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCScriptHandlerEntry(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCScriptHandlerEntry");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCScriptHandlerEntry_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getEntryId", mrb_cocos2d_CCScriptHandlerEntry_getEntryId, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getHandler", mrb_cocos2d_CCScriptHandlerEntry_getHandler, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCSequence(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSequence");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCSequence_cleanup, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCSequence_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCSequence_create, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "createWithTwoActions", mrb_cocos2d_CCSequence_createWithTwoActions, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "createWithVariableList", mrb_cocos2d_CCSequence_createWithVariableList, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithTwoActions", mrb_cocos2d_CCSequence_initWithTwoActions, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCSequence_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCSequence_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stop", mrb_cocos2d_CCSequence_stop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCSequence_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCSequence_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCSet(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSet");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCSet_initialize, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "acceptVisitor", mrb_cocos2d_CCSet_acceptVisitor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addObject", mrb_cocos2d_CCSet_addObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "anyObject", mrb_cocos2d_CCSet_anyObject, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "containsObject", mrb_cocos2d_CCSet_containsObject, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "copy", mrb_cocos2d_CCSet_copy, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "count", mrb_cocos2d_CCSet_count, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCSet_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "mutableCopy", mrb_cocos2d_CCSet_mutableCopy, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeAllObjects", mrb_cocos2d_CCSet_removeAllObjects, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeObject", mrb_cocos2d_CCSet_removeObject, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCShaderCache(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCShaderCache");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCShaderCache_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addProgram", mrb_cocos2d_CCShaderCache_addProgram, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "loadDefaultShaders", mrb_cocos2d_CCShaderCache_loadDefaultShaders, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "programForKey", mrb_cocos2d_CCShaderCache_programForKey, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "purgeSharedShaderCache", mrb_cocos2d_CCShaderCache_purgeSharedShaderCache, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reloadDefaultShaders", mrb_cocos2d_CCShaderCache_reloadDefaultShaders, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "sharedShaderCache", mrb_cocos2d_CCShaderCache_sharedShaderCache, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCShaky3D(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCShaky3D");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCShaky3D_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCShaky3D_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCShaky3D_initWithDuration, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCShaky3D_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCShaky3D_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCShakyTiles3D(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCShakyTiles3D");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCShakyTiles3D_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCShakyTiles3D_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCShakyTiles3D_initWithDuration, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCShakyTiles3D_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCShakyTiles3D_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCShatteredTiles3D(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCShatteredTiles3D");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCShatteredTiles3D_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCShatteredTiles3D_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCShatteredTiles3D_initWithDuration, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCShatteredTiles3D_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCShatteredTiles3D_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCShow(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCShow");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCShow_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCShow_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCShow_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCShow_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCShow_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCShuffleTiles(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCShuffleTiles");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCShuffleTiles_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCShuffleTiles_create, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "getDelta", mrb_cocos2d_CCShuffleTiles_getDelta, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCShuffleTiles_initWithDuration, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "placeTile", mrb_cocos2d_CCShuffleTiles_placeTile, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "shuffle", mrb_cocos2d_CCShuffleTiles_shuffle, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCShuffleTiles_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCShuffleTiles_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCShuffleTiles_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCSize(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSize");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCSize_initialize, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "equals", mrb_cocos2d_CCSize_equals, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "height", mrb_cocos2d_CCSize__get_height, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "height=", mrb_cocos2d_CCSize__set_height, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "operator*", mrb_cocos2d_CCSize_mul, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "operator+", mrb_cocos2d_CCSize_plus, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "operator-", mrb_cocos2d_CCSize_minus, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "operator/", mrb_cocos2d_CCSize_div, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "operator=", mrb_cocos2d_CCSize_assign, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "setSize", mrb_cocos2d_CCSize_setSize, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "width", mrb_cocos2d_CCSize__get_width, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "width=", mrb_cocos2d_CCSize__set_width, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "CCSizeFromString", mrb_cocos2d_CCSizeFromString, MRB_ARGS_REQ(1));
  mrb_define_const(mrb, cur_rc, "CCSizeZero", mrb_cocos2d__get_CCSizeZero(mrb, mrb_obj_value(cur_rc)));

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSkewTo") == 0) {
    _define_class_cocos2d_CCSkewTo(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSkewTo"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCSkewBy(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSkewBy");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCSkewBy_create, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCSkewBy_initWithDuration, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCSkewBy_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCSkewBy_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCSkewBy_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCSkewTo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSkewTo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCSkewTo_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCSkewTo_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCSkewTo_create, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCSkewTo_initWithDuration, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCSkewTo_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCSkewTo_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCSpawn(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSpawn");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCSpawn_cleanup, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCSpawn_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCSpawn_create, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "createWithTwoActions", mrb_cocos2d_CCSpawn_createWithTwoActions, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "createWithVariableList", mrb_cocos2d_CCSpawn_createWithVariableList, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithTwoActions", mrb_cocos2d_CCSpawn_initWithTwoActions, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCSpawn_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCSpawn_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stop", mrb_cocos2d_CCSpawn_stop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCSpawn_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCSpawn_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAction") == 0) {
    _define_class_cocos2d_CCAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCSpeed(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSpeed");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCSpeed_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCSpeed_cleanup, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCSpeed_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCSpeed_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getInnerAction", mrb_cocos2d_CCSpeed_getInnerAction, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSpeed", mrb_cocos2d_CCSpeed_getSpeed, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithAction", mrb_cocos2d_CCSpeed_initWithAction, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "isDone", mrb_cocos2d_CCSpeed_isDone, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCSpeed_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setInnerAction", mrb_cocos2d_CCSpeed_setInnerAction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSpeed", mrb_cocos2d_CCSpeed_setSpeed, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCSpeed_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "step", mrb_cocos2d_CCSpeed_step, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stop", mrb_cocos2d_CCSpeed_stop, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCSplitCols(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSplitCols");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCSplitCols_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCSplitCols_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCSplitCols_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCSplitCols_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCSplitCols_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCSplitCols_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCSplitRows(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSplitRows");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCSplitRows_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCSplitRows_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCSplitRows_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCSplitRows_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCSplitRows_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCSplitRows_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNodeRGBA") == 0) {
    _define_class_cocos2d_CCNodeRGBA(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextureProtocol") == 0) {
    _define_class_cocos2d_CCTextureProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNodeRGBA"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCSprite(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextureProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSprite");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCSprite_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addChild", mrb_cocos2d_CCSprite_addChild, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCSprite_create, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "createWithSpriteFrame", mrb_cocos2d_CCSprite_createWithSpriteFrame, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithSpriteFrameName", mrb_cocos2d_CCSprite_createWithSpriteFrameName, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithTexture", mrb_cocos2d_CCSprite_createWithTexture, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "displayFrame", mrb_cocos2d_CCSprite_displayFrame, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_CCSprite_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAtlasIndex", mrb_cocos2d_CCSprite_getAtlasIndex, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBatchNode", mrb_cocos2d_CCSprite_getBatchNode, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBlendFunc", mrb_cocos2d_CCSprite_getBlendFunc, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOffsetPosition", mrb_cocos2d_CCSprite_getOffsetPosition, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getQuad", mrb_cocos2d_CCSprite_getQuad, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTexture", mrb_cocos2d_CCSprite_getTexture, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTextureAtlas", mrb_cocos2d_CCSprite_getTextureAtlas, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTextureRect", mrb_cocos2d_CCSprite_getTextureRect, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "ignoreAnchorPointForPosition", mrb_cocos2d_CCSprite_ignoreAnchorPointForPosition, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCSprite_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithFile", mrb_cocos2d_CCSprite_initWithFile, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "initWithSpriteFrame", mrb_cocos2d_CCSprite_initWithSpriteFrame, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithSpriteFrameName", mrb_cocos2d_CCSprite_initWithSpriteFrameName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithTexture", mrb_cocos2d_CCSprite_initWithTexture, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "isDirty", mrb_cocos2d_CCSprite_isDirty, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isFlipX", mrb_cocos2d_CCSprite_isFlipX, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isFlipY", mrb_cocos2d_CCSprite_isFlipY, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isFrameDisplayed", mrb_cocos2d_CCSprite_isFrameDisplayed, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isOpacityModifyRGB", mrb_cocos2d_CCSprite_isOpacityModifyRGB, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isTextureRectRotated", mrb_cocos2d_CCSprite_isTextureRectRotated, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeAllChildrenWithCleanup", mrb_cocos2d_CCSprite_removeAllChildrenWithCleanup, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeChild", mrb_cocos2d_CCSprite_removeChild, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "reorderChild", mrb_cocos2d_CCSprite_reorderChild, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setAnchorPoint", mrb_cocos2d_CCSprite_setAnchorPoint, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAtlasIndex", mrb_cocos2d_CCSprite_setAtlasIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBatchNode", mrb_cocos2d_CCSprite_setBatchNode, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setBlendFunc", mrb_cocos2d_CCSprite_setBlendFunc, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setColor", mrb_cocos2d_CCSprite_setColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDirty", mrb_cocos2d_CCSprite_setDirty, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDisplayFrame", mrb_cocos2d_CCSprite_setDisplayFrame, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDisplayFrameWithAnimationName", mrb_cocos2d_CCSprite_setDisplayFrameWithAnimationName, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setFlipX", mrb_cocos2d_CCSprite_setFlipX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setFlipY", mrb_cocos2d_CCSprite_setFlipY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacity", mrb_cocos2d_CCSprite_setOpacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOpacityModifyRGB", mrb_cocos2d_CCSprite_setOpacityModifyRGB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPosition", mrb_cocos2d_CCSprite_setPosition, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRotation", mrb_cocos2d_CCSprite_setRotation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRotationX", mrb_cocos2d_CCSprite_setRotationX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRotationY", mrb_cocos2d_CCSprite_setRotationY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setScale", mrb_cocos2d_CCSprite_setScale, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setScaleX", mrb_cocos2d_CCSprite_setScaleX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setScaleY", mrb_cocos2d_CCSprite_setScaleY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSkewX", mrb_cocos2d_CCSprite_setSkewX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSkewY", mrb_cocos2d_CCSprite_setSkewY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTexture", mrb_cocos2d_CCSprite_setTexture, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTextureAtlas", mrb_cocos2d_CCSprite_setTextureAtlas, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTextureRect", mrb_cocos2d_CCSprite_setTextureRect, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "setVertexRect", mrb_cocos2d_CCSprite_setVertexRect, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setVertexZ", mrb_cocos2d_CCSprite_setVertexZ, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setVisible", mrb_cocos2d_CCSprite_setVisible, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "sortAllChildren", mrb_cocos2d_CCSprite_sortAllChildren, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "updateDisplayedColor", mrb_cocos2d_CCSprite_updateDisplayedColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateDisplayedOpacity", mrb_cocos2d_CCSprite_updateDisplayedOpacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateTransform", mrb_cocos2d_CCSprite_updateTransform, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTextureProtocol") == 0) {
    _define_class_cocos2d_CCTextureProtocol(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCSpriteBatchNode(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextureProtocol");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSpriteBatchNode");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCSpriteBatchNode_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addChild", mrb_cocos2d_CCSpriteBatchNode_addChild, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "appendChild", mrb_cocos2d_CCSpriteBatchNode_appendChild, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "atlasIndexForChild", mrb_cocos2d_CCSpriteBatchNode_atlasIndexForChild, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCSpriteBatchNode_create, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "createWithTexture", mrb_cocos2d_CCSpriteBatchNode_createWithTexture, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_CCSpriteBatchNode_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBlendFunc", mrb_cocos2d_CCSpriteBatchNode_getBlendFunc, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDescendants", mrb_cocos2d_CCSpriteBatchNode_getDescendants, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTexture", mrb_cocos2d_CCSpriteBatchNode_getTexture, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTextureAtlas", mrb_cocos2d_CCSpriteBatchNode_getTextureAtlas, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "highestAtlasIndexInChild", mrb_cocos2d_CCSpriteBatchNode_highestAtlasIndexInChild, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "increaseAtlasCapacity", mrb_cocos2d_CCSpriteBatchNode_increaseAtlasCapacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCSpriteBatchNode_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithFile", mrb_cocos2d_CCSpriteBatchNode_initWithFile, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithTexture", mrb_cocos2d_CCSpriteBatchNode_initWithTexture, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "insertChild", mrb_cocos2d_CCSpriteBatchNode_insertChild, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "lowestAtlasIndexInChild", mrb_cocos2d_CCSpriteBatchNode_lowestAtlasIndexInChild, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "rebuildIndexInOrder", mrb_cocos2d_CCSpriteBatchNode_rebuildIndexInOrder, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "removeAllChildrenWithCleanup", mrb_cocos2d_CCSpriteBatchNode_removeAllChildrenWithCleanup, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeChild", mrb_cocos2d_CCSpriteBatchNode_removeChild, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "removeChildAtIndex", mrb_cocos2d_CCSpriteBatchNode_removeChildAtIndex, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "removeSpriteFromAtlas", mrb_cocos2d_CCSpriteBatchNode_removeSpriteFromAtlas, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reorderBatch", mrb_cocos2d_CCSpriteBatchNode_reorderBatch, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reorderChild", mrb_cocos2d_CCSpriteBatchNode_reorderChild, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setBlendFunc", mrb_cocos2d_CCSpriteBatchNode_setBlendFunc, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTexture", mrb_cocos2d_CCSpriteBatchNode_setTexture, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTextureAtlas", mrb_cocos2d_CCSpriteBatchNode_setTextureAtlas, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "sortAllChildren", mrb_cocos2d_CCSpriteBatchNode_sortAllChildren, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "visit", mrb_cocos2d_CCSpriteBatchNode_visit, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCSpriteFrame(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSpriteFrame");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCSpriteFrame_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCSpriteFrame_create, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "createWithTexture", mrb_cocos2d_CCSpriteFrame_createWithTexture, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getOffset", mrb_cocos2d_CCSpriteFrame_getOffset, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOffsetInPixels", mrb_cocos2d_CCSpriteFrame_getOffsetInPixels, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOriginalSize", mrb_cocos2d_CCSpriteFrame_getOriginalSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOriginalSizeInPixels", mrb_cocos2d_CCSpriteFrame_getOriginalSizeInPixels, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRect", mrb_cocos2d_CCSpriteFrame_getRect, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getRectInPixels", mrb_cocos2d_CCSpriteFrame_getRectInPixels, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTexture", mrb_cocos2d_CCSpriteFrame_getTexture, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTexture", mrb_cocos2d_CCSpriteFrame_initWithTexture, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "initWithTextureFilename", mrb_cocos2d_CCSpriteFrame_initWithTextureFilename, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "isRotated", mrb_cocos2d_CCSpriteFrame_isRotated, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setOffset", mrb_cocos2d_CCSpriteFrame_setOffset, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOffsetInPixels", mrb_cocos2d_CCSpriteFrame_setOffsetInPixels, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOriginalSize", mrb_cocos2d_CCSpriteFrame_setOriginalSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOriginalSizeInPixels", mrb_cocos2d_CCSpriteFrame_setOriginalSizeInPixels, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRect", mrb_cocos2d_CCSpriteFrame_setRect, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRectInPixels", mrb_cocos2d_CCSpriteFrame_setRectInPixels, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setRotated", mrb_cocos2d_CCSpriteFrame_setRotated, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTexture", mrb_cocos2d_CCSpriteFrame_setTexture, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCSpriteFrame_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCSpriteFrameCache(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSpriteFrameCache");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "addSpriteFrame", mrb_cocos2d_CCSpriteFrameCache_addSpriteFrame, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "addSpriteFramesWithFile", mrb_cocos2d_CCSpriteFrameCache_addSpriteFramesWithFile, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCSpriteFrameCache_init, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "purgeSharedSpriteFrameCache", mrb_cocos2d_CCSpriteFrameCache_purgeSharedSpriteFrameCache, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeSpriteFrameByName", mrb_cocos2d_CCSpriteFrameCache_removeSpriteFrameByName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeSpriteFrames", mrb_cocos2d_CCSpriteFrameCache_removeSpriteFrames, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeSpriteFramesFromFile", mrb_cocos2d_CCSpriteFrameCache_removeSpriteFramesFromFile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeSpriteFramesFromTexture", mrb_cocos2d_CCSpriteFrameCache_removeSpriteFramesFromTexture, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeUnusedSpriteFrames", mrb_cocos2d_CCSpriteFrameCache_removeUnusedSpriteFrames, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "sharedSpriteFrameCache", mrb_cocos2d_CCSpriteFrameCache_sharedSpriteFrameCache, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "spriteFrameByName", mrb_cocos2d_CCSpriteFrameCache_spriteFrameByName, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCStandardTouchDelegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCStandardTouchDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "ccTouchesBegan", mrb_cocos2d_CCStandardTouchDelegate_ccTouchesBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesCancelled", mrb_cocos2d_CCStandardTouchDelegate_ccTouchesCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesEnded", mrb_cocos2d_CCStandardTouchDelegate_ccTouchesEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesMoved", mrb_cocos2d_CCStandardTouchDelegate_ccTouchesMoved, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTouchHandler") == 0) {
    _define_class_cocos2d_CCTouchHandler(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTouchHandler"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCStandardTouchHandler(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCStandardTouchHandler");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "handlerWithDelegate", mrb_cocos2d_CCStandardTouchHandler_handlerWithDelegate, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDelegate", mrb_cocos2d_CCStandardTouchHandler_initWithDelegate, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCStandardTouchHandler_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCStopGrid(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCStopGrid");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCStopGrid_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCStopGrid_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCStopGrid_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCString(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCString");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCString_initialize, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "acceptVisitor", mrb_cocos2d_CCString_acceptVisitor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "boolValue", mrb_cocos2d_CCString_boolValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "compare", mrb_cocos2d_CCString_compare, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCString_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCString_create, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithContentsOfFile", mrb_cocos2d_CCString_createWithContentsOfFile, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithData", mrb_cocos2d_CCString_createWithData, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "createWithFormat", mrb_cocos2d_CCString_createWithFormat, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "doubleValue", mrb_cocos2d_CCString_doubleValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "floatValue", mrb_cocos2d_CCString_floatValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCString", mrb_cocos2d_CCString_getCString, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithFormat", mrb_cocos2d_CCString_initWithFormat, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "intValue", mrb_cocos2d_CCString_intValue, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isEqual", mrb_cocos2d_CCString_isEqual, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "length", mrb_cocos2d_CCString_length, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_sString", mrb_cocos2d_CCString__get_m_sString, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_sString=", mrb_cocos2d_CCString__set_m_sString, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "operator=", mrb_cocos2d_CCString_assign, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "uintValue", mrb_cocos2d_CCString_uintValue, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCStringCompare(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCStringCompare");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "operator()", mrb_cocos2d_CCStringCompare_round_brackets, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCStringCompare_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSpriteBatchNode") == 0) {
    _define_class_cocos2d_CCSpriteBatchNode(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSpriteBatchNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTMXLayer(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTMXLayer");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTMXLayer_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addChild", mrb_cocos2d_CCTMXLayer_addChild, MRB_ARGS_REQ(3));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTMXLayer_create, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "getLayerName", mrb_cocos2d_CCTMXLayer_getLayerName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getLayerOrientation", mrb_cocos2d_CCTMXLayer_getLayerOrientation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getLayerSize", mrb_cocos2d_CCTMXLayer_getLayerSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMapTileSize", mrb_cocos2d_CCTMXLayer_getMapTileSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getProperties", mrb_cocos2d_CCTMXLayer_getProperties, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTileSet", mrb_cocos2d_CCTMXLayer_getTileSet, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTiles", mrb_cocos2d_CCTMXLayer_getTiles, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTilesetInfo", mrb_cocos2d_CCTMXLayer_initWithTilesetInfo, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "positionAt", mrb_cocos2d_CCTMXLayer_positionAt, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "propertyNamed", mrb_cocos2d_CCTMXLayer_propertyNamed, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "releaseMap", mrb_cocos2d_CCTMXLayer_releaseMap, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeChild", mrb_cocos2d_CCTMXLayer_removeChild, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "removeTileAt", mrb_cocos2d_CCTMXLayer_removeTileAt, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setLayerName", mrb_cocos2d_CCTMXLayer_setLayerName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setLayerOrientation", mrb_cocos2d_CCTMXLayer_setLayerOrientation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setLayerSize", mrb_cocos2d_CCTMXLayer_setLayerSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMapTileSize", mrb_cocos2d_CCTMXLayer_setMapTileSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setProperties", mrb_cocos2d_CCTMXLayer_setProperties, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTileGID", mrb_cocos2d_CCTMXLayer_setTileGID, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "setTileSet", mrb_cocos2d_CCTMXLayer_setTileSet, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTiles", mrb_cocos2d_CCTMXLayer_setTiles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setupTiles", mrb_cocos2d_CCTMXLayer_setupTiles, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tileAt", mrb_cocos2d_CCTMXLayer_tileAt, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tileGIDAt", mrb_cocos2d_CCTMXLayer_tileGIDAt, MRB_ARGS_ANY());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTMXLayerInfo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTMXLayerInfo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTMXLayerInfo_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getProperties", mrb_cocos2d_CCTMXLayerInfo_getProperties, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bOwnTiles", mrb_cocos2d_CCTMXLayerInfo__get_m_bOwnTiles, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bOwnTiles=", mrb_cocos2d_CCTMXLayerInfo__set_m_bOwnTiles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_bVisible", mrb_cocos2d_CCTMXLayerInfo__get_m_bVisible, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bVisible=", mrb_cocos2d_CCTMXLayerInfo__set_m_bVisible, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_cOpacity", mrb_cocos2d_CCTMXLayerInfo__get_m_cOpacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_cOpacity=", mrb_cocos2d_CCTMXLayerInfo__set_m_cOpacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pTiles", mrb_cocos2d_CCTMXLayerInfo__get_m_pTiles, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pTiles=", mrb_cocos2d_CCTMXLayerInfo__set_m_pTiles, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_sName", mrb_cocos2d_CCTMXLayerInfo__get_m_sName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_sName=", mrb_cocos2d_CCTMXLayerInfo__set_m_sName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_tLayerSize", mrb_cocos2d_CCTMXLayerInfo__get_m_tLayerSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_tLayerSize=", mrb_cocos2d_CCTMXLayerInfo__set_m_tLayerSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_tOffset", mrb_cocos2d_CCTMXLayerInfo__get_m_tOffset, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_tOffset=", mrb_cocos2d_CCTMXLayerInfo__set_m_tOffset, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_uMaxGID", mrb_cocos2d_CCTMXLayerInfo__get_m_uMaxGID, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_uMaxGID=", mrb_cocos2d_CCTMXLayerInfo__set_m_uMaxGID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_uMinGID", mrb_cocos2d_CCTMXLayerInfo__get_m_uMinGID, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_uMinGID=", mrb_cocos2d_CCTMXLayerInfo__set_m_uMinGID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setProperties", mrb_cocos2d_CCTMXLayerInfo_setProperties, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCSAXDelegator") == 0) {
    _define_class_cocos2d_CCSAXDelegator(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTMXMapInfo(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCSAXDelegator");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTMXMapInfo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTMXMapInfo_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "endElement", mrb_cocos2d_CCTMXMapInfo_endElement, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "formatWithTMXFile", mrb_cocos2d_CCTMXMapInfo_formatWithTMXFile, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "formatWithXML", mrb_cocos2d_CCTMXMapInfo_formatWithXML, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getCurrentString", mrb_cocos2d_CCTMXMapInfo_getCurrentString, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getLayerAttribs", mrb_cocos2d_CCTMXMapInfo_getLayerAttribs, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getLayers", mrb_cocos2d_CCTMXMapInfo_getLayers, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMapSize", mrb_cocos2d_CCTMXMapInfo_getMapSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getObjectGroups", mrb_cocos2d_CCTMXMapInfo_getObjectGroups, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getOrientation", mrb_cocos2d_CCTMXMapInfo_getOrientation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getParentElement", mrb_cocos2d_CCTMXMapInfo_getParentElement, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getParentGID", mrb_cocos2d_CCTMXMapInfo_getParentGID, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getProperties", mrb_cocos2d_CCTMXMapInfo_getProperties, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStoringCharacters", mrb_cocos2d_CCTMXMapInfo_getStoringCharacters, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTMXFileName", mrb_cocos2d_CCTMXMapInfo_getTMXFileName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTileProperties", mrb_cocos2d_CCTMXMapInfo_getTileProperties, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTileSize", mrb_cocos2d_CCTMXMapInfo_getTileSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTilesets", mrb_cocos2d_CCTMXMapInfo_getTilesets, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTMXFile", mrb_cocos2d_CCTMXMapInfo_initWithTMXFile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithXML", mrb_cocos2d_CCTMXMapInfo_initWithXML, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "parseXMLFile", mrb_cocos2d_CCTMXMapInfo_parseXMLFile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "parseXMLString", mrb_cocos2d_CCTMXMapInfo_parseXMLString, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setCurrentString", mrb_cocos2d_CCTMXMapInfo_setCurrentString, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setLayerAttribs", mrb_cocos2d_CCTMXMapInfo_setLayerAttribs, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setLayers", mrb_cocos2d_CCTMXMapInfo_setLayers, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMapSize", mrb_cocos2d_CCTMXMapInfo_setMapSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setObjectGroups", mrb_cocos2d_CCTMXMapInfo_setObjectGroups, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setOrientation", mrb_cocos2d_CCTMXMapInfo_setOrientation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setParentElement", mrb_cocos2d_CCTMXMapInfo_setParentElement, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setParentGID", mrb_cocos2d_CCTMXMapInfo_setParentGID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setProperties", mrb_cocos2d_CCTMXMapInfo_setProperties, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setStoringCharacters", mrb_cocos2d_CCTMXMapInfo_setStoringCharacters, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTMXFileName", mrb_cocos2d_CCTMXMapInfo_setTMXFileName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTileProperties", mrb_cocos2d_CCTMXMapInfo_setTileProperties, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTileSize", mrb_cocos2d_CCTMXMapInfo_setTileSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTilesets", mrb_cocos2d_CCTMXMapInfo_setTilesets, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startElement", mrb_cocos2d_CCTMXMapInfo_startElement, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "textHandler", mrb_cocos2d_CCTMXMapInfo_textHandler, MRB_ARGS_REQ(3));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTMXObjectGroup(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTMXObjectGroup");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTMXObjectGroup_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getGroupName", mrb_cocos2d_CCTMXObjectGroup_getGroupName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getObjects", mrb_cocos2d_CCTMXObjectGroup_getObjects, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPositionOffset", mrb_cocos2d_CCTMXObjectGroup_getPositionOffset, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getProperties", mrb_cocos2d_CCTMXObjectGroup_getProperties, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "objectNamed", mrb_cocos2d_CCTMXObjectGroup_objectNamed, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "propertyNamed", mrb_cocos2d_CCTMXObjectGroup_propertyNamed, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setGroupName", mrb_cocos2d_CCTMXObjectGroup_setGroupName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setObjects", mrb_cocos2d_CCTMXObjectGroup_setObjects, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPositionOffset", mrb_cocos2d_CCTMXObjectGroup_setPositionOffset, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setProperties", mrb_cocos2d_CCTMXObjectGroup_setProperties, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_const(mrb, cur_rc, "CCTMXOrientationHex", mrb_cocos2d__get_CCTMXOrientationHex(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCTMXOrientationIso", mrb_cocos2d__get_CCTMXOrientationIso(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCTMXOrientationOrtho", mrb_cocos2d__get_CCTMXOrientationOrtho(mrb, mrb_obj_value(cur_rc)));

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCNode") == 0) {
    _define_class_cocos2d_CCNode(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTMXTiledMap(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTMXTiledMap");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTMXTiledMap_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTMXTiledMap_create, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "createWithXML", mrb_cocos2d_CCTMXTiledMap_createWithXML, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getMapOrientation", mrb_cocos2d_CCTMXTiledMap_getMapOrientation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMapSize", mrb_cocos2d_CCTMXTiledMap_getMapSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getObjectGroups", mrb_cocos2d_CCTMXTiledMap_getObjectGroups, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getProperties", mrb_cocos2d_CCTMXTiledMap_getProperties, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTileSize", mrb_cocos2d_CCTMXTiledMap_getTileSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTMXFile", mrb_cocos2d_CCTMXTiledMap_initWithTMXFile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithXML", mrb_cocos2d_CCTMXTiledMap_initWithXML, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "layerNamed", mrb_cocos2d_CCTMXTiledMap_layerNamed, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "objectGroupNamed", mrb_cocos2d_CCTMXTiledMap_objectGroupNamed, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "propertiesForGID", mrb_cocos2d_CCTMXTiledMap_propertiesForGID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "propertyNamed", mrb_cocos2d_CCTMXTiledMap_propertyNamed, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMapOrientation", mrb_cocos2d_CCTMXTiledMap_setMapOrientation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMapSize", mrb_cocos2d_CCTMXTiledMap_setMapSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setObjectGroups", mrb_cocos2d_CCTMXTiledMap_setObjectGroups, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setProperties", mrb_cocos2d_CCTMXTiledMap_setProperties, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTileSize", mrb_cocos2d_CCTMXTiledMap_setTileSize, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTMXTilesetInfo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTMXTilesetInfo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTMXTilesetInfo_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_sName", mrb_cocos2d_CCTMXTilesetInfo__get_m_sName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_sName=", mrb_cocos2d_CCTMXTilesetInfo__set_m_sName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_sSourceImage", mrb_cocos2d_CCTMXTilesetInfo__get_m_sSourceImage, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_sSourceImage=", mrb_cocos2d_CCTMXTilesetInfo__set_m_sSourceImage, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_tImageSize", mrb_cocos2d_CCTMXTilesetInfo__get_m_tImageSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_tImageSize=", mrb_cocos2d_CCTMXTilesetInfo__set_m_tImageSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_tTileSize", mrb_cocos2d_CCTMXTilesetInfo__get_m_tTileSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_tTileSize=", mrb_cocos2d_CCTMXTilesetInfo__set_m_tTileSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_uFirstGid", mrb_cocos2d_CCTMXTilesetInfo__get_m_uFirstGid, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_uFirstGid=", mrb_cocos2d_CCTMXTilesetInfo__set_m_uFirstGid, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_uMargin", mrb_cocos2d_CCTMXTilesetInfo__get_m_uMargin, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_uMargin=", mrb_cocos2d_CCTMXTilesetInfo__set_m_uMargin, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_uSpacing", mrb_cocos2d_CCTMXTilesetInfo__get_m_uSpacing, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_uSpacing=", mrb_cocos2d_CCTMXTilesetInfo__set_m_uSpacing, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "rectForGID", mrb_cocos2d_CCTMXTilesetInfo_rectForGID, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_const(mrb, cur_rc, "CCTOUCHBEGAN", mrb_cocos2d__get_CCTOUCHBEGAN(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCTOUCHCANCELLED", mrb_cocos2d__get_CCTOUCHCANCELLED(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCTOUCHENDED", mrb_cocos2d__get_CCTOUCHENDED(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CCTOUCHMOVED", mrb_cocos2d__get_CCTOUCHMOVED(mrb, mrb_obj_value(cur_rc)));

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTargetedAction(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTargetedAction");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTargetedAction_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCTargetedAction_cleanup, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCTargetedAction_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTargetedAction_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getForcedTarget", mrb_cocos2d_CCTargetedAction_getForcedTarget, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithTarget", mrb_cocos2d_CCTargetedAction_initWithTarget, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setForcedTarget", mrb_cocos2d_CCTargetedAction_setForcedTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCTargetedAction_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stop", mrb_cocos2d_CCTargetedAction_stop, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCTargetedAction_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCTargetedTouchDelegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTargetedTouchDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "ccTouchBegan", mrb_cocos2d_CCTargetedTouchDelegate_ccTouchBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchCancelled", mrb_cocos2d_CCTargetedTouchDelegate_ccTouchCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchEnded", mrb_cocos2d_CCTargetedTouchDelegate_ccTouchEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchMoved", mrb_cocos2d_CCTargetedTouchDelegate_ccTouchMoved, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTouchHandler") == 0) {
    _define_class_cocos2d_CCTouchHandler(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTouchHandler"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTargetedTouchHandler(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTargetedTouchHandler");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "getClaimedTouches", mrb_cocos2d_CCTargetedTouchHandler_getClaimedTouches, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "handlerWithDelegate", mrb_cocos2d_CCTargetedTouchHandler_handlerWithDelegate, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "initWithDelegate", mrb_cocos2d_CCTargetedTouchHandler_initWithDelegate, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "isSwallowsTouches", mrb_cocos2d_CCTargetedTouchHandler_isSwallowsTouches, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setSwallowsTouches", mrb_cocos2d_CCTargetedTouchHandler_setSwallowsTouches, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTargetedTouchHandler_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCTextFieldDelegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextFieldDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "onDraw", mrb_cocos2d_CCTextFieldDelegate_onDraw, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "onTextFieldAttachWithIME", mrb_cocos2d_CCTextFieldDelegate_onTextFieldAttachWithIME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "onTextFieldDeleteBackward", mrb_cocos2d_CCTextFieldDelegate_onTextFieldDeleteBackward, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "onTextFieldDetachWithIME", mrb_cocos2d_CCTextFieldDelegate_onTextFieldDetachWithIME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "onTextFieldInsertText", mrb_cocos2d_CCTextFieldDelegate_onTextFieldInsertText, MRB_ARGS_REQ(3));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCLabelTTF") == 0) {
    _define_class_cocos2d_CCLabelTTF(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCIMEDelegate") == 0) {
    _define_class_cocos2d_CCIMEDelegate(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCLabelTTF"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTextFieldTTF(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCIMEDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextFieldTTF");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTextFieldTTF_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "attachWithIME", mrb_cocos2d_CCTextFieldTTF_attachWithIME, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "detachWithIME", mrb_cocos2d_CCTextFieldTTF_detachWithIME, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getCharCount", mrb_cocos2d_CCTextFieldTTF_getCharCount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getColorSpaceHolder", mrb_cocos2d_CCTextFieldTTF_getColorSpaceHolder, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDelegate", mrb_cocos2d_CCTextFieldTTF_getDelegate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPlaceHolder", mrb_cocos2d_CCTextFieldTTF_getPlaceHolder, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getString", mrb_cocos2d_CCTextFieldTTF_getString, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithPlaceHolder", mrb_cocos2d_CCTextFieldTTF_initWithPlaceHolder, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "isSecureTextEntry", mrb_cocos2d_CCTextFieldTTF_isSecureTextEntry, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setColorSpaceHolder", mrb_cocos2d_CCTextFieldTTF_setColorSpaceHolder, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDelegate", mrb_cocos2d_CCTextFieldTTF_setDelegate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPlaceHolder", mrb_cocos2d_CCTextFieldTTF_setPlaceHolder, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setSecureTextEntry", mrb_cocos2d_CCTextFieldTTF_setSecureTextEntry, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setString", mrb_cocos2d_CCTextFieldTTF_setString, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "textFieldWithPlaceHolder", mrb_cocos2d_CCTextFieldTTF_textFieldWithPlaceHolder, MRB_ARGS_ANY());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTexture2D(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTexture2D");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTexture2D_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "PVRImagesHavePremultipliedAlpha", mrb_cocos2d_CCTexture2D_PVRImagesHavePremultipliedAlpha, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "bitsPerPixelForFormat", mrb_cocos2d_CCTexture2D_bitsPerPixelForFormat, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "defaultAlphaPixelFormat", mrb_cocos2d_CCTexture2D_defaultAlphaPixelFormat, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "description", mrb_cocos2d_CCTexture2D_description, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "drawAtPoint", mrb_cocos2d_CCTexture2D_drawAtPoint, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "drawInRect", mrb_cocos2d_CCTexture2D_drawInRect, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "generateMipmap", mrb_cocos2d_CCTexture2D_generateMipmap, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getContentSize", mrb_cocos2d_CCTexture2D_getContentSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getContentSizeInPixels", mrb_cocos2d_CCTexture2D_getContentSizeInPixels, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMaxS", mrb_cocos2d_CCTexture2D_getMaxS, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getMaxT", mrb_cocos2d_CCTexture2D_getMaxT, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getName", mrb_cocos2d_CCTexture2D_getName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPixelFormat", mrb_cocos2d_CCTexture2D_getPixelFormat, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPixelsHigh", mrb_cocos2d_CCTexture2D_getPixelsHigh, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPixelsWide", mrb_cocos2d_CCTexture2D_getPixelsWide, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getShaderProgram", mrb_cocos2d_CCTexture2D_getShaderProgram, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hasMipmaps", mrb_cocos2d_CCTexture2D_hasMipmaps, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hasPremultipliedAlpha", mrb_cocos2d_CCTexture2D_hasPremultipliedAlpha, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithData", mrb_cocos2d_CCTexture2D_initWithData, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, cur_rc, "initWithETCFile", mrb_cocos2d_CCTexture2D_initWithETCFile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithImage", mrb_cocos2d_CCTexture2D_initWithImage, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithPVRFile", mrb_cocos2d_CCTexture2D_initWithPVRFile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithString", mrb_cocos2d_CCTexture2D_initWithString, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "keepData", mrb_cocos2d_CCTexture2D_keepData, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "m_bHasMipmaps", mrb_cocos2d_CCTexture2D__get_m_bHasMipmaps, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bHasMipmaps=", mrb_cocos2d_CCTexture2D__set_m_bHasMipmaps, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_bHasPremultipliedAlpha", mrb_cocos2d_CCTexture2D__get_m_bHasPremultipliedAlpha, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_bHasPremultipliedAlpha=", mrb_cocos2d_CCTexture2D__set_m_bHasPremultipliedAlpha, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "releaseData", mrb_cocos2d_CCTexture2D_releaseData, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAliasTexParameters", mrb_cocos2d_CCTexture2D_setAliasTexParameters, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setAntiAliasTexParameters", mrb_cocos2d_CCTexture2D_setAntiAliasTexParameters, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "setDefaultAlphaPixelFormat", mrb_cocos2d_CCTexture2D_setDefaultAlphaPixelFormat, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMaxS", mrb_cocos2d_CCTexture2D_setMaxS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setMaxT", mrb_cocos2d_CCTexture2D_setMaxT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setShaderProgram", mrb_cocos2d_CCTexture2D_setShaderProgram, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTexParameters", mrb_cocos2d_CCTexture2D_setTexParameters, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "stringForFormat", mrb_cocos2d_CCTexture2D_stringForFormat, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTextureAtlas(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextureAtlas");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTextureAtlas_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTextureAtlas_create, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "createWithTexture", mrb_cocos2d_CCTextureAtlas_createWithTexture, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "description", mrb_cocos2d_CCTextureAtlas_description, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "drawNumberOfQuads", mrb_cocos2d_CCTextureAtlas_drawNumberOfQuads, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "drawQuads", mrb_cocos2d_CCTextureAtlas_drawQuads, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "fillWithEmptyQuadsFromIndex", mrb_cocos2d_CCTextureAtlas_fillWithEmptyQuadsFromIndex, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getCapacity", mrb_cocos2d_CCTextureAtlas_getCapacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getQuads", mrb_cocos2d_CCTextureAtlas_getQuads, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTexture", mrb_cocos2d_CCTextureAtlas_getTexture, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getTotalQuads", mrb_cocos2d_CCTextureAtlas_getTotalQuads, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "increaseTotalQuadsWith", mrb_cocos2d_CCTextureAtlas_increaseTotalQuadsWith, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initWithFile", mrb_cocos2d_CCTextureAtlas_initWithFile, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithTexture", mrb_cocos2d_CCTextureAtlas_initWithTexture, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "insertQuad", mrb_cocos2d_CCTextureAtlas_insertQuad, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "insertQuadFromIndex", mrb_cocos2d_CCTextureAtlas_insertQuadFromIndex, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "insertQuads", mrb_cocos2d_CCTextureAtlas_insertQuads, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "isDirty", mrb_cocos2d_CCTextureAtlas_isDirty, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "listenBackToForeground", mrb_cocos2d_CCTextureAtlas_listenBackToForeground, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "moveQuadsFromIndex", mrb_cocos2d_CCTextureAtlas_moveQuadsFromIndex, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "removeAllQuads", mrb_cocos2d_CCTextureAtlas_removeAllQuads, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeQuadAtIndex", mrb_cocos2d_CCTextureAtlas_removeQuadAtIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeQuadsAtIndex", mrb_cocos2d_CCTextureAtlas_removeQuadsAtIndex, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "resizeCapacity", mrb_cocos2d_CCTextureAtlas_resizeCapacity, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDirty", mrb_cocos2d_CCTextureAtlas_setDirty, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setQuads", mrb_cocos2d_CCTextureAtlas_setQuads, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTexture", mrb_cocos2d_CCTextureAtlas_setTexture, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "updateQuad", mrb_cocos2d_CCTextureAtlas_updateQuad, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTextureCache(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextureCache");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTextureCache_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addETCImage", mrb_cocos2d_CCTextureCache_addETCImage, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addImage", mrb_cocos2d_CCTextureCache_addImage, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addImageAsync", mrb_cocos2d_CCTextureCache_addImageAsync, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "addPVRImage", mrb_cocos2d_CCTextureCache_addPVRImage, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "addUIImage", mrb_cocos2d_CCTextureCache_addUIImage, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "description", mrb_cocos2d_CCTextureCache_description, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "dumpCachedTextureInfo", mrb_cocos2d_CCTextureCache_dumpCachedTextureInfo, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "purgeSharedTextureCache", mrb_cocos2d_CCTextureCache_purgeSharedTextureCache, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "reloadAllTextures", mrb_cocos2d_CCTextureCache_reloadAllTextures, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeAllTextures", mrb_cocos2d_CCTextureCache_removeAllTextures, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeTexture", mrb_cocos2d_CCTextureCache_removeTexture, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeTextureForKey", mrb_cocos2d_CCTextureCache_removeTextureForKey, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "removeUnusedTextures", mrb_cocos2d_CCTextureCache_removeUnusedTextures, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "sharedTextureCache", mrb_cocos2d_CCTextureCache_sharedTextureCache, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "snapshotTextures", mrb_cocos2d_CCTextureCache_snapshotTextures, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "textureForKey", mrb_cocos2d_CCTextureCache_textureForKey, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTexturePVR(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTexturePVR");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTexturePVR_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTexturePVR_create, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "getFormat", mrb_cocos2d_CCTexturePVR_getFormat, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getHeight", mrb_cocos2d_CCTexturePVR_getHeight, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getName", mrb_cocos2d_CCTexturePVR_getName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getNumberOfMipmaps", mrb_cocos2d_CCTexturePVR_getNumberOfMipmaps, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getWidth", mrb_cocos2d_CCTexturePVR_getWidth, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hasAlpha", mrb_cocos2d_CCTexturePVR_hasAlpha, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hasPremultipliedAlpha", mrb_cocos2d_CCTexturePVR_hasPremultipliedAlpha, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithContentsOfFile", mrb_cocos2d_CCTexturePVR_initWithContentsOfFile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "isForcePremultipliedAlpha", mrb_cocos2d_CCTexturePVR_isForcePremultipliedAlpha, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isRetainName", mrb_cocos2d_CCTexturePVR_isRetainName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setRetainName", mrb_cocos2d_CCTexturePVR_setRetainName, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCTextureProtocol(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTextureProtocol");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "getTexture", mrb_cocos2d_CCTextureProtocol_getTexture, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setTexture", mrb_cocos2d_CCTextureProtocol_setTexture, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCThread(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCThread");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCThread_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "createAutoreleasePool", mrb_cocos2d_CCThread_createAutoreleasePool, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCAtlasNode") == 0) {
    _define_class_cocos2d_CCAtlasNode(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCAtlasNode"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTileMapAtlas(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTileMapAtlas");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTileMapAtlas_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTileMapAtlas_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "initWithTileFile", mrb_cocos2d_CCTileMapAtlas_initWithTileFile, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "releaseMap", mrb_cocos2d_CCTileMapAtlas_releaseMap, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setTGAInfo", mrb_cocos2d_CCTileMapAtlas_setTGAInfo, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTile", mrb_cocos2d_CCTileMapAtlas_setTile, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "tileAt", mrb_cocos2d_CCTileMapAtlas_tileAt, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGridBase") == 0) {
    _define_class_cocos2d_CCGridBase(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGridBase"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTiledGrid3D(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3D");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTiledGrid3D_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "blit", mrb_cocos2d_CCTiledGrid3D_blit, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "calculateVertexPoints", mrb_cocos2d_CCTiledGrid3D_calculateVertexPoints, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTiledGrid3D_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "originalTile", mrb_cocos2d_CCTiledGrid3D_originalTile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "reuse", mrb_cocos2d_CCTiledGrid3D_reuse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setTile", mrb_cocos2d_CCTiledGrid3D_setTile, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "tile", mrb_cocos2d_CCTiledGrid3D_tile, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGridAction") == 0) {
    _define_class_cocos2d_CCGridAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGridAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTiledGrid3DAction_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "getGrid", mrb_cocos2d_CCTiledGrid3DAction_getGrid, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "originalTile", mrb_cocos2d_CCTiledGrid3DAction_originalTile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setTile", mrb_cocos2d_CCTiledGrid3DAction_setTile, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "tile", mrb_cocos2d_CCTiledGrid3DAction_tile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTiledGrid3DAction_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCTime(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTime");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "gettimeofdayCocos2d", mrb_cocos2d_CCTime_gettimeofdayCocos2d, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "timersubCocos2d", mrb_cocos2d_CCTime_timersubCocos2d, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTime_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTimer(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTimer");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTimer_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getInterval", mrb_cocos2d_CCTimer_getInterval, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getScriptHandler", mrb_cocos2d_CCTimer_getScriptHandler, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithScriptHandler", mrb_cocos2d_CCTimer_initWithScriptHandler, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithTarget", mrb_cocos2d_CCTimer_initWithTarget, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "setInterval", mrb_cocos2d_CCTimer_setInterval, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "timerWithScriptHandler", mrb_cocos2d_CCTimer_timerWithScriptHandler, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "timerWithTarget", mrb_cocos2d_CCTimer_timerWithTarget, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCTimer_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTintBy(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTintBy");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCTintBy_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTintBy_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCTintBy_initWithDuration, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "reverse", mrb_cocos2d_CCTintBy_reverse, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCTintBy_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCTintBy_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTintBy_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInterval") == 0) {
    _define_class_cocos2d_CCActionInterval(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInterval"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTintTo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTintTo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCTintTo_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTintTo_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCTintTo_initWithDuration, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCTintTo_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCTintTo_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTintTo_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCActionInstant") == 0) {
    _define_class_cocos2d_CCActionInstant(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCActionInstant"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCToggleVisibility(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCToggleVisibility");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCToggleVisibility_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCToggleVisibility_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCToggleVisibility_create, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCToggleVisibility_update, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTouch(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTouch");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTouch_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getDelta", mrb_cocos2d_CCTouch_getDelta, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getID", mrb_cocos2d_CCTouch_getID, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getLocation", mrb_cocos2d_CCTouch_getLocation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getLocationInView", mrb_cocos2d_CCTouch_getLocationInView, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPreviousLocation", mrb_cocos2d_CCTouch_getPreviousLocation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPreviousLocationInView", mrb_cocos2d_CCTouch_getPreviousLocationInView, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStartLocation", mrb_cocos2d_CCTouch_getStartLocation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getStartLocationInView", mrb_cocos2d_CCTouch_getStartLocationInView, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setTouchInfo", mrb_cocos2d_CCTouch_setTouchInfo, MRB_ARGS_REQ(3));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  rc = _define_class_cocos2d_CCTouchDelegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTouchDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "ccTouchBegan", mrb_cocos2d_CCTouchDelegate_ccTouchBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchCancelled", mrb_cocos2d_CCTouchDelegate_ccTouchCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchEnded", mrb_cocos2d_CCTouchDelegate_ccTouchEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchMoved", mrb_cocos2d_CCTouchDelegate_ccTouchMoved, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesBegan", mrb_cocos2d_CCTouchDelegate_ccTouchesBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesCancelled", mrb_cocos2d_CCTouchDelegate_ccTouchesCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesEnded", mrb_cocos2d_CCTouchDelegate_ccTouchesEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "ccTouchesMoved", mrb_cocos2d_CCTouchDelegate_ccTouchesMoved, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::EGLTouchDelegate") == 0) {
    _define_class_cocos2d_EGLTouchDelegate(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTouchDispatcher(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::EGLTouchDelegate");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTouchDispatcher");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTouchDispatcher_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "addStandardDelegate", mrb_cocos2d_CCTouchDispatcher_addStandardDelegate, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "addTargetedDelegate", mrb_cocos2d_CCTouchDispatcher_addTargetedDelegate, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "findHandler", mrb_cocos2d_CCTouchDispatcher_findHandler, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "init", mrb_cocos2d_CCTouchDispatcher_init, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isDispatchEvents", mrb_cocos2d_CCTouchDispatcher_isDispatchEvents, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeAllDelegates", mrb_cocos2d_CCTouchDispatcher_removeAllDelegates, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "removeDelegate", mrb_cocos2d_CCTouchDispatcher_removeDelegate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setDispatchEvents", mrb_cocos2d_CCTouchDispatcher_setDispatchEvents, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPriority", mrb_cocos2d_CCTouchDispatcher_setPriority, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "touches", mrb_cocos2d_CCTouchDispatcher_touches, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "touchesBegan", mrb_cocos2d_CCTouchDispatcher_touchesBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "touchesCancelled", mrb_cocos2d_CCTouchDispatcher_touchesCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "touchesEnded", mrb_cocos2d_CCTouchDispatcher_touchesEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "touchesMoved", mrb_cocos2d_CCTouchDispatcher_touchesMoved, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCObject") == 0) {
    _define_class_cocos2d_CCObject(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCObject"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTouchHandler(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTouchHandler");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "getDelegate", mrb_cocos2d_CCTouchHandler_getDelegate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getEnabledSelectors", mrb_cocos2d_CCTouchHandler_getEnabledSelectors, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPriority", mrb_cocos2d_CCTouchHandler_getPriority, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "handlerWithDelegate", mrb_cocos2d_CCTouchHandler_handlerWithDelegate, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initWithDelegate", mrb_cocos2d_CCTouchHandler_initWithDelegate, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setDelegate", mrb_cocos2d_CCTouchHandler_setDelegate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setEnalbedSelectors", mrb_cocos2d_CCTouchHandler_setEnalbedSelectors, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPriority", mrb_cocos2d_CCTouchHandler_setPriority, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTouchHandler_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCScriptHandlerEntry") == 0) {
    _define_class_cocos2d_CCScriptHandlerEntry(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCScriptHandlerEntry"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTouchScriptHandlerEntry(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTouchScriptHandlerEntry");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTouchScriptHandlerEntry_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "getPriority", mrb_cocos2d_CCTouchScriptHandlerEntry_getPriority, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getSwallowsTouches", mrb_cocos2d_CCTouchScriptHandlerEntry_getSwallowsTouches, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "isMultiTouches", mrb_cocos2d_CCTouchScriptHandlerEntry_isMultiTouches, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionCrossFade(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionCrossFade");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionCrossFade_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionCrossFade_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_CCTransitionCrossFade_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionCrossFade_onEnter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onExit", mrb_cocos2d_CCTransitionCrossFade_onExit, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionFade(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFade");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionFade_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionFade_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCTransitionFade_initWithDuration, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionFade_onEnter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onExit", mrb_cocos2d_CCTransitionFade_onExit, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionFadeTR") == 0) {
    _define_class_cocos2d_CCTransitionFadeTR(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFadeTR"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionFadeBL(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFadeBL");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionFadeBL_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "actionWithSize", mrb_cocos2d_CCTransitionFadeBL_actionWithSize, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionFadeBL_create, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionFadeTR") == 0) {
    _define_class_cocos2d_CCTransitionFadeTR(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFadeTR"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionFadeDown(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFadeDown");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionFadeDown_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "actionWithSize", mrb_cocos2d_CCTransitionFadeDown_actionWithSize, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionFadeDown_create, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionEaseScene") == 0) {
    _define_class_cocos2d_CCTransitionEaseScene(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionFadeTR(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionEaseScene");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFadeTR");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionFadeTR_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "actionWithSize", mrb_cocos2d_CCTransitionFadeTR_actionWithSize, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionFadeTR_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "easeActionWithAction", mrb_cocos2d_CCTransitionFadeTR_easeActionWithAction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionFadeTR_onEnter, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionFadeTR") == 0) {
    _define_class_cocos2d_CCTransitionFadeTR(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFadeTR"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionFadeUp(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFadeUp");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionFadeUp_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "actionWithSize", mrb_cocos2d_CCTransitionFadeUp_actionWithSize, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionFadeUp_create, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSceneOriented") == 0) {
    _define_class_cocos2d_CCTransitionSceneOriented(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSceneOriented"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionFlipAngular(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFlipAngular");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionFlipAngular_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionFlipAngular_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionFlipAngular_onEnter, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSceneOriented") == 0) {
    _define_class_cocos2d_CCTransitionSceneOriented(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSceneOriented"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionFlipX(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFlipX");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionFlipX_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionFlipX_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionFlipX_onEnter, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSceneOriented") == 0) {
    _define_class_cocos2d_CCTransitionSceneOriented(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSceneOriented"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionFlipY(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionFlipY");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionFlipY_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionFlipY_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionFlipY_onEnter, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionJumpZoom(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionJumpZoom");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionJumpZoom_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionJumpZoom_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionJumpZoom_onEnter, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionMoveInL") == 0) {
    _define_class_cocos2d_CCTransitionMoveInL(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionMoveInL"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionMoveInB(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionMoveInB");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionMoveInB_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionMoveInB_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initScenes", mrb_cocos2d_CCTransitionMoveInB_initScenes, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionEaseScene") == 0) {
    _define_class_cocos2d_CCTransitionEaseScene(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionMoveInL(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionEaseScene");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionMoveInL");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionMoveInL_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "action", mrb_cocos2d_CCTransitionMoveInL_action, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionMoveInL_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "easeActionWithAction", mrb_cocos2d_CCTransitionMoveInL_easeActionWithAction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initScenes", mrb_cocos2d_CCTransitionMoveInL_initScenes, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionMoveInL_onEnter, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionMoveInL") == 0) {
    _define_class_cocos2d_CCTransitionMoveInL(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionMoveInL"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionMoveInR(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionMoveInR");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionMoveInR_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionMoveInR_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initScenes", mrb_cocos2d_CCTransitionMoveInR_initScenes, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionMoveInL") == 0) {
    _define_class_cocos2d_CCTransitionMoveInL(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionMoveInL"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionMoveInT(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionMoveInT");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionMoveInT_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionMoveInT_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initScenes", mrb_cocos2d_CCTransitionMoveInT_initScenes, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionPageTurn(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionPageTurn");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionPageTurn_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "actionWithSize", mrb_cocos2d_CCTransitionPageTurn_actionWithSize, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionPageTurn_create, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCTransitionPageTurn_initWithDuration, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionPageTurn_onEnter, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionProgress(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgress");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionProgress_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionProgress_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionProgress_onEnter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onExit", mrb_cocos2d_CCTransitionProgress_onExit, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgress") == 0) {
    _define_class_cocos2d_CCTransitionProgress(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgress"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionProgressHorizontal(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgressHorizontal");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionProgressHorizontal_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionProgressHorizontal_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgress") == 0) {
    _define_class_cocos2d_CCTransitionProgress(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgress"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionProgressInOut(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgressInOut");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionProgressInOut_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionProgressInOut_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgress") == 0) {
    _define_class_cocos2d_CCTransitionProgress(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgress"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionProgressOutIn(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgressOutIn");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionProgressOutIn_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionProgressOutIn_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgress") == 0) {
    _define_class_cocos2d_CCTransitionProgress(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgress"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionProgressRadialCCW(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgressRadialCCW");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionProgressRadialCCW_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionProgressRadialCCW_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgress") == 0) {
    _define_class_cocos2d_CCTransitionProgress(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgress"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionProgressRadialCW(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgressRadialCW");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionProgressRadialCW_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionProgressRadialCW_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionProgress") == 0) {
    _define_class_cocos2d_CCTransitionProgress(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgress"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionProgressVertical(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionProgressVertical");
  assert(cur_rc);
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionProgressVertical_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionProgressVertical_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionRotoZoom(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionRotoZoom");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionRotoZoom_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionRotoZoom_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionRotoZoom_onEnter, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCScene") == 0) {
    _define_class_cocos2d_CCScene(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCScene"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionScene(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionScene_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "cleanup", mrb_cocos2d_CCTransitionScene_cleanup, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionScene_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "draw", mrb_cocos2d_CCTransitionScene_draw, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "finish", mrb_cocos2d_CCTransitionScene_finish, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hideOutShowIn", mrb_cocos2d_CCTransitionScene_hideOutShowIn, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCTransitionScene_initWithDuration, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionScene_onEnter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onExit", mrb_cocos2d_CCTransitionScene_onExit, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionSceneOriented(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSceneOriented");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionSceneOriented_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionSceneOriented_create, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCTransitionSceneOriented_initWithDuration, MRB_ARGS_REQ(3));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionEaseScene") == 0) {
    _define_class_cocos2d_CCTransitionEaseScene(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionShrinkGrow(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionEaseScene");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionShrinkGrow");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionShrinkGrow_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionShrinkGrow_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "easeActionWithAction", mrb_cocos2d_CCTransitionShrinkGrow_easeActionWithAction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionShrinkGrow_onEnter, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSlideInL") == 0) {
    _define_class_cocos2d_CCTransitionSlideInL(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSlideInL"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionSlideInB(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSlideInB");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionSlideInB_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "action", mrb_cocos2d_CCTransitionSlideInB_action, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionSlideInB_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initScenes", mrb_cocos2d_CCTransitionSlideInB_initScenes, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionEaseScene") == 0) {
    _define_class_cocos2d_CCTransitionEaseScene(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionSlideInL(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionEaseScene");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSlideInL");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionSlideInL_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "action", mrb_cocos2d_CCTransitionSlideInL_action, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionSlideInL_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "easeActionWithAction", mrb_cocos2d_CCTransitionSlideInL_easeActionWithAction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initScenes", mrb_cocos2d_CCTransitionSlideInL_initScenes, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionSlideInL_onEnter, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSlideInL") == 0) {
    _define_class_cocos2d_CCTransitionSlideInL(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSlideInL"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionSlideInR(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSlideInR");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionSlideInR_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "action", mrb_cocos2d_CCTransitionSlideInR_action, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionSlideInR_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initScenes", mrb_cocos2d_CCTransitionSlideInR_initScenes, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSlideInL") == 0) {
    _define_class_cocos2d_CCTransitionSlideInL(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSlideInL"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionSlideInT(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSlideInT");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionSlideInT_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "action", mrb_cocos2d_CCTransitionSlideInT_action, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionSlideInT_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "initScenes", mrb_cocos2d_CCTransitionSlideInT_initScenes, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionEaseScene") == 0) {
    _define_class_cocos2d_CCTransitionEaseScene(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionSplitCols(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionEaseScene");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSplitCols");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionSplitCols_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "action", mrb_cocos2d_CCTransitionSplitCols_action, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionSplitCols_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "easeActionWithAction", mrb_cocos2d_CCTransitionSplitCols_easeActionWithAction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionSplitCols_onEnter, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSplitCols") == 0) {
    _define_class_cocos2d_CCTransitionSplitCols(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSplitCols"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionSplitRows(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSplitRows");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionSplitRows_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "action", mrb_cocos2d_CCTransitionSplitRows_action, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionSplitRows_create, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionScene") == 0) {
    _define_class_cocos2d_CCTransitionScene(mrb);
  }
*/
/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionEaseScene") == 0) {
    _define_class_cocos2d_CCTransitionEaseScene(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionScene"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionTurnOffTiles(mrb);
/*
  base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionEaseScene");
  assert(base_rc);
  mrb_include_module(mrb, rc, base_rc);
*/
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionTurnOffTiles");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionTurnOffTiles_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionTurnOffTiles_create, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "easeActionWithAction", mrb_cocos2d_CCTransitionTurnOffTiles_easeActionWithAction, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionTurnOffTiles_onEnter, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSceneOriented") == 0) {
    _define_class_cocos2d_CCTransitionSceneOriented(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSceneOriented"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionZoomFlipAngular(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionZoomFlipAngular");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionZoomFlipAngular_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionZoomFlipAngular_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionZoomFlipAngular_onEnter, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSceneOriented") == 0) {
    _define_class_cocos2d_CCTransitionSceneOriented(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSceneOriented"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionZoomFlipX(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionZoomFlipX");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionZoomFlipX_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionZoomFlipX_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionZoomFlipX_onEnter, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTransitionSceneOriented") == 0) {
    _define_class_cocos2d_CCTransitionSceneOriented(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionSceneOriented"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTransitionZoomFlipY(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTransitionZoomFlipY");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTransitionZoomFlipY_initialize, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTransitionZoomFlipY_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "onEnter", mrb_cocos2d_CCTransitionZoomFlipY_onEnter, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTurnOffTiles(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTurnOffTiles");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCTurnOffTiles_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTurnOffTiles_create, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCTurnOffTiles_initWithDuration, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, cur_rc, "shuffle", mrb_cocos2d_CCTurnOffTiles_shuffle, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "startWithTarget", mrb_cocos2d_CCTurnOffTiles_startWithTarget, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "turnOffTile", mrb_cocos2d_CCTurnOffTiles_turnOffTile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "turnOnTile", mrb_cocos2d_CCTurnOffTiles_turnOnTile, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCTurnOffTiles_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTurnOffTiles_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCTwirl(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTwirl");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCTwirl_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCTwirl_create, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, cur_rc, "getAmplitude", mrb_cocos2d_CCTwirl_getAmplitude, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAmplitudeRate", mrb_cocos2d_CCTwirl_getAmplitudeRate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getPosition", mrb_cocos2d_CCTwirl_getPosition, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCTwirl_initWithDuration, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, cur_rc, "setAmplitude", mrb_cocos2d_CCTwirl_setAmplitude, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAmplitudeRate", mrb_cocos2d_CCTwirl_setAmplitudeRate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setPosition", mrb_cocos2d_CCTwirl_setPosition, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCTwirl_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCTwirl_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCUserDefault(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCUserDefault");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "flush", mrb_cocos2d_CCUserDefault_flush, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getBoolForKey", mrb_cocos2d_CCUserDefault_getBoolForKey, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getDoubleForKey", mrb_cocos2d_CCUserDefault_getDoubleForKey, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getFloatForKey", mrb_cocos2d_CCUserDefault_getFloatForKey, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getIntegerForKey", mrb_cocos2d_CCUserDefault_getIntegerForKey, MRB_ARGS_ANY());
  mrb_define_method(mrb, cur_rc, "getStringForKey", mrb_cocos2d_CCUserDefault_getStringForKey, MRB_ARGS_ANY());
  mrb_define_class_method(mrb, cur_rc, "getXMLFilePath", mrb_cocos2d_CCUserDefault_getXMLFilePath, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "isXMLFileExist", mrb_cocos2d_CCUserDefault_isXMLFileExist, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, cur_rc, "purgeSharedUserDefault", mrb_cocos2d_CCUserDefault_purgeSharedUserDefault, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "setBoolForKey", mrb_cocos2d_CCUserDefault_setBoolForKey, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setDoubleForKey", mrb_cocos2d_CCUserDefault_setDoubleForKey, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setFloatForKey", mrb_cocos2d_CCUserDefault_setFloatForKey, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setIntegerForKey", mrb_cocos2d_CCUserDefault_setIntegerForKey, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "setStringForKey", mrb_cocos2d_CCUserDefault_setStringForKey, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, cur_rc, "sharedUserDefault", mrb_cocos2d_CCUserDefault_sharedUserDefault, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCWaves(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCWaves");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCWaves_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCWaves_create, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, cur_rc, "getAmplitude", mrb_cocos2d_CCWaves_getAmplitude, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAmplitudeRate", mrb_cocos2d_CCWaves_getAmplitudeRate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCWaves_initWithDuration, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, cur_rc, "setAmplitude", mrb_cocos2d_CCWaves_setAmplitude, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAmplitudeRate", mrb_cocos2d_CCWaves_setAmplitudeRate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCWaves_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCWaves_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCGrid3DAction") == 0) {
    _define_class_cocos2d_CCGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCWaves3D(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCWaves3D");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCWaves3D_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCWaves3D_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "getAmplitude", mrb_cocos2d_CCWaves3D_getAmplitude, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAmplitudeRate", mrb_cocos2d_CCWaves3D_getAmplitudeRate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCWaves3D_initWithDuration, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "setAmplitude", mrb_cocos2d_CCWaves3D_setAmplitude, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAmplitudeRate", mrb_cocos2d_CCWaves3D_setAmplitudeRate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCWaves3D_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCWaves3D_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

/*
  if (cc_mrb_class_defined(mrb, "Cocos2d::CCTiledGrid3DAction") == 0) {
    _define_class_cocos2d_CCTiledGrid3DAction(mrb);
  }
*/
  /* base_rc = cc_mrb_class_get(mrb, "Cocos2d::CCTiledGrid3DAction"); */
  /* assert(base_rc); */
  rc = _define_class_cocos2d_CCWavesTiles3D(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCWavesTiles3D");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "copyWithZone", mrb_cocos2d_CCWavesTiles3D_copyWithZone, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, cur_rc, "create", mrb_cocos2d_CCWavesTiles3D_create, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "getAmplitude", mrb_cocos2d_CCWavesTiles3D_getAmplitude, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "getAmplitudeRate", mrb_cocos2d_CCWavesTiles3D_getAmplitudeRate, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "initWithDuration", mrb_cocos2d_CCWavesTiles3D_initWithDuration, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, cur_rc, "setAmplitude", mrb_cocos2d_CCWavesTiles3D_setAmplitude, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "setAmplitudeRate", mrb_cocos2d_CCWavesTiles3D_setAmplitudeRate, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "update", mrb_cocos2d_CCWavesTiles3D_update, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCWavesTiles3D_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_CCZone(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CCZone");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_CCZone_initialize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_pCopyObject", mrb_cocos2d_CCZone__get_m_pCopyObject, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_pCopyObject=", mrb_cocos2d_CCZone__set_m_pCopyObject, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_const(mrb, cur_rc, "CC_GL_ALL", mrb_cocos2d__get_CC_GL_ALL(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "CC_PVRMIPMAP_MAX", mrb_cocos2d__get_CC_PVRMIPMAP_MAX(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ConfigurationBoolean", mrb_cocos2d__get_ConfigurationBoolean(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ConfigurationDouble", mrb_cocos2d__get_ConfigurationDouble(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ConfigurationError", mrb_cocos2d__get_ConfigurationError(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ConfigurationInt", mrb_cocos2d__get_ConfigurationInt(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "ConfigurationString", mrb_cocos2d__get_ConfigurationString(mrb, mrb_obj_value(cur_rc)));

  rc = _define_class_cocos2d_EGLTouchDelegate(mrb);
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::EGLTouchDelegate");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "touchesBegan", mrb_cocos2d_EGLTouchDelegate_touchesBegan, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "touchesCancelled", mrb_cocos2d_EGLTouchDelegate_touchesCancelled, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "touchesEnded", mrb_cocos2d_EGLTouchDelegate_touchesEnded, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, cur_rc, "touchesMoved", mrb_cocos2d_EGLTouchDelegate_touchesMoved, MRB_ARGS_REQ(2));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "FNTConfigLoadFile", mrb_cocos2d_FNTConfigLoadFile, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "FNTConfigRemoveCache", mrb_cocos2d_FNTConfigRemoveCache, MRB_ARGS_NONE());
  mrb_define_const(mrb, cur_rc, "TMXLayerAttribBase64", mrb_cocos2d__get_TMXLayerAttribBase64(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "TMXLayerAttribGzip", mrb_cocos2d__get_TMXLayerAttribGzip(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "TMXLayerAttribNone", mrb_cocos2d__get_TMXLayerAttribNone(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "TMXLayerAttribZlib", mrb_cocos2d__get_TMXLayerAttribZlib(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "TMXPropertyLayer", mrb_cocos2d__get_TMXPropertyLayer(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "TMXPropertyMap", mrb_cocos2d__get_TMXPropertyMap(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "TMXPropertyNone", mrb_cocos2d__get_TMXPropertyNone(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "TMXPropertyObject", mrb_cocos2d__get_TMXPropertyObject(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "TMXPropertyObjectGroup", mrb_cocos2d__get_TMXPropertyObjectGroup(mrb, mrb_obj_value(cur_rc)));
  mrb_define_const(mrb, cur_rc, "TMXPropertyTile", mrb_cocos2d__get_TMXPropertyTile(mrb, mrb_obj_value(cur_rc)));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__BMFontDef(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_BMFontDef");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "charID", mrb_cocos2d__BMFontDef__get_charID, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "charID=", mrb_cocos2d__BMFontDef__set_charID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "rect", mrb_cocos2d__BMFontDef__get_rect, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "rect=", mrb_cocos2d__BMFontDef__set_rect, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "xAdvance", mrb_cocos2d__BMFontDef__get_xAdvance, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "xAdvance=", mrb_cocos2d__BMFontDef__set_xAdvance, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "xOffset", mrb_cocos2d__BMFontDef__get_xOffset, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "xOffset=", mrb_cocos2d__BMFontDef__set_xOffset, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "yOffset", mrb_cocos2d__BMFontDef__get_yOffset, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "yOffset=", mrb_cocos2d__BMFontDef__set_yOffset, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__BMFontDef_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__BMFontPadding(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_BMFontPadding");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "bottom", mrb_cocos2d__BMFontPadding__get_bottom, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "bottom=", mrb_cocos2d__BMFontPadding__set_bottom, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "left", mrb_cocos2d__BMFontPadding__get_left, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "left=", mrb_cocos2d__BMFontPadding__set_left, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "right", mrb_cocos2d__BMFontPadding__get_right, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "right=", mrb_cocos2d__BMFontPadding__set_right, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "top", mrb_cocos2d__BMFontPadding__get_top, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "top=", mrb_cocos2d__BMFontPadding__set_top, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__BMFontPadding_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__FontDefHashElement(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_FontDefHashElement");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "fontDef", mrb_cocos2d__FontDefHashElement__get_fontDef, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "fontDef=", mrb_cocos2d__FontDefHashElement__set_fontDef, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "hh", mrb_cocos2d__FontDefHashElement__get_hh, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hh=", mrb_cocos2d__FontDefHashElement__set_hh, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "key", mrb_cocos2d__FontDefHashElement__get_key, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "key=", mrb_cocos2d__FontDefHashElement__set_key, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__FontDefHashElement_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__KerningHashElement(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_KerningHashElement");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "amount", mrb_cocos2d__KerningHashElement__get_amount, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "amount=", mrb_cocos2d__KerningHashElement__set_amount, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "hh", mrb_cocos2d__KerningHashElement__get_hh, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "hh=", mrb_cocos2d__KerningHashElement__set_hh, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "key", mrb_cocos2d__KerningHashElement__get_key, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "key=", mrb_cocos2d__KerningHashElement__set_key, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__KerningHashElement_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "__CCAffineTransformMake", mrb_cocos2d___CCAffineTransformMake, MRB_ARGS_REQ(6));
  mrb_define_module_function(mrb, cur_rc, "__CCPointApplyAffineTransform", mrb_cocos2d___CCPointApplyAffineTransform, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "__CCSizeApplyAffineTransform", mrb_cocos2d___CCSizeApplyAffineTransform, MRB_ARGS_REQ(2));

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccArray(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccArray");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "max", mrb_cocos2d__ccArray__get_max, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "max=", mrb_cocos2d__ccArray__set_max, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "num", mrb_cocos2d__ccArray__get_num, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "num=", mrb_cocos2d__ccArray__set_num, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccArray_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccBezierConfig(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccBezierConfig");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "controlPoint_1", mrb_cocos2d__ccBezierConfig__get_controlPoint_1, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "controlPoint_1=", mrb_cocos2d__ccBezierConfig__set_controlPoint_1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "controlPoint_2", mrb_cocos2d__ccBezierConfig__get_controlPoint_2, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "controlPoint_2=", mrb_cocos2d__ccBezierConfig__set_controlPoint_2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "endPosition", mrb_cocos2d__ccBezierConfig__get_endPosition, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "endPosition=", mrb_cocos2d__ccBezierConfig__set_endPosition, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccBezierConfig_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccBlendFunc(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccBlendFunc");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "dst", mrb_cocos2d__ccBlendFunc__get_dst, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "dst=", mrb_cocos2d__ccBlendFunc__set_dst, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "src", mrb_cocos2d__ccBlendFunc__get_src, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "src=", mrb_cocos2d__ccBlendFunc__set_src, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccBlendFunc_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccCArray(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccCArray");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "arr", mrb_cocos2d__ccCArray__get_arr, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "arr=", mrb_cocos2d__ccCArray__set_arr, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "max", mrb_cocos2d__ccCArray__get_max, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "max=", mrb_cocos2d__ccCArray__set_max, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "num", mrb_cocos2d__ccCArray__get_num, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "num=", mrb_cocos2d__ccCArray__set_num, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccCArray_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccColor3B(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor3B");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "b", mrb_cocos2d__ccColor3B__get_b, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "b=", mrb_cocos2d__ccColor3B__set_b, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "g", mrb_cocos2d__ccColor3B__get_g, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "g=", mrb_cocos2d__ccColor3B__set_g, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "r", mrb_cocos2d__ccColor3B__get_r, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "r=", mrb_cocos2d__ccColor3B__set_r, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccColor3B_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccColor4B(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4B");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "a", mrb_cocos2d__ccColor4B__get_a, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "a=", mrb_cocos2d__ccColor4B__set_a, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "b", mrb_cocos2d__ccColor4B__get_b, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "b=", mrb_cocos2d__ccColor4B__set_b, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "g", mrb_cocos2d__ccColor4B__get_g, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "g=", mrb_cocos2d__ccColor4B__set_g, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "r", mrb_cocos2d__ccColor4B__get_r, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "r=", mrb_cocos2d__ccColor4B__set_r, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccColor4B_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccColor4F(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccColor4F");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "a", mrb_cocos2d__ccColor4F__get_a, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "a=", mrb_cocos2d__ccColor4F__set_a, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "b", mrb_cocos2d__ccColor4F__get_b, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "b=", mrb_cocos2d__ccColor4F__set_b, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "g", mrb_cocos2d__ccColor4F__get_g, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "g=", mrb_cocos2d__ccColor4F__set_g, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "r", mrb_cocos2d__ccColor4F__get_r, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "r=", mrb_cocos2d__ccColor4F__set_r, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccColor4F_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccFontDefinition(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccFontDefinition");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccFontDefinition_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_alignment", mrb_cocos2d__ccFontDefinition__get_m_alignment, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_alignment=", mrb_cocos2d__ccFontDefinition__set_m_alignment, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_dimensions", mrb_cocos2d__ccFontDefinition__get_m_dimensions, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_dimensions=", mrb_cocos2d__ccFontDefinition__set_m_dimensions, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_fontFillColor", mrb_cocos2d__ccFontDefinition__get_m_fontFillColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_fontFillColor=", mrb_cocos2d__ccFontDefinition__set_m_fontFillColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_fontName", mrb_cocos2d__ccFontDefinition__get_m_fontName, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_fontName=", mrb_cocos2d__ccFontDefinition__set_m_fontName, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_fontSize", mrb_cocos2d__ccFontDefinition__get_m_fontSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_fontSize=", mrb_cocos2d__ccFontDefinition__set_m_fontSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_shadow", mrb_cocos2d__ccFontDefinition__get_m_shadow, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_shadow=", mrb_cocos2d__ccFontDefinition__set_m_shadow, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_stroke", mrb_cocos2d__ccFontDefinition__get_m_stroke, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_stroke=", mrb_cocos2d__ccFontDefinition__set_m_stroke, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_vertAlignment", mrb_cocos2d__ccFontDefinition__get_m_vertAlignment, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_vertAlignment=", mrb_cocos2d__ccFontDefinition__set_m_vertAlignment, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccFontShadow(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccFontShadow");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccFontShadow_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_shadowBlur", mrb_cocos2d__ccFontShadow__get_m_shadowBlur, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_shadowBlur=", mrb_cocos2d__ccFontShadow__set_m_shadowBlur, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_shadowEnabled", mrb_cocos2d__ccFontShadow__get_m_shadowEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_shadowEnabled=", mrb_cocos2d__ccFontShadow__set_m_shadowEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_shadowOffset", mrb_cocos2d__ccFontShadow__get_m_shadowOffset, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_shadowOffset=", mrb_cocos2d__ccFontShadow__set_m_shadowOffset, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_shadowOpacity", mrb_cocos2d__ccFontShadow__get_m_shadowOpacity, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_shadowOpacity=", mrb_cocos2d__ccFontShadow__set_m_shadowOpacity, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccFontStroke(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccFontStroke");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccFontStroke_initialize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_strokeColor", mrb_cocos2d__ccFontStroke__get_m_strokeColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_strokeColor=", mrb_cocos2d__ccFontStroke__set_m_strokeColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_strokeEnabled", mrb_cocos2d__ccFontStroke__get_m_strokeEnabled, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_strokeEnabled=", mrb_cocos2d__ccFontStroke__set_m_strokeEnabled, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "m_strokeSize", mrb_cocos2d__ccFontStroke__get_m_strokeSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_strokeSize=", mrb_cocos2d__ccFontStroke__set_m_strokeSize, MRB_ARGS_REQ(1));
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccPVRTexturePixelFormatInfo(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccPVRTexturePixelFormatInfo");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "alpha", mrb_cocos2d__ccPVRTexturePixelFormatInfo__get_alpha, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "alpha=", mrb_cocos2d__ccPVRTexturePixelFormatInfo__set_alpha, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "bpp", mrb_cocos2d__ccPVRTexturePixelFormatInfo__get_bpp, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "bpp=", mrb_cocos2d__ccPVRTexturePixelFormatInfo__set_bpp, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "ccPixelFormat", mrb_cocos2d__ccPVRTexturePixelFormatInfo__get_ccPixelFormat, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "ccPixelFormat=", mrb_cocos2d__ccPVRTexturePixelFormatInfo__set_ccPixelFormat, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "compressed", mrb_cocos2d__ccPVRTexturePixelFormatInfo__get_compressed, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "compressed=", mrb_cocos2d__ccPVRTexturePixelFormatInfo__set_compressed, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "format", mrb_cocos2d__ccPVRTexturePixelFormatInfo__get_format, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "format=", mrb_cocos2d__ccPVRTexturePixelFormatInfo__set_format, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "internalFormat", mrb_cocos2d__ccPVRTexturePixelFormatInfo__get_internalFormat, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "internalFormat=", mrb_cocos2d__ccPVRTexturePixelFormatInfo__set_internalFormat, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "type", mrb_cocos2d__ccPVRTexturePixelFormatInfo__get_type, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "type=", mrb_cocos2d__ccPVRTexturePixelFormatInfo__set_type, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccPVRTexturePixelFormatInfo_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccPointSprite(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccPointSprite");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "color", mrb_cocos2d__ccPointSprite__get_color, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "color=", mrb_cocos2d__ccPointSprite__set_color, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "pos", mrb_cocos2d__ccPointSprite__get_pos, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pos=", mrb_cocos2d__ccPointSprite__set_pos, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "size", mrb_cocos2d__ccPointSprite__get_size, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "size=", mrb_cocos2d__ccPointSprite__set_size, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccPointSprite_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccQuad2(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccQuad2");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "bl", mrb_cocos2d__ccQuad2__get_bl, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "bl=", mrb_cocos2d__ccQuad2__set_bl, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "br", mrb_cocos2d__ccQuad2__get_br, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "br=", mrb_cocos2d__ccQuad2__set_br, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tl", mrb_cocos2d__ccQuad2__get_tl, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tl=", mrb_cocos2d__ccQuad2__set_tl, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tr", mrb_cocos2d__ccQuad2__get_tr, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tr=", mrb_cocos2d__ccQuad2__set_tr, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccQuad2_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccQuad3(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccQuad3");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "bl", mrb_cocos2d__ccQuad3__get_bl, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "bl=", mrb_cocos2d__ccQuad3__set_bl, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "br", mrb_cocos2d__ccQuad3__get_br, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "br=", mrb_cocos2d__ccQuad3__set_br, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tl", mrb_cocos2d__ccQuad3__get_tl, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tl=", mrb_cocos2d__ccQuad3__set_tl, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tr", mrb_cocos2d__ccQuad3__get_tr, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tr=", mrb_cocos2d__ccQuad3__set_tr, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccQuad3_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccT2F_Quad(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccT2F_Quad");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "bl", mrb_cocos2d__ccT2F_Quad__get_bl, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "bl=", mrb_cocos2d__ccT2F_Quad__set_bl, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "br", mrb_cocos2d__ccT2F_Quad__get_br, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "br=", mrb_cocos2d__ccT2F_Quad__set_br, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tl", mrb_cocos2d__ccT2F_Quad__get_tl, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tl=", mrb_cocos2d__ccT2F_Quad__set_tl, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tr", mrb_cocos2d__ccT2F_Quad__get_tr, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tr=", mrb_cocos2d__ccT2F_Quad__set_tr, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccT2F_Quad_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccTex2F(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccTex2F");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "u", mrb_cocos2d__ccTex2F__get_u, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "u=", mrb_cocos2d__ccTex2F__set_u, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "v", mrb_cocos2d__ccTex2F__get_v, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "v=", mrb_cocos2d__ccTex2F__set_v, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccTex2F_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccTexParams(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccTexParams");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "magFilter", mrb_cocos2d__ccTexParams__get_magFilter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "magFilter=", mrb_cocos2d__ccTexParams__set_magFilter, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "minFilter", mrb_cocos2d__ccTexParams__get_minFilter, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "minFilter=", mrb_cocos2d__ccTexParams__set_minFilter, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "wrapS", mrb_cocos2d__ccTexParams__get_wrapS, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "wrapS=", mrb_cocos2d__ccTexParams__set_wrapS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "wrapT", mrb_cocos2d__ccTexParams__get_wrapT, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "wrapT=", mrb_cocos2d__ccTexParams__set_wrapT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccTexParams_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccV2F_C4B_T2F(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4B_T2F");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "colors", mrb_cocos2d__ccV2F_C4B_T2F__get_colors, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "colors=", mrb_cocos2d__ccV2F_C4B_T2F__set_colors, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "texCoords", mrb_cocos2d__ccV2F_C4B_T2F__get_texCoords, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "texCoords=", mrb_cocos2d__ccV2F_C4B_T2F__set_texCoords, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "vertices", mrb_cocos2d__ccV2F_C4B_T2F__get_vertices, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "vertices=", mrb_cocos2d__ccV2F_C4B_T2F__set_vertices, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccV2F_C4B_T2F_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccV2F_C4B_T2F_Quad(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4B_T2F_Quad");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "bl", mrb_cocos2d__ccV2F_C4B_T2F_Quad__get_bl, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "bl=", mrb_cocos2d__ccV2F_C4B_T2F_Quad__set_bl, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "br", mrb_cocos2d__ccV2F_C4B_T2F_Quad__get_br, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "br=", mrb_cocos2d__ccV2F_C4B_T2F_Quad__set_br, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tl", mrb_cocos2d__ccV2F_C4B_T2F_Quad__get_tl, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tl=", mrb_cocos2d__ccV2F_C4B_T2F_Quad__set_tl, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tr", mrb_cocos2d__ccV2F_C4B_T2F_Quad__get_tr, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tr=", mrb_cocos2d__ccV2F_C4B_T2F_Quad__set_tr, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccV2F_C4B_T2F_Quad_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccV2F_C4B_T2F_Triangle(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4B_T2F_Triangle");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "a", mrb_cocos2d__ccV2F_C4B_T2F_Triangle__get_a, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "a=", mrb_cocos2d__ccV2F_C4B_T2F_Triangle__set_a, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "b", mrb_cocos2d__ccV2F_C4B_T2F_Triangle__get_b, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "b=", mrb_cocos2d__ccV2F_C4B_T2F_Triangle__set_b, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "c", mrb_cocos2d__ccV2F_C4B_T2F_Triangle__get_c, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "c=", mrb_cocos2d__ccV2F_C4B_T2F_Triangle__set_c, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccV2F_C4B_T2F_Triangle_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccV2F_C4F_T2F(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4F_T2F");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "colors", mrb_cocos2d__ccV2F_C4F_T2F__get_colors, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "colors=", mrb_cocos2d__ccV2F_C4F_T2F__set_colors, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "texCoords", mrb_cocos2d__ccV2F_C4F_T2F__get_texCoords, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "texCoords=", mrb_cocos2d__ccV2F_C4F_T2F__set_texCoords, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "vertices", mrb_cocos2d__ccV2F_C4F_T2F__get_vertices, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "vertices=", mrb_cocos2d__ccV2F_C4F_T2F__set_vertices, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccV2F_C4F_T2F_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccV2F_C4F_T2F_Quad(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccV2F_C4F_T2F_Quad");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "bl", mrb_cocos2d__ccV2F_C4F_T2F_Quad__get_bl, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "bl=", mrb_cocos2d__ccV2F_C4F_T2F_Quad__set_bl, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "br", mrb_cocos2d__ccV2F_C4F_T2F_Quad__get_br, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "br=", mrb_cocos2d__ccV2F_C4F_T2F_Quad__set_br, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tl", mrb_cocos2d__ccV2F_C4F_T2F_Quad__get_tl, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tl=", mrb_cocos2d__ccV2F_C4F_T2F_Quad__set_tl, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tr", mrb_cocos2d__ccV2F_C4F_T2F_Quad__get_tr, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tr=", mrb_cocos2d__ccV2F_C4F_T2F_Quad__set_tr, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccV2F_C4F_T2F_Quad_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccV3F_C4B_T2F(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccV3F_C4B_T2F");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "colors", mrb_cocos2d__ccV3F_C4B_T2F__get_colors, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "colors=", mrb_cocos2d__ccV3F_C4B_T2F__set_colors, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "texCoords", mrb_cocos2d__ccV3F_C4B_T2F__get_texCoords, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "texCoords=", mrb_cocos2d__ccV3F_C4B_T2F__set_texCoords, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "vertices", mrb_cocos2d__ccV3F_C4B_T2F__get_vertices, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "vertices=", mrb_cocos2d__ccV3F_C4B_T2F__set_vertices, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccV3F_C4B_T2F_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccV3F_C4B_T2F_Quad(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccV3F_C4B_T2F_Quad");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "bl", mrb_cocos2d__ccV3F_C4B_T2F_Quad__get_bl, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "bl=", mrb_cocos2d__ccV3F_C4B_T2F_Quad__set_bl, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "br", mrb_cocos2d__ccV3F_C4B_T2F_Quad__get_br, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "br=", mrb_cocos2d__ccV3F_C4B_T2F_Quad__set_br, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tl", mrb_cocos2d__ccV3F_C4B_T2F_Quad__get_tl, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tl=", mrb_cocos2d__ccV3F_C4B_T2F_Quad__set_tl, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tr", mrb_cocos2d__ccV3F_C4B_T2F_Quad__get_tr, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tr=", mrb_cocos2d__ccV3F_C4B_T2F_Quad__set_tr, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccV3F_C4B_T2F_Quad_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccVertex2F(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex2F");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "x", mrb_cocos2d__ccVertex2F__get_x, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "x=", mrb_cocos2d__ccVertex2F__set_x, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "y", mrb_cocos2d__ccVertex2F__get_y, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "y=", mrb_cocos2d__ccVertex2F__set_y, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccVertex2F_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d__ccVertex3F(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::CC_ccVertex3F");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "x", mrb_cocos2d__ccVertex3F__get_x, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "x=", mrb_cocos2d__ccVertex3F__set_x, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "y", mrb_cocos2d__ccVertex3F__get_y, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "y=", mrb_cocos2d__ccVertex3F__set_y, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "z", mrb_cocos2d__ccVertex3F__get_z, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "z=", mrb_cocos2d__ccVertex3F__set_z, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d__ccVertex3F_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_ccAnimationFrameData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::ccAnimationFrameData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "delay", mrb_cocos2d_ccAnimationFrameData__get_delay, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "delay=", mrb_cocos2d_ccAnimationFrameData__set_delay, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "size", mrb_cocos2d_ccAnimationFrameData__get_size, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "size=", mrb_cocos2d_ccAnimationFrameData__set_size, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "texCoords", mrb_cocos2d_ccAnimationFrameData__get_texCoords, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "texCoords=", mrb_cocos2d_ccAnimationFrameData__set_texCoords, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_ccAnimationFrameData_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "ccArrayAppendArray", mrb_cocos2d_ccArrayAppendArray, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccArrayAppendArrayWithResize", mrb_cocos2d_ccArrayAppendArrayWithResize, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccArrayAppendObject", mrb_cocos2d_ccArrayAppendObject, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccArrayAppendObjectWithResize", mrb_cocos2d_ccArrayAppendObjectWithResize, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccArrayContainsObject", mrb_cocos2d_ccArrayContainsObject, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccArrayDoubleCapacity", mrb_cocos2d_ccArrayDoubleCapacity, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccArrayEnsureExtraCapacity", mrb_cocos2d_ccArrayEnsureExtraCapacity, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccArrayFastRemoveObject", mrb_cocos2d_ccArrayFastRemoveObject, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccArrayFastRemoveObjectAtIndex", mrb_cocos2d_ccArrayFastRemoveObjectAtIndex, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccArrayFree", mrb_cocos2d_ccArrayFree, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccArrayFullRemoveArray", mrb_cocos2d_ccArrayFullRemoveArray, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccArrayGetIndexOfObject", mrb_cocos2d_ccArrayGetIndexOfObject, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccArrayInsertObjectAtIndex", mrb_cocos2d_ccArrayInsertObjectAtIndex, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "ccArrayNew", mrb_cocos2d_ccArrayNew, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccArrayRemoveAllObjects", mrb_cocos2d_ccArrayRemoveAllObjects, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccArrayRemoveArray", mrb_cocos2d_ccArrayRemoveArray, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccArrayRemoveObject", mrb_cocos2d_ccArrayRemoveObject, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "ccArrayRemoveObjectAtIndex", mrb_cocos2d_ccArrayRemoveObjectAtIndex, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "ccArrayShrink", mrb_cocos2d_ccArrayShrink, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccArraySwapObjectsAtIndexes", mrb_cocos2d_ccArraySwapObjectsAtIndexes, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "ccBLACK", mrb_cocos2d__get_ccBLACK, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccBLUE", mrb_cocos2d__get_ccBLUE, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccCArrayAppendArray", mrb_cocos2d_ccCArrayAppendArray, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayAppendArrayWithResize", mrb_cocos2d_ccCArrayAppendArrayWithResize, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayAppendValue", mrb_cocos2d_ccCArrayAppendValue, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayAppendValueWithResize", mrb_cocos2d_ccCArrayAppendValueWithResize, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayContainsValue", mrb_cocos2d_ccCArrayContainsValue, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayDoubleCapacity", mrb_cocos2d_ccCArrayDoubleCapacity, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayEnsureExtraCapacity", mrb_cocos2d_ccCArrayEnsureExtraCapacity, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayFastRemoveValueAtIndex", mrb_cocos2d_ccCArrayFastRemoveValueAtIndex, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayFree", mrb_cocos2d_ccCArrayFree, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayFullRemoveArray", mrb_cocos2d_ccCArrayFullRemoveArray, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayGetIndexOfValue", mrb_cocos2d_ccCArrayGetIndexOfValue, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayInsertValueAtIndex", mrb_cocos2d_ccCArrayInsertValueAtIndex, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayNew", mrb_cocos2d_ccCArrayNew, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayRemoveAllValues", mrb_cocos2d_ccCArrayRemoveAllValues, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayRemoveArray", mrb_cocos2d_ccCArrayRemoveArray, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayRemoveValue", mrb_cocos2d_ccCArrayRemoveValue, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccCArrayRemoveValueAtIndex", mrb_cocos2d_ccCArrayRemoveValueAtIndex, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccCardinalSplineAt", mrb_cocos2d_ccCardinalSplineAt, MRB_ARGS_REQ(6));
  mrb_define_module_function(mrb, cur_rc, "ccDrawCardinalSpline", mrb_cocos2d_ccDrawCardinalSpline, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "ccDrawCatmullRom", mrb_cocos2d_ccDrawCatmullRom, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccDrawCircle", mrb_cocos2d_ccDrawCircle, MRB_ARGS_ANY());
  mrb_define_module_function(mrb, cur_rc, "ccDrawColor4B", mrb_cocos2d_ccDrawColor4B, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "ccDrawColor4F", mrb_cocos2d_ccDrawColor4F, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "ccDrawCubicBezier", mrb_cocos2d_ccDrawCubicBezier, MRB_ARGS_REQ(5));
  mrb_define_module_function(mrb, cur_rc, "ccDrawFree", mrb_cocos2d_ccDrawFree, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccDrawInit", mrb_cocos2d_ccDrawInit, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccDrawLine", mrb_cocos2d_ccDrawLine, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccDrawPoint", mrb_cocos2d_ccDrawPoint, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccDrawPoints", mrb_cocos2d_ccDrawPoints, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccDrawPoly", mrb_cocos2d_ccDrawPoly, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "ccDrawQuadBezier", mrb_cocos2d_ccDrawQuadBezier, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "ccDrawRect", mrb_cocos2d_ccDrawRect, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccDrawSolidPoly", mrb_cocos2d_ccDrawSolidPoly, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "ccDrawSolidRect", mrb_cocos2d_ccDrawSolidRect, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "ccExSwitchMask_frag", mrb_cocos2d__get_ccExSwitchMask_frag, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccExSwitchMask_frag=", mrb_cocos2d__set_ccExSwitchMask_frag, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccGLBindTexture2D", mrb_cocos2d_ccGLBindTexture2D, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccGLBindTexture2DN", mrb_cocos2d_ccGLBindTexture2DN, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccGLBindVAO", mrb_cocos2d_ccGLBindVAO, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccGLBlendFunc", mrb_cocos2d_ccGLBlendFunc, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccGLBlendResetToCache", mrb_cocos2d_ccGLBlendResetToCache, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccGLDeleteProgram", mrb_cocos2d_ccGLDeleteProgram, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccGLDeleteTexture", mrb_cocos2d_ccGLDeleteTexture, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccGLDeleteTextureN", mrb_cocos2d_ccGLDeleteTextureN, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccGLEnable", mrb_cocos2d_ccGLEnable, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccGLEnableVertexAttribs", mrb_cocos2d_ccGLEnableVertexAttribs, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccGLInvalidateStateCache", mrb_cocos2d_ccGLInvalidateStateCache, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccGLUseProgram", mrb_cocos2d_ccGLUseProgram, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccGRAY", mrb_cocos2d__get_ccGRAY, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccGREEN", mrb_cocos2d__get_ccGREEN, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccMAGENTA", mrb_cocos2d__get_ccMAGENTA, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccORANGE", mrb_cocos2d__get_ccORANGE, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPointSize", mrb_cocos2d_ccPointSize, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccPositionColorLengthTexture_frag", mrb_cocos2d__get_ccPositionColorLengthTexture_frag, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPositionColorLengthTexture_frag=", mrb_cocos2d__set_ccPositionColorLengthTexture_frag, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccPositionColorLengthTexture_vert", mrb_cocos2d__get_ccPositionColorLengthTexture_vert, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPositionColorLengthTexture_vert=", mrb_cocos2d__set_ccPositionColorLengthTexture_vert, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccPositionColor_frag", mrb_cocos2d__get_ccPositionColor_frag, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPositionColor_frag=", mrb_cocos2d__set_ccPositionColor_frag, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccPositionColor_vert", mrb_cocos2d__get_ccPositionColor_vert, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPositionColor_vert=", mrb_cocos2d__set_ccPositionColor_vert, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccPositionTextureA8Color_frag", mrb_cocos2d__get_ccPositionTextureA8Color_frag, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPositionTextureA8Color_frag=", mrb_cocos2d__set_ccPositionTextureA8Color_frag, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccPositionTextureA8Color_vert", mrb_cocos2d__get_ccPositionTextureA8Color_vert, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPositionTextureA8Color_vert=", mrb_cocos2d__set_ccPositionTextureA8Color_vert, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccPositionTextureColorAlphaTest_frag", mrb_cocos2d__get_ccPositionTextureColorAlphaTest_frag, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPositionTextureColorAlphaTest_frag=", mrb_cocos2d__set_ccPositionTextureColorAlphaTest_frag, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccPositionTextureColor_frag", mrb_cocos2d__get_ccPositionTextureColor_frag, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPositionTextureColor_frag=", mrb_cocos2d__set_ccPositionTextureColor_frag, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccPositionTextureColor_vert", mrb_cocos2d__get_ccPositionTextureColor_vert, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPositionTextureColor_vert=", mrb_cocos2d__set_ccPositionTextureColor_vert, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccPositionTexture_frag", mrb_cocos2d__get_ccPositionTexture_frag, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPositionTexture_frag=", mrb_cocos2d__set_ccPositionTexture_frag, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccPositionTexture_uColor_frag", mrb_cocos2d__get_ccPositionTexture_uColor_frag, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPositionTexture_uColor_frag=", mrb_cocos2d__set_ccPositionTexture_uColor_frag, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccPositionTexture_uColor_vert", mrb_cocos2d__get_ccPositionTexture_uColor_vert, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPositionTexture_uColor_vert=", mrb_cocos2d__set_ccPositionTexture_uColor_vert, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccPositionTexture_vert", mrb_cocos2d__get_ccPositionTexture_vert, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPositionTexture_vert=", mrb_cocos2d__set_ccPositionTexture_vert, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccPosition_uColor_frag", mrb_cocos2d__get_ccPosition_uColor_frag, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPosition_uColor_frag=", mrb_cocos2d__set_ccPosition_uColor_frag, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccPosition_uColor_vert", mrb_cocos2d__get_ccPosition_uColor_vert, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccPosition_uColor_vert=", mrb_cocos2d__set_ccPosition_uColor_vert, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccRED", mrb_cocos2d__get_ccRED, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccSetProjectionMatrixDirty", mrb_cocos2d_ccSetProjectionMatrixDirty, MRB_ARGS_NONE());

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_ccTouchHandlerHelperData(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::ccTouchHandlerHelperData");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "m_type", mrb_cocos2d_ccTouchHandlerHelperData__get_m_type, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "m_type=", mrb_cocos2d_ccTouchHandlerHelperData__set_m_type, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_ccTouchHandlerHelperData_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "ccTouchMax", mrb_cocos2d__get_ccTouchMax, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccTouchSelectorAllBits", mrb_cocos2d__get_ccTouchSelectorAllBits, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccTouchSelectorBeganBit", mrb_cocos2d__get_ccTouchSelectorBeganBit, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccTouchSelectorCancelledBit", mrb_cocos2d__get_ccTouchSelectorCancelledBit, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccTouchSelectorEndedBit", mrb_cocos2d__get_ccTouchSelectorEndedBit, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccTouchSelectorMovedBit", mrb_cocos2d__get_ccTouchSelectorMovedBit, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccVertexLineIntersect", mrb_cocos2d_ccVertexLineIntersect, MRB_ARGS_REQ(9));
  mrb_define_module_function(mrb, cur_rc, "ccVertexLineToPolygon", mrb_cocos2d_ccVertexLineToPolygon, MRB_ARGS_REQ(5));
  mrb_define_module_function(mrb, cur_rc, "ccWHITE", mrb_cocos2d__get_ccWHITE, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "ccYELLOW", mrb_cocos2d__get_ccYELLOW, MRB_ARGS_NONE());

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_cc_timeval(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::cc_timeval");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "tv_sec", mrb_cocos2d_cc_timeval__get_tv_sec, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tv_sec=", mrb_cocos2d_cc_timeval__set_tv_sec, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "tv_usec", mrb_cocos2d_cc_timeval__get_tv_usec, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "tv_usec=", mrb_cocos2d_cc_timeval__set_tv_usec, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_cc_timeval_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "cc_utf16_to_utf8", mrb_cocos2d_cc_utf16_to_utf8, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "cc_utf16_vec_from_utf16_str", mrb_cocos2d_cc_utf16_vec_from_utf16_str, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "cc_utf8_find_last_not_char", mrb_cocos2d_cc_utf8_find_last_not_char, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "cc_utf8_strlen", mrb_cocos2d_cc_utf8_strlen, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "cc_utf8_to_utf16", mrb_cocos2d_cc_utf8_to_utf16, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "cc_utf8_trim_ws", mrb_cocos2d_cc_utf8_trim_ws, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "cc_wcslen", mrb_cocos2d_cc_wcslen, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccc3", mrb_cocos2d_ccc3, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "ccc3BEqual", mrb_cocos2d_ccc3BEqual, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccc4", mrb_cocos2d_ccc4, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "ccc4BFromccc4F", mrb_cocos2d_ccc4BFromccc4F, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccc4FEqual", mrb_cocos2d_ccc4FEqual, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccc4FFromccc3B", mrb_cocos2d_ccc4FFromccc3B, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccc4FFromccc4B", mrb_cocos2d_ccc4FFromccc4B, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccc4f", mrb_cocos2d_ccc4f, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "ccpAdd", mrb_cocos2d_ccpAdd, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccpAngle", mrb_cocos2d_ccpAngle, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccpAngleSigned", mrb_cocos2d_ccpAngleSigned, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccpClamp", mrb_cocos2d_ccpClamp, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "ccpCompMult", mrb_cocos2d_ccpCompMult, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccpCompOp", mrb_cocos2d_ccpCompOp, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccpCross", mrb_cocos2d_ccpCross, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccpDistance", mrb_cocos2d_ccpDistance, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccpDistanceSQ", mrb_cocos2d_ccpDistanceSQ, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccpDot", mrb_cocos2d_ccpDot, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccpForAngle", mrb_cocos2d_ccpForAngle, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccpFromSize", mrb_cocos2d_ccpFromSize, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccpFuzzyEqual", mrb_cocos2d_ccpFuzzyEqual, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "ccpIntersectPoint", mrb_cocos2d_ccpIntersectPoint, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "ccpLength", mrb_cocos2d_ccpLength, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccpLengthSQ", mrb_cocos2d_ccpLengthSQ, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccpLerp", mrb_cocos2d_ccpLerp, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "ccpLineIntersect", mrb_cocos2d_ccpLineIntersect, MRB_ARGS_REQ(6));
  mrb_define_module_function(mrb, cur_rc, "ccpMidpoint", mrb_cocos2d_ccpMidpoint, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccpMult", mrb_cocos2d_ccpMult, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccpNeg", mrb_cocos2d_ccpNeg, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccpNormalize", mrb_cocos2d_ccpNormalize, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccpPerp", mrb_cocos2d_ccpPerp, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccpProject", mrb_cocos2d_ccpProject, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccpRPerp", mrb_cocos2d_ccpRPerp, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccpRotate", mrb_cocos2d_ccpRotate, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccpRotateByAngle", mrb_cocos2d_ccpRotateByAngle, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "ccpSegmentIntersect", mrb_cocos2d_ccpSegmentIntersect, MRB_ARGS_REQ(4));
  mrb_define_module_function(mrb, cur_rc, "ccpSub", mrb_cocos2d_ccpSub, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "ccpToAngle", mrb_cocos2d_ccpToAngle, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "ccpUnrotate", mrb_cocos2d_ccpUnrotate, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "clampf", mrb_cocos2d_clampf, MRB_ARGS_REQ(3));
  mrb_define_module_function(mrb, cur_rc, "cocos2dVersion", mrb_cocos2d_cocos2dVersion, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "getHashCodeByString", mrb_cocos2d_getHashCodeByString, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "isspace_unicode", mrb_cocos2d_isspace_unicode, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "kCCActionTagInvalid", mrb_cocos2d__get_kCCActionTagInvalid, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCBlendFuncDisable", mrb_cocos2d__get_kCCBlendFuncDisable, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCDirectorProjection2D", mrb_cocos2d__get_kCCDirectorProjection2D, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCDirectorProjection3D", mrb_cocos2d__get_kCCDirectorProjection3D, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCDirectorProjectionCustom", mrb_cocos2d__get_kCCDirectorProjectionCustom, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCDirectorProjectionDefault", mrb_cocos2d__get_kCCDirectorProjectionDefault, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCFlipedAll", mrb_cocos2d__get_kCCFlipedAll, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCFlippedMask", mrb_cocos2d__get_kCCFlippedMask, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCImageFormatJPEG", mrb_cocos2d__get_kCCImageFormatJPEG, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCImageFormatPNG", mrb_cocos2d__get_kCCImageFormatPNG, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCLabelAutomaticWidth", mrb_cocos2d__get_kCCLabelAutomaticWidth, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCMenuHandlerPriority", mrb_cocos2d__get_kCCMenuHandlerPriority, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCMenuStateTrackingTouch", mrb_cocos2d__get_kCCMenuStateTrackingTouch, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCMenuStateWaiting", mrb_cocos2d__get_kCCMenuStateWaiting, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCNodeOnCleanup", mrb_cocos2d__get_kCCNodeOnCleanup, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCNodeOnEnter", mrb_cocos2d__get_kCCNodeOnEnter, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCNodeOnEnterTransitionDidFinish", mrb_cocos2d__get_kCCNodeOnEnterTransitionDidFinish, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCNodeOnExit", mrb_cocos2d__get_kCCNodeOnExit, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCNodeOnExitTransitionDidStart", mrb_cocos2d__get_kCCNodeOnExitTransitionDidStart, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCNodeTagInvalid", mrb_cocos2d__get_kCCNodeTagInvalid, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCParticleDurationInfinity", mrb_cocos2d__get_kCCParticleDurationInfinity, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCParticleModeGravity", mrb_cocos2d__get_kCCParticleModeGravity, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCParticleModeRadius", mrb_cocos2d__get_kCCParticleModeRadius, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCParticleStartRadiusEqualToEndRadius", mrb_cocos2d__get_kCCParticleStartRadiusEqualToEndRadius, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCParticleStartSizeEqualToEndSize", mrb_cocos2d__get_kCCParticleStartSizeEqualToEndSize, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCPositionTypeFree", mrb_cocos2d__get_kCCPositionTypeFree, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCPositionTypeGrouped", mrb_cocos2d__get_kCCPositionTypeGrouped, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCPositionTypeRelative", mrb_cocos2d__get_kCCPositionTypeRelative, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCProfilerCategoryBatchSprite", mrb_cocos2d__get_kCCProfilerCategoryBatchSprite, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCProfilerCategoryBatchSprite=", mrb_cocos2d__set_kCCProfilerCategoryBatchSprite, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "kCCProfilerCategoryParticles", mrb_cocos2d__get_kCCProfilerCategoryParticles, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCProfilerCategoryParticles=", mrb_cocos2d__set_kCCProfilerCategoryParticles, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "kCCProfilerCategorySprite", mrb_cocos2d__get_kCCProfilerCategorySprite, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCProfilerCategorySprite=", mrb_cocos2d__set_kCCProfilerCategorySprite, MRB_ARGS_REQ(1));
  mrb_define_module_function(mrb, cur_rc, "kCCProgressTimerTypeBar", mrb_cocos2d__get_kCCProgressTimerTypeBar, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCProgressTimerTypeRadial", mrb_cocos2d__get_kCCProgressTimerTypeRadial, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTMXTileDiagonalFlag", mrb_cocos2d__get_kCCTMXTileDiagonalFlag, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTMXTileHorizontalFlag", mrb_cocos2d__get_kCCTMXTileHorizontalFlag, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTMXTileVerticalFlag", mrb_cocos2d__get_kCCTMXTileVerticalFlag, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTextAlignmentCenter", mrb_cocos2d__get_kCCTextAlignmentCenter, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTextAlignmentLeft", mrb_cocos2d__get_kCCTextAlignmentLeft, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTextAlignmentRight", mrb_cocos2d__get_kCCTextAlignmentRight, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTexture2DPixelFormat_A8", mrb_cocos2d__get_kCCTexture2DPixelFormat_A8, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTexture2DPixelFormat_AI88", mrb_cocos2d__get_kCCTexture2DPixelFormat_AI88, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTexture2DPixelFormat_Default", mrb_cocos2d__get_kCCTexture2DPixelFormat_Default, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTexture2DPixelFormat_I8", mrb_cocos2d__get_kCCTexture2DPixelFormat_I8, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTexture2DPixelFormat_PVRTC2", mrb_cocos2d__get_kCCTexture2DPixelFormat_PVRTC2, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTexture2DPixelFormat_PVRTC4", mrb_cocos2d__get_kCCTexture2DPixelFormat_PVRTC4, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTexture2DPixelFormat_RGB565", mrb_cocos2d__get_kCCTexture2DPixelFormat_RGB565, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTexture2DPixelFormat_RGB5A1", mrb_cocos2d__get_kCCTexture2DPixelFormat_RGB5A1, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTexture2DPixelFormat_RGB888", mrb_cocos2d__get_kCCTexture2DPixelFormat_RGB888, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTexture2DPixelFormat_RGBA4444", mrb_cocos2d__get_kCCTexture2DPixelFormat_RGBA4444, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTexture2DPixelFormat_RGBA8888", mrb_cocos2d__get_kCCTexture2DPixelFormat_RGBA8888, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTouchesAllAtOnce", mrb_cocos2d__get_kCCTouchesAllAtOnce, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTouchesOneByOne", mrb_cocos2d__get_kCCTouchesOneByOne, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTransitionOrientationDownOver", mrb_cocos2d__get_kCCTransitionOrientationDownOver, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTransitionOrientationLeftOver", mrb_cocos2d__get_kCCTransitionOrientationLeftOver, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTransitionOrientationRightOver", mrb_cocos2d__get_kCCTransitionOrientationRightOver, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCTransitionOrientationUpOver", mrb_cocos2d__get_kCCTransitionOrientationUpOver, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCUniformCosTime", mrb_cocos2d__get_kCCUniformCosTime, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCUniformMVMatrix", mrb_cocos2d__get_kCCUniformMVMatrix, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCUniformMVPMatrix", mrb_cocos2d__get_kCCUniformMVPMatrix, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCUniformPMatrix", mrb_cocos2d__get_kCCUniformPMatrix, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCUniformRandom01", mrb_cocos2d__get_kCCUniformRandom01, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCUniformSampler", mrb_cocos2d__get_kCCUniformSampler, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCUniformSinTime", mrb_cocos2d__get_kCCUniformSinTime, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCUniformTime", mrb_cocos2d__get_kCCUniformTime, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCUniform_MAX", mrb_cocos2d__get_kCCUniform_MAX, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCVertexAttribFlag_Color", mrb_cocos2d__get_kCCVertexAttribFlag_Color, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCVertexAttribFlag_None", mrb_cocos2d__get_kCCVertexAttribFlag_None, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCVertexAttribFlag_PosColorTex", mrb_cocos2d__get_kCCVertexAttribFlag_PosColorTex, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCVertexAttribFlag_Position", mrb_cocos2d__get_kCCVertexAttribFlag_Position, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCVertexAttribFlag_TexCoords", mrb_cocos2d__get_kCCVertexAttribFlag_TexCoords, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCVertexAttrib_Color", mrb_cocos2d__get_kCCVertexAttrib_Color, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCVertexAttrib_MAX", mrb_cocos2d__get_kCCVertexAttrib_MAX, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCVertexAttrib_Position", mrb_cocos2d__get_kCCVertexAttrib_Position, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCVertexAttrib_TexCoords", mrb_cocos2d__get_kCCVertexAttrib_TexCoords, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCVerticalTextAlignmentBottom", mrb_cocos2d__get_kCCVerticalTextAlignmentBottom, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCVerticalTextAlignmentCenter", mrb_cocos2d__get_kCCVerticalTextAlignmentCenter, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kCCVerticalTextAlignmentTop", mrb_cocos2d__get_kCCVerticalTextAlignmentTop, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kLanguageArabic", mrb_cocos2d__get_kLanguageArabic, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kLanguageChinese", mrb_cocos2d__get_kLanguageChinese, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kLanguageEnglish", mrb_cocos2d__get_kLanguageEnglish, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kLanguageFrench", mrb_cocos2d__get_kLanguageFrench, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kLanguageGerman", mrb_cocos2d__get_kLanguageGerman, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kLanguageHungarian", mrb_cocos2d__get_kLanguageHungarian, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kLanguageItalian", mrb_cocos2d__get_kLanguageItalian, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kLanguageJapanese", mrb_cocos2d__get_kLanguageJapanese, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kLanguageKorean", mrb_cocos2d__get_kLanguageKorean, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kLanguagePortuguese", mrb_cocos2d__get_kLanguagePortuguese, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kLanguageRussian", mrb_cocos2d__get_kLanguageRussian, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kLanguageSpanish", mrb_cocos2d__get_kLanguageSpanish, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kMaxLogLen", mrb_cocos2d__get_kMaxLogLen, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kParticleDurationInfinity", mrb_cocos2d__get_kParticleDurationInfinity, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kParticleStartSizeEqualToEndSize", mrb_cocos2d__get_kParticleStartSizeEqualToEndSize, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kPositionTypeFree", mrb_cocos2d__get_kPositionTypeFree, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kPositionTypeGrouped", mrb_cocos2d__get_kPositionTypeGrouped, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kScriptTypeJavascript", mrb_cocos2d__get_kScriptTypeJavascript, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kScriptTypeLua", mrb_cocos2d__get_kScriptTypeLua, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kScriptTypeMRuby", mrb_cocos2d__get_kScriptTypeMRuby, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kScriptTypeNone", mrb_cocos2d__get_kScriptTypeNone, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTargetAndroid", mrb_cocos2d__get_kTargetAndroid, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTargetBlackBerry", mrb_cocos2d__get_kTargetBlackBerry, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTargetEmscripten", mrb_cocos2d__get_kTargetEmscripten, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTargetIpad", mrb_cocos2d__get_kTargetIpad, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTargetIphone", mrb_cocos2d__get_kTargetIphone, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTargetLinux", mrb_cocos2d__get_kTargetLinux, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTargetMacOS", mrb_cocos2d__get_kTargetMacOS, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTargetNaCl", mrb_cocos2d__get_kTargetNaCl, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTargetTizen", mrb_cocos2d__get_kTargetTizen, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTargetWindows", mrb_cocos2d__get_kTargetWindows, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTexture2DPixelFormat_A8", mrb_cocos2d__get_kTexture2DPixelFormat_A8, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTexture2DPixelFormat_Default", mrb_cocos2d__get_kTexture2DPixelFormat_Default, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTexture2DPixelFormat_RGB565", mrb_cocos2d__get_kTexture2DPixelFormat_RGB565, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTexture2DPixelFormat_RGB5A1", mrb_cocos2d__get_kTexture2DPixelFormat_RGB5A1, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTexture2DPixelFormat_RGB888", mrb_cocos2d__get_kTexture2DPixelFormat_RGB888, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTexture2DPixelFormat_RGBA4444", mrb_cocos2d__get_kTexture2DPixelFormat_RGBA4444, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTexture2DPixelFormat_RGBA8888", mrb_cocos2d__get_kTexture2DPixelFormat_RGBA8888, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTypeBackClicked", mrb_cocos2d__get_kTypeBackClicked, MRB_ARGS_NONE());
  mrb_define_module_function(mrb, cur_rc, "kTypeMenuClicked", mrb_cocos2d__get_kTypeMenuClicked, MRB_ARGS_NONE());

  /* base_rc = mrb->object_class; */
  rc = _define_class_cocos2d_sCCParticle(mrb);
  base_rc = mrb->object_class;
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d::SCCParticle");
  assert(cur_rc);
  mrb_define_method(mrb, cur_rc, "atlasIndex", mrb_cocos2d_sCCParticle__get_atlasIndex, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "atlasIndex=", mrb_cocos2d_sCCParticle__set_atlasIndex, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "color", mrb_cocos2d_sCCParticle__get_color, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "color=", mrb_cocos2d_sCCParticle__set_color, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "deltaColor", mrb_cocos2d_sCCParticle__get_deltaColor, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "deltaColor=", mrb_cocos2d_sCCParticle__set_deltaColor, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "deltaRotation", mrb_cocos2d_sCCParticle__get_deltaRotation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "deltaRotation=", mrb_cocos2d_sCCParticle__set_deltaRotation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "deltaSize", mrb_cocos2d_sCCParticle__get_deltaSize, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "deltaSize=", mrb_cocos2d_sCCParticle__set_deltaSize, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "pos", mrb_cocos2d_sCCParticle__get_pos, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "pos=", mrb_cocos2d_sCCParticle__set_pos, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "rotation", mrb_cocos2d_sCCParticle__get_rotation, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "rotation=", mrb_cocos2d_sCCParticle__set_rotation, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "size", mrb_cocos2d_sCCParticle__get_size, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "size=", mrb_cocos2d_sCCParticle__set_size, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "startPos", mrb_cocos2d_sCCParticle__get_startPos, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "startPos=", mrb_cocos2d_sCCParticle__set_startPos, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "timeToLive", mrb_cocos2d_sCCParticle__get_timeToLive, MRB_ARGS_NONE());
  mrb_define_method(mrb, cur_rc, "timeToLive=", mrb_cocos2d_sCCParticle__set_timeToLive, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, cur_rc, "initialize", mrb_cocos2d_sCCParticle_initialize, MRB_ARGS_NONE());
  cur_rc = cc_mrb_class_get(mrb, "Cocos2d");
  assert(cur_rc);
  DONE;
  mrb_define_module_function(mrb, cur_rc, "tex2", mrb_cocos2d_tex2, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "vertex2", mrb_cocos2d_vertex2, MRB_ARGS_REQ(2));
  mrb_define_module_function(mrb, cur_rc, "vertex3", mrb_cocos2d_vertex3, MRB_ARGS_REQ(3));
  DONE;
}
